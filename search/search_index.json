{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to dmhj's MkDocs","text":"<ul> <li>\u7ad9\u5185\u6309\u4e0b<code>F</code>\u53ef\u4ee5\u6253\u5f00\u641c\u7d22\u5bf9\u8bdd\u6846\uff0c<code>ESC</code>\u5173\u95ed\u641c\u7d22\u5bf9\u8bdd\u6846</li> <li>\u6309\u4e0b<code>P</code>\u6216<code>,</code>\u8f6c\u5230\u4e0a\u4e00\u9875\uff0c<code>N</code>\u6216<code>.</code>\u8fdb\u5165\u4e0b\u4e00\u9875</li> </ul> <p>Contact</p> <ul> <li> my github</li> </ul> <p>TODO</p> <p>2023.2.14</p> <ul> <li>tvm-type system</li> <li>tvm-relay lowering</li> <li>tvm-relax</li> <li>rust <code>Vec</code>\u548c<code>String</code>\u6e90\u7801\u5206\u6790\uff0c\u6d89\u53ca<code>Char</code>\u7684\u7406\u89e3</li> <li>rust-macro \u7684\u66f4\u65b0</li> <li>rust-smart pointer \u7684\u66f4\u65b0</li> <li>rust-error handling</li> </ul>"},{"location":"about.html","title":"About","text":""},{"location":"about.html#about","title":"About","text":"<ul> <li> <p>\u5173\u4e8e\u591a\u884c\u516c\u5f0f\u5757\u65e0\u6cd5\u6b63\u5e38\u6e32\u67d3\u7684\u95ee\u9898:</p> <p>\u5728\u516c\u5f0f\u73af\u5883\u4e2d\u4f7f\u7528<code>displaylines{}</code>\u6362\u884c\u4f7f\u7528<code>\\\\\\</code>\u800c\u4e0d\u662f<code>\\\\</code> \u5982\u6b64\u66ff\u6362\u540e\u53ef\u4ee5\u6b63\u5e38\u6e32\u67d3</p> </li> </ul>"},{"location":"plan.html","title":"\u5237\u9898\u8bb0\u5f55","text":""},{"location":"plan.html#_2","title":"\u52a8\u6001\u89c4\u5212","text":""},{"location":"plan.html#1dp","title":"1\u7ef4dp","text":""},{"location":"plan.html#on","title":"\u590d\u6742\u5ea6\\(O(n)\\)","text":"<p>\u8fd9\u7c7b\u9898\u7684\u5f53\u524d\u72b6\u6001\u7531\u4e4b\u524d\u7684\u5e38\u6570\u4e2a\u72b6\u6001\u8f6c\u79fb\u800c\u6765\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u5728\\(O(n)\\)\uff0c\u53ea\u67091\u5c42for\u5faa\u73af</p> <p>Example</p> <ul> <li>\u6700\u5927\u5b57\u6bb5\u548cMIS: \u7b2ci\u4e2a\u72b6\u6001\u7531\u7b2ci-1\u4e2a\u72b6\u6001\u8f6c\u79fb\u6765</li> <li>\u56fe\u50cf\u538b\u7f29: \u7b2ci\u4e2a\u72b6\u6001\u81f3\u591a\u7531\u524d256\u4e2a\u72b6\u6001\u8f6c\u79fb\u800c\u6765</li> </ul> <p>\u4ee553. \u6700\u5927\u5b50\u6570\u7ec4\u548c - \u529b\u6263 MIS\u4e3a\u4f8b\uff0c\u5b9e\u9645\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>int maxSubArray(vector&lt;int&gt;&amp; nums) {\n// dp[i] = if(dp[i-1]&lt;0){ nums[i] } else{ dp[i-1]+nums[i] }\nint n = nums.size();\nint pre_sum{-1}, res{INT32_MIN};\nfor(int i=0;i&lt;n;i++){\npre_sum = pre_sum &lt; 0 ? nums[i] : pre_sum + nums[i];\nres = max(res, pre_sum);\n}\nreturn res;\n}\n</code></pre> <p>\u5df2\u505a\u8fc7\u7684\u76f8\u5173\u9898\u76ee\uff1a</p> <ul> <li> <p>509. \u6590\u6ce2\u90a3\u5951\u6570 - \u529b\u6263 \\(dp[i] = dp[i-1]+dp[i-2]\\)\uff1b</p> </li> <li> <p>70. \u722c\u697c\u68af - \u529b\u6263 \u4e0e\u6590\u6ce2\u90a3\u5951\u76f8\u540c\uff0c\\(dp[i] = dp[i-1]+dp[i-2]\\)\uff1b</p> </li> <li> <p>746. \u4f7f\u7528\u6700\u5c0f\u82b1\u8d39\u722c\u697c\u68af - \u529b\u6263 \\(dp[i] = \\min(dp[i-1], dp[i-2])\\)\uff1b</p> </li> <li> <p>118. \u6768\u8f89\u4e09\u89d2 - \u529b\u6263 \\(dp[i][j] = dp[i][j-1]+dp[i][j]\\)\uff0c\u6ce8\u610f\u8fb9\u754c\u6761\u4ef6</p> </li> <li> <p>119. \u6768\u8f89\u4e09\u89d2 II - \u529b\u6263 \u540c\u4e0a</p> </li> <li> <p>931. \u4e0b\u964d\u8def\u5f84\u6700\u5c0f\u548c - \u529b\u6263 \\(dp[i][j] = val[i][j]+\\min (dp[i-1][j-1],dp[i-1][j],dp[i-1][j+1])\\)</p> </li> <li> <p>120. \u4e09\u89d2\u5f62\u6700\u5c0f\u8def\u5f84\u548c - \u529b\u6263 \\(dp[i][j] = val[i][j]+\\min (dp[i-1][j-1],dp[i-1][j])\\)</p> </li> <li> <p>62. \u4e0d\u540c\u8def\u5f84 - \u529b\u6263 \\(dp[i][j] = dp[i-1][j]+dp[i][j-1])\\)</p> </li> <li> <p>63. \u4e0d\u540c\u8def\u5f84 II - \u529b\u6263 \u540c\u4e0a</p> </li> <li> <p>64. \u6700\u5c0f\u8def\u5f84\u548c - \u529b\u6263 \u540c\u4e0a\uff0c\\(dp[i][j] = \\min(dp[i-1][j], dp[i][j-1])+grid[i][j])\\)</p> </li> <li> <p>264. \u4e11\u6570 II - \u529b\u6263 \\(dp[i] = \\min({dp[p2]*2, dp[p3]*3, dp[p5]*5})\\)</p> </li> <li> <p>313. \u8d85\u7ea7\u4e11\u6570 - \u529b\u6263 //!TODO</p> </li> <li> <p>53. \u6700\u5927\u5b50\u6570\u7ec4\u548c - \u529b\u6263 MIS\uff0c\\(dp[i] = \\texttt{if}(dp[i-1]&lt;0)\\quad\\{nums[i]\\}\\quad\\texttt{else}\\quad\\{dp[i-1]+nums[i] \\}\\)</p> </li> <li> <p>152. \u4e58\u79ef\u6700\u5927\u5b50\u6570\u7ec4- \u529b\u6263 \u7c7b\u4f3cMIS\uff0c\u4f46\u662f\u9700\u8981\u6ce8\u610f\u8f6c\u79fb\u65b9\u7a0b\u7684\u4e0d\u540c:</p> <pre><code>dp_max[i] = max(dp_max[i-1]*nums[i], dp_min[i-1]*nums[i], nums[i])\ndp_min[i] = min(dp_max[i-1]*nums[i], dp_min[i-1]*nums[i], nums[i])\n</code></pre> </li> <li> <p>1567. \u4e58\u79ef\u4e3a\u6b63\u6570\u7684\u6700\u957f\u5b50\u6570\u7ec4\u957f\u5ea6- \u529b\u6263 \u7c7b\u4f3cMIS\uff0c\u4f46\u662f\u9700\u8981\u8fd9\u9898\u6c42\u957f\u5ea6\uff0c\u6ce8\u610fdp\u6570\u7ec4\u542b\u4e49\u7684\u6539\u53d8\u4ee5\u53ca\u8f6c\u79fb\u65b9\u7a0b\u76f8\u5e94\u8c03\u6574</p> <pre><code>dp_pos[i] = if(nums[i]==0)  { 0 }\n            elif(nums[i]&lt;0) { dp_neg[i-1]!=0 ? dp_neg[i-1]+1 : 0 }\n            elif(nums[i]&gt;0) { dp_pos[i-1]+1 }\ndp_neg[i] = if(nums[i]==0)  { 0 }\n            elif(nums[i]&lt;0) { dp_neg[i-1]+1 }\n            elif(nums[i]&gt;0) { dp_neg[i-1]!=0 ? dp_neg[i-1]+1 : 0}\n</code></pre> </li> <li> <p>918. \u73af\u5f62\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c - \u529b\u6263  MIS\u7684\u53d8\u79cd   \u8003\u8651\u4e24\u79cd\u60c5\u51b5\uff0c\u7b2c\u4e00\u79cd\u60c5\u51b5\u662f\u6700\u5927\u8fde\u7eed\u5b50\u6570\u7ec4\u5728\u6570\u7ec4\u4e2d\u95f4\uff0c\u8fd9\u79cd\u7c7b\u4f3c\u4e8e53\u6c42\u6700\u5927\u8fde\u7eed\u5b50\u6570\u7ec4\uff1b   \u7b2c\u4e8c\u79cd\u60c5\u51b5\u662f\u6700\u5927\u8fde\u7eed\u5b50\u6570\u7ec4\u5728\u6570\u7ec4\u4e24\u8fb9\uff0c\u8fd9\u5c31\u9700\u8981\u6c42\u51fa\u6700\u5c0f\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u7136\u540e\u7528\u6570\u7ec4\u548c\u51cf\u53bb\u6700\u5c0f\u8fde\u7eed\u5b50\u6570\u7ec4\uff1b</p> </li> <li> <p>198. \u6253\u5bb6\u52ab\u820d - \u529b\u6263 \\(dp[i] = max(dp[i-1], dp[i-2]+val[i-2])\\)</p> </li> <li> <p>213. \u6253\u5bb6\u52ab\u820d II - \u529b\u6263 \u5bf9\u4e8e\u73af\u5f62\u6570\u7ec4\u5206\u60c5\u51b5\u8ba8\u8bba\uff08\u5077\u7b2c1\u4e2a or \u4e0d\u5077\u7b2c1\u4e2a\uff09</p> </li> <li> <p>740. \u5220\u9664\u5e76\u83b7\u5f97\u70b9\u6570 - \u529b\u6263 \u6253\u5bb6\u52ab\u820d\u7684\u53d8\u4f53\uff0c\u901a\u8fc7\u4e00\u4e9b\u6280\u5de7\u8f6c\u5316\u4e3a\u6253\u5bb6\u52ab\u820d</p> </li> <li> <p>121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a - \u529b\u6263 \\(dp[i] = \\max(dp[i-1],val[i] - pre\\_min)\\)</p> </li> <li> <p>122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II - \u529b\u6263 \u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba(\u53ef\u4ee5\u89c6\u4e3a2\u7ef4dp)</p> <pre><code>dp_non[i]  = max(dp_non[i-1], dp_hold[i-1]+v_i)\ndp_hold[i] = max(dp_hold[i-1], dp_non[i-1]-v_i)\n\"\u9012\u63a8\u8fb9\u754c\u6761\u4ef6:\" dp_non[0] = 0, dp_hold[0] = -v_0\n</code></pre> </li> <li> <p>309. \u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f - \u529b\u6263 </p> </li> <li> <p>714. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u542b\u624b\u7eed\u8d39 - \u529b\u6263 \u4e0e122\u76f8\u540c\uff0c\u591a\u4e86\u624b\u7eed\u8d39\uff0c\u5bf9\u9012\u63a8\u5173\u7cfb\u7a0d\u52a0\u4fee\u6539</p> </li> <li> <p>413. \u7b49\u5dee\u6570\u5217\u5212\u5206 - \u529b\u6263 </p> <pre><code>dp[i] = if(nums[i]-nums[i-1] == nums[i-1]-nums[i-2]){ dp[i-1]+1 } else{ 0 }\n</code></pre> </li> <li> <p>91. \u89e3\u7801\u65b9\u6cd5 - \u529b\u6263</p> <pre><code>dp[i] = dp[i-1] + dp[i-2] if s[i..i+1] and s[i-1..i+1]\n</code></pre> </li> <li> <p>42. \u63a5\u96e8\u6c34 - \u529b\u6263 </p> <pre><code>cur[i] = min(left_max[i], right_max[i])-height[i]\nleft_max[i] = max(height[i], left_max[i-1])\nright_max[i] = max(height[i], right_max[i+1])\n</code></pre> </li> </ul>"},{"location":"plan.html#on2","title":"\u590d\u6742\u5ea6\\(O(n^2)\\)","text":"<p>\u8fd9\u7c7b\u9898\u76ee\u7b2ci\u4e2a\u72b6\u6001\u7531\u524d\\(\\Theta(i-1)\\)\u4e2a\u72b6\u6001\u8f6c\u79fb\u6765\uff0c\u67092\u5c42for\u5faa\u73af</p> <p>Example</p> <ul> <li>\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217(LIS): \u8f93\u5165\u7684\u6570\u7ec4\u8bb0\u4e3a\\(L\\)\uff0c\u524d\\(k\\)\u4f4d\u5b50\u4e32\u4e2d\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u957f\u5ea6\u8bb0\u4f5c\\(f(k)\\) \uff0c\u5219\u5728\u5df2\u77e5\u524d\\(j\\)\u4f4d\u5b50\u4e32LIS\u957f\u5ea6\\(f(j)\\)\u60c5\u51b5\u4e0b\uff0c\u5176\u4e2d\\(j\\in [1,k)\\)\uff0c\u5c1d\u8bd5\u5c06\u7b2c\\(k\\)\u4f4d\u52a0\u5230\u7b2c\\(j\\)\u4f4d\u7ed3\u5c3e\u7684\u6700\u957f\u5b50\u4e32\u540e\u9762\uff0c\u8ba1\u7b97\\(f(k)\\)\uff1b\u5373\\(f(k) = \\max\\{f(j)\\}+1\\)\uff0c\u5176\u4e2d\\(j\\in[1,k)\\)\u4e14\u6709\\(L[k]&gt;L[j]\\)\uff1b\u8003\u8651\u9012\u63a8\u8fb9\u754c\uff1a\\(f(1) = 1\\)\uff0c\u4ece\\(k = 2\\)\u5f00\u59cb\u9012\u63a8\u5373\u53ef</li> </ul> <p>\u5df2\u505a\u8fc7\u7684\u76f8\u5173\u9898\u76ee\uff1a</p> <ul> <li> <p>300. \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217 - \u529b\u6263 LIS</p> <pre><code>dp[i] = max(dp[j])+1 for j in [0..i] &amp;&amp; nums[j]&lt;nums[i]\n</code></pre> </li> <li> <p>139. \u5355\u8bcd\u62c6\u5206 - \u529b\u6263 </p> <pre><code>dp[i] = dp[j] &amp;&amp; s[j..i]  for j in [0..i]\n</code></pre> </li> <li> <p>96. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 - \u529b\u6263</p> <pre><code>dp[i] = sum(dp[j]*dp[i-j-1]) for j in [0..i]\n</code></pre> </li> </ul>"},{"location":"plan.html#2dp","title":"2\u7ef4dp","text":"<p>Example</p> <ul> <li>\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217LCS</li> <li>\u6700\u5c0f\u7f16\u8f91\u8ddd\u79bbEdit distance</li> <li>\u6295\u8d44\u56de\u62a5ROI</li> </ul> \\[ \\begin{align*} F_k(y) &amp;= \\max\\{F_{k-1}(y),F_{k-1}(y-w_k)+f(w_k)~~|~~w_k\\in[1,y]\\}\\\\ &amp;= \\max\\{F_{k-1}(y-w_k)+f(w_k) ~~|~~w_k\\in[0,y]\\} \\end{align*} \\] <p>\u5df2\u505a\u8fc7\u7684\u76f8\u5173\u9898\u76ee\uff1a</p> <ul> <li> <p>1314. \u77e9\u9635\u533a\u57df\u548c - \u529b\u6263 2\u7ef4\u524d\u7f00\u548c\uff1b\u524d\u7f00\u548c\u77e9\u9635\u5b9e\u73b0\u65f6\u589e\u52a0\u989d\u59161\u884c1\u5217\u51680\uff0c\u5b9a\u4e49<code>get</code>\u65b9\u6cd5\uff0c\u7b80\u5316\u4ee3\u7801</p> <pre><code>\"\u524d\u7f00\u548c\u6570\u7ec4\uff1a\" dp[i][j]=dp[i][j-1]+dp[i-1][j]-dp[i-1][j-1]+val[i][j]\n</code></pre> </li> <li> <p>304. \u4e8c\u7ef4\u533a\u57df\u548c\u68c0\u7d22 - \u77e9\u9635\u4e0d\u53ef\u53d8 - \u529b\u6263 \u540c\u4e0a\uff0c2\u7ef4\u524d\u7f00\u548c</p> </li> <li> <p>1292. \u5143\u7d20\u548c\u5c0f\u4e8e\u7b49\u4e8e\u9608\u503c\u7684\u6b63\u65b9\u5f62\u7684\u6700\u5927\u8fb9\u957f - \u529b\u6263 \u540c\u4e0a\uff0c2\u7ef4\u524d\u7f00\u548c</p> </li> <li> <p>1277. \u7edf\u8ba1\u5168\u4e3a 1 \u7684\u6b63\u65b9\u5f62\u5b50\u77e9\u9635 - \u529b\u6263 \u2b50<code>dp[i][j]</code>\u8868\u793a\u4ee5<code>(i,j)</code>\u4e3a\u53f3\u4e0b\u89d2\u6700\u5927\u6b63\u65b9\u5f62\u8fb9\u957f</p> <pre><code>dp[i][j] = min(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])+1 -- if matrix[i][j]==1\n</code></pre> </li> <li> <p>221. \u6700\u5927\u6b63\u65b9\u5f62 - \u529b\u6263 \u540c\u4e0a</p> <pre><code>dp[i][j] = min(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])+1 -- if matrix[i][j]==1\n</code></pre> </li> <li> <p>5. \u6700\u957f\u56de\u6587\u5b50\u4e32 - \u529b\u6263 \u2b50\u56de\u6587\u4e32\u53bb\u6389\u4e24\u7aef\u540e\u4ecd\u662f\u56de\u6587\u4e32\uff1b\u590d\u6742\u5ea6\\(O(n^2)\\)</p> <pre><code>dp[i][j] = dp[i+1][j-1] &amp;&amp; s[i] == s[j-1] -- dp[i][j]\u8868\u793aS[i..j]\u662f\u5426\u662f\u56de\u6587\u4e32    \n</code></pre> </li> <li> <p>516. \u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217 - \u529b\u6263 \u540c\u4e0a</p> <pre><code>dp[i][j] = dp[i+1][j-1] + 2             -- if dp[i]==dp[j-1]\ndp[i][j] = max(dp[i+1][j], dp[i][j-1])  -- if dp[i]!=dp[j-1]  \n</code></pre> </li> <li> <p>1143. \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 - \u529b\u6263 LCS <code>dp[i][j]</code>\u8868\u793a<code>s1</code>\u7684\u524d<code>i</code>\u4f4d\u4e0e<code>s2</code>\u7684\u524d<code>j</code>\u4f4d\u7684LCS\u957f\u5ea6</p> <pre><code>dp[i][j] = dp[i-1][j-1] + 1             -- if s1[i]==s2[j]\ndp[i][j] = max(dp[i-1][j], dp[i][j-1])   -- if s1[i]!=s2[j]\n</code></pre> </li> <li> <p>72. \u7f16\u8f91\u8ddd\u79bb - \u529b\u6263 <code>dp[i][j]</code>\u8868\u793a<code>word1</code>\u524d<code>i</code>\u4f4d\u5b50\u4e32\u4e0e<code>word2</code>\u524d<code>j</code>\u4f4d\u5b50\u4e32\u7684\u7f16\u8f91\u8ddd\u79bb</p> <pre><code>dp[i][j] = dp[i-1][j-1]                                 -- if word1[i]==word2[j]\ndp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])+1  -- if word1[i]!=word2[j]\n</code></pre> </li> <li> <p>376. \u6446\u52a8\u5e8f\u5217 - \u529b\u6263 </p> </li> </ul>"},{"location":"plan.html#_3","title":"\u80cc\u5305","text":"<ol> <li> <p>0-1\u80cc\u5305\uff1a</p> <p>N\u79cd\u7269\u54c1\uff0c\u7269\u54c1\u91cd\u91cf\u8bb0\u4e3aw\uff0c\u4ef7\u503c\u8bb0\u4e3av\uff1b\u9650\u91cdW\uff1b\u6bcf\u4e2a\u7269\u54c1\u90091\u6b21\uff1b\u6c42\u6700\u5927\u4ef7\u503c\u3002\u8bb0\\(F_k(y)\\)\u4e3a\u53ea\u88c5\u524dk\u7269\u54c1\u9650\u91cdy\u65f6\u6700\u5927\u4ef7\u503c\uff0c\u9012\u63a8\u5173\u7cfb\u5982\u4e0b    $$    F_k(y) = \\max{F_{k-1}(y), F_{k-1}(y-w_k)+v_k}\\qquad y\\geq w_k    $$</p> </li> <li> <p>\u5b8c\u5168\u80cc\u5305\uff1a</p> <p>N\u79cd\u7269\u54c1\uff0c\u6bcf\u4e2a\u7269\u54c1\u91cd\u91cf\u8bb0\u4e3aw\uff0c\u4ef7\u503c\u8bb0\u4e3av\uff1b\u9650\u91cdW\uff1b\u6bcf\u4e2a\u7269\u54c1\u4e0d\u9650\u6b21\u9009\uff1b\u6c42\u6700\u5927\u4ef7\u503c    $$    F_k(y) = \\max {F_{k-1}(y), F_k(y-w_k)+v_k}    $$    \u5176\u4e2d\\(F_k(y)\\)\u8868\u793a\u53ea\u88c5\u524dk\u79cd\u7269\u54c1\uff0c\u9650\u91cd\u4e3ay\u65f6\u7684\u6700\u5927\u4ef7\u503c\u3002</p> </li> </ol> <ul> <li>416. \u5206\u5272\u7b49\u548c\u5b50\u96c6 0-1\u80cc\u5305\u6070\u597d\u88c5\u6ee1</li> <li>474. \u4e00\u548c\u96f6 0-1\u80cc\u5305\u6700\u5927\u4ef7\u503c3\u7ef4</li> <li>494. \u76ee\u6807\u548c  </li> <li>879. \u76c8\u5229\u8ba1\u5212  </li> <li>1049. \u6700\u540e\u4e00\u5757\u77f3\u5934\u7684\u91cd\u91cf II \u8f6c\u5316\u4e3a0-1\u80cc\u5305\u5c3d\u53ef\u80fd\u591a\u88c5\u7684\u95ee\u9898</li> <li>1230. \u629b\u63b7\u786c\u5e01 </li> <li>322. \u96f6\u94b1\u5151\u6362 \u5b8c\u5168\u80cc\u5305\u6070\u597d\u88c5\u6ee1\uff1b\\(dp[i][j]=\\min(dp[i-1][j], dp[i][j-vals[i]]+1)\\)\u521d\u59cb<code>dp[0]=0 dp[i]=MAX which i != 0</code> </li> <li>279. \u5b8c\u5168\u5e73\u65b9\u6570 \u5b8c\u5168\u80cc\u5305\u6070\u597d\u88c5\u6ee1\uff1b\\(dp[i][j] = \\min(dp[i-1][j], dp[i][j-vals[i]]+1)\\)\u521d\u59cb<code>dp[i]=i</code> </li> <li>518. \u96f6\u94b1\u5151\u6362 II  \u5b8c\u5168\u80cc\u5305\u8f93\u51fa\u65b9\u6848\u603b\u6570\uff1b\\(dp[i][j]=dp[i-1][j]+dp[i][j-vals[i]]\\)\u521d\u59cb<code>dp[0]=1 dp[i]=0 which i != 0</code> </li> <li>1449. \u6570\u4f4d\u6210\u672c\u548c\u4e3a\u76ee\u6807\u503c\u7684\u6700\u5927\u6570\u5b57 </li> </ul>"},{"location":"plan.html#_4","title":"\u56de\u6eaf","text":"<p>\u56de\u6eaf\u7b97\u6cd5\u662f\u5728\u4e00\u68f5\u6811\u4e0a\u7684 \u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08\u56e0\u4e3a\u8981\u627e\u6240\u6709\u7684\u89e3\uff0c\u6240\u4ee5\u9700\u8981\u904d\u5386\uff09\uff1b\u4ee539. \u7ec4\u5408\u603b\u548c - \u529b\u6263\uff08LeetCode\uff09 \u4e3a\u4f8b\uff0c\u5176\u4ee3\u7801\u6a21\u677f\u5982\u4e0b\uff1a</p> <pre><code>vector&lt;vector&lt;int&gt;&gt; res_{};\nvector&lt;int&gt; temp_{};\nvector&lt;vector&lt;int&gt;&gt; combinationSum(vector&lt;int&gt;&amp; candidates, int target) {\ndfs(candidates, target, 0);\nreturn res_;\n}\n\nvoid dfs(vector&lt;int&gt;&amp; candidates, int target, int cur_idx){\nint n = candidates.size();\nif(0 == target){\nres_.emplace_back(temp_);\nreturn;\n}\nif(target &lt; 0) return; // \u526a\u679d\u4f18\u5316\nfor(int i = cur_idx; i &lt; n;i++) {\ntemp_.emplace_back(candidates[i]);\ndfs(candidates, target-candidates[i], i);\ntemp_.pop_back();\n}\n}\n</code></pre>"},{"location":"plan.html#_5","title":"\u6392\u5217\u3001\u7ec4\u5408\u3001\u5b50\u96c6\u95ee\u9898","text":"<ul> <li>77. \u7ec4\u5408 - \u529b\u6263 \u8f93\u51fa\\(C_n^k\\)\u79cd\u65b9\u6848</li> <li>39. \u7ec4\u5408\u603b\u548c - \u529b\u6263 \u5b8c\u5168\u80cc\u5305\u8f93\u51fa\u5177\u4f53\u65b9\u6848\uff0c\u6570\u636e\u91cf\u4e0d\u5927\u53ef\u4ee5\u7528<code>dfs</code>+\u526a\u679d</li> <li>40. \u7ec4\u5408\u603b\u548c II - \u529b\u6263 0-1\u80cc\u5305\u8f93\u51fa\u5177\u4f53\u65b9\u6848\uff0c\u6570\u636e\u91cf\u4e0d\u5927\u53ef\u4ee5\u7528<code>dfs</code>+\u526a\u679d</li> <li>78. \u5b50\u96c6 - \u529b\u6263 \u8f93\u51fa\\(C_n^1+C_n^2+\\cdots\\)\u79cd\u65b9\u6848</li> <li>90. \u5b50\u96c6 II - \u529b\u6263 \u2b50\u53bb\u91cd</li> <li>17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408 - \u529b\u6263 \u6b63\u5e38\u56de\u6eaf(\u5b57\u7b26\u4e32\u53ef\u4ee5\u4f20\u503c\u4ece\u800c\u4e0d\u5fc5\u56de\u6eaf)</li> <li>46. \u5168\u6392\u5217 - \u529b\u6263 \u4f7f\u7528<code>used</code>\u6570\u7ec4</li> <li>47. \u5168\u6392\u5217 II - \u529b\u6263 \u2b50\u53bb\u91cd</li> <li>60. \u6392\u5217\u5e8f\u5217 - \u529b\u6263 \u2b50\u6c42\u5168\u6392\u5217\u7b2cK\u9879\uff0c\u8003\u8651\u5982\u4f55\u526a\u679d</li> </ul>"},{"location":"plan.html#_6","title":"\u5b57\u7b26\u4e32\u5206\u5272\u95ee\u9898","text":"<ul> <li>131. \u5206\u5272\u56de\u6587\u4e32 - \u529b\u6263 \u9694\u677f\u6cd5\u904d\u5386\u56de\u6eaf\u641c\u7d22</li> <li>93. \u590d\u539f IP \u5730\u5740 - \u529b\u6263 \u9694\u677f\u6cd5\u904d\u5386\u56de\u6eaf\u641c\u7d22</li> </ul>"},{"location":"plan.html#_7","title":"\u68cb\u76d8\u95ee\u9898(\u6e38\u620f\u95ee\u9898)","text":"<ul> <li>37. \u89e3\u6570\u72ec - \u529b\u6263 <code>dfs</code>\u641c\u7d22\u7ed3\u679c \u4f7f\u7528\u5168\u5c40\u53d8\u91cf\u8bb0\u5f55\u662f\u5426\u641c\u5230\uff0c\u4ece\u800c\u5728\u641c\u5230\u540e\u53ca\u65f6\u9000\u51fa\u641c\u7d22</li> <li>51. N \u7687\u540e - \u529b\u6263 </li> <li>52. N\u7687\u540e II - \u529b\u6263 \u540c\u4e0a</li> <li>79. \u5355\u8bcd\u641c\u7d22 - \u529b\u6263 <code>dfs</code>\u641c\u7d22\u7ed3\u679c \u4f7f\u7528\u5168\u5c40\u53d8\u91cf\u8bb0\u5f55\u662f\u5426\u641c\u5230\uff0c\u4ece\u800c\u5728\u641c\u5230\u540e\u53ca\u65f6\u9000\u51fa\u641c\u7d22</li> </ul>"},{"location":"plan.html#_8","title":"\u4e8c\u5206","text":"<p>\u4e8c\u5206\u641c\u7d22\u6a21\u677f\u4ee3\u7801\uff1a</p> <pre><code>// \u8fd4\u56de`vec`\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e target \u5143\u7d20\u7684\u4e0b\u6807\n// \u8fd4\u56de\u503c\u8303\u56f4\u4e3a[begin(vec), end(vec)], \u8fd9\u91cc\u6ce8\u610f\u76f4\u63a5\u8bbf\u95ee\u7ed3\u679c\u53ef\u80fd\u8d8a\u754c\nint my_lower_bound(vector&lt;int&gt; &amp;vec, int target) {\nint l = 0, r = vec.size(), mid{}; // [l,r)\nwhile (l &lt; r) {\nmid = l + (r - l) / 2;\nif (target &gt; vec[mid]) l = mid + 1; // \u82e5target &gt; nums[mid] \u5e94\u5728\u53f3\u533a\u95f4\u5bfb\u627e\nelse r = mid; // \u5426\u5219(\u5c0f\u4e8e\u7b49\u4e8e)\u5728\u5de6\u533a\u95f4\u5bfb\u627e\n}\nreturn l; // \u6700\u540el\u548cr\u5fc5\u5b9a\u91cd\u5408\uff0c\u8fd4\u56del\u6216r\u5747\u53ef\n}\n</code></pre> <ul> <li>704. \u4e8c\u5206\u67e5\u627e - \u529b\u6263 </li> <li>35. \u641c\u7d22\u63d2\u5165\u4f4d\u7f6e - \u529b\u6263 \u8fd4\u56de\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e target \u5143\u7d20\u7684\u4e0b\u6807 \u5373<code>lower_bound</code>\u529f\u80fd</li> <li>34. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e - \u529b\u6263 <code>lower_bound</code>+<code>upper_bound</code></li> <li>852. \u5c71\u8109\u6570\u7ec4\u7684\u5cf0\u9876\u7d22\u5f15 - \u529b\u6263  </li> <li>162. \u5bfb\u627e\u5cf0\u503c - \u529b\u6263 </li> <li>33. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 - \u529b\u6263 \u2b50\u5c06\u6570\u7ec4\u4ece\u4e2d\u95f4\u5206\u5f00\u6210\u5de6\u53f3\u4e24\u90e8\u5206\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u6709\u4e00\u90e8\u5206\u7684\u6570\u7ec4\u662f\u6709\u5e8f\u7684\uff1b\u4e14\uff1a\u4ee5\u6700\u4f4e\u70b9\u4e3a\u5206\u5272\u70b9\uff0c\u53f3\u534a\u90e8\u5206\u6700\u5927\u503c\u4e00\u5b9a\u5c0f\u4e8e\u5de6\u534a\u90e8\u5206\u6700\u5c0f\u503c</li> <li>81. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 II - \u529b\u6263 \u5143\u7d20\u6709\u91cd\u590d</li> <li>153. \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c - \u529b\u6263 \u4f7f\u7528\u53f3\u8fb9\u754c\u4f5c\u4e3a\u57fa\u51c6\u5143\u7d20</li> <li>154. \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c II - \u529b\u6263 \u6709\u91cd\u590d</li> <li>74. \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 - \u529b\u6263 \u5148\u5bf9\u884c\u4e8c\u5206\uff08\u6ce8\u610f\u8fd9\u91cc\u6211\u4eec\u8981\u627e\u5230\u884c\u9996\u5143\u7d20\u5c0f\u4e8etarget\u7684\u6700\u540e\u4e00\u884c\uff0c\u5373<code>upper_bound-1</code>\uff09\uff0c\u518d\u5bf9\u5217\u4e8c\u5206</li> <li></li> </ul>"},{"location":"courses/PL.html","title":"PL","text":""},{"location":"courses/PL.html#2-lambda","title":"2. Lambda \u6f14\u7b97","text":"<p>two core ideas in programming languages: functions, and variables.</p> <p>The lambda calculus is a programming language with three features: functions, function application, and variables.</p> <p>In the lambda calculus, all functions have one input and one output.</p>"},{"location":"courses/algorithm.html","title":"\u7b97\u6cd5\u8bbe\u8ba1\u4e0e\u5206\u6790","text":""},{"location":"courses/algorithm.html#_1","title":"\u7b97\u6cd5\u7684\u6570\u5b66\u57fa\u7840","text":""},{"location":"courses/algorithm.html#_2","title":"\u6e10\u8fd1\u7684\u754c","text":"<p>\u5728\u7b97\u6cd5\u5206\u6790\u4e2d\uff0c\u6211\u4eec\u5173\u5fc3\u5f53\u8f93\u5165\u89c4\u6a21\u65e0\u9650\u589e\u52a0\u65f6\uff0c\u5728\u6781\u9650\u4e2d\uff0c\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\u5982\u4f55\u968f\u7740\u8f93\u5165\u89c4\u6a21\u7684\u53d8\u5927\u800c\u589e\u52a0\uff0c\u5373\u7b97\u6cd5\u7684\u6e10\u8fd1\u6548\u7387\u3002</p> <p>5\u79cd\u6e10\u8fdb\u7684\u754c\u4ee5\u53ca\u6e10\u8fdb\u8bb0\u53f7\uff1a</p> <p>\u5bf9\u4e8e\u51fd\u6570\\(f(n)\\)</p> <ol> <li>\\(O\\)\u8bb0\u53f7\u6807\u8bb0\\(f(n)\\)\u7684\u6e10\u8fd1\u7684\u4e0a\u754c(upper bound)\uff1a\u5b58\u5728\u6b63\u6570\\(c\\)\u548c\\(n_0\\)\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u4e00\u5207\\(n\\geq n_0\\)\uff0c\u6709\\(0\\leq f(n)\\leq cg(n)\\)\u6210\u7acb\uff0c\u5219\u79f0\\(f(n)\\)\u6e10\u8fd1\u4e0a\u754c\u4e3a\\(g(n)\\)\uff0c\u8bb0\u4f5c\\(f(n) = O(g(n))\\)</li> <li>\\(o\\)\u8bb0\u53f7\u6807\u8bb0\\(f(n)\\)\u7684\u975e\u7d27\u4e0a\u754c(non-tight upper bound)\uff1a\u5bf9\u4e8e\u4efb\u610f\u6b63\u6570\\(c\\)\u548c\\(n_0\\)\uff0c\u5bf9\u4e8e\u4e00\u5207\\(n\\geq n_0\\)\uff0c\u6709\\(0\\leq f(n)&lt; cg(n)\\)\u6210\u7acb\uff0c\u8bb0\u4f5c\\(f(n) = o(g(n))\\)</li> <li>\\(\\Omega\\)\u8bb0\u53f7\u6807\u8bb0\\(f(n)\\)\u7684\u6e10\u8fd1\u7684\u4e0b\u754c(lower bound)\uff1a\u5b58\u5728\u6b63\u6570\\(c\\)\u548c\\(n_0\\)\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u4e00\u5207\\(n\\geq n_0\\)\uff0c\u6709\\(0\\leq cg(n)\\leq f(n)\\)\u6210\u7acb\uff0c\u5219\u79f0\\(f(n)\\)\u6e10\u8fd1\u4e0b\u754c\u4e3a\\(g(n)\\)\uff0c\u8bb0\u4f5c\\(f(n) = \\Omega(g(n))\\)</li> <li>\\(\\omega\\)\u8bb0\u53f7\u6807\u8bb0\\(f(n)\\)\u7684\u975e\u7d27\u4e0b\u754c(non-tight lower bound)\uff1a\u5bf9\u4e8e\u4efb\u610f\u6b63\u6570\\(c\\)\u548c\\(n_0\\)\uff0c\u5bf9\u4e8e\u4e00\u5207\\(n\\geq n_0\\)\uff0c\u6709\\(0\\leq cg(n)&lt; f(n)\\)\u6210\u7acb\uff0c\u8bb0\u4f5c\\(f(n) = \\omega(g(n))\\)</li> <li>\\(\\Theta\\)\u8bb0\u53f7\u6807\u8bb0\\(f(n)\\)\u7684\u6e10\u8fd1\u7684\u4e0a\u754c\u548c\u6e10\u8fd1\u7684\u4e0b\u754c(\u5373\\(f(n)\\)\u7684\u9636)\uff1a\u5bf9\u4e8e\\(f(n) = \\Theta(g(n))\\)\u79f0\\(g(n)\\)\u4e3a\\(f(n)\\)\u7684\u6e10\u8fd1\u7684\u7d27\u7684\u754c(tight bound)</li> </ol> <p>\u5176\u4e2d\u5927\\(O\\)\u548c\u5c0f\\(o\\)\u533a\u522b\u5728\u4e8e\u524d\u8005\u5728\u6781\u9650\\(\\frac{f(n)}{g(n)}\\)\u53ef\u80fd\u4e3a1\uff0c\u5373\u53ef\u80fd\u540c\u9636\uff0c\u4f46\u662f\u540e\u8005\u5728\u6781\u9650\u65f6\\(\\frac{f(n)}{g(n)} = 0\\)\uff0c\u5373\\(f(n)\\)\u7684\u9636\u4e00\u5b9a\u5c0f\u4e8e\\(g(n)\\)\uff1b\u5927\\(\\Omega\\)\u548c\u5c0f\\(\\omega\\)\u540c\u7406\uff0c\u5bf9\u4e8e\\(f(n) = \\omega(g(n))\\)\uff0c\\(g(n)\\)\u7684\u9636\u4e00\u5b9a\u5c0f\u4e8e\\(f(n)\\)\uff0c\u800c\\(f(n) = \\Omega(g(n))\\)\u6765\u8bf4\uff0c\\(g(n)\\)\u7684\u9636\u53ef\u80fd\u548c\\(f(n)\\)\u76f8\u7b49</p> <p></p> <p>\u4e00\u4e2a\u7b97\u6cd5\u7684\u4e0a\u754c\\(O(f(n))\\)\uff1a\u5728\u6240\u6709\u6700\u574f\u8f93\u5165\u60c5\u51b5\u4e0b\uff0c\u7b97\u6cd5\u8fd0\u884c\u65f6\u95f4\u4e0d\u4f1a\u8d85\u8fc7\\(f(n)\\)</p> <p>\u6700\u574f\u60c5\u51b5(worst case)\u65f6\u95f4\u590d\u6742\u5ea6: \u7b97\u6cd5\u6c42\u89e3\u8f93\u5165\u89c4\u6a21\u4e3an\u7684\u5b9e\u4f8b\u6240\u9700\u8981\u7684\u6700\u957f\u65f6\u95f4\\(W(n)\\) \u6700\u597d\u60c5\u51b5(best case)\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u7b97\u6cd5\u6c42\u89e3\u8f93\u5165\u89c4\u6a21\u4e3an\u7684\u5b9e\u4f8b\u6240\u9700\u8981\u7684\u6700\u77ed\u65f6\u95f4\\(W(n)\\)</p> <p>\u4e00\u822c\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a\u7b97\u6cd5\u5206\u6790\u4f1a\u8bf4(\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u66f4\u5173\u5fc3worst case)\uff1a</p> <ul> <li>\u5bf9\u4e8ebest case\uff0c\u7b97\u6cd5\u7684 lower/upper (tight) bound \u662f\\(\\Theta(f(n))\\)</li> <li>\u5bf9\u4e8eworst case\uff0c\u7b97\u6cd5\u7684 lower/upper (tight) bound \u662f\\(\\Theta(f(n))\\)</li> </ul> <p>\u4ee5\u5feb\u6392\u548c\u6734\u7d20\u7684\u7d20\u6027\u68c0\u6d4b\u7b97\u6cd5\u4e3a\u4f8b\u8fdb\u884c\u5bf9\u6bd4\uff0c\u5bf9\u4e8e\u7d20\u6027\u68c0\u6d4b\uff0c\u4ee5\u8f93\u5165\u7684\u6570\u5b57\\(n\\)\u4f5c\u4e3a\u8f93\u5165\uff1a</p> <ul> <li>\u5bf9\u4e8e\u5feb\u6392\u8f93\u5165\u89c4\u6a21\u4e3a\\(n\\)\u7684\u6570\u7ec4\uff1aworst case \u4e0b tight bound \\(\\Theta(n^2)\\)\uff0cbest case \u4e0b tight bound \\(\\Theta(n \\log n)\\)</li> <li>\u5bf9\u4e8e\u7d20\u6027\u68c0\u6d4b\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u8f93\u5165\u7684\u6570\u5b57\\(n\\)\uff0c\u603b\u662f\u4f1a\u5728\u786e\u5b9a\u6b65\u6570\u5185\u7ec8\u6b62\u7b97\u6cd5\uff0c\u56e0\u6b64\u5bf9\u4e8e\u4efb\u4f55\u8f93\u5165\\(n\\)\uff0cbest case \u548c worst case\u90fd\u76f8\u540c\uff0c\u590d\u6742\u5ea6\u53d6\u51b3\u4e8e\u6570\u5b57\u662f\u5426\u6709\u5c0f\u56e0\u5b50\u3002\u56e0\u6b64\u8be5\u7b97\u6cd5best case \u7684lower bound \u4e3a\\(\\Omega(1)\\)\uff0cupper bound \u4e3a\\(O(\\sqrt{n})\\)\uff1bworst case \u7684lower bound \u4e3a\\(\\Omega(1)\\)\uff0cupper bound \u4e3a\\(O(\\sqrt{n})\\)\uff1b</li> </ul>"},{"location":"courses/algorithm.html#_3","title":"\u6c42\u89e3\u9012\u63a8\u65b9\u7a0b","text":"<p>\u6c42\u89e3\u9012\u63a8\u65b9\u7a0b\uff1a</p> <ul> <li>\u5173\u4e8e\u9636\u4e58\u51fd\u6570\uff1a</li> </ul> \\[ n! = o(n^n),\\qquad n!=\\omega(2^n),\\qquad \\log(n!) = \\Theta (n\\log n) \\] <ul> <li>\u6c42\u548c\u516c\u5f0f\uff1a   $$   \\sum_{k=1}^n \\frac{1}{k} = \\ln n+O(1)   $$</li> </ul> <p>$$   \\sum n^2 = \\frac{n(n+1)(2n+1)}{6}   $$</p> <ul> <li>\u4e3b\u5b9a\u7406\uff1a</li> </ul> <p>\u8bbe\\(a\\geq 1,b&gt;1\\)\u4e3a\u5e38\u6570\uff0c\\(f(n)\\)\u4e3a\u51fd\u6570\uff0c\\(T(n)\\)\u4e3a\u975e\u8d1f\u6574\u6570\uff0c\u4e14\u6709\\(T(n) = aT(n/b)+f(n)\\)</p> <ol> <li>\u82e5\\(f(n) = O(n^{\\log_ba-\\epsilon}),\\epsilon &gt;0\\)\uff0c\u90a3\u4e48\\(T(n)=\\Theta(n^{\\log_ba})\\)\uff1b</li> <li>\u82e5\\(f(n) = \\Theta(n^{\\log_ba})\\)\uff0c\u90a3\u4e48\\(T(n) = \\Theta(n^{\\log_ba}\\log n)\\)</li> <li>\u82e5\\(f(n) = \\Omega(n^{\\log_ba+\\epsilon}),\\epsilon &gt;0\\)\uff0c\u4e14\u5bf9\u4e8e\u67d0\u4e2a\u5e38\u6570\\(c&lt;1\\)\u548c\u6240\u6709\u5145\u5206\u5927\u7684\\(n\\)\uff0c\u6709\\(af(n/b)\\leq cf(n)\\)\uff0c\u90a3\u4e48\\(T(n)=\\Theta(f(n))\\)\uff1b</li> </ol> <p>\u5728\u4e3b\u5b9a\u7406\u4e2d\uff0c\\(n^{\\log_ba}\\)\u53ef\u4ee5\u770b\u4f5c total costs of all dividing and merging steps\uff1b</p> <p>\u5982\u679c\\(n^{\\log_ba -\\epsilon}\\)(\u6ce8\u610f\u8fd9\u91cc\\(n^{\\log_ba-\\epsilon}\\)\u4e0e\\(n^{\\log_ba}\\)\u9636\u662f\u4e0d\u540c\u7684)\u662f\\(f(n)\\)\u7684\u4e0a\u754c\uff0c\u5219\u6574\u4f53\u590d\u6742\u5ea6\u5c31\u5728\\(n^{\\log_ba}\\)\uff1b</p> <p>\u5982\u679c\\(n^{\\log_ba+\\epsilon}\\)\u662f\\(f(n)\\)\u7684\u4e0b\u754c\uff0c\u5219\u6574\u4f53\u590d\u6742\u5ea6\u5728\\(f(n)\\)\uff08\u4e0d\u8fc7\u8fd8\u9700\u8981\u4e00\u4e9b\u989d\u5916\u6761\u4ef6\uff0c\u5c24\u5176\u6ce8\u610f\u5176\u4e2dr&lt;1\uff09\uff1b</p> <p>\u4f7f\u7528\u4e3b\u5b9a\u7406\u5c24\u5176\u6ce8\u610f\u4e24\u4e2a\\(\\epsilon\\)\uff0c\u4f8b\u5982\\(n^{\\log_ba}=n\\)\uff0c\\(f(n)=n\\log n\\)\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u867d\u7136\\(f(n)\\)\u9636\u66f4\u9ad8\uff0c\u4f46\u662f\u4e0d\u5b58\u5728\\(\\epsilon\\)\u4f7f\u5f97\\(f(n)=\\Omega (n^{1+\\epsilon})\\)\uff0c\u56e0\u6b64\u5bf9\u4e8e\u7c7b\u4f3c\\(T(n)=2T(n/2)+n\\log n\\)\u5f62\u5f0f\u7684\u9012\u63a8\u5173\u7cfb\uff0c\u53ea\u80fd\u4f7f\u7528\u9012\u5f52\u6811\u6c42\u89e3\uff0c\u7ed3\u679c\u4e3a</p> <p></p> <p></p>"},{"location":"courses/algorithm.html#dynamic-programing","title":"\u52a8\u6001\u89c4\u5212(Dynamic Programing)","text":""},{"location":"courses/algorithm.html#lis","title":"\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217(LIS)","text":"<p>1\u7ef4\u52a8\u6001\u89c4\u5212\u3002\u6700\u4f18\u5b50\u7ed3\u6784\uff1a\u8f93\u5165\u7684\u6570\u7ec4\u8bb0\u4e3a\\(L\\)\uff0c\u524d\\(k\\)\u4f4d\u5b50\u4e32\u4e2d\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u957f\u5ea6\u8bb0\u4f5c\\(f(k)\\) \uff0c\u5219\u5728\u5df2\u77e5\u524d\\(j\\)\u4f4d\u5b50\u4e32LIS\u957f\u5ea6\\(f(j)\\)\u60c5\u51b5\u4e0b\uff0c\u5176\u4e2d\\(j\\in [1,k)\\)\uff0c\u5c1d\u8bd5\u5c06\u7b2c\\(k\\)\u4f4d\u52a0\u5230\u7b2c\\(j\\)\u4f4d\u7ed3\u5c3e\u7684\u6700\u957f\u5b50\u4e32\u540e\u9762\uff0c\u8ba1\u7b97\\(f(k)\\)\uff1b\u5373\\(f(k) = \\max\\{f(j)\\}+1\\)\uff0c\u5176\u4e2d\\(j\\in[1,k)\\)\u4e14\u6709\\(L[k]&gt;L[j]\\)\uff1b\u8003\u8651\u9012\u63a8\u8fb9\u754c\uff1a\\(f(1) = 1\\)\uff0c\u4ece\\(k = 2\\)\u5f00\u59cb\u9012\u63a8\u5373\u53ef\uff1b</p> <p>\u7b2c\\(k\\)\u4e2a\u72b6\u6001\u7531\u524d\\(k-1\\)\u4e2a\u72b6\u6001\u8f6c\u79fb\u6765\uff0c==\u65f6\u95f4\u590d\u6742\u5ea6==\\(O(n^2)\\)</p> <p>track\u89e3: \u66f4\u65b0<code>dp</code>\u6570\u7ec4\u8fc7\u7a0b\u4e2d\u989d\u5916\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u524d\u9a71\u4f4d\u7f6e(\u82e5\u6709\u591a\u4e2a\u524d\u9a71\u4efb\u9009\u4e00\u4e2a\u5373\u53ef)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\\(O(n)\\)</p> <p>\u539f\u59cb\u7684LIS\u95ee\u9898\u53ef\u4ee5\u4f7f\u7528\u8d2a\u5fc3+\u4e8c\u5206\u67e5\u627e\u6765\u505a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\\(O(n\\log n)\\) \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217-LeetCode</p> <p>\u8003\u8651\u4e00\u4e2a\u7b80\u5355\u7684\u8d2a\u5fc3\uff0c\u5982\u679c\u6211\u4eec\u8981\u4f7f\u4e0a\u5347\u5b50\u5e8f\u5217\u5c3d\u53ef\u80fd\u7684\u957f\uff0c\u5219\u6211\u4eec\u9700\u8981\u8ba9\u5e8f\u5217\u4e0a\u5347\u5f97\u5c3d\u53ef\u80fd\u6162\uff0c\u56e0\u6b64\u6211\u4eec\u5e0c\u671b\u6bcf\u6b21\u5728\u4e0a\u5347\u5b50\u5e8f\u5217\u6700\u540e\u52a0\u4e0a\u7684\u90a3\u4e2a\u6570\u5c3d\u53ef\u80fd\u7684\u5c0f\u3002</p> <p>\u57fa\u4e8e\u4e0a\u8ff0\u601d\u8def\uff0c\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4\\(d[i]\\)\u8868\u793a\u957f\u5ea6\u4e3a\\(i\\)\u7684\u9012\u589e\u5b50\u5e8f\u5217\u7ed3\u5c3e\u6700\u5c0f\u503c\uff0c\u53ef\u8bc1\\(d\\)\u662f\u5355\u8c03\u9012\u589e\u7684\uff1b\u56e0\u6b64\u5bf9\u4e8e\u7b2c\\(k\\)\u4e2a\u4f4d\u7f6e\u7684\u6570\u5b57\uff0c\u5148\u6bd4\u8f83\\(v_k\\)\u548c\\(d[len]\\)\uff0c\u5176\u4e2d\\(len\\)\u8868\u793a\u5f53\u524dLIS\u957f\u5ea6\uff0c\u5982\u679c\\(v_K&gt;d[len]\\)\uff0c\u8bf4\u660e\u5f53\u524d\u7684\u6570\u5b57\u6bd4LIS\u7ed3\u5c3e\u6570\u5b57\u66f4\u5927\uff0c\u5728LIS\u7ed3\u5c3e\u8ffd\u52a0\\(v_k\\)\uff0c\u5e76\u4e14\u66f4\u65b0\\(len = len+1\\)\uff1b\u5426\u5219\u5982\u679c\\(v_k&lt;d[len]\\)\uff0c\u6211\u4eec\u770b\\(v_k\\)\u662f\u5426\u4f1a\u5f71\u54cd\u9012\u589e\u5b50\u5e8f\u5217\u7ed3\u5c3e\u6700\u5c0f\u503c\uff1a\u626b\u63cf\\(d\\)\uff0c\u5982\u679c\\(d[j+1]&gt;v_k&gt;d[j]\\Longrightarrow d[j] = v_k\\)\uff1b\u56e0\u4e3a\u5df2\u77e5\\(d\\)\u662f\u4e25\u683c\u9012\u589e\u7684\uff0c\u56e0\u6b64\u626b\u63cf\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u6bcf\u6b21\u626b\u63cf\u590d\u6742\u5ea6\u5728\\(O(\\log len)\\)\uff0c\u6574\u4f53\u65f6\u95f4\u590d\u6742\u5ea6\u5728\\(O(n\\log n)\\)</p>"},{"location":"courses/algorithm.html#mis","title":"\u6700\u5927\u5b50\u6bb5\u548c(MIS)","text":"<p>1\u7ef4\u52a8\u6001\u89c4\u5212\u3002\u6700\u4f18\u5b50\u7ed3\u6784\uff1a\u8bb0\u5305\u542b\u7b2c\\(k\\)\u4e2a\u6570\u7684\u6700\u5927\u5b50\u6bb5\u548c\u4e3a\\(f(k)\\)\uff0c\u5219\u53ef\u4ee5\u6839\u636e\u5305\u542b\u7b2c\\(k-1\\)\u4e2a\u6570\u7684\u6700\u5927\u5b50\u6bb5\u548c\\(f(k-1)\\)\u8ba1\u7b97\u51fa\\(f(k)\\)\u3002\u8f93\u5165\u7684\u6570\u7ec4\u8bb0\u4e3a\\(A\\)\uff0c\u9012\u63a8\u5173\u7cfb\u5982\u4e0b\uff1a</p> \\[ f(k) =  \\left\\{  \\begin{align*} &amp;f(k-1)+A[k] &amp; f(k-1) &gt;0\\\\ &amp;A[k]   &amp;f(k-1)\\leq0  \\end{align*} \\right. \\] <p>\u9012\u63a8\u8fb9\u754c\\(f(0) = 0\\)</p> <p>\u7b2c\\(k\\)\u4e2a\u72b6\u6001\u7531\u7b2c\\(k-1\\)\u4e2a\u72b6\u6001\u8f6c\u79fb\u800c\u6765\uff0c==\u65f6\u95f4\u590d\u6742\u5ea6==\\(O(n)\\)</p> <p>\u5206\u6cbb\u7b97\u6cd5\u6c42\u89e3MIS\u95ee\u9898\uff1a\u7c7b\u4f3c\u7ebf\u6bb5\u6811\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\\(O(n\\log n)\\) \u6700\u5927\u5b50\u5e8f\u548c-LeetCode</p>"},{"location":"courses/algorithm.html#_4","title":"\u56fe\u50cf\u538b\u7f29","text":"<p>1\u7ef4\u52a8\u6001\u89c4\u5212\u3002\u6700\u4f18\u5b50\u7ed3\u6784\uff1a\u8bb0\u5bf9\u5305\u542b\u524dk\u4e2a\u7070\u5ea6\u503c\u7684\u5b50\u5e8f\u5217\u8fdb\u884c\u538b\u7f29\u7684\u6700\u4f4e\u5b58\u50a8\u5f00\u9500\u4e3a\\(f(k)\\)\uff0c\u5219\u53ef\u4ee5\u6839\u636e\\(f(k-1),f(k-2),\\cdots\\)\u6700\u591a\u524d256\u4e2a\u503c\u8ba1\u7b97\u51fa\\(f(k)\\)\u3002\u8f93\u5165\u7684\u7070\u5ea6\u503c\u6570\u7ec4\u8bb0\u4e3a\\(A\\)\uff0c\u9012\u63a8\u5173\u7cfb\u5982\u4e0b\uff1a $$ f(k)=\\min{f(j)+h(A[j+1..k])}  \\qquad \\qquad \\max{0,k-256}&lt;j&lt;k $$ \u9012\u63a8\u8fb9\u754c\u4e3a\\(f(0) = 0\\)</p> <p>\u7b2ck\u4e2a\u72b6\u6001\u7531\u524d\\(\\min\\{k-1,256\\}\\)\u4e2a\u72b6\u6001\u8f6c\u79fb\u800c\u6765\uff0c\u56e0\u6b64\u867d\u7136\u5e38\u6570\u6bd4\u8f83\u5927\uff0c\u4f46==\u65f6\u95f4\u590d\u6742\u5ea6==\u4ecd\u5728\\(O(n)\\)</p>"},{"location":"courses/algorithm.html#chain-matrix-multiplication","title":"Chain Matrix Multiplication","text":"<p>2\u7ef4\u52a8\u6001\u89c4\u5212\u3002\u6700\u4f18\u5b50\u7ed3\u6784\uff1a\u56e0\u4e3a\u6211\u4eec\u5728\u8ba1\u7b97\u4e24\u4e2a\u77e9\u9635\u9700\u8981\u7684\u4e58\u6cd5\u6b21\u6570\u65f6\uff0c\u4f9d\u8d56\u4e8e\u5de6\u53f3\u4e24\u4e2a\u77e9\u9635\u7684\u5927\u5c0f\uff0c\u56e0\u6b64\u6c42\u89e3\u4e00\u4e2a\u95ee\u9898\u9700\u8981\u5148\u6c42\u89e3\u5de6\u53f3\u4e24\u4e2a\u5b50\u95ee\u9898\u3002\u8bbe\u8f93\u5165\u7684\u77e9\u9635\u94fe\u4e3a\\(A\\)\uff0c\u8bb0\u5bf9\u4e8e\u77e9\u9635\u94fe\u533a\u95f4\\([i,j]\\)\u786e\u5b9a\u4e58\u6cd5\u6b21\u5e8f\u9700\u8981\u7684\u6700\u5c11\u4e58\u6cd5\u6b21\u6570\u4e3a\\(f(i,j)\\)\uff0c\u5219\u5047\u5b9a\u6700\u540e\u4e00\u6b21\u4e58\u6cd5\u53d1\u751f\u5728\u7b2c\\(k\\)\u4e2a\u4f4d\u7f6e(\\(i\\leq k&lt; j\\))\uff0c\u5219\u6709\\(f(i,k),f(k,j)\\)\u4e5f\u662f\u6700\u4f18\u89e3\u3002\u56e0\u6b64\u9012\u63a8\u5173\u7cfb\u5982\u4e0b\uff1a $$ f(i,j) = \\min{f(i,k)+f(k,j)+P_{i-1}P_kP_j}\\qquad\\qquad i\\leq k&lt;j $$ \u9012\u63a8\u8fb9\u754c\u4e3a\\(f(i,j) = 0~~\\mathbf{if}~~i=j\\)</p> <p>\u72b6\u6001\\(f(i,j)\\)\u75312k\u4e2a\u72b6\u6001\u8f6c\u79fb\u800c\u6765\uff0c\u5176\u4e2d\\(i\\leq k&lt; j\\)\uff0c\u56e0\u6b64==\u65f6\u95f4\u590d\u6742\u5ea6==\\(O(n^3)\\)</p>"},{"location":"courses/algorithm.html#optimal-binary-search-tree","title":"Optimal Binary Search Tree","text":"<p>2\u7ef4\u52a8\u6001\u89c4\u5212\u3002\u6700\u4f18\u5b50\u7ed3\u6784\uff1a\u5982\u679c\u6811\u662f\u4e00\u4e2a\u6700\u4f18\u4e8c\u5206\u68c0\u7d22\u6811\uff0c\u5219\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u5206\u522b\u662f\u4e00\u4e2a\u6700\u4f18\u4e8c\u5206\u68c0\u7d22\u6811\u3002</p> <p>\u4e0e\u77e9\u9635\u94fe\u4e58\u6cd5\u7c7b\u4f3c\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\\([i,j]\\)\uff0c\\(f(i,j)\\)\u8868\u793a\u8be5\u533a\u95f4\u5185\u7684\u6240\u6709\u6570\u636e\u70b9\u548c\u7a7a\u9699\u70b9\u6784\u6210\u7684\u4e8c\u5206\u68c0\u7d22\u6811\u6700\u5c0f\u641c\u7d22\u671f\u671b\uff0c\u5728\u5176\u4e2d\u9009\u4e00\u4e2a\u6570\u636e\u70b9\u4f5c\u4e3a\u6839\u8282\u70b9\uff0c\\(f(i,j) = f(i,k-1)+f(k+1,j)+h(i,j)\\)\uff0c\u5176\u4e2d\\(i\\leq k\\leq j\\)\u65f6\u95f4\u590d\u6742\u5ea6\\(O(n^3)\\)\uff0c</p>"},{"location":"courses/algorithm.html#roi","title":"\u6295\u8d44\u56de\u62a5(ROI)","text":"<p>2\u7ef4\u52a8\u6001\u89c4\u5212\u3002\u5176\u5b9e\u76f8\u5f53\u4e8e\u5b8c\u5168\u80cc\u5305\u7684\u53d8\u79cd\uff0c\u53ef\u4ee5\u628a\u5b8c\u5168\u80cc\u5305\u770b\u6210\u6709\u7279\u6b8a\u56de\u62a5\u51fd\u6570\u7684ROI\u95ee\u9898\u2014\u2014\u5728\u5b8c\u5168\u80cc\u5305\u4e2d\uff0c\u5bf9\u4e8e\u7269\u54c1\\(k\\)\u7684\u9009\u62e9\uff0c\u5176\u56de\u62a5\u51fd\u6570\u4e3a\\(f_k(x) = x\\cdot v_k\\)\uff0c\u4e5f\u6b63\u662f\u7531\u4e8e\u56de\u62a5\u51fd\u6570\u7684\u7279\u6b8a\u6027\u8d28\uff0c\u5728\u5b8c\u5168\u80cc\u5305\u4e2d\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u9012\u63a8\u5173\u7cfb\uff1a $$ F_k(y) = \\max{F_{k-1}(y),F_{k}(y-w_k)+v_k} $$ \u7136\u800c\u5728ROI\u4e2d\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u6bcf\u79cd\u9879\u76ee\u7684\u56de\u62a5\u51fd\u6570\u4e0d\u662f\u7b80\u5355\u7684\\(f(x) = kx\\)\uff0c\u56e0\u6b64ROI\u95ee\u9898\u7684\u9012\u63a8\u5173\u7cfb\u5982\u4e0b\uff1a</p> \\[ \\begin{align*} F_k(y) &amp;= \\max\\{F_{k-1}(y),F_{k-1}(y-w_k)+f(w_k)~~|~~w_k\\in[1,y]\\}\\\\ &amp;= \\max\\{F_{k-1}(y-w_k)+f(w_k) ~~|~~w_k\\in[0,y]\\} \\end{align*} \\] <p>\u5b8c\u5168\u80cc\u5305\u4e2d\u5bf9\u4e8e\u72b6\u6001\\(F_k(y)\\)\u7684\u8ba1\u7b97\u53ea\u9700\u89811\u6b21\u6bd4\u8f83\uff0c\u800cROI\u9700\u8981\\(y\\)\u6b21\u6bd4\u8f83(\u7c7b\u4f3c\u8bbe\u8ba1\u7684\u6bd4\u8f83\u5dee\u7684\u90a3\u79cd\u5b8c\u5168\u80cc\u5305\u7684\u590d\u6742\u5ea6)\u3002\u5176\u539f\u56e0\u5728\u4e8eROI\u4e2d\u56de\u62a5\u51fd\u6570\u4e0d\u662f\u4e25\u683c\u5355\u8c03\u9012\u589e\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u65e0\u6cd5\u786e\u5b9a\u5bf9\u4e8e\u5f53\u524d\u72b6\u6001\u8981\u5bf9\u7b2c\\(k\\)\u4e2a\u9879\u76ee\u6295\u8d44\u591a\u5c11\u624d\u66f4\u597d\uff0c\u53ea\u80fd\u5c1d\u8bd5\u6240\u6709y\u79cd\u53ef\u80fd\u3002\\(F_k(y)\\)\u7531\u524d\\(y\\)\u4e2a\u72b6\u6001\u8f6c\u79fb\u800c\u6765\uff0c\u56e0\u6b64\u5bf9\u4e8en\u4e2a\u9879\u76ee\uff0cm\u8d44\u672c\u7684ROI\u95ee\u9898\uff0c==\u65f6\u95f4\u590d\u6742\u5ea6==\uff1a $$ \\sum_{k=2}^n\\sum_{x=1}^m(x+1) = \\frac{1}{2}(n-1)m(m+3) = O(nm^2) $$</p> <p>track\u89e3\uff1a\u9700\u8981\\(O(mn)\\)\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u6bcf\u4e00\u683c\u8bb0\u5f55\u5bf9\u4e8e\u7b2ck\u4e2a\u9879\u76ee\u6295\u8d44\u4e86\u591a\u5c11\u94b1\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\\(O(n)\\)</p> <pre><code>i = n # n\u4e2a\u9879\u76ee\nj = m # m\u4e2a\u786c\u5e01\nwhile i &gt; 0:\n    if G[i,j] &gt; 0:\n        S \u222a {i:G[i,j]}\n        j = j-G[i,j]\n    i = i-1\n</code></pre>"},{"location":"courses/algorithm.html#knapsack","title":"\u80cc\u5305\u95ee\u9898(knapsack)","text":""},{"location":"courses/algorithm.html#0-1","title":"0-1\u80cc\u5305","text":"<p>N\u79cd\u7269\u54c1\uff0c\u7269\u54c1\u91cd\u91cf\u8bb0\u4e3aw\uff0c\u4ef7\u503c\u8bb0\u4e3av\uff1b\u9650\u91cdW\uff1b\u6bcf\u4e2a\u7269\u54c1\u90091\u6b21\uff1b\u6c42\u6700\u5927\u4ef7\u503c\u3002\u8bb0\\(F_k(y)\\)\u4e3a\u53ea\u88c5\u524dk\u7269\u54c1\u9650\u91cdy\u65f6\u6700\u5927\u4ef7\u503c\uff0c\u9012\u63a8\u5173\u7cfb\u5982\u4e0b $$ F_k(y) = \\max{F_{k-1}(y), F_{k-1}(y-w_k)+v_k}\\qquad y\\geq w_k $$ \u7a7a\u95f4\u590d\u6742\u5ea6\u4f18\u5316\uff1a</p> <p>\u5982\u679c\u505a\u5b9e\u73b0\uff0c\u6700\u7b80\u5355\u7684\u662f\u5f00\u4e00\u4e2a\\(N\\cdot W\\)\u7684\u4e8c\u7ef4\u6570\u7ec4\uff0c\u4f46\u662f\u6ce8\u610f\u5230\u4e0a\u9762\u7684\u9012\u63a8\u5173\u7cfb\u4e2d\u7b2ck\u884c\u53ea\u548c\u7b2ck-1\u884c\u6709\u5173\uff0c\u56e0\u6b64\u53ef\u4ee5\u505a\u4e00\u4e9b\u7a7a\u95f4\u4f18\u5316\uff0c\u53d8\u6210\u53ea\u9700\u8981\u4e24\u4e2a\\(W\\)\u957f\u7684\u6570\u7ec4\u3002</p> <p>\u66f4\u8fdb\u4e00\u6b65\u5730\uff0c\u53ef\u4ee5\u538b\u7f29\u62101\u4e2a\u6570\u7ec4\uff0c\u53ea\u9700\u8981\u9006\u5e8f\u8fed\u4ee3\uff0c\u4e14\u521d\u59cb\u7f6e\u4e3a\u51680\uff0c\u5219\u8ba1\u7b97\\(F_k(y)\\)\u65f6\uff0c\u6570\u7ec4\u4e2d\\(A[y],A[y-w_k]\\)\u6070\u597d\u8868\u793a\\(F_{k-1}(y), F_{k-1}(y-w_k)\\)</p> <p>\u5982\u679c\u8981\u6c42\u6070\u597d\u88c5\u6ee1\uff0c\u5373\u53d8\u4e3a\u5b50\u96c6\u548c\u95ee\u9898\uff0c\u5219\u5e94\u5f53\u628a\\(A[0]\\)\u7f6e0\uff0c\u5176\u5b83\u5168\u7f6e\u4e3a\\(-\\infty\\)</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\\(O(NW)\\)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\\(O(W)\\)</p> <p>track\u89e3\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\\(O(W)\\)\uff0c\u53ea\u9700\u8981\u5728\u4e8c\u7ef4\u8868\u683c\\(G\\)\u4e2d\u8bb0\u5f55\u4e0b\u662f\u5426\u9009\u62e9\u4e86\u7b2ck\u4e2a\u7269\u54c1\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\\(O(N)\\)\uff1b</p> <pre><code>i = N # N\u79cd\u7269\u54c1\nj = w # W\u9650\u91cd\nwhile i &gt; 0:\n    if G[i,j] == 1:\n        S \u222a {i}\n        j = j-w_i\n    i = i-1\n</code></pre>"},{"location":"courses/algorithm.html#_5","title":"\u5b8c\u5168\u80cc\u5305","text":"<p>N\u79cd\u7269\u54c1\uff0c\u6bcf\u4e2a\u7269\u54c1\u91cd\u91cf\u8bb0\u4e3aw\uff0c\u4ef7\u503c\u8bb0\u4e3av\uff1b\u9650\u91cdW\uff1b\u6bcf\u4e2a\u7269\u54c1\u4e0d\u9650\u6b21\u9009\uff1b\u6c42\u6700\u5927\u4ef7\u503c $$ F_k(y) = \\max {F_{k-1}(y), F_k(y-w_k)+v_k} $$ \u5176\u4e2d\\(F_k(y)\\)\u8868\u793a\u53ea\u88c5\u524dk\u79cd\u7269\u54c1\uff0c\u9650\u91cd\u4e3ay\u65f6\u7684\u6700\u5927\u4ef7\u503c\u3002</p> <p>\u5982\u679c\u6309\u71670-1\u80cc\u5305\u7684\u601d\u8def\uff0c\u8003\u8651\u9009\u7b2ck\u79cd\u7269\u54c1\u548c\u4e0d\u9009\u7b2ck\u79cd\u7269\u54c1\uff1a</p> <ul> <li>\u5982\u679c\u4e0d\u9009\u7b2ck\u79cd\u7269\u54c1\uff0c\u5219\u9650\u91cd\u4e0d\u53d8\uff0c\u8f6c\u5316\u4e3a\\(F_{k-1}(y)\\)</li> <li>\u5982\u679c\u9009\u7b2ck\u79cd\u7269\u54c1\uff0c\u5219\u7b2ck\u79cd\u7269\u54c1\u81f3\u591a\u9009\\(\\lfloor W/w_i\\rfloor\\)\u4ef6\uff0c\u4f46\u6bcf\u591a\u9009\u4e00\u4ef6\u7b2ck\u79cd\u7269\u54c1\uff0c\u610f\u5473\u7740\u9009\u524dk-1\u79cd\u7269\u54c1\u65f6\u9650\u91cd\u8981\u591a\u51cf\u53bb\u4e00\u4e2a\\(w_i\\)\uff0c\u56e0\u6b64\u4e3a\u4e86\u8ba1\u7b97\\(F_k(y)\\)\u4e8b\u5b9e\u4e0a\u5fc5\u987b\u8ba1\u7b97\u6240\u6709\u7684\\(F_{k-1}(y-x_i\\cdot w_k)+x_i\\cdot v_k\\)\u5176\u4e2d\\(x_i\\in [0,\\lfloor W/w_i\\rfloor]\\)\uff0c\u7136\u540e\u53d6\\(\\lfloor W/w_i\\rfloor+1\\)\u4e2a\u503c\u4e2d\u7684\u6700\u5927\u503c</li> </ul> <p></p> <p>\u4f46\u8fd9\u6837\u4e00\u6765\u8ba1\u7b97\u6bcf\u4e2a\\(F_{k-1}(y)\\)\u9700\u8981\u505a\\(\\lfloor W/w_i\\rfloor+1\\)\u6b21\u6bd4\u8f83\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\\(O(NW\\sum{\\lfloor W/w_i\\rfloor+1})\\)</p> <p>\u53ef\u4ee5\u6362\u4e00\u79cd\u601d\u8def\uff1a</p> <ul> <li>\u5982\u679c\u4e0d\u9009\u7b2ck\u79cd\u7269\u54c1\uff0c\u5219\u9650\u91cd\u4e0d\u53d8\uff0c\u8f6c\u5316\u4e3a\\(F_{k-1}(y)\\)</li> <li>\u5982\u679c\u9009\u7b2ck\u79cd\u7269\u54c1\uff0c\u5219\u8f6c\u5316\u4e3a\\(F_k(y-w_k)\\)\uff0c\u6ce8\u610f\u8fd9\u91cc\u7684\u4e0b\u6807\u662f\\(k\\)\u800c\u4e0d\u662f\\(k-1\\)\u3002\u4e0e0-1\u4e0d\u540c\u7684\u539f\u56e0\u5c31\u5728\u4e8e\u5b8c\u5168\u80cc\u5305\u5141\u8bb8\u65e0\u9650\u9009</li> </ul> <p>\u56e0\u6b64\u5728\u5bf9\u5b8c\u5168\u80cc\u5305\u505a\u7a7a\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u7684\u65f6\u5019\uff0c\u4e0e0-1\u4e5f\u7565\u6709\u4e0d\u540c\uff1a</p> <p>0-1\u80cc\u5305\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u9700\u8981\u9006\u5e8f\u904d\u5386\u6570\u7ec4\uff0c\u8fd9\u662f\u56e0\u4e3a\u57280-1\u80cc\u5305\u4e2d\u8ba9\u9650\u91cd\u9012\u51cf\uff1a\\(y = W,W-1,\\cdots 1\\)\u662f\u4e3a\u4e86\u4fdd\u8bc1\u7b2ck\u6b21\u5faa\u73af\u4e2d\u7684\u72b6\u6001\\(F_k(y)\\)\u662f\u7531\\(F_{k-1}(y-w_k)\\)\u9012\u63a8\u6765\uff0c\u4e5f\u5c31\u662f\u8bf4\u4fdd\u8bc1\u5728\u8003\u8651\u201c\u9009\u5165\u7b2c k \u4ef6\u7269\u54c1\u201d\u8fd9\u79cd\u7b56\u7565\u65f6\u4f9d\u636e\u7684\u662f\u4e00\u4e2a\u6ca1\u6709\u9009\u5165\u7b2c k \u4ef6\u7269\u54c1\u7684\u5b50\u7ed3\u679c\\(F_{k-1(y-w_k)}\\)\uff1b\u7136\u800c\u5b8c\u5168\u80cc\u5305\u5219\u4e0d\u540c\uff0c\u5b8c\u5168\u80cc\u5305\u4e2d\u5728\u8003\u8651\u201c\u52a0\u9009\u4e00\u4ef6\u7b2c k \u4ef6\u7269\u54c1\u201d\u8fd9\u79cd\u7b56\u7565\u65f6\u8981\u4f9d\u8d56\u4e00\u4e2a\u53ef\u80fd\u5df2\u7ecf\u9009\u5165\u7b2c k \u4ef6\u7269\u54c1\u7684\u5b50\u7ed3\u679c\\(F_k(y-w_k)\\)\uff0c\u6240\u4ee5\u9700\u8981\u8ba9\u9650\u91cd\u9012\u589e\uff1a\\(y = 1,2,\\cdots W-1,W\\)</p> <p>track\u89e3\uff1a</p>"},{"location":"courses/algorithm.html#lcs","title":"\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217(LCS)","text":"<p>2\u7ef4\u52a8\u6001\u89c4\u5212\u3002\u6700\u4f18\u5b50\u7ed3\u6784\uff1a\u8f93\u5165\u4e24\u4e2a\u4e32\u8bb0\u4e3a\\(X,Y\\)\uff0c\u957f\u5ea6\u5206\u522b\u4e3a\\(m,n\\)\uff0c\u4e24\u8005\u7684LCS\u8bb0\u4e3a\\(Z\\)\uff1b\u8bbe\\(f(i,j)\\)\u8868\u793a\\(X\\)\u7684\u524d\\(i\\)\u4f4d\u4e0e\\(Y\\)\u7684\u524d\\(j\\)\u4f4d\u7684LCS\u957f\u5ea6\uff0c\\(Z_p\\)\u8868\u793a\u4e24\u4e2a\u5b50\u4e32\u7684LCS\uff1a</p> <ol> <li>\u5982\u679c\\(X_i = Y_j\\)\uff0c\u5219\\(Z_{p-1}\\)\u662f\\(X_{i-1},Y_{j-1}\\)\u7684LCS</li> <li>\u5982\u679c\\(X_i \\neq Y_j\\)\uff1a<ul> <li>\u82e5\\(X_i = Z_p\\)\uff0c\u5219\\(Z_{p-1}\\)\u662f\\(X_{i-1},Y_{j}\\)\u7684LCS</li> <li>\u82e5\\(Y_j = Z_p\\)\uff0c\u5219\\(Z_{p-1}\\)\u662f\\(X_{i},Y_{j-1}\\)\u7684LCS</li> </ul> </li> </ol> <p>\u7531\u6b64\u53ef\u5efa\u7acb\u9012\u63a8\u5173\u7cfb:</p> \\[ f(i,j) =  \\left\\{  \\begin{align*} &amp;f(i-1,j-1)+1 &amp; X_i = Y_j\\\\ &amp;\\max\\{f(i-1,j),f(i,j-1)\\}  &amp;X_i \\neq Y_j  \\end{align*} \\right. \\] <p>\u9012\u63a8\u8fb9\u754c\\(f(0,j) = f(i,0) = 0\\)</p> <p>\u72b6\u6001\\(f(i,j)\\)\u81f3\u591a\u7531\u524d\u4e24\u4e2a\u72b6\u6001\u8f6c\u79fb\u6765\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\\(O(mn)\\)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a\u6570\u7ec4\u4f18\u5316\u5230\\(O(\\min\\{m,n\\})\\)</p> <p>1143. \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 - \u529b\u6263</p>"},{"location":"courses/algorithm.html#edit-distance","title":"\u6700\u5c0f\u7f16\u8f91\u8ddd\u79bb(Edit distance)","text":"<p>2\u7ef4\u52a8\u6001\u89c4\u5212\u3002\u6700\u4f18\u5b50\u7ed3\u6784\uff1a\u8f93\u5165\u4e24\u4e2a\u4e32\u8bb0\u4e3a\\(X,Y\\)\uff0c\u957f\u5ea6\u5206\u522b\u4e3a\\(m,n\\)\uff1b\u53ef\u77e5\u5220\u9664\u548c\u63d2\u5165\u7684\u64cd\u4f5c\u662f\u7b49\u4ef7\u7684\uff0c\u56e0\u6b64\u53ea\u8003\u8651\u63d2\u5165\u548c\u66ff\u6362\u4e24\u4e2a\u64cd\u4f5c\u5373\u53ef\u3002\u8bbe\\(f(i,j)\\)\u8868\u793a\\(X\\)\u7684\u524d\\(i\\)\u4f4d\u4e0e\\(Y\\)\u7684\u524d\\(j\\)\u4f4d\u7684\u6700\u5c0f\u7f16\u8f91\u8ddd\u79bb\uff1a</p> <ol> <li>\u5982\u679c\\(X_i = Y_j\\)\uff0c\u5219\u5f53\u524d\u6b65\u4e0d\u9700\u8981\u5bf9\u4e24\u4e2a\u4e32\u8fdb\u884c\u7f16\u8f91\uff0c\\(f(i,j) = f(i-1,j-1)\\)</li> <li>\u5982\u679c\\(X_i \\neq Y_j\\)\uff1a\u5219\u5f53\u524d\u9700\u8981\u5bf9\u5176\u4e2d\u4e00\u4e2a\u4e32\u8fdb\u884c\u7f16\u8f91\uff0c\\(f(i,j) = f(i-1,j-1)+1\\)</li> <li>\u5982\u679c\\(X_i=\\bot\\)\u6216\\(Y_j=\\bot\\)\uff1a\u5219\u9700\u8981\u6267\u884c\u76f8\u5e94\u7684\u63d2\u5165\u64cd\u4f5c\uff0c\\(f(i,j) = \\min\\{f(i-1,j)+1,f(i,j-1)+1\\}\\)</li> </ol> <p>\u56e0\u6b64\u9012\u63a8\u5173\u7cfb\uff1a\\(f(i,j) = \\min\\{f(i-1,j)+1,f(i,j-1)+1,diff(X_i,Y_j)+f(i-1,j-1)\\}\\)</p> <p>\u9012\u63a8\u8fb9\u754c\\(f(0,j) = j,f(i,0) = i\\)</p> <p>\u5f53\u524d\u72b6\u6001\\(f(i,j)\\)\u4f9d\u8d563\u4e2a\u5b50\u72b6\u6001\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\\(O(n^2)\\)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\\(O(\\min\\{m,n\\})\\)</p> <p>72. \u7f16\u8f91\u8ddd\u79bb - \u529b\u6263</p>"},{"location":"courses/algorithm.html#_6","title":"\u8ba1\u7b97\u590d\u6742\u6027\u7406\u8bba","text":""},{"location":"courses/algorithm.html#_7","title":"\u9009\u62e9\u95ee\u9898","text":"<p>\u8bc6\u522b\u51fa\\(X\\)\u7684\u4e00\u4e2a\u5b50\u96c6\\(L\\)</p> <ul> <li>\\(X\\)\uff1a\u4e00\u4e2astring\u96c6\u5408</li> <li>\\(x\\)\uff1a\\(X\\)\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20</li> <li>\\(L\\)\uff1a\u8bed\u8a00(language)\u6ee1\u8db3\u7279\u5b9a\u5c5e\u6027\u7684\\(X\\)\u7684\u4e00\u4e2a\u5b50\u96c6</li> </ul> <p></p>"},{"location":"courses/algorithm.html#ndtm-vs-tm","title":"NDTM v.s. TM","text":"<p>NDTM\u4e0e\u6807\u51c6\u56fe\u7075\u673a\u7c7b\u4f3c\uff0c\u9664\u4e86\uff1a</p> <p></p>"},{"location":"courses/algorithm.html#pnp","title":"P\u548cNP","text":"<p>We say a TM \\(M\\) accepts (\u201c1\u201d signify acceptance) a language \\(L\\)\uff0cif $$ x\\in L\\Longleftrightarrow M(x)=1 $$ \\(L\\) is decidable by \\(M\\)(\\(M\\) solves \\(L\\))</p> <p>P\u7c7b\u8bed\u8a00\u548cNP\u7c7b\u8bed\u8a00\u7531 \\(M\\) \u662f\u786e\u5b9a\u6027\u56fe\u7075\u673a\u8fd8\u662f\u975e\u786e\u5b9a\u6027\u56fe\u7075\u673a\u8fdb\u884c\u5206\u7c7b\uff1a</p> <p></p> <ul> <li>P\u7c7b\u8bed\u8a00: \u4e00\u4e2a\u8bed\u8a00L\u5c5e\u4e8eP\u7c7b\u2014\u2014\u5982\u679c\u5b58\u5728\u786e\u5b9a\u578b\u591a\u9879\u5f0f\u65f6\u95f4\u56fe\u7075\u673a\u63a5\u53d7L</li> </ul> <p></p> <ul> <li>NP\u7c7b\u8bed\u8a00: \u975e\u786e\u5b9a\u6027\u56fe\u7075\u673a\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u6c42\u89e3\\(x\\in L\\)</li> </ul> <p>poly-time\uff1a\u6700\u591a\u6267\u884c\\(p(n)\\)\u6b65\uff0c\u5176\u4e2d\\(P(\\cdot)\\)\u8868\u793a\u4e00\u4e2a\u591a\u9879\u5f0f\uff0c\\(n\\)\u662f\u8f93\u5165\u7eb8\u5e26\u7684\u957f\u5ea6</p> <p></p> <p>NP\u95ee\u9898\u7684modern\u5b9a\u4e49:</p> <p></p> <ul> <li>\u5373NP\u8bed\u8a00: \u786e\u5b9a\u6027\u56fe\u7075\u673a\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u9a8c\u8bc1\u4e00\u4e2a\u89e3(\u5373\u5b9a\u4e49\u4e2d\u7684 witness \\(w\\))</li> </ul> <p>NP Language\u7684\u51e0\u4e2a\u4f8b\u5b50\uff1a</p> <ol> <li> <p>\\(L=\\) \u5408\u6570(\u540c\u65f6\u8fd9\u4e5f\u662f\u4e00\u4e2aP language)</p> </li> <li> <p>SAT: \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5408\u53d6\u8303\u5f0f(CNF)\uff0c\u5224\u65ad\u662f\u5426\u6709\u4e00\u7ec4\u8f93\u5165\u4f7f\u8868\u8fbe\u5f0f\u503c\u4e3atrue</p> </li> </ol> <p>3-SAT: \u5bf9\u4e8e\u4e00\u4e2a\u5b50\u53e5\u957f\u5ea6\u9650\u5b9a\u4e3a3\u7684\u5408\u53d6\u8303\u5f0f(CNF)\uff0c\u5224\u65ad\u662f\u5426\u6709\u4e00\u7ec4\u8f93\u5165\u4f7f\u8868\u8fbe\u5f0f\u503c\u4e3atrue</p> <p></p> <ol> <li>\u54c8\u5bc6\u987f\u8def\u5f84: \u65e0\u91cd\u590d\u8bbf\u95ee\u65e0\u5411\u56fe\u4e0a\u6bcf\u4e2a\u8282\u70b9</li> </ol> <p>\u4e00\u4e2a\u4e0d\u662fNP\u95ee\u9898\u7684\u4f8b\u5b50\uff1a\u4e00\u4e2a\u56fe\u4e2d\u662f\u5426\u4e0d\u5b58\u5728Hamilton\u56de\u8def\uff0c\u6ce8\u610f\u5230\u8fd9\u4e2a\u95ee\u9898\u65e0\u6cd5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u9a8c\u8bc1\uff1b</p> <p></p>"},{"location":"courses/algorithm.html#np-complete","title":"NP-Complete","text":"<ul> <li>\u4e00\u4e2a\u8bed\u8a00L\u662fNP-Hard\u2014\u2014\u5982\u679c\u6240\u6709\u7684NP\u8bed\u8a00L' \u90fd\u80fd\u901a\u8fc7\u4e00\u4e2a\u786e\u5b9a\u6027\u591a\u9879\u5f0f\u65f6\u95f4\u5f52\u7ea6\u7b97\u6cd5R\u5f52\u7ea6\u5230L\uff1a</li> </ul> <p>L is said to be NP-hard if for every NP-language L', there is a deterministic poly-time algorithm (a reduction) R: $$ x\\in L' \\Longleftrightarrow R(x)\\in L $$</p> <p>\u6240\u6709\u7684NP\u7c7b\u4e2d\u7684\u95ee\u9898\u96be\u5ea6\u4e0d\u4f1a\u8d85\u8fc7NP-hard\u7c7b\u4e2d\u7684\u95ee\u9898\uff0c\u4f46\u6ce8\u610fNP-hard\u4e2d\u7684\u95ee\u9898\u4e0d\u4e00\u5b9a\u5c5e\u4e8eNP</p> <ul> <li>\u4e00\u4e2a\u8bed\u8a00L\u662fNP-Complete\u2014\u2014\u5982\u679c\u5b83\u662fNP-hard\u4e14\u5b83\u5c5e\u4e8eNP\u7c7b()</li> </ul> <p>L is NP-complete if it is NP-hard, and is itself in NP</p> <p>NP-Complete \u4ee3\u8868\u4e86NP\u95ee\u9898\u4e2d\u6700\u96be\u7684\u4e00\u7c7b\u95ee\u9898\uff1b\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u627e\u5230\u4e86\u4e00\u4e2a\u89e3\u51b3NPC\u95ee\u9898\u7684\u591a\u9879\u5f0f\u65f6\u95f4\u7b97\u6cd5\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u89e3\u51b3\u6240\u6709NP\u95ee\u9898(\u4ece\u800c\u4e5f\u8bf4\u660e\u4e86P=NP)\uff1a</p> <p>Suppose Y \u2208 N P-complete, then Y \u2208 P \u21d0\u21d2 P = N P\uff1a</p> <ul> <li>\u5fc5\u8981\u6027\uff1a\u6839\u636eNPC\u5b9a\u4e49\uff0cNPC\u95ee\u9898\u662fNP\u95ee\u9898\uff0c\u53c8\u56e0\u4e3aP=NP\uff0c\u56e0\u6b64\\(Y\\in P\\)</li> <li>\u5145\u5206\u6027\uff1a\u6839\u636eNPC\u5b9a\u4e49\uff0c\\(\\forall X\\in NP,X\\leq_p Y\\)\uff0c\u53c8\u56e0\u4e3a\\(Y\\in P\\)\uff0c\u56e0\u6b64\\(NP\\in P\\)\uff0c\u800c\u5df2\u77e5\\(P\\in NP\\)\uff0c\u56e0\u6b64\\(P=NP\\)</li> </ul> <p>P, NP, NP-Hard, NP-Complete\u7684\u5173\u7cfb\uff1a</p> <p></p>"},{"location":"courses/algorithm.html#bpp","title":"BPP","text":"<ul> <li>\u6982\u7387\u591a\u9879\u5f0f\u56fe\u7075\u673a\uff1a</li> </ul> <ul> <li>\u4e00\u4e2a\u8bed\u8a00L\u5c5e\u4e8eBPP\u7c7b\u2014\u2014\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u4e00\u4e2a\u6982\u7387\u591a\u9879\u5f0f\u65f6\u95f4\u56fe\u7075\u673aM\u4f7f\u5f97\uff1a   $$   \\forall x\\in L: Pr[M(x)=1]\\geq \\alpha\\   \\forall x\\notin L: Pr[M(x)=1]\\leq \\beta   $$   Bounded-error Probabilistic Polynomial Time</li> </ul> <p>\u663e\u7136\\(P\\in BPP\\)\u56e0\u4e3a\u786e\u5b9a\u578b\u56fe\u7075\u673a\u662f\u4e00\u7c7b\u7279\u6b8a\u7684\u6982\u7387\u56fe\u7075\u673a</p> <p>\u8bb8\u591a\u95ee\u9898\u5c5e\u4e8eBPP\u4f46\u4e0d\u5c5e\u4e8eP\uff0c\u4e0d\u8fc7\u8fd9\u7c7b\u95ee\u9898\u6b63\u5728\u9010\u6e10\u51cf\u5c11\uff0c\u6709\u731c\u60f3\\(P=BPP\\)\uff1a\u6bd4\u65b9\u8bf4AKS\u7b97\u6cd5\u51fa\u73b0\u4e4b\u524d\uff0c\u7d20\u6027\u68c0\u6d4b\u88ab\u8ba4\u4e3a\u5c5e\u4e8eBPP\u800c\u4e0d\u5c5e\u4e8eP</p> <ul> <li>\u964d\u4f4e\u9519\u8bef(Reduce error)\uff1a</li> </ul> <p>\u53ea\u8981\u9519\u8bef\u7684\u6982\u7387\u5c0f\u4e8e1/2\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u91cd\u590d\u591a\u6b21\u540e\uff0c\u53d6majority\u7ed3\u679c\u4f5c\u4e3a\u6700\u7ec8\u7ed3\u679c\u6765\u964d\u4f4e\u9519\u8bef\u6982\u7387\uff0c\u7406\u8bba\u4f9d\u636e\u662f\u5207\u5c14\u8bfa\u592b\u754c(Chernoff bound):</p> <ul> <li>BPP \u548c ZPP\uff1a</li> </ul> <p></p> <p>\u6709\u6548\u7684\u62c9\u65af\u7ef4\u52a0\u65af\u7b97\u6cd5\u53c8\u79f0ZPP\u7c7b\uff1b\u6709\u6548\u7684\u8499\u7279\u5361\u6d1b\u7b97\u6cd5\u79f0\u4e3aBPP\u7c7b\uff1b</p> <p>\u524d\u8005\u662f\u96f6\u9519\u8bef\u6982\u7387\u591a\u9879\u5f0f\u65f6\u95f4\u671f\u671b\u7684\u6982\u7387\u7b97\u6cd5\uff1b</p> <p>\u800c\u540e\u8005\u662f\u9519\u8bef\u6982\u7387\u6709\u754c\u7684\u591a\u9879\u5f0f\u65f6\u95f4\u7b97\u6cd5\uff0c\u53c8\u5206\u4e3a\u5355\u4fa7\u9519\u8bef\u548c\u53cc\u4fa7\u9519\u8bef\uff0c\u5355\u4fa7\u9519\u8bef\u53ef\u5206\u4e3a\u5f03\u771f\u548c\u5b58\u4f2a\uff1a</p> <ul> <li> <p>\u5176\u4e2d\u6709\u6548\u7684\u5f03\u771f\u578b\u5355\u4fa7\u9519\u8bef\u968f\u673a\u7b97\u6cd5\u53c8\u79f0\u4e3aRP\u7c7b\uff1b\u5ba3\u5e03\u63a5\u53d7\\(\\Longrightarrow\\)\u4e00\u5b9a\u6b63\u786e\uff0c\u5ba3\u5e03\u62d2\u7edd\\(\\Longrightarrow\\)\u6709\u53ef\u80fd\u9519\u8bef</p> <p>\u91cd\u590d\u591a\u6b21\uff0c\u6709\u4e00\u6b21\u63a5\u53d7\u5c31\u662f\u6b63\u786e</p> </li> <li> <p>\u5176\u4e2d\u6709\u6548\u7684\u5b58\u4f2a\u578b\u5355\u4fa7\u9519\u8bef\u968f\u673a\u7b97\u6cd5\u53c8\u79f0\u4e3aco-RP\u7c7b\uff1b\u5ba3\u5e03\u62d2\u7edd\\(\\Longrightarrow\\)\u4e00\u5b9a\u6b63\u786e\uff0c\u5ba3\u5e03\u63a5\u53d7\\(\\Longrightarrow\\)\u6709\u53ef\u80fd\u9519\u8bef</p> <p>\u91cd\u590d\u591a\u6b21\uff0c\u6709\u4e00\u6b21\u62d2\u7edd\u5c31\u662f\u9519\u8bef</p> </li> </ul>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html","title":"\u5bc6\u7801\u5206\u6790\u5b66\u590d\u4e60","text":"","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#enigma","title":"Enigma\u673a","text":"","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_1","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<p>\u8bbe\u63a5\u7ebf\u677f\u5171\u6709\\(l\\)\u6839\u7ebf\uff0c\u90a3\u4e48\u5171\u6709\\(2l\\)\u4e2a\u5b57\u6bcd\u88ab\u914d\u5bf9\uff0c26\u9009\\(2l\\)\u5171\\(C_{26}^{2l}\\)\uff0c\u5373\\(\\frac{26!}{(26-2l)!\\times 2l!}\\)\uff0c\u7136\u540e\u914d\u5bf9\uff1a10 \u5bf9\u7ec4\u5408\u4e0d\u8003\u8651\u987a\u5e8f\u3001\u6bcf\u4e2a\u7ec4\u5408\u5982 a - b, b - a \u88ab\u8ba1\u7b97\u4e86\u4e24\u6b21\uff0c\u56e0\u6b64\u9664\u4ee5 \\(2^l \u00d7 l!\\)  \u6700\u7ec8\u4e3a\\(|K_1|\\)</p> <p>\u8bbe\u5171\u6709\\(m\\)\u6270\u9891\u5668\uff0c\u4ece\u4e2d\u9009\\(n\\)\u4e2a\uff0c\u6bcf\u4e2a\u6270\u9891\u5668\u521d\u59cb\u72b6\u6001\u670926\u79cd\u53ef\u80fd\uff1a\\(A_m^n\\times 26^n\\) $$ |K_1| = \\frac{26!}{(26-2l)!\\times l!\\times 2^l} $$</p> \\[ |K_2| = A_m^n\\times 26^n \\] <ul> <li>\u7a77\u641c\uff1a</li> </ul> <p>\\(|K_1 \\times K_2|\\)</p> <p><code>e.g.</code></p> <p>\u5047\u8bbe\u603b\u5171\u62e5\u670910\u6761\u8fde\u63a5\u7ebf\uff0c5\u4e2a\u6270\u9891\u5668\uff0c\u5219\u6b64\u65f6\u53ef\u80fd\u7684\u5bc6\u94a5\u4e2a\u6570</p> <p>\\(\\frac{26!}{(26-20)!\\times 2^{10}\\times 10!}\\times P_5^3 \\times 26^3\\approx 2^{67.1}\\)</p> <ul> <li>\u5206\u6cbb\uff1a</li> </ul> <p>\u4e5f\u5c31\u662f\u5148\u4e0d\u7ba1\u63a5\u7ebf\u677f\uff0c\u6839\u636eCrib\u6765\u7b5b\u9664\u6270\u9891\u5668\u8bbe\u7f6e\uff0c\u7136\u540e\u518d\u6062\u590d\u63a5\u7ebf\u677f</p> <p>\u8fd1\u4f3c \\(|K_1|+|K_2|\\)</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_2","title":"\u5dee\u5206\u653b\u51fb","text":"\u5dee\u5206\u5206\u5e03\u8868","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_3","title":"\u6784\u9020\u533a\u5206\u5668","text":"<p>\u627e\u5230\u8de8\u8d8a\u591a\u8f6e\u7684\u9ad8\u6982\u7387\u5dee\u5206</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_4","title":"\u91c7\u6837","text":"<p>\u5173\u952e\u662f\u6b63\u786e\u5bf9\u548c\u9519\u8bef\u5bf9\u7684\u6982\u5ff5\uff1a\u56e0\u4e3a\u5dee\u5206\u5f80\u5f80\u4e0d\u662f\u6982\u73871\u7684\uff0c\u56e0\u6b64\u9009\u62e9\u6ee1\u8db3\u533a\u5206\u5668\u5934\u90e8\u7684\u8f93\u5165\u5dee\u5206\uff0c\u5f97\u5230\u7684\u8f93\u51fa\u5dee\u5206\u6709\u53ef\u80fd\u4e0d\u6ee1\u8db3\u533a\u5206\u5668\u5c3e\u90e8(\u6b63\u786e\u5bc6\u94a5\u89e3\u5bc6\u4e00\u8f6e)\uff0c\u8fd9\u6837\u7684\u5bf9\u88ab\u79f0\u4e3a\u9519\u8bef\u5bf9\uff0c\u4f1a\u5bf9\u6062\u590d\u5bc6\u94a5\u4ea7\u751f\u5f71\u54cd(\u566a\u58f0)</p> <p>\u4e0b\u8868\u662f<code>\u6b63\u786e\u5bf9</code>\u548c<code>\u9519\u8bef\u5bf9</code>\u5bf9\u6b63\u786e\u5bc6\u94a5\u548c\u9519\u8bef\u5bc6\u94a5\u8ba1\u6570\u5668\u7684\u5f71\u54cd\uff1a</p> \u6b63\u786e\u5bc6\u94a5 \u9519\u8bef\u5bc6\u94a5 \u6b63\u786e\u5bf9 \u4e00\u5b9a+1 \u5e73\u5747\u6982\u7387+1 \u9519\u8bef\u5bf9 \u5e73\u5747\u6982\u7387+1 \u5e73\u5747\u6982\u7387+1","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_5","title":"\u53bb\u566a","text":"<p>\u5176\u4e3b\u8981\u601d\u60f3\u4e3a\uff1a\u505a\u5bc6\u94a5\u6062\u590d\u653b\u51fb\u65f6\u8981\u5728\u533a\u5206\u5668\u5c3e\u90e8\u4e4b\u540e\u52a0\u4e0a\u4e00\u8f6e\uff0c\u7531\u4e8e\u533a\u5206\u5668\u5c3e\u90e8\u786e\u5b9a\uff0c\u56e0\u6b64\u5bc6\u6587\u5bf9\u7684\u5dee\u5206\u53ea\u6709\u6709\u9650\u79cd\u53ef\u80fd\uff0c\u4e0d\u6ee1\u8db3\u8fd9\u4e9b\u53ef\u80fd\u7684\u4e00\u5b9a\u662f\u9519\u8bef\u5bf9\u3002</p> <ul> <li>\u533a\u5206\u5668\u5c3e\u90e8\u4e3a0\uff1a\u5bc6\u6587\u5dee\u5206\u4e00\u5b9a\u4e3a0</li> <li>\u533a\u5206\u5668\u5c3e\u90e8\u4e3a\\(\\alpha\\)\uff1a\u6839\u636e<code>DDT</code>\u67e5\u51fa\\(\\alpha\\)\u5bf9\u5e94\u7684\u8f93\u51fa\u5dee\u5206(\u5373\u5bc6\u6587\u5dee\u5206)</li> </ul> <p>\u5728\u9009\u62e9\u6ee1\u8db3\u8f93\u5165\u5dee\u5206\u7684\u660e\u6587\u5bf9\u4e4b\u540e\uff0c\u518d\u6839\u636e\u5bc6\u6587\u8f93\u51fa\u5dee\u5206\u7684\u9650\u5236\u7b5b\u9664\u6389\u9519\u8bef\u5bf9\uff0c\u4ece\u800c\u964d\u4f4e\u566a\u58f0</p> <p><code>e.g.</code></p> <p>DES S-box \u8f93\u5165\u5dee\u5206\u4e3a4\u65f6\u8f93\u51fa\u5dee\u5206\u6709\u4e24\u79cd\u53ef\u80fd\uff0c\u5219\u8fc7\u6ee4\u6982\u7387\u4e3a\uff1a</p> <p>\\(\\frac{2}{16}\\)</p> <p>\u6ce8\u610f\u8fc7\u6ee4\u4e4b\u540e\u4e0d\u5168\u662f\u6b63\u786e\u5bf9(\u867d\u7136\u5bc6\u6587\u5dee\u5206\u53ea\u6709\\(1,2,9,a\\)\u56db\u79cd\u53ef\u80fd\uff0c\u4f46\u662f\u7528\u6b63\u786e\u5bc6\u94a5\u89e3\u5bc6\u4e00\u8f6e\u540e\u5dee\u5206\u4e0d\u4e00\u5b9a\u4e3a2)\uff0c\u4f46\u662f\u6bd4\u4f8b\u5927\u5927\u63d0\u9ad8\u3002</p> <p>\u4e0d\u8fc7\u4e8b\u5b9e\u4e0a\u5229\u7528\\(a\\rightarrow 1,2,9,a\\)\u8fd9\u4e2a\u6761\u4ef6\u8fc7\u6ee4\u5e76\u6ca1\u6709\u592a\u5927\u610f\u4e49\uff0c\u56e0\u4e3a\u90a3\u4e9b\u5dee\u5206\u4e0d\u4e3a\\(1,2,9,a\\)\u7684\u5bc6\u6587\u5bf9S\u9006\u63a8\u4e0a\u53bb\u4e0d\u53ef\u80fd\u4e3a2\uff0c\u4e5f\u5c31\u4e0d\u53ef\u80fd\u7ed9\u4efb\u4f55\u5bc6\u94a5\u8ba1\u6570\u5668+1\uff0c\u5927\u6982\u53ea\u662f\u964d\u4f4e\u4e86\u65f6\u95f4\u590d\u6742\u5ea6</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_6","title":"\u6c42\u89e3\u76f8\u5173\u5bc6\u94a5\u7684\u65b9\u7a0b","text":"<p>\u5bf9\u4e8e\u5dee\u5206\u4e0d\u4e3a0\u7684S\u76d2\uff0c\u53ef\u5efa\u7acb\u4e0e\u5bc6\u94a5\u6709\u5173\u7684\u65b9\u7a0b\uff1a\\(S^{-1}(c_1\\oplus k)\\oplus S^{-1}(c_2\\oplus k) = \\Delta_{out}\\)\uff0c\u6c42\u89e3\u8be5\u65b9\u7a0b\u6709\u4e24\u79cd\u601d\u8def\uff0c\u4e3e\u4f8b\u5982\u4e0b\uff1a</p> <p>\u8bbe\u5f97\u5230\u4e24\u7ec4\u660e\u5bc6\u6587\u5bf9\\(\\{(a\\rightarrow9),(5\\rightarrow6)\\} and \\{(9\\rightarrow7),(8\\rightarrow0)\\}\\)</p> <p>\u6709S\u76d2\u9006\u8868\u5982\u4e0b\uff1a</p> <p>  \u53ef\u4ee5\u5efa\u7acb\u65b9\u7a0b\\(R(x\\oplus k_1)\\oplus R(x^*\\oplus k_1) = \\beta\\)\u4e24\u79cd\u6c42\u89e3\u6709\u5173S-box\u65b9\u7a0b\u7684\u65b9\u6cd5\uff1a</p> <ol> <li>\u7a77\u4e3e\u5bc6\u94a5\u7a7a\u95f4</li> </ol> <p></p> <ol> <li>\u5229\u7528S\u76d2\u5dee\u5206\u5206\u5e03\u8868\uff08DDT\uff09</li> </ol> <p>\u5728\u6784\u9020\u5dee\u5206\u5206\u5e03\u8868\u7684\u65f6\u5019\uff0c\u987a\u5e26\u628a<code>DDT[in,out]</code>\u5bf9\u5e94\u7684\u8f93\u5165<code>X</code>\uff0c\u8bb0\u5f55\u4e0b\u6765\uff0c\u8fd9\u6837\u4e00\u6765\\(key  = x\\oplus X\\)</p> <p></p> <p>\u5176\u5b9e\u5c31\u662f\u9884\u8bb0\u5f55\u4e86\u5f02\u6216\u5bc6\u94a5\u4e4b\u524d\u7684\u503c\uff0c\u9009\u62e9\u660e\u6587\uff0c\u52a0\u5bc6\uff0c\u5f97\u5230\u5f02\u6216\u5bc6\u94a5\u4e4b\u540e\u7684\u503c\uff0c\u4e24\u8005\u5f02\u6216\uff0c\u5373\u5f97\u5230\u5019\u9009\u5bc6\u94a5</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_7","title":"\u4fe1\u566a\u6bd4","text":"<p>\u5bf9\u4e8e\u4e00\u6761\u6982\u7387\\(p\\)\u7684\u5dee\u5206\u8def\u5f84\uff0c\u91c7\u6837\u9636\u6bb5\u91c7\\(N\\)\u4e2a\u660e\u6587\u5bf9\uff0c\u6b32\u6062\u590d\\(m\\)\u6bd4\u7279\u5bc6\u94a5\uff0c\u9519\u8bef\u5bc6\u94a5\u6ee1\u8db3\u65b9\u7a0b\u7684\u5e73\u5747\u6982\u7387\u8bb0\u4e3a\\(P_w\\)</p> <p>\u5b9a\u4e49\uff1a$S_N = $\u6b63\u786e\u5bc6\u94a5\u7684\u8ba1\u6570/\u9519\u8bef\u5bc6\u94a5\u7684\u5e73\u5747\u8ba1\u6570</p> <ul> <li>\u6b63\u786e\u5bc6\u94a5\u7684\u8ba1\u6570\uff1a\\(Np\\)</li> <li>\u9519\u8bef\u5bc6\u94a5\u7684\u8ba1\u6570\uff1a\\(\\frac{N\\cdot \\beta \\cdot \\alpha}{2^m}\\)\uff1b\u5176\u4e2d\\(\\beta \\(\u4e3a\u53bb\u566a\u9636\u6bb5\u8fc7\u6ee4\u6bd4\u4f8b\uff0c\\)\\alpha\\)\u4e3a\u53bb\u566a\u4e4b\u540e\uff0c\u6bcf\u4e2a\u5bf9\u5bf9\u5e94\u7684\u53ef\u80fd\u5019\u9009\u5bc6\u94a5\u4e2a\u6570(\u6bcf\u4e2a\u65b9\u7a0b\u7684\u89e3\u5e73\u5747\u4e2a\u6570)m\u4e3a\u6062\u590d\u6bd4\u7279\u6570</li> <li> <p>\u5173\u4e8e\\(\\alpha\\)\u7684\u7406\u89e3\uff1a\u53bb\u566a\u524d\u5dee\u5206\u4e0d\u4e3a\\(1,2,9,a\\)\u7684\u5bc6\u6587\u5bf9\u4e00\u5b9a\u4e0d\u4f1a\u6ee1\u8db3\u533a\u5206\u5668\u5c3e\u90e8\\(2\\)\uff0c\u56e0\u6b64\u5176\u5bf9\u8ba1\u6570\u5668\u5f71\u54cd\u4e00\u5b9a\u4e3a0\uff1b\u6545\u53bb\u566a\u6392\u9664\u6389\u8fd9\u4e9b\u4e4b\u540e\uff0c\u5269\u4f59\u7684\u5bf9\u5bf9\u5e94\u7684\u5019\u9009\u5bc6\u94a5\u4e00\u5b9a\u662f\u5927\u4e8e1\u7684\uff0c\u5177\u4f53\u6765\u8bf4\u5c31\u662f\u770b<code>DDT</code>\u7684\u90a3\u4e00\u884c(\u5982\u8f93\u5165\u5dee\u52062\u7684\u90a3\u4e00\u884c\u503c\u5bf9\u5e944\u79cd\u53ef\u80fd\u8f93\u51fa\u5dee\u5206)\uff0c\u6709\u51e0\u79cd\u53ef\u80fd\u5c31\u7528\u603b\u6570(cipher4\u662f\\(2^{4} = 16\\))\u9664\u4ee5\u51e0</p> </li> <li> <p>\\(S_N = \\frac{S}{N} = \\frac{Np}{N\\alpha \\beta /2^m} = \\frac{p}{p_w}\\)\uff0c\u5176\u4e2d\\(p_w\\)\u4e3a\u9519\u8bef\u5bc6\u94a5\u6ee1\u8db3\u65b9\u7a0b\u7684\u5e73\u5747\u6982\u7387</p> </li> <li>S/N\u53d6\u4e0d\u540c\u503c\u65f6\uff0c\u5bf9\u6240\u9009\u53d6\u7684\u5bf9\u6709\u591a\u5c11\u7684\u6b63\u786e\u5bf9\u4f5c\u51fa\u9650\u5236\uff0c\u4fe1\u566a\u6bd4\u8d8a\u9ad8\uff0c\u9700\u8981\u9009\u7684\u5bf9\u8d8a\u5c11</li> </ul> <p><code>e.g.</code></p> <p></p> <p></p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_8","title":"\u622a\u65ad\u5dee\u5206","text":"<p>\u5dee\u5206<code>0010</code>\u8fc7S\u76d2\u51fa\u6765\u6709\u56db\u79cd\u53ef\u80fd\\(1\u30012\u30019\u3001a\\)\uff0c4\u79cd\u53ef\u80fd\u8fc7 P\u7f6e\u6362\u540e\u53d8\u6210\u4e0b\u56fe\u6240\u793a\u56db\u79cd\u60c5\u51b5</p> <p></p> <p>\u5728\u8fd9\u91cc\u628a\u4e0d\u540c\u7684\u5730\u65b9\u7528<code>*</code>\u8868\u793a\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u6982\u73871\u6210\u7acb\u7684\u4e00\u8f6e\u622a\u65ad\u5dee\u5206\uff1a</p> <p></p> <p>\u4f46\u5982\u679c\u5728\u8fd9\u91cc\u622a\u65ad\u7684\u8bdd\uff0c\u8981\u7ee7\u7eed\u5f80\u4e0b\u6269\u5c55\u5c31\u5f88\u96be\u4e86\uff08==\u56e0\u4e3a\u53ea\u8981S\u76d2\u7684\u8f93\u5165\u6709\u4e00\u4e2a * \u8f93\u51fa\u5dee\u5206\u5c31\u65e0\u6cd5\u786e\u5b9a\u4e86\uff0c\u53d8\u62104\u4e2a *==\uff09\uff0c\u81f3\u591a\u518d\u6269\u5c55\u4e00\u8f6e\uff1a<code>0000 0000 0010 0000</code>\\(\\Longrightarrow\\)<code>00*0 0000 00*0 00*0 00*0</code>\\(\\Longrightarrow\\)<code>**0* **0* **0* **0*</code>\u3002</p> <p>\u56e0\u6b64\u8fc7\u65e9\u622a\u65ad\uff08\u6bd4\u65b9\u8bf4\u5728\u7b2c\u4e00\u8f6e\u5c31\u622a\u65ad\uff09\u4f1a\u635f\u5931\u8fc7\u591a\u7684\u4fe1\u606f\u3002</p> <p>\u5bf9\u4e8e\u4e0a\u8ff0\u4f8b\u5b50\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u5728\u7b2c1\u8f6e\u5c31\u622a\u65ad\u6210<code>00*0 0000 00*0 00*0 00*0</code>\uff0c\u800c\u662f\u904d\u5386\u7b2c1\u8f6e\u7684\u6240\u6709\u53ef\u80fd\u8f93\u51fa\u5dee\u5206\uff0c\u518d\u8fc7\u7b2c2\u8f6e\u7f6e\u6362\uff0c\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u7ed3\u679c\uff1a</p> <p></p> <p>\u8fd9\u6837\u5f97\u5230\u76842\u8f6e\u622a\u65ad\u5dee\u5206\u8f93\u51fa\u5c31\u4ece\u4e4b\u524d\u7684<code>**0* **0* **0* **0*</code> \\(\\Longrightarrow\\) <code>*0** 0000 *0** *0**</code>\uff0c\u591a\u4e863\u6bd4\u7279\u4fe1\u606f</p> <p>\u4ece2\u8f6e\u622a\u65ad\u5dee\u5206\u8f93\u51fa<code>*0** 0000 *0** *0**</code>\u518d\u5411\u4e0b\u63a8\u4e00\u8f6e\u53d8\u6210<code>**0* **0* **0* **0*</code>\u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a3\u8f6e\u622a\u65ad\u5dee\u5206\uff1a</p> <p><code>\u8f93\u5165 0000 0000 0010 0000</code>\\(\\Longrightarrow\\)<code>\u8f93\u51fa **0* **0* **0* **0*</code></p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#31cipher4","title":"3+1Cipher4\u622a\u65ad\u5dee\u5206","text":"","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_9","title":"\u6784\u9020\u533a\u5206\u5668","text":"<p>\u5982\u4e0a\uff0c\u6211\u4eec\u5df2\u7ecf\u6784\u9020\u4e86\u4e00\u4e2a\u6982\u7387\u4e3a1\u76843\u8f6e\u622a\u65ad\u5dee\u5206\u533a\u5206\u5668\uff0c\u5728\u5176\u540e\u52a0\u4e0a1\u8f6e\u53ef\u4ee5\u653b\u51fb4\u8f6e\uff083+1\uff09Cipher Four \u7b97\u6cd5</p> <p></p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_10","title":"\u91c7\u6837","text":"<p>\u4e0e\u666e\u901a\u7684\u5dee\u5206\u653b\u51fb\u76f8\u540c\uff0c\u662f\u9009\u62e9\u660e\u6587\u653b\u51fb\uff1a\u9009\u53d6\u6ee1\u8db3\u8f93\u5165\u5dee\u5206\u7684\u660e\u6587\u5bf9\u5373\u53ef</p> <p>\u5173\u4e8e\u53bb\u566a\uff1a</p> <p>\u53bb\u566a\u662f\u6839\u636e\u533a\u5206\u5668\u5c3e\u90e8\u8fc7S\u76d2\u4e4b\u540e\u7684\u4e00\u4e9b\u786e\u5b9a\u6027\u4fe1\u606f\u7b5b\u9664\u9519\u8bef\u5bf9\uff0c\u4ece\u800c\u63d0\u9ad8\u4fe1\u566a\u6bd4\u7684\u64cd\u4f5c\u3002\u4f46\u662f\u5728\u8fd9\u4e2a3\u8f6e\u622a\u65ad\u5dee\u5206\u533a\u5206\u5668\u4e2d\uff0c\u53ef\u4ee5\u770b\u5230\u8f93\u51fa\u5dee\u5206\u4e3a<code>*0** *0** *0** *0**</code>\uff0c\u6bcf\u4e2aS\u76d2\u7406\u8bba\u4e0a\u67098\u79cd\u8f93\u5165\uff0c\u5e94\u8be5\u6ca1\u6709\u4ec0\u4e48\u53ef\u4ee5\u5229\u7528\u7684\u6709\u6548\u4fe1\u606f\u4e86\u3002\u3002\u56e0\u6b64\u6ca1\u6cd5\u53bb\u566a</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_11","title":"\u5efa\u65b9\u7a0b\u6062\u590d\u5bc6\u94a5","text":"<p>\u904d\u5386\u5bc6\u94a5\u7a7a\u95f4\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u731c\u6d4b\u5bc6\u94a5\uff0c\u904d\u5386\u6240\u6709\u5bc6\u6587\u5bf9\uff0c\u5f80\u4e0a\u63a8\u4e00\u8f6e\uff0c\u63a8\u5230\u533a\u5206\u5668\u5c3e\u90e8\uff0c\u5982\u679c\u4e0d\u6ee1\u8db3\u533a\u5206\u5668\u8f93\u51fa\u5dee\u5206\u5219\u76f4\u63a5\u6392\u9664\uff08\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u6982\u73871\u6210\u7acb \u7684\u4e8b\u4ef6\uff09\u3002</p> <p>\u8fd8\u6709\u5fc5\u8981\u8bbe\u8ba1\u6570\u5668\u4e48\uff1f\u8fd8\u662f\u9700\u8981\u8bbe\u8ba1\u6570\u5668\u7684\u3002\u867d\u7136\u4f7f\u7528\u622a\u65ad\u5dee\u5206\u5f88\u5bb9\u6613\u7b5b\u9664\u731c\u9519\u7684\u9519\u8bef\u5bc6\u94a5\uff1a\u53ea\u8981\u8ba1\u6570\u5668\u503c\u5c0f\u4e8e\u9009\u62e9\u660e\u6587\u5bf9\u7684\u6570\u91cf\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u6392\u9664\u3002\u4f46\u662f\u5982\u679c\u9009\u62e9\u660e\u6587\u5bf9\u6570\u91cf\u6bd4\u8f83\u5c11\u8fd8\u662f\u6709\u4f1a\u51fa\u9519\uff0c\u6240\u4ee5\u8fd8\u662f\u8981\u8bbe\u7f6e\u4e00\u4e2a\u8ba1\u6570\u5668\u3002</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#131cipher4","title":"1+3+1Cipher4\u622a\u65ad\u5dee\u5206(\u91cd\u70b9)","text":"","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_12","title":"\u6784\u9020\u533a\u5206\u5668","text":"","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_13","title":"\u91c7\u6837","text":"<p>\u56e0\u4e3a\u5728\u5934\u90e8\u52a0\u4e86\u4e00\u8f6e\uff0c\u56e0\u6b64\u9700\u8981\u9009\u62e9\u5408\u9002\u7684\u660e\u6587\u5bf9\u2014\u2014\u8fd9\u4e9b\u660e\u6587\u5bf9\u5728\u4e00\u8f6e\u52a0\u5bc6\u4e4b\u540e\u6ee1\u8db3\u8f93\u5165\u5dee\u5206\u3002\u8be5\u5982\u4f55\u9009\u62e9\u8fd9\u6837\u7684\u660e\u6587\u5462\uff1f</p> <p>\u628a\u533a\u5206\u5668\u5934\u90e8\u5f80\u4e0a\u63a8\u5230\u7b2c\u4e00\u8f6eS\u76d2\u8f93\u51fa\uff0c\u53ef\u77e5\u82e5\u8981\u5f97\u5230\u8fd9\u6837\u7684\u8f93\u51fa\uff0c\u5219\u8f93\u5165\u5dee\u5206\u5e94\u5f53\u662f<code>0000 0000 **** 0000</code></p> <p>\u56e0\u6b64\u53ef\u4ee5\u5148\u4e0d\u5173\u5fc3\u5176\u5b8312\u6bd4\u7279\uff0c\u6216\u8005\u8bf4\u628a12\u6bd4\u7279\u5148\u5b9a\u4e0b\u6765\uff0c\u4e0e\u4e2d\u95f4\u53d8\u5316\u76844\u6bd4\u7279\u7ec4\u6210\u4e00\u4e2a\u7ed3\u6784\u4f53\uff08\u8fd9\u6837\u7684\u4e00\u4e2a\u7ed3\u6784\u4f53\u5305\u542b\\(2^4\\)\u4e2a\u660e\u6587\uff09\u8fd9\u6837\u7684\u4e00\u4e2a\u7ed3\u6784\u4f53\u4e2d\u4efb\u610f\u4e24\u4e2a\u5dee\u5206\u90fd\u662f<code>0000 0000 **** 0000</code>\u3002\u800c\u5982\u679c\u6211\u4eec\u662f\u968f\u673a\u9009\u7684\u8bdd\uff0c\u786e\u5b9an\u4e2a\u660e\u6587\u5bf9\u9700\u89812n\u7684\u660e\u6587\u91cf\u3002\u8fd9\u6837\u63d0\u9ad8\u4e86\u660e\u6587\u7684\u5229\u7528\u7387\u3002</p> <p>\u4f46\u662f\u4e2d\u95f4\u8fd8\u6709\u4e00\u5c42\u5bc6\u94a5\uff0c\u56e0\u6b64\u8fd8\u8981\u731c\u6d4b\\(K_{0,2}\\)\uff0c\u5728\u56fa\u5b9a\u4e86\u7b2c\u4e00\u8f6eS\u76d2\u8f93\u51fa\u5dee\u5206\u4e4b\u540e\uff0c\u5bf9\u4e8e\\(K_{0,2}\\)\u7684\u6bcf\u4e00\u4e2a\u731c\u6d4b\uff0c\u6bcf\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0816\u4e2a\u660e\u6587\uff09\u53ef\u4ee5\u914d\u5bf9\u914d\u62108\u4e2a\u660e\u6587\u5bf9\u3002</p> <p>\u7136\u540e\u5bf9\u8fd9\u4e9b\u660e\u6587\u5bf9\u52a0\u5bc6\u5f97\u5230\u76f8\u5e94\u7684\u5bc6\u6587\u5bf9\u3002</p> <p>\u4e0e\u4e0a\u4e00\u8282\u76f8\u540c\uff0c\u5bf9\u4e8e\u5982<code>*0** *0** *0** *0**</code>\u8fd9\u6837\u7684\u533a\u5206\u5668\u5c3e\u90e8\u5dee\u5206\u5f88\u96be\u53bb\u566a</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_14","title":"\u5efa\u65b9\u7a0b\u6062\u590d\u5bc6\u94a5","text":"<p>\u4ee5<code>0000 0000 0010 0000</code>\\(\\Longrightarrow\\)<code>*0** *0** *0** *0**</code>\u7684\u4e09\u8f6e\u533a\u5206\u5668\uff0c\u5728\u5176\u5934\u5c3e\u5404\u52a0\u4e00\u8f6e\u4e3a\u4f8b\uff1a</p> <p>(\u8fd9\u4e2a\u4f8b\u5b50\u8bf4\u660e\u4e86\u6b63\u786e\u7387\u7684\u5224\u65ad\u4f9d\u8d56\u4e8e\\(K_{0,2}\\)\u7684\u731c\u6d4b)</p> <p>\u8bbe\u9009\u62e9\u660e\u6587\u5bf9\u7684\u6570\u91cf\u4e3a\\(x\\)\uff0c\u5c1d\u8bd5\u6062\u590d\\(K_{0,2}\\)\u548c\\(K_{5,0}\\)\uff08\u5f53\u7136\u53ef\u4ee5\u76f4\u63a5\u6062\u590d\\(K_5\\)\uff09</p> <ul> <li>\u5982\u679c\\(K_{0,2}\\)\u731c\u5bf9\u2014\u2014\u5219\u5f97\u5230\u7684\u90fd\u662f\u6b63\u786e\u5bf9</li> <li>\u82e5\\(K_{5,0}\\)\u731c\u5bf9\uff0c\u5219\u5bc6\u6587\u5bf9\u7684\u6700\u9ad8\u4f4d4\u6bd4\u7279\u4e00\u8f6e\u89e3\u5bc6\u540e\uff0c\u4ee5\u6982\u73871\u6ee1\u8db3\u533a\u5206\u5668\u5c3e\u90e8<code>*0**</code>\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff08\\(K_{0,2}\\)\u731c\u5bf9 \u4e14 \\(K_{5,0}\\)\u731c\u5bf9\uff09\\(K_{5,0}\\)\u7684\u8ba1\u6570\u5668\u6570\u503c\u4e00\u5b9a\u7b49\u4e8e\\(x\\)\uff1b</li> <li>\u82e5\\(K_{5,0}\\)\u731c\u9519\uff0c\u5219\u5bc6\u6587\u5bf9\u7684\u6700\u9ad8\u4f4d4\u6bd4\u7279\u4e00\u8f6e\u89e3\u5bc6\u540e\uff0c\u4ee5\u968f\u673a\u6982\u7387\uff08\\(\\frac{1}{2}\\)\uff09\u6ee1\u8db3\u533a\u5206\u5668\u5c3e\u90e8\uff0c\u5219\\(K_{5,0}\\)\u7684\u8ba1\u6570\u5668\u6570\u503c\u5927\u6982\u7387\u5c0f\u4e8e\\(x\\)\uff08\u5176\u671f\u671b\u503c\u662f\\(\\frac{x}{2}\\)\uff09</li> <li>\u5982\u679c\\(K_{0,2}\\)\u731c\u9519\u2014\u2014\u5219\u5f97\u5230\u7684\u90fd\u662f\u9519\u8bef\u5bf9</li> <li>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u65e0\u8bba\\(K_{5,0}\\)\u662f\u5426\u731c\u5bf9\uff0c\u5f80\u4e0a\u89e3\u5bc6\u4e00\u8f6e\uff0c\u5e73\u5747\u610f\u4e49\u4e0b\u5e94\u8be5\u662f\u4ee5\u968f\u673a\u6982\u7387\uff08\\(\\frac{1}{2}\\)\uff09\u6ee1\u8db3\u533a\u5206\u5668\u5c3e\u90e8\u5dee\u5206\u3002\u6240\u4ee5\uff0c\u5bf9\u4e8e\u4e00\u4e2a\\(K_{0,2}\\)\u731c\u6d4b\uff0c\u5982\u679c\u904d\u5386\\(K_{5,0}\\)\uff0c\u6240\u6709\u8ba1\u6570\u5668\u7684\u503c\u5747\u5c0f\u4e8e\\(x\\)\uff0c\u5219\u8bf4\u660e\\(K_{2}\\)\u4e00\u5b9a\u731c\u9519\u4e86</li> </ul> <p>\u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u53ef\u4ee5\u6062\u590d\\(K_5\\)16\u6bd4\u7279\u548c\\(K_0\\)\u76844\u6bd4\u7279\\(K_{0,2}\\)\uff0c\u5171\u8ba120\u6bd4\u7279\u5bc6\u94a5</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_15","title":"\u56de\u98de\u68d2\u653b\u51fb","text":"<p>\u662f\u4e00\u79cd\u9009\u62e9\u660e\u5bc6\u6587\u653b\u51fb</p> <p>\u5176\u8fc7\u7a0b\u5982\u56fe\u6240\u793a\uff1a</p> <p></p> <ul> <li>\u9009\u62e9\u660e\u6587\\((m1,m2)\\)\u6ee1\u8db3\\(m_1\\oplus m_2 = \\alpha\\)\uff0c\u5f80\u4e0b\u63a8\u4e00\u8f6e\\(x_1 \\oplus x_2 = \\beta\\)\u4ee5\u6982\u7387\\(p_1\\)\u6210\u7acb</li> <li>A\u662f\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362\uff0c\u56e0\u6b64\\(y_1 \\oplus y_2 = \\beta\\)\u4ee5\u6982\u7387\\(p_1\\)\u6210\u7acb</li> <li>\u9009\u62e9\u5bc6\u6587\\((c_3,c_4)\\)\u6ee1\u8db3\\(c_1\\oplus c_3 = c_2\\oplus c_4 = \\gamma\\)\uff0c\u5f80\u4e0a\u63a8\u4e00\u8f6e\\(y_1 \\oplus y_3 = \\Phi,~y_2 \\oplus y_4 = \\Phi\\)\u5206\u522b\u4ee5\u6982\u7387\\(q\\)\u6210\u7acb\uff0c\u8fd9\u4e00\u6b65\u7efc\u5408\u6982\u7387\u662f\\(q^2\\)</li> <li>\u5728y\u8fd9\u4e00\u5c42\u6709\\(\\Longrightarrow y_1\\oplus y_3 \\oplus y_2 \\oplus y_4 = \\Phi \\oplus \\Phi = 0 \\Longrightarrow y_1\\oplus y_2  = y_3 \\oplus y_4\\)</li> <li>\u5f80\u4e0a\u63a8\u4e00\u5c42\\(x_1\\oplus x_2  = x_3 \\oplus x_4  = \\beta \\Longrightarrow m_3 \\oplus m_4 = \\alpha\\)\u7bad\u5934\u53f3\u8fb9\u4ee5\u6982\u7387\\(p_2\\)\u6210\u7acb</li> </ul> <p>\u4f46\u4e0a\u8ff0\u8fc7\u7a0b\u4e2d\u6709\u4e24\u4e2a\u5730\u65b9\u53ef\u4ee5\u6539\u8fdb\uff1a</p> <ul> <li>\u8981\u4f7f\u5f97\\(y_1\\oplus y_3 \\oplus y_2 \\oplus y_4  = 0\\)\uff0c\u53ea\u9700\u8981\\(y_1\\oplus y_3 = y_2 \\oplus y_4\\)\uff0c\u4e0d\u4e00\u5b9a\u975e\u8981\u7b49\u4e8e\\(\\Phi\\)\uff0c\u6216\u8005\u8bf4\\(\\Phi\\)\u53ef\u4ee5\u6709\u591a\u79cd\u53d6\u503c\u3002\u56e0\u6b64\u5728\u786e\u5b9a\u8f93\u5165\u5dee\u5206\u4e3a\\(\\alpha\\)\u4e4b\u540e\uff1a\u9009\u62e9\u6ee1\u8db3\u8f93\u5165\u5dee\u5206\u7684\u660e\u6587\\(m_1\\oplus m_2 = \\alpha\\)\uff0c\u5f97\u5230\u76f8\u5e94\u7684\u5bc6\u6587\uff1b\u7136\u540e\u9009\u62e9\u5bc6\u6587\\((c_3,c_4)\\)\u6ee1\u8db3\\(c_1\\oplus c_3 = c_2\\oplus c_4 = \\gamma\\)\u5404\u81ea\u5411\u4e0a\u89e3\u5bc6\u4e00\u8f6e\uff0c\u8fd9\u91cc\u53ea\u8981\u6ee1\u8db3\\(y_1\\oplus y_3 = y_2 \\oplus y_4\\)\uff0c\u800c\u65e0\u9700\u662f\u4e00\u4e2a\u7279\u5b9a\u503c\uff0c\u6545\u8fd9\u91cc\u7684\u6982\u7387\u7531\u539f\u6765\\(Pr = q^2:(\\gamma\\rightarrow\\Phi)^2\\)\u53d8\u4e3a\\(Pr = \\sum q_i^2:\\sum (\\gamma\\rightarrow\\Phi_i)^2\\)\uff08\u5c31\u662f\u53d6<code>DDT</code>\u79cd\\(\\gamma\\)\u90a3\u4e00\u884c\u6240\u6709\u6982\u7387\u5e73\u65b9\u6c42\u548c\uff09</li> <li>\u7c7b\u4f3c\u7684\uff0c\\(\\beta\\)\u4e5f\u4e0d\u662f\u4e00\u4e2a\u56fa\u5b9a\u7684\u53d6\u503c\uff0c\u8fd9\u6837\u4e00\u6765\uff0c\\(p_1,p_2\\)\u7684\u6982\u7387\u4e5f\u53d8\u4e3a\u6240\u6709\u7684\u8def\u7ebf\u6982\u7387\u603b\u548c\uff1a\\(p_1p_2 = \\sum Pr(\\alpha\\rightarrow \\beta_i)Pr(\\beta_i \\rightarrow \\alpha)\\)</li> </ul>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_16","title":"\u533a\u5206\u5668","text":"<p>\uff08\u4ee5\u672a\u6539\u8fdb\u7248\u4e3a\u4f8b\uff1a\uff09\u9009\u62e9\u660e\u6587\\((m1,m2)\\)\u6ee1\u8db3\\(m_1\\oplus m_2 = \\alpha\\)\uff0c\u5e76\u5f97\u5230\u76f8\u5e94\u7684\u5bc6\u6587\\(\uff08c_1,c_2\uff09\\)\u7136\u540e\u9009\u62e9\u5bc6\u6587\\((c_3,c_4)\\)\u6ee1\u8db3\\(c_1\\oplus c_3 = c_2\\oplus c_4 = \\gamma\\)\u5411\u4e0a\u4e0a\u89e3\u5bc6\u4e24\u8f6e\u5f97\u5230\\((m_3,m_4)\\)\uff0c\u5219\u6709\uff1a</p> <ul> <li>\u5982\u679c\u662f\u968f\u673a\u7f6e\u6362\uff1a\\(m_3 \\oplus m_4 = \\alpha\\)\u4ee5\u968f\u673a\u6982\u7387\u6210\u7acb</li> <li>\u5982\u679c\u662f\u52a0\u5bc6\u7b97\u6cd5\uff0c\u5219\u4ee5\u6982\u7387\\(p_1 q^2 p_2\\)\u6210\u7acb</li> </ul>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_17","title":"\u589e\u5f3a\u7684\u56de\u98de\u68d2\u653b\u51fb","text":"<p>\u628a\u9009\u62e9\u660e\u5bc6\u6587\u6539\u6210\u4e86\u9009\u62e9\u660e\u6587</p> <p></p> <ul> <li>\u9009\u62e9\u660e\u6587\\((m1,m2)\\)\u6ee1\u8db3\\(m_1\\oplus m_2 = \\alpha\\)\uff0c\\(m_3\\oplus m_4 = \\alpha\\) </li> <li>\u5f80\u4e0b\u63a8\u4e00\u8f6e\\(x_1 \\oplus x_2 = \\beta~~, ~~x_3 \\oplus x_4 = \\beta\\)\u540c\u65f6\u6210\u7acb\u7684\u6982\u7387\uff1a\\(p^2\\)\u6210\u7acb\uff0c\u82e5\u6761\u4ef6\u6ee1\u8db3\uff0c\u5219\u6709\\(x_1 \\oplus x_2 \\oplus x_3 \\oplus x_4 = 0\\)</li> <li>\u8fc7A\u4e4b\u540e\u5fc5\u6709\\(y_1 \\oplus y_3 = y_2 \\oplus y_4\\)\uff0c\\(y_1 \\oplus y_3 = \\Phi\\)\u7684\u6982\u7387\u4e3a\u968f\u673a\u6982\u7387\\(2^{-n}\\)</li> <li>\u518d\u63a8\u5230\\(c_1\\oplus c_3 = c_2\\oplus c_4 = \\gamma\\)\uff0c\u6982\u7387\\(q^2\\)\u6210\u7acb</li> </ul> <p>\u5982\u679c\u662f\u968f\u673a\u6982\u7387\uff1a\\(2^{-2n}\\)\uff0c\u5982\u679c\u5b58\u5728\u9ad8\u6982\u7387\u5dee\u5206\u8def\u7ebf\u4e0a\u8ff0\u6982\u7387\u4e3a\\(p^2q^22^{-n}\\)</p> <p>\u56e0\u6b64\u9700\u8981\\(pq&gt;2^{-\\frac{n}{2}}\\)\uff0c\u5f53\u7136\u53ef\u4ee5\u6309\u7167\u4e0a\u4e00\u8282\u4e2d\u7684\u65b9\u6cd5\u63d0\u5347\u6982\u7387\uff0c\u540c\u7406\u3002</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_18","title":"\u77e9\u5f62\u653b\u51fb","text":"","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_19","title":"\u4e0d\u53ef\u80fd\u5dee\u5206","text":"<p>\u5bf9r\u8f6e\u52a0\u5bc6\u7684\u5bc6\u7801\u7b97\u6cd5\u8fdb\u884c\u4e0d\u53ef\u80fd\u5dee\u5206\u5206\u6790\u7684\u6d41\u7a0b\uff1a</p> <ul> <li>\u5bfb\u627er-1\u8f6e\u4e0d\u53ef\u80fd\u5dee\u5206\\(\\Delta_{in}\\nrightarrow \\Delta_{out}\\)</li> <li>\u9009\u62e9\u6ee1\u8db3\u8f93\u5165\u5dee\u5206\u4e3a\\(\\Delta_{in}\\)\u7684\u660e\u6587\u5bf9(\\(P,P\\oplus\\Delta_{in}\\))\uff0c\u5e76\u8fdb\u884cr\u8f6e\u52a0\u5bc6\uff0c\u6240\u5f97\u5bc6\u6587\u5bf9\u8bb0\u4e3a\\(C~~and~~C^*\\)</li> <li>\u6839\u636e \\(\\Delta_{out}\\)\u5bf9\u5bc6\u6587\u5bf9\u8fdb\u884c\u7b5b\u9009\uff08\u53bb\u566a\uff09</li> <li>\u731c\u6d4b\u7b2c\\(r\\)\u8f6e\u8f6e\u5bc6\u94a5\\(K_r\\)\uff0c\u5bf9\\(C~~and~~C^*\\)\u89e3\u5bc6\u4e00\u8f6e\u5230\u533a\u5206\u5668\u5c3e\u90e8\uff0c\u6240\u5f97\u7684\u4e2d\u95f4\u503c\u8bb0\u4e3a\\(D~~and~~D^*\\)\uff0c\u5224\u65ad$D\\oplus D^* =\\Delta_{out} $ \u662f\u5426\u6210\u7acb\uff0c\u82e5\u6210\u7acb\uff0c\u5219\u5bf9\u5e94\u7684\u731c\u6d4b\u503c\u4e00\u5b9a\u662f\u9519\u8bef\u5bc6\u94a5\uff0c\u5c06\u5176\u4ece\u5bc6\u94a5\u7a7a\u95f4\u4e2d\u6392\u9664\uff1b</li> <li>\u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\uff0c\u5bc6\u94a5\u7a7a\u95f4\u4e2d\u53ea\u6709\u4e00\u4e2a\u5bc6\u94a5\u4e3a\u6b62\uff0c\u8be5\u5bc6\u94a5\u5373\u662f\u6b63\u786e\u5bc6\u94a5</li> </ul>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_20","title":"\u6784\u9020\u533a\u5206\u5668\uff08\u91cd\u70b9\uff09","text":"<p>\u4e0d\u53ef\u80fd\u5dee\u5206\u5927\u90e8\u5206\u65f6\u95f4\u5728\u8bb2\u641c\u7d22\u4e0d\u53ef\u80fd\u5dee\u5206\u8def\u5f84\u7684\\(\\mu\\)\u7b97\u6cd5\u3002</p> <p></p> <p>\u4e0b\u56fe\u5c55\u793a\u4e86\u4e00\u4e2a\u4e0d\u53ef\u80fd\u5dee\u5206\u8def\u5f84\uff1a\u8f93\u5165\u4e3a\\((\\alpha,0)\\)\u8f93\u51fa\u4e3a\\((0,\\alpha)\\)\uff0c\u4ece\u4e0a\u5f80\u4e0b\u63a8\u4e24\u8f6e\u5f97\u5230\\((\\alpha,\\beta)\\)\u5176\u4e2d\\(\\beta\\)\u4e3a\u975e\u96f6\u4f46\u53d6\u503c\u4e0d\u786e\u5b9a\u5dee\u5206\u3002\u4ece\u4e0b\u5f80\u4e0a\u63a8\u4e09\u8f6e\u5219\u53ef\u4ee5\u5f97\u5230\\((\\alpha\\oplus \\delta,\\gamma)\\)\u5176\u4e2d\\(\\delta\\)\u4e3a\u975e\u96f6\u4f46\u53d6\u503c\u4e0d\u786e\u5b9a\u5dee\u5206\uff0c\u5176\u4e0e\\(\\alpha\\)\u80af\u5b9a\u4e0d\u540c\uff0c\u6545\u63a8\u51fa\u77db\u76fe\uff0c\u5f97\u5230\u4e00\u6761\u4e0d\u53ef\u80fd\u5dee\u5206\u8def\u5f84\u3002</p> <p>\u63a5\u4e0b\u6765\u662f\u81ea\u52a8\u641c\u7d22\\(\\mu\\)\u7b97\u6cd5\uff0c\u53ea\u4e0e\u7b97\u6cd5\u7ed3\u6784\u6709\u5173\uff0c\u4e0e\u7b97\u6cd5\u6240\u91c7\u7528\u7684\u5177\u4f53S\u76d2\u65e0\u5173\uff1a</p> <p>5\u79cd\u7b26\u53f7\uff1a</p> \u8f93\u5165 \u5bf9\u5e94\u5dee\u5206\u5f62\u5f0f 0 0\u5dee\u5206 1 \u975e\u96f6\u4e14\u53d6\u503c\u4e0d\u786e\u5b9a\u7684\u5dee\u5206 1* \u975e\u96f6\u4e14\u53d6\u503c\u56fa\u5b9a\u7684\u5dee\u5206(\u63a8\u5bfc\u4e2d\u7684\u8f93\u5165\u72b6\u6001) 2* \\(1^* \\oplus 1\\)\uff0c\u5373\u53d6\u503c\u975e\\(1^*\\)\u7684\u5dee\u5206(\u53ef\u80fd\u4e3a0) 3\uff0c\uff1f \u4e0d\u786e\u5b9a\u5dee\u5206 <p>\u77db\u76fe\u96c6\u5408\uff1a</p> \u96c6\u5408 \u77db\u76fe\u96c6\u5408 0 \\(1\\)\uff0c\\(1^*\\) 1 \\(0\\)\uff0c 1* \\(0\\)\uff0c\\(1^*\\)\uff0c\\(2^*\\) 2* \\(1*\\) <p>\u4f20\u64ad\u89c4\u5219\uff1a</p> \u96c6\u5408 \u8fc7S\u76d2 \u5f02\u6216\u8fd0\u7b97 0 0 \\(0\\oplus s = s\\)(\u5176\u4e2d\\(s\\)\u4ee3\u8868\\(\\{0,1,1^*,2^*,3\\}\\)\uff0c\u4e0b\u540c) 1 1 \\(1\\oplus 1 = 3,~~1\\oplus 1^* = 2^*,~~1\\oplus 2^* = 3\\) 1* 1 \\(1^*\\oplus 1^* = 3,~~1^*\\oplus 2^* = 3\\),(==\u6ce8\u610f\u8fd9\u91cc\u7684\u7406\u89e3==) 2* 3 \\(2^*\\oplus 2^* = 3\\) <p>\u63a8\u5bfc\u4e0b\u5217\u7ed3\u6784\u4e0d\u53ef\u80fd\u5dee\u5206\uff1a</p> <p></p> <p></p> <p>\u5176\u5927\u81f4\u8fc7\u7a0b\u5982\u4e0b\uff1a</p> <p>\u8f93\u5165\u5dee\u5206\u904d\u5386\\([0,1,1*,2*]\\)\uff0c\u5f80\u4e0b\u63a8\u5230\\((3,3)\\)\u4e4b\u524d</p> <pre><code>for (const string&amp; l : DIFF) {          // \u904d\u53860\uff0c1\uff0c1*\uff0c2*\nfor (const string&amp; r : DIFF) {      // \u904d\u53860\uff0c1\uff0c1*\uff0c2* \nstring _l = l, _r = r, tmp;\nret.clear();\nwhile(true) {\ntmp = _r;\n_r = _xor(_sfn(_r), _l);\n_l = tmp;\nif (_l == \"3\" &amp;&amp; _r == \"3\") break;\nret.emplace_back(_l, _r);\n}\nres.emplace_back(ret);\n}\n}\n</code></pre> <p>\u8f93\u51fa\u5dee\u5206\u904d\u5386\\([0,1,1*,2*]\\)\uff0c\u5f80\u4e0a\u63a8\u5230\\((3,3)\\)\u4e4b\u524d</p> <p>\u628a\u8f93\u5165\u8f93\u51fa\u5dee\u5206\\((\\alpha,\\beta)\\)\u63a8\u51fa\u6765\u7684\u8868\u9519\u4f4d\u5bf9\u6bd4\uff0c\u6839\u636e\u77db\u76fe\u5173\u7cfb\u5224\u65ad\u4e2d\u95f4\u72b6\u6001\u662f\u5426\u5b58\u5728\u77db\u76fe\uff0c\u5982\u679c\u5b58\u5728\u77db\u76fe\uff0c\u5219\u5f97\u5230\u4e00\u6761\\(\\alpha\\rightarrow\\beta\\)\u7684\u4e0d\u53ef\u80fd\u5dee\u5206\u8def\u5f84</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_21","title":"\u91c7\u6837","text":"<p>\u9009\u62e9\u6ee1\u8db3\u8f93\u5165\u5dee\u5206\u7684\u660e\u6587\u5bf9\uff0c\u5f97\u5230\u76f8\u5e94\u5bc6\u6587\uff0c\u91c7\u6837\u7684\u65f6\u5019\u53ef\u4ee5\u7c7b\u4f3c\u622a\u65ad\u5dee\u5206</p> <p></p> <p>\u4e0e\u622a\u65ad\u7565\u6709\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u8fd9\u91cc\\(\\alpha\\)\u53ef\u4ee5\u53d6\u904d\u6240\u6709\u975e0\uff0c\u6545\u8fd9\u91cc\u5bf9\u4e8e\\(2^{\\frac{b}{2}}\\)\u4e2a\u6d88\u606f\uff0c\u5171\\(2^{\\frac{b}{2}}\\times 2^{\\frac{b}{2}-1} = 2^{b-1}\\)\u5bf9</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_22","title":"\u53bb\u566a","text":"<p>\u786e\u5b9a\u8f93\u51fa\u5dee\u5206\u540e\uff08\u6216\u8f93\u51fa\u5dee\u5206\u67d0\u4e00\u90e8\u5206\uff09\uff0c\u53ef\u4ee5\u6839\u636e\u5df2\u77e5\u7684\u90e8\u5206\u8fdb\u884c\u53bb\u566a\uff0c\u4e0e\u666e\u901a\u7684\u5dee\u5206\u5206\u6790\u76f8\u540c\uff0c</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_23","title":"\u6062\u590d\u5bc6\u94a5","text":"<ul> <li>\u5bf9\u4e8e\u6b63\u786e\u7684\u731c\u6d4b\uff0c\u4e0d\u53ef\u80fd\u63a8\u5230\u533a\u5206\u5668\u5c3e\u90e8\uff1b</li> <li>\u5bf9\u4e8e\u9519\u8bef\u7684\u731c\u6d4b\uff0c\u4ee5\u968f\u673a\u6982\u7387\u63a8\u5230\u533a\u5206\u5668\u5c3e\u90e8</li> </ul>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_24","title":"\u7ebf\u6027\u653b\u51fb","text":"","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_25","title":"\u533a\u5206\u5668","text":"<p>\u627e\u5230\u4e00\u4e2ar\u8f6e\u7684\u7ebf\u6027\u903c\u8fd1\u5f0f\\((dm \\oplus dy) \\oplus (dk_0\\oplus dk_1\\oplus dk_2) = 0\\)\uff0c\u504f\u5dee\u4e3a\u6b63\u8868\u793a\u8f93\u5165\u5185\u79ef=\u8f93\u51fa\u5185\u79ef\u4e3a\u9ad8\u6982\u7387\u4e8b\u4ef6(\u5927\u4e8e1/2)\uff1b \u4e3a\u8d1f\u53cd\u4e4b</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_26","title":"\u91c7\u6837","text":"<p>\u7ebf\u6027\u5206\u6790\u662f\u5df2\u77e5\u660e\u6587\u653b\u51fb</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_27","title":"\u6062\u590d\u5bc6\u94a5","text":"","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#1","title":"\u7b97\u6cd51","text":"<p>\u627e\u5230\u7ebf\u6027\u903c\u8fd1\u5f0f\uff1a\\((dm \\oplus dy) \\oplus (dk_0\\oplus dk_1\\oplus dk_2) = 0\\)\u53ca\u5176\u504f\u5dee</p> <ul> <li>\u6839\u636e\u5df2\u77e5\u660e\u6587\\(x\\)\u5f97\u5230\u5bc6\u6587\\(y\\)\uff0c\u5e76\u7edf\u8ba1\\((dm \\oplus dy) = 0\\)\u7684\u8ba1\u6570</li> <li>\u901a\u8fc7\u8be5\u8ba1\u6570\u6062\u590d\u5bc6\u94a5\u76841\u6bd4\u7279\u4fe1\u606f(\u6839\u636e\u504f\u5dee\u548c\u7edf\u8ba1\u60c5\u51b5\u5206\u60c5\u51b5)\uff1a</li> <li>\u504f\u5dee\u4e3a\u6b63(\u8bf4\u660e\\((dm \\oplus dy)\\)\u4e0e\\((dk_0\\oplus dk_1\\oplus dk_2)\\)\u4ee5\u5927\u4e8e\\(\\frac{1}{2}\\)\u6982\u7387\u76f8\u7b49)\uff1a<ul> <li>\u8ba1\u6570\u5927\u4e8e\\(N/2\\)\uff0c\u5219\u6709\\((dk_0\\oplus dk_1\\oplus dk_2) = 0\\)\uff1b</li> <li>\u8ba1\u6570\u5c0f\u4e8e\\(N/2\\)\uff0c\u5219\u6709\\((dk_0\\oplus dk_1\\oplus dk_2) = 1\\)\uff1b</li> </ul> </li> <li>\u504f\u5dee\u4e3a\u8d1f(\u8bf4\u660e\\((dm \\oplus dy)\\)\u4e0e\\((dk_0\\oplus dk_1\\oplus dk_2)\\)\u4ee5\u5927\u4e8e\\(\\frac{1}{2}\\)\u6982\u7387\u4e0d\u7b49)\uff1a<ul> <li>\u8ba1\u6570\u5927\u4e8e\\(N/2\\)\uff0c\u5219\u6709\\((dk_0\\oplus dk_1\\oplus dk_2) = 1\\)\uff1b</li> <li>\u8ba1\u6570\u5c0f\u4e8e\\(N/2\\)\uff0c\u5219\u6709\\((dk_0\\oplus dk_1\\oplus dk_2) = 0\\)\uff1b</li> </ul> </li> </ul>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#2","title":"\u7b97\u6cd52","text":"<p>\u6709\u4f4d\u540c\u5b66\u4e4b\u524d\u63d0\u4e86\u4e00\u4e2a\u7ebf\u6027\u5206\u6790\u7b97\u6cd52\u7684\u95ee\u9898\uff0c\u5c31\u662f\u4e3a\u4ec0\u4e48\u6b63\u786e\u5bc6\u94a5\u7684\u5224\u65ad\u4f9d\u636e\u662f\u770b\u504f\u5dee\u5927\u7684\u800c\u4e0d\u662f\u548c\u63a8\u5bfc\u5206\u6790\u51fa\u6765\u7684$ \\epsilon$\u63a5\u8fd1\u7684\uff0c\u4eca\u5929\u8bf7\u6559\u4e86\u4e00\u4e0b\u5176\u4ed6\u8001\u5e08\uff0c\u8bf4\u7ebf\u6027\u548c\u5dee\u5206\u7c7b\u4f3c\uff0c\u90fd\u662f\u627e\u5230\u504f\u5dee\u6216\u6982\u7387\u8f83\u5927\u7684\u4ee5\u540e\uff0c\u5728\u731c\u6d4b\u5bc6\u94a5\u9636\u6bb5\u5c31\u6309\u7167\u504f\u79bb\u7a0b\u5ea6\u5927\u5c0f\u6765\u6392\u5e8f\u4e86\uff0c\u504f\u5dee\u5927\u7684\u5bf9\u5e94\u6b63\u786e\u5bc6\u94a5\u3002\u4e3b\u8981\u56e0\u4e3a\u6211\u4eec\u63a8\u5bfc\u51fa\u6765\u7684\u504f\u5dee\u5e76\u4e0d\u662f\u5168\u90e8\u60c5\u51b5\uff0c\u800c\u4e14\u53ea\u662f\u4e00\u4e2a\u671f\u671b\u7684\u7ed3\u679c\uff0c\u504f\u5dee\u672c\u8eab\u4e5f\u662f\u5b58\u5728\u5206\u5e03\u7684\uff0c\u8ba4\u4e3a\u8fdc\u79bb\u968f\u673a\u73b0\u8c61\u503e\u5411\u4e8e\u6b63\u786e</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_28","title":"\u5806\u79ef\u5f15\u7406","text":"<p>\u8bb0\\(X_i (1\u2264i\u2264n)\\)\u4e3a\u72ec\u7acb\u968f\u673a\u53d8\u91cf\uff0c\u4e14\\(X_i=0\\)\u7684\u6982\u7387\u4e3a\\(p_i\\)\uff0c\\(X_i=1\\)\u7684\u6982\u7387\u4e3a\\(1-p_i\\)</p> <p>\u5219\\(X_1\\oplus X_2\\oplus \\cdots \\oplus X_n = 0\\)\u6210\u7acb\u7684\u6982\u7387\u4e3a\uff1a $$ \\frac {1}{2}+2^{n-1} \\prod_{i =1}^{n}(p_i-\\frac{1}{2}) $$ \u76f4\u63a5\u8ba1\u7b97\u504f\u5dee\uff1a $$ \\epsilon  = 2^{n-1}\\prod_{i = 1}^n\\epsilon_i $$</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_29","title":"\u957f\u8f6e\u6570\u7ebf\u6027\u903c\u8fd1\u5f0f","text":"<p>\u63a9\u7801\u4f20\u64ad\u89c4\u5219\uff1a</p> <p></p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_30","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<ul> <li>\u6570\u636e\u590d\u6742\u5ea6\uff1a\u9009\u53d6\u660e\u6587\u7684\u6570\u91cf\u4e0e\u533a\u5206\u5668\u504f\u5dee\u7684-2\u6b21\u65b9\u6210\u6b63\u6bd4</li> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(2^4\\times 2^{11}\\times \\frac{1}{4}\\times \\frac{1}{5}\\)\u662f\u9009\u62e9\u6570\u636e\u89c4\u6a21\u4e3a\\(2^{11}\\)\uff0c\u7a77\u4e3e\\(K_{5,0}\\)\uff0c\u4e58\u4ee5\\(2^4\\)\u53ea\u5bf9\u7b2c\u4e00\u4e2aS\u76d2\u653b\u51fb\uff0c\u4e58\\(\\frac{1}{4}\\)\uff0c4+1\u8f6e\uff0c\u9700\u8981\u731c4\u6bd4\u7279\u5bc6\u94a5\\(K_{5,0}\\)\u56de\u63a81\u8f6e\uff0c\u6545\u4e58\u4ee5\\(\\frac{1}{5}\\)</li> <li>\u5b58\u50a8\u590d\u6742\u5ea6\uff1a\u6bcf\u4e2a\u5bc6\u94a5\u9700\u8981\u4e00\u4e2a11\u6bd4\u7279(\u6570\u636e\u89c4\u6a21\\(2^{11}\\))\u7684\u8ba1\u6570\u5668</li> </ul>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#-","title":"\u5dee\u5206-\u7ebf\u6027\u653b\u51fb","text":"<ul> <li>\u5728\u7ebf\u6027\u5206\u6790\u4e2d\uff0c\u5229\u7528\u5806\u79ef\u5f15\u7406\u628a\u77ed\u8f6e\u6570\u3001\u9ad8\u6982\u7387\u7ebf\u6027\u7279\u5f81\u7ea7\u8054\uff1b\u5728\u5dee\u5206-\u7ebf\u6027\u4e2d\uff0c\u6211\u4eec\u8003\u8651\u628a\u5dee\u5206\u7279\u5f81\u548c\u7ebf\u6027\u7279\u5f81\u7ea7\u8054</li> </ul>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#1994","title":"1994\u5e74\u6a21\u578b","text":"<p>\u4e8b\u5b9e\u4e0a\u662f\u9009\u4e86\u4e00\u4e2a\u622a\u65ad\u5dee\u5206\uff0c\u4fdd\u8bc1\u5dee\u5206\u5c3e\u90e8\u7684\u76f8\u5173\u6bd4\u7279\u4e3a0\uff0c\u5373\u5dee\u5206\u90e8\u5206\u7684\u6982\u7387\u4e3a1\uff0c\u56e0\u6b64\u6574\u4e2a\u533a\u5206\u5668\u7684\u6982\u7387\u53ea\u8003\u8651\u7ebf\u6027\u90e8\u5206\u5373\u53ef\uff1b\u4ecd\u7136\u662f\u5806\u79ef\u5f15\u7406\uff0c\u7b97\u4e24\u8def\u504f\u5dee\u7684\u603b\u504f\u5dee</p> <p></p> <p>\u5728\u7ebf\u6027\u58f3\u4e4b\u524d\u52a0\u4e00\u4e2a\u5dee\u5206</p> <p></p> <p>6\u8f6e\u533a\u5206\u5668\uff1a</p> <ul> <li>\u9009\u62e9\u6ee1\u8db3\u8f93\u5165\u5dee\u5206\\(\\Delta_{in}\\)\u7684\u660e\u6587\u5bf9\uff0c\u52a0\u5bc6\u5f97\u5230\u5bc6\u6587\u5bf9</li> <li>\u8ba1\u7b97\u5bc6\u6587\u5bf9\u7684\u5dee\u5206\u4e0e\u8f93\u51fa\u63a9\u7801\u7684\u5185\u79ef</li> <li>\u5982\u679c\u4e3a\u968f\u673a\u7f6e\u6362\uff0c\u5219\u7ed3\u679c\u4e3a0\u7684\u6982\u7387\u4e3a1/2</li> <li>\u5982\u679c\u4e3aDES\u7b97\u6cd5\uff0c\u5219\u7ed3\u679c\u4e3a0\u7684\u6982\u7387\u4e3a\\(1/2+2\\epsilon^2\\)</li> </ul>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#2002","title":"2002\u5e74\u6a21\u578b","text":"<p>Shamir\u7b49\u4eba\u57282002\u5e74\u5bf994\u5e74\u6a21\u578b\u7684\u4e2d\u95f4\u72b6\u6001\uff08\u5dee\u5206\u4e0e\u7ebf\u6027\u58f3\u7ea7\u8054\u5904\uff09\u505a\u4e86\u8c03\u6574\uff0c\u5934\u90e8\u6982\u7387\u4e0d\u518d\u662f1</p> <p>\u5728\u653e\u5bbd\u4e86\u5bf9\u5dee\u5206\u7684\u8981\u6c42(\\(p = 1\\Longrightarrow p = p'\\))\u4e4b\u540e\uff0c\u53ef\u4ee5\u505a\u66f4\u957f\u8f6e\u6570\u7684\u653b\u51fb </p> <p></p> <p>\u5176\u4e2d\uff1a\u8bbe\u5dee\u5206\u8def\u5f84\u6982\u7387\u4e3a\\(p'\\)</p> <ul> <li>\u5219\u82e5\\(\\lambda_p\\cdot \\Delta_{out} = 0\\)\uff0c\u5219\\(\\frac{1}{2}+p = \\frac{1}{2}+p'/2\\)</li> <li>\u82e5\\(\\lambda_p\\cdot \\Delta_{out} = 1\\)\uff0c\u5219\\(\\frac{1}{2}+p = \\frac{1}{2}-p'/2\\)</li> </ul>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_31","title":"\u6784\u9020\u533a\u5206\u5668","text":"<p>\u533a\u5206\u5668\u7684\u6982\u7387\u4e3a\\(\\frac{1}{2} + 4\\epsilon^2p\\)\uff0c\u5176\u4e2d\\(\\epsilon\\)\u4e3a\u7ebf\u6027\u903c\u8fd1\u5f0f\u7684\u504f\u5dee\uff0c\\(p\\)\u662f\u5dee\u5206\u533a\u5206\u5668\u5c3e\u90e8\\(\\Delta_{out}\\cdot \\lambda_T = 0\\)\u7684\u504f\u5dee\uff0c\u8bbe\u5dee\u5206\u533a\u5206\u5668\u6982\u7387\u4e3a\\(p'\\)\uff0c\u5219\\(\\frac{1}{2}+p = p'+\\frac{1}{2}(1-p')\\)</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_32","title":"\u533a\u5206\u653b\u51fb","text":"<p>\u5173\u4e8e\u8fd9\u91cc\u4e0d\u662f\\(|n/N-1/2|\\)\u7684\u7406\u89e3\uff1a\u5bf9\u4e8e\u5dee\u5206-\u7ebf\u6027\u653b\u51fb\uff0c\u9009\u5b9a\u5dee\u5206\u548c\u63a9\u7801\u4e4b\u540e\uff0c\u7ebf\u6027\u58f3\u7684\u8f93\u5165\\(\\lambda p\\cdot \\Delta_{out}\\)\u4e3a0\u662f\u5b9a\u4e0b\u6765\u7684(\u672c\u4f8b\u4e2d\u4e00\u5b9a\u4e3a0\uff0c\u8fd91\u6bd4\u7279\u4fe1\u606f\u5bf9\u5e94\u7684\u7ebf\u6027\u5206\u6790\u7b97\u6cd51\u4e2d\u7684\u5bc6\u94a51\u6bd4\u7279\u4fe1\u606f)\uff0c\u800c\u53c8\u56e0\u4e3a\u8be5\u7ebf\u6027\u58f3(\u5373\\(dm\\oplus dy = 0\\))\u7684\u504f\u5dee\u662f\u6b63\u7684(==\u504f\u5dee\u4e3a\u6b63\uff1a\u8f93\u5165\u5185\u79ef=\u8f93\u51fa\u5185\u79ef\u7684\u6982\u7387\u5927\u4e8e1/2\uff1b\u504f\u5dee\u4e3a\u8d1f\u53cd\u4e4b==)\uff0c\u56e0\u6b64\u9884\u671f\u8f93\u51fa\u63a9\u7801\u4e0e\u5bc6\u6587\u7684\u5185\u79ef\u503c\u5e94\u5f53\u662f0\u6bd4\u8f83\u591a</p> <p>\u4e3e\u4e24\u4e2a\u6ca1\u7528\u7684\u4f8b\u5b50\u5e2e\u52a9\u7406\u89e3\u4e00\u4e0b\uff1a</p> <ul> <li>\u5982\u679c\u6539\u6210\u66f4\u591a\u8f6e\u5dee\u5206\u533a\u5206\u5668\uff0c\u7ebf\u6027\u58f3\u4e0d\u53d8\uff0c\u5219\u6709\u53ef\u80fd\u5f97\u5230\\(\\lambda p\\cdot \\Delta_{out}\\)\u4e00\u5b9a\u4e3a1\uff0c\u5219\u7ebf\u6027\u58f3\u8f93\u51fa\u671f\u671b1\u66f4\u591a</li> <li>\u5982\u679c\u6539\u6210\u504f\u5dee\u4e3a\u8d1f\u7684\u7ebf\u6027\u58f3\uff0c\u5dee\u5206\u533a\u5206\u5668\u4e0d\u53d8(\u5373\\(\\lambda p\\cdot \\Delta_{out} = 0\\))\uff0c\u5219\u7ebf\u6027\u58f3\u8f93\u51fa\u671f\u671b1\u66f4\u591a</li> </ul> <p>\u4f46\u65e0\u8bba\u54ea\u79cd\u60c5\u51b5\uff08\\(\\lambda p\\cdot \\Delta_{out} = 0\\)\u6216\\(\\lambda p\\cdot \\Delta_{out} =1\\)\uff09\uff0c\u5728\u7ebf\u6027\u63a9\u7801\u548c\u5dee\u5206\u786e\u5b9a\u540e\uff0c\u6ce8\u610f\u7edf\u8ba1\u7ed3\u679c\u53ca\u5176\u671f\u671b\u8ba1\u6570\u5373\u53ef</p> <p>\u56de\u5fc6\u7ebf\u6027\u5206\u6790\u7684\u7b97\u6cd51\uff1a</p> <p>\u5728\u7ebf\u6027\u5206\u6790\u4e2d\uff0c\u6211\u4eec\u627e\u5230\u7ebf\u6027\u903c\u8fd1\u5f0f\uff1a\\((dm \\oplus dy) \\oplus (dk_0\\oplus dk_1\\oplus dk_2) = 0\\)\u53ca\u5176\u504f\u5dee</p> <ul> <li>\u7136\u540e\u7edf\u8ba1\\((dm \\oplus dy) = 0\\)\u7684\u8ba1\u6570</li> <li>\u901a\u8fc7\u8be5\u8ba1\u6570\u6062\u590d\u5bc6\u94a5\u76841\u6bd4\u7279\u4fe1\u606f\uff1a</li> <li>\u504f\u5dee\u4e3a\u6b63(\u8bf4\u660e\\((dm \\oplus dy)\\)\u4e0e\\((dk_0\\oplus dk_1\\oplus dk_2)\\)\u4ee5\u5927\u4e8e\\(\\frac{1}{2}\\)\u6982\u7387\u76f8\u7b49)\uff1a<ul> <li>\u8ba1\u6570\u5927\u4e8e\\(N/2\\)\uff0c\u5219\u6709\\((dk_0\\oplus dk_1\\oplus dk_2) = 0\\)\uff1b</li> <li>\u8ba1\u6570\u5c0f\u4e8e\\(N/2\\)\uff0c\u5219\u6709\\((dk_0\\oplus dk_1\\oplus dk_2) = 1\\)\uff1b</li> </ul> </li> <li>\u504f\u5dee\u4e3a\u8d1f(\u8bf4\u660e\\((dm \\oplus dy)\\)\u4e0e\\((dk_0\\oplus dk_1\\oplus dk_2)\\)\u4ee5\u5927\u4e8e\\(\\frac{1}{2}\\)\u6982\u7387\u4e0d\u7b49)\uff1a<ul> <li>\u8ba1\u6570\u5927\u4e8e\\(N/2\\)\uff0c\u5219\u6709\\((dk_0\\oplus dk_1\\oplus dk_2) = 1\\)\uff1b</li> <li>\u8ba1\u6570\u5c0f\u4e8e\\(N/2\\)\uff0c\u5219\u6709\\((dk_0\\oplus dk_1\\oplus dk_2) = 0\\)\uff1b</li> </ul> </li> </ul>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#8des","title":"8\u8f6eDES\u5bc6\u94a5\u6062\u590d","text":"<p>==\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a\u5728\u5bc6\u94a5\u6062\u590d\u653b\u51fb\u4e2d\uff0cDES\u7684 6X8 = 48 \u6bd4\u7279\u5bc6\u94a5\u5f71\u54cd\u7684\u662f\u4e0a\u4e00\u8f6e\u7684\u53f3\u534a\u652f\uff08\u5de6\u534a\u652f\u76f4\u63a5\u62c9\u7ebf\uff09==</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_33","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<p>\u9488\u5bf9\u4e0a\u8ff08\u8f6eDES\uff1a</p> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(2^{14.81}\\times 2^6 / 64 = 2^{14.81}~~8-round-enc\\)</li> <li>\u6570\u636e\u590d\u6742\u5ea6\uff1a\\(2\\times |\\epsilon|^{-2} = 2^{14.81}\\)\u4e2a\u660e\u6587</li> <li>\u5b58\u50a8\u590d\u6742\u5ea6\uff1a\\(2^6\\times 14\\)\uff1b\u5bc6\u94a5\u8ba1\u6570\u5668</li> </ul>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_34","title":"\u96f6\u76f8\u5173\u7ebf\u6027\u653b\u51fb","text":"<p>\u5229\u7528\u7684\u662f\u4e0e\u5bc6\u94a5\u65e0\u5173\u7684\uff0c\u76f8\u5173\u5ea6\u4e00\u5b9a\u4e3a0\u7684\u7ebf\u6027\u58f3\\(\\alpha \\rightarrow \\beta \\(\uff0c\u5373\\)&lt;\\alpha,m&gt;\\oplus &lt;\\beta, y&gt; = 0\\)</p> <p></p> <p>\u6ce8\u610f\u8fd9\u91cc\u4e0e\u4e0d\u53ef\u80fd\u5dee\u5206\u4e0d\u540c\uff1a</p> <ul> <li> <p>\u4e0d\u53ef\u80fd\u5dee\u5206\u7684\u542b\u4e49\uff1a\u5bf9\u4e8e\u786e\u5b9a\u8f93\u5165\u5dee\u5206\uff0c\u6b63\u786e\u52a0\u5bc6\u60c5\u51b5\u4e0b\uff0c\u4ee5\u6982\u73870\u5f97\u5230\u8f93\u51fa\u5dee\u5206\u3002\u56e0\u6b64\u53ea\u6709\u9519\u8bef\u5bc6\u94a5\u624d\u4f1a\u4f7f\u5f97\u4e0d\u53ef\u80fd\u5dee\u5206\u6210\u7acb\u3002</p> </li> <li> <p>\u5728\u96f6\u76f8\u5173\u7ebf\u6027\u4e2d\uff0c\u6b63\u786e\u5bc6\u94a5\u624d\u6ee1\u8db3\u96f6\u7ebf\u6027\u76f8\u5173\u7279\u6027\u3002</p> </li> </ul> <p>\u4e0e\u4e0d\u53ef\u80fd\u5dee\u5206\u7c7b\u4f3c\uff0c\u5206\u522b\u4ece\u4e0a\u5f80\u4e0b\uff0c\u4ece\u4e0b\u5f80\u4e0a\u63a8\u5f97\u5230\u4e24\u6761\u6982\u7387\u4e3a1\u7684\u7ebf\u6027\u63a9\u7801\uff1b\u4e24\u6761\u8def\u7ebf\u5728\u4e2d\u95f4\u77db\u76fe</p> <p>\u4ee5\u6982\u73871\u6210\u7acb\u7684\u4e8b\u4ef6\uff1a</p> <p></p> <p>\u6ce8\u610f\u7b2c\u4e09\u6761\u7ebf\u6027\u6620\u5c04\uff0c\u5728AES\u5206\u6790\u4e2d\u7528\u5230</p> <p>\u5206\u652f\u8fd0\u7b97\u548c\u7ebf\u6027\u6620\u5c04\u4e3a\u4ec0\u4e48\uff1f\uff1f\uff1f\uff1f</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#aes","title":"AES\u96f6\u76f8\u5173\u7ebf\u6027\u58f3","text":"<p>\u5148\u56de\u5fc6\u4e00\u4e0bAES\u7684\u7ed3\u6784\uff1a</p> <ul> <li>AK\uff1a\u5728<code>Initial round</code>\u5148\u8fdb\u884c\u4e00\u6b21AK\uff08\u4e0d\u8ba1\u5165\u603b\u8f6e\u6570\uff09</li> <li>S</li> <li>SR\uff1a\u7b2c1\u884c\u5de6\u79fb0\uff0c\u7b2c2\u884c\u5de6\u79fb1\uff0c\u7b2c3\u884c\u5de6\u79fb2\uff0c\u7b2c4\u884c\u5de6\u79fb3</li> <li>MC\uff1a\u5206\u522b\u7528MC\u77e9\u9635\u4e0e\u6bcf\u4e00\u5217\u76f8\u4e58\uff0c\u6700\u540e\u4e00\u8f6e\u6ca1\u6709MC</li> </ul> <p></p> <p>\u5229\u7528\u8fd9\u4e2a\u533a\u5206\u5668\u505a\u533a\u5206\u653b\u51fb\uff1a</p> <ol> <li>\u5df2\u77e5\\(2^n\\)\u4e2a\u660e\u5bc6\u6587\u5bf9\\((x,y)\\)(==\u6ce8\u610f\u8fd9\u91cc\u662f\u5168\u660e\u6587\u7a7a\u95f4==)\uff1b\u96f6\u76f8\u5173\u7ebf\u6027\u58f3\\((\\Gamma,0,0,0)\\rightarrow (\\Gamma',0,0,0)\\)\u5982\u56fe\u793a</li> <li>\u8ba1\u7b97\u8f93\u5165\u63a9\u7801\u4e0ex\uff0c\u8f93\u51fa\u63a9\u7801\u4e0ey\u7684\u5185\u79ef\uff0c\u7edf\u8ba1\u76f8\u7b49\u7684\u6570\u91cf</li> <li>\u5982\u679c\u4e3a\\(2^{n-1}\\)\uff0c\u5219\u5224\u65ad\u4e3a4\u8f6eAES\uff0c\u5426\u5219\u4e3aRP</li> </ol> <p>\u8003\u8651\u5982\u4f55\u964d\u4f4e\u590d\u6742\u5ea6\uff1f\u5982\u4f55\u7528\u66f4\u5c11\u7684\u660e\u6587\u8ba1\u7b97\u76f8\u5173\u5ea6\uff1f</p> <p></p> <p>\u5982\u56fe\u6240\u793a\u53ef\u4ee5\u5f97\\(T_{10} = T_{01}\\Longrightarrow T_{00} = T_{11}\\)\uff0c\u6545\u5982\u679c\u8981\u8ba1\u6570\\(\\alpha \\cdot x\\oplus \\beta \\cdot y = 0\\)\uff0c\u5219\u5728\u7ed9\u5b9a\\(\\alpha \\cdot x = 0\\)\u5f97\u6761\u4ef6\u4e0b\uff0c\u53ea\u9700\u8981\u8ba1\u6570\u4e00\u534a</p> <p>\u6545\u5728\u660e\u6587\u7684\u7531\\(2^n\\)\u660e\u6587\\(\\Longrightarrow\\)\u9009\u62e9\\(2^{n-1}\\)\u660e\u6587\uff1a\u6ee1\u8db3\\(\\alpha \\cdot x = 0,\\alpha\\cdot x = 1,\\beta\\cdot y = 0,\\beta \\cdot y =1\\)\uff0c\u56db\u4e2a\u6761\u4ef6\u4e4b\u4e00</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#141aes","title":"1+4+1AES\u5bc6\u94a5\u6062\u590d","text":"","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_35","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<p>\u653b\u51fb<code>AES192</code>\uff0c(\u56e0\u4e3a\u5728\u5934\u90e8\u548c\u5c3e\u90e8\u5404\u52a0\u4e86\u4e00\u8f6e\uff0c\u65e0\u6cd5\u7528\u4e0a\u8ff0\u6539\u8fdb\u65b9\u6cd5\u964d\u4f4e\u590d\u6742\u5ea6)</p> <p></p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#square","title":"Square\u653b\u51fb","text":"<p>\u8003\u8651\u7684\u662f\u96c6\u5408\u7279\u6027\uff1a\u5373\u5bf9\u4e00\u7cfb\u5217\u72b6\u6001\u53d6\u503c\u6c42\u548c\uff1b</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#aes3","title":"AES3\u8f6e\u533a\u5206\u5668","text":"<p>\u901a\u8fc7\u9009\u62e9\u6ee1\u8db3\u67d0\u79cd\u7279\u6027\u7684\u660e\u6587\u96c6\u5408\uff0c\u8ffd\u8e2a\u8be5\u96c6\u5408\u7279\u6027\u5728\u591a\u8f6e\u52a0\u5bc6\u8fc7\u7a0b\u4e2d\u7684\u4f20\u64ad\u60c5\u51b5\uff0c\u901a\u8fc7\u8f6e\u4e4b\u540e\u96c6\u5408\u7279\u6027\u7684\u4e0d\u968f\u673a\u73b0\u8c61(\u4f8b\u5982\u96c6\u5408\u6c42\u548c\u4e3a0)\uff0c\u5c06\u4e00\u4e2a\u5bc6\u7801\u7b97\u6cd5\u4e0e\u968f\u673a\u7f6e\u6362\u533a\u5206\u5f00</p> <ul> <li>\u53ea\u8981\u7b97\u6cd5\u91c7\u7528\u7684\u53d8\u6362\u662f\u53cc\u5c04\uff0c\u4e0e\u7b97\u6cd5\u90e8\u4ef6\u7684\u5177\u4f53\u53d6\u503c\u5173\u7cfb\u4e0d\u5927</li> </ul> <p>\u5b9a\u4e49\u5728\\(\\mathbb F_{2^n}\\)\u4e0a\u7684\u4e09\u79cd\u96c6\u5408\u7279\u6027\uff1a</p> \u96c6\u5408 \u7279\u6027 \u4e3e\u4f8b \u6d3b\u8dc3\u96c6A(Active) \u904d\u5386\\(\\mathbb F_{2^n}\\)\u6240\u6709\u5143\u7d20 \\(\\mathbb F_{2^3}\\)\u4e0a\u7684\u96c6\u5408\\(\\{0,1,2,3,4,5,6,7\\}\\) \u7a33\u5b9a\u96c6C(Constant) \u96c6\u5408\u4e2d\u6240\u6709\u5143\u7d20\u76f8\u540c\u4e3a\u5e38\u6570c \\(\\mathbb F_{2^3}\\)\u4e0a\u7684\u96c6\u5408\\(\\{1,1,1,1,1,1,1,1\\}\\) \u5e73\u8861\u96c6B(Balanced) \u6ee1\u8db3\u6c42\u548c=0 \\(\\mathbb F_{2^3}\\)\u4e0a\u7684\u96c6\u5408\\(\\{0,1,0,1,2,4,6,0\\}\\) <ul> <li>\u6d3b\u8dc3\u96c6A\u548c\u7a33\u5b9a\u96c6B\u90fd\u662f\u5e73\u8861\u96c6</li> </ul> <p>\u96c6\u5408\u4f20\u64ad\u89c4\u5219\uff1a</p> <ul> <li> <p>\u8fc7\u7ebf\u6027\u53d8\u6362(\u62c9\u7ebf\u3001\u5f02\u6216\u5bc6\u94a5\u7b49\u53cc\u5c04)\uff1a\u4e09\u79cd\u96c6\u5408\u7279\u6027\u4fdd\u6301</p> </li> <li> <p>\u8fc7\u53ef\u9006S\u76d2\uff1a\u6d3b\u8dc3\u96c6A\u3001\u7a33\u5b9a\u96c6C\u4fdd\u6301\uff1b\u5e73\u8861\u96c6B\u4e0d\u786e\u5b9a</p> </li> <li> <p>\u4e24\u4e2a\u96c6\u5408\u6c42\u548c\uff1a</p> </li> <li> <p>\u6d3b\u8dc3+\u6d3b\u8dc3 = \u5e73\u8861</p> </li> <li> <p>\u6d3b\u8dc3+\u7a33\u5b9a = \u6d3b\u8dc3</p> </li> <li> <p>\u5e73\u8861+\u5e73\u8861 = \u5e73\u8861</p> \u96c6\u5408 \u6c42\u548c A+A B A+B B A+C A B+B B B+C B C+C C </li> </ul> <p>\u5229\u7528\u4e0a\u8ff0\u89c4\u5219\u6784\u90203\u8f6eAES\u533a\u5206\u5668\uff1a\u8f93\u5165\u4e3a256\u4e2a\u660e\u6587\u6784\u6210\u7684\u96c6\u5408(\u7b2c\u4e00\u5b57\u8282\u904d\u5386\uff0c\u5176\u5b83\u5b57\u8282\u56fa\u5b9a)</p> <p></p> <p>\u5373\u5728\u8f93\u5165\u6ee1\u8db3\u7b2c1\u5b57\u8282\u4e3a\u904d\u5386\u96c6\u7684\u65f6\u5019\uff0c3\u8f6e\u533a\u5206\u5668\u5c3e\u90e816\u5b57\u8282\u5e94\u8be5\u90fd\u662f\u5e73\u8861\u96c6</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_36","title":"\u91c7\u6837","text":"<p>\u9009\u62e9\u660e\u6587\u653b\u51fb\uff0c\u9009\u62e9\u6ee1\u8db3\u8f93\u5165\u96c6\u5408\u7684\u660e\u6587\uff0c\u6309PPT\u7684\u8bf4\u6cd5\u8fd9\u91cc\u628a\u6bcf256\u4e2a\u660e\u6587\u770b\u4f5c\u4e00\u4e2a\u7ed3\u6784\u4f53</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_37","title":"\u6062\u590d\u5bc6\u94a5","text":"<p>\u5f88\u663e\u7136\u53ef\u4ee5\u5229\u7528\u4e0a\u8ff03\u8f6e\u533a\u5206\u5668\u505a\u533a\u5206\u653b\u51fb\uff0c\u5982\u679c\u5f97\u5230\u5bc6\u6587\u7684128\u6bd4\u7279\u5f02\u6216\u8d77\u6765\u7b49\u4e8e0\u7684\u8bdd\uff0c\u5219\u5224\u65ad\u4e3a3\u8f6eAES(\u6ce8\u610f\u8fd9\u91cc\u6700\u540e\u4e00\u8f6e\u6709MC)</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#31","title":"3+1\u8f6e\u5bc6\u94a5\u6062\u590d","text":"<p>\u53ef\u4ee5\u8fdb\u4e00\u6b65\u5728\u533a\u5206\u5668\u4e4b\u540e\u52a0\u4e0a\u4e00\u8f6e\uff0c\u8fdb\u884c\u5bc6\u94a5\u6062\u590d\u653b\u51fb\uff1a</p> <ol> <li> <p>\u5728\u533a\u5206\u5668\u5c3e\u90e8\u52a0\u4e0a1\u8f6e(SB\uff0cSR\uff0cAK\uff0c\u6ce8\u610f\u6ca1\u6709MC)\uff0c\u5e76\u628a\u660e\u6587\u96c6\u5408\u52a0\u5bc6\u5f97\u5230\u5bc6\u6587\u96c6\u5408(256\u4e2a\u5bc6\u6587)</p> </li> <li> <p>\u731c\u6d4b\\(K_{0}^4\\)\uff0c\u5373\u7b2c4\u8f6e\u3001\u7b2c1\u5b57\u8282\u5bc6\u6587\u5bf9\u5e94\u4f4d\u7f6e\u5bc6\u94a5\uff1b\u5bc6\u6587\u96c6\u5408\u7b2c1\u5b57\u8282\u5f80\u4e0a\u89e3\u5bc61\u8f6e\u5230\u533a\u5206\u5668\u5c3e\u90e8\uff0c\u5e76\u8ba1\u7b97\u8be5\u5b57\u8282\u6c42\u548c(256\u4e2a\u6c42\u548c)</p> </li> <li> <p>\u5982\u679c\u6c42\u548c\\(s = 0\\)\uff0c\u5219\u731c\u6d4b\u7684\u5bc6\u94a5\u4f5c\u4e3a\u4e00\u4e2a\u5019\u9009\uff0c\u5426\u5219\u6dd8\u6c70</p> </li> <li> <p>\u5bf9\u6b63\u786e\u7684\\(K_0^4\\)\uff0c\\(Pr(s = 0) = 1\\)</p> </li> <li> <p>\u5bf9\u9519\u8bef\u7684\\(K_0^4\\)\uff0c\\(Pr(s = 0)\\)\u4ee5\u968f\u673a\u6982\u7387\\(\\frac{1}{2^8}\\)(1 \u5b57\u8282\u4e3a0\uff0c\u53738\u4e2a\u6bd4\u7279\u5168\u4e3a0)</p> </li> <li> <p>\u91cd\u65b0\u9009\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u76f4\u5230\\(K_0^4\\)\u552f\u4e00\u786e\u5b9a</p> </li> <li>\u6210\u529f\u7387\u5206\u6790\uff1a\u7ecf\u8fc7\u4e0a\u8ff0\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u8fc7\u6ee4\uff0c\u6b63\u786e\u5bc6\u94a5\u4fdd\u7559\u4e0b\u6765\uff0c\u9519\u8bef\u5bc6\u94a5\u4ee5\\(1/2^8\\)\u6982\u7387\u88ab\u4fdd\u7559\u4e0b\u6765\uff0c\u56e0\u6b64\u9519\u8bef\u5bc6\u94a5\u671f\u671b\u4e3a1\uff1b</li> </ol> <p>\u7ecf\u8fc7N\u4e2a\u7ed3\u6784\u4f53\u8fc7\u6ee4\uff1a\u5269\u4f59\u9519\u8bef\\(K_0^4\\)\u7684\u4e2a\u6570\u4e3a\\((2^8-1)\\times (\\frac{1}{2^8})^N\\)\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u53ea\u9700\u8981N=2\u5373\u53ef\u786e\u5b9a\u6b63\u786e\u5bc6\u94a5\uff0c\u7c7b\u4f3c\u5730\u53ef\u4ee5\u6062\u590d16\u5b57\u8282\u7684\\(K^4\\)</p> <p>\u82e5\u8981\u6062\u590d\u7b2c4\u8f6e128\u6bd4\u7279(16\u5b57\u8282)\u5bc6\u94a5\uff1a</p> <ul> <li> <p>\u6570\u636e\u590d\u6742\u5ea6\uff1a\\(2^8\\times 2\\)\uff1b\u6839\u636e\u5206\u6790\u9700\u8981\u90092\u4e2a\u7ed3\u6784\u4f53</p> </li> <li> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(16\\times (2^8\\times 2^8+2^8\\times 2)~\\approx ~ 2^{20} S-Box = 2^{20}/(16\\times 4)\\approx 2^{14} enc\\)</p> </li> </ul> <p>\u6062\u590d16\u5b57\u8282\u5bc6\u94a5\uff0c\u56e0\u6b64\u5916\u5c4216\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5b57\u8282\u5bc6\u94a5\uff1a\u7b2c1\u4e2a\u7ed3\u6784\u4f53\u9700\u8981\u904d\u5386\u731c\u6d4b\u5bc6\u94a5\uff0c\u6bcf\u4e2a\u5bc6\u94a5\\(2^8\\)\u660e\u6587\uff0c\u800c\u7b2c2\u4e2a\u7ed3\u6784\u4f53\u53ea\u9700\u8981\u5bf9\u7b5b\u5269\u4e0b\u76842\u4e2a\u5bc6\u94a5\u8fc7\u6ee41\u4e2a\u5373\u53ef\uff1b\u6700\u540e\u628aS\u76d2\u8fd0\u7b97\u6362\u6210\u52a0\u5bc6\uff0c\u6bcf\u8f6e16\u6b21\u67e5S\u76d2\uff0c\u4e00\u51714\u8f6e\uff0c\u6545\u9664\u4ee5\\((16\\times 4)\\)</p> <ul> <li>\u5b58\u50a8\u590d\u6742\u5ea6\uff1a\\(2^8 \\times 128 = 2^{15}\\)</li> </ul>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#32","title":"3+2\u8f6e\u5bc6\u94a5\u6062\u590d","text":"<p>\u57283\u8f6e\u533a\u5206\u5668\u4e4b\u540e\u52a0\u4e0a\u4e24\u8f6e\u8fdb\u884c\u5bc6\u94a5\u6062\u590d\u653b\u51fb\uff1a</p> <p>\u6d89\u53ca\u5230\u4e00\u4e2a\u5c0f\u6280\u5de7\u662f==\u4ea4\u6362\u7b2c\u56db\u8f6eMC\u548cAK\u7684\u987a\u5e8f==\uff0c\u4ece\u800c\u51cf\u5c11\u4e86\u9700\u8981\u731c\u6d4b\u7684\u5bc6\u94a5\u957f\u5ea6: \\(8~~byte\\rightarrow 5~~byte\\)</p> <p></p> <p>\u5176\u5b83\u548c3+1\u4e00\u6837\uff1b\u5efa\u7acb\u4e86\u548c5\u5b57\u8282\u5bc6\u94a5\u6709\u5173\u7684\u65b9\u7a0b\uff0c\u7ed3\u679c1\u4e2a\u7ed3\u6784\u4f53\u8fc7\u6ee4\uff0c\u9519\u8bef\u5bc6\u94a5\u4ee5\\(1/2^8\\)\u6982\u7387\u88ab\u4fdd\u7559\u4e0b\u6765\uff0c\u56e0\u6b64\u5f97\u523040\u6bd4\u7279\u5bc6\u94a5\u9700\u8981\u5e73\u5747\\(40\\times (\\frac{1}{2^8})^N&lt;1\\Longrightarrow N = 6\\)\u4e2a\u7ed3\u6784\u4f53</p> <p>\u82e5\u8981\u6062\u590d\u7b2c5\u8f6e128\u6bd4\u7279(16\u5b57\u8282)\u5bc6\u94a5\uff1a</p> <ul> <li> <p>\u6570\u636e\u590d\u6742\u5ea6\uff1a\\(2^8\\times 6\\)\uff1b\u6839\u636e\u5206\u6790\u9700\u8981\u90096\u4e2a\u7ed3\u6784\u4f53</p> </li> <li> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(4\\times 5\\times (2^8\\times 2^{40} + 2^8\\times 2^{32}+\\cdots +2^8\\times 2)~\\approx ~ 5\\times 2^{50} S-Box = 2^{50}/(16)\\approx 2^{46} ~~5-round-enc\\)\uff1b5</p> </li> </ul> <p>\u6bcf\u6b21\u731c\u6d4b40\u6bd4\u7279\u7684\u5bc6\u94a5\uff08\\(K^5\\)32\u6bd4\u7279+\\(K^4\\)8\u6bd4\u7279\uff09\uff0c\u9700\u89814\u6b21\u80fd\u5b8c\u5168\u6062\u590d\u6062\u590d\u7b2c5\u8f6e128\u6bd4\u7279(16\u5b57\u8282)\u5bc6\u94a5\uff0c\u56e0\u6b64\u5916\u5c424X5\uff0c\u5bf9\u4e8e\u6bcf\u4e2a4\u5b57\u8282\u5bc6\u94a5\uff1a\u7b2c1\u4e2a\u7ed3\u6784\u4f53\u9700\u8981\u904d\u5386\u731c\u6d4b\u5bc6\u94a5\uff0c\u6bcf\u4e2a\u5bc6\u94a5\\(2^8\\)\u660e\u6587\uff0c\u800c\u7b2c2\u4e2a\u7ed3\u6784\u4f53\u9700\u5bf9\u7b5b\u5269\u4e0b\u7684\\(2^{32}\\)\u5bc6\u94a5\u7ee7\u7eed\u8fc7\u6ee4\u76f4\u5230\u6700\u540e\u52691\u4e2a\u5019\u9009\u5bc6\u94a5\u5373\u4e3a\u7ed3\u679c\uff1b\u6700\u540e\u628aS\u76d2\u8fd0\u7b97\u6362\u6210\u52a0\u5bc6\uff0c\u6bcf\u8f6e16\u6b21\u67e5S\u76d2\uff0c\u4e00\u51715\u8f6e\uff0c\u6545\u9664\u4ee5\\((16\\times 5)\\)</p> <ul> <li>\u5b58\u50a8\u590d\u6742\u5ea6\uff1a\u7b2c1\u4e2a\u7ed3\u6784\u4f53\u7b5b\u9009\u540e\u6709\\(2^{32}\\)\u79cd\u5907\u9009\u768440\u6bd4\u7279\u5bc6\u94a5\u9700\u8981\u5b58\u50a8</li> </ul>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#41","title":"4+1\u8f6e\u5bc6\u94a5\u6062\u590d","text":"<p>\u6784\u9020\u4e00\u4e2a4\u8f6e\u533a\u5206\u5668\uff1a\u8003\u8651\u57283\u8f6e\u533a\u5206\u5668\u5934\u90e8\u6dfb\u52a0\u4e00\u8f6e\uff0c\u8fd9\u8981\u6c421\u8f6e\u52a0\u5bc6\u540e\uff0c\u7b2c1\u5b57\u8282\u662f\u904d\u5386\u96c6A\u3002\u5f80\u4e0a\u63a8\\(MC^{-1}\\)\u53d1\u73b0\u8fd91\u5b57\u8282\u5173\u8054\u5230\u8f93\u5165\u76844\u4e2a\u5b57\u8282\uff0c\u5982\u679c\u6211\u4eec\u904d\u5386\u8fd9\u5bf9\u5e944\u4e2a\u5b57\u8282\uff0c\u5219\u662f\\(2^{32}\\)\u660e\u6587\u91cf\u8fd8\u8981\u731c\u6d4b\u5bc6\u94a5\uff0c\u4f46\u6211\u4eec\u53ea\u8981\\(2^8\\)\uff0c\u663e\u7136\u6d6a\u8d39\u5f88\u591a\u3002\u8f6c\u6362\u4e00\u4e0b\u601d\u8def\uff0c\u628a\u8fd94\u4e2a\u5b57\u8282\u5212\u5206\u4e3a\u4e00\u4e2a\u96c6\u5408\uff0c\u904d\u5386\u8fd9\u4e2a\u96c6\u5408\uff0c\u5176\u5b9e\u5f97\u5230\u4e86\\(2^{24}\\)\u4e2a\u4e09\u8f6e\u533a\u5206\u5668\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u8fd9\u4e2a\u601d\u8def\u660e\u786e\u4e4b\u540e4+1\u4e0e3+1\u6ca1\u4ec0\u4e48\u4e0d\u540c\uff0c\u53ea\u662f\u9009\u62e9\u660e\u6587\u7684\u65f6\u5019\u8981\u9009\u62e9\u7684\u96c6\u5408\u4ece\u4ec5\u7b2c1\u5b57\u8282\u53d8\u5316\u7684\\(2^8\\)\u4e2a\u660e\u6587\u7ec4\u6210\u7684\u96c6\u5408\u53d8\u6210\u4e86\u67094\u4e2a\u5b57\u8282\u5728\u53d8\u5316\u7684\\(2^{32}\\)\u4e2a\u660e\u6587\u7ec4\u6210\u7684\u96c6\u5408\uff1b</p> <p>\u6210\u529f\u7387\u5206\u6790\uff1a\u4e0e3+1\u5b8c\u5168\u76f8\u540c\uff0c\u867d\u7136\u6b64\u65f6\u6bcf\u4e2a\u660e\u6587\u7ed3\u6784\u4f53\u5bf9\u5e94\u7684\u5230\\(2^{32}\\)\u4e2a\u7684\u5bc6\u6587\uff0c\u4f46\u662f\u5bf9\u4e8e\u4e00\u4e2a\\(K_0^5\\)\u731c\u6d4b\uff0c\u9519\u8bef\u5bc6\u94a5\u4fdd\u7559\u4e0b\u6765\u7684\u6982\u7387\u4ecd\u7136\u662f\\(\\frac{1}{2^8}\\)\uff0c\u6545\u5e73\u5747\u9700\u8981\u4e24\u4e2a\u7ed3\u6784\u4f53\u53ef\u4ee5\u786e\u5b9a1\u5b57\u8282\u5bc6\u94a5\uff0c\u6062\u590d\u5269\u4f5915\u5b57\u8282\u540c\u7406</p> <p>\u82e5\u8981\u6062\u590d\u7b2c5\u8f6e128\u6bd4\u7279(16\u5b57\u8282)\u5bc6\u94a5\uff1a</p> <ul> <li> <p>\u6570\u636e\u590d\u6742\u5ea6\uff1a\\(2^{32}\\times 2\\)\uff1b\u6bcf\u6b21\u6062\u590d1\u5b57\u8282\u5bc6\u94a5\uff0c\u97002\u4e2a\u7ed3\u6784\u4f53\u786e\u5b9a\u5b57\u8282\u5bc6\u94a5\uff1b\u8fd9\u91cc\u5bf9\u6bd43+2\u4e2d\u7684\\(2^8\\times 6\\)\u589e\u5927\u4e86\u5f88\u591a</p> </li> <li> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(16\\times (2^{32}\\times 2^{8} + 2^{32}\\times 2)~\\approx ~ 2^{44} S-Box = 2^{44}/(16\\times 5)\\approx 2^{37.68} ~~5-round-enc\\)</p> </li> </ul> <p>\u6bcf\u6b21\u731c\u6d4b8\u6bd4\u7279\u7684\u5bc6\u94a5\uff0c\u9700\u898116\u6b21\u80fd\u5b8c\u5168\u6062\u590d\u6062\u590d\u7b2c5\u8f6e128\u6bd4\u7279(16\u5b57\u8282)\u5bc6\u94a5\uff0c\u56e0\u6b64\u5916\u5c4216\uff0c\u5bf9\u4e8e\u6bcf\u4e2a1\u5b57\u8282\u5bc6\u94a5\uff1a\u7b2c1\u4e2a\u7ed3\u6784\u4f53\u9700\u8981\u904d\u5386\u731c\u6d4b\u5bc6\u94a5\uff0c\u6bcf\u4e2a\u5bc6\u94a5\\(2^{32}\\)\u660e\u6587\uff0c\u800c\u7b2c2\u4e2a\u7ed3\u6784\u4f53\u9700\u5bf9\u7b5b\u5269\u4e0b\u7684\\(2\\)\u4e2a\u5bc6\u94a5\u7ee7\u7eed\u8fc7\u6ee4\u5f97\u6700\u7ec8\u7ed3\u679c\uff1b\u6700\u540e\u628aS\u76d2\u8fd0\u7b97\u6362\u6210\u52a0\u5bc6\uff0c\u6bcf\u8f6e16\u6b21\u67e5S\u76d2\uff0c\u4e00\u51715\u8f6e\uff0c\u6545\u9664\u4ee5\\((16\\times 5)\\)</p> <ul> <li>\u5b58\u50a8\u590d\u6742\u5ea6\uff1a1\u4e2a\u7ed3\u6784\u4f53\u5bf9\u5e94\u5f97\u5230\\(2^{32}\\times 128\\)\u89c4\u6a21\u7684\u5bc6\u6587\u9700\u8981\u5b58\u50a8</li> </ul>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_38","title":"\u5e7f\u4e49\u751f\u65e5\u653b\u51fb","text":"<p><code>AdHash</code>\u7b97\u6cd5 $\\Longrightarrow \\(\u591a\u4e2a\u6570\u6c42\u548c(\u80cc\u5305\u95ee\u9898)\\)\\Longrightarrow $\u5e7f\u4e49\u751f\u65e5\u653b\u51fb\uff0c\u9047\u5230\u53ef\u4ee5\u62bd\u8c61\u6210K-SUM\u95ee\u9898\u7684\uff0c\u53ef\u4ee5\u4f7f\u7528\u5e7f\u4e49\u751f\u65e5\u653b\u51fb</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#2-sum","title":"2-SUM","text":"<p>\u8f93\u5165\uff1a2\u4e2a\u5217\u8868\\(L_1,L_2\u2286S\\), \u6bcf\u4e2a\\(L_i\\) \u4e2d\u7684\u5143\u7d20\u5747\u5300\u72ec\u7acb\u968f\u673a\u7684\u4ece\\(S\\)\u4e2d\u9009\u53d6</p> <p>\u8f93\u51fa\uff1a \\(x_1,x_2\\), \u6ee1\u8db3$x_1\u2295x_2=0, x_i\u2208L_i $</p> <p>\u8fc7\u7a0b\uff1a\u5b58\u4e24\u4e2a\u8868\uff0c\u628a\u7b2c\u4e00\u4e2a\u505a\u6210<code>hashtable</code>(\u6216\u8005\u6392\u5e8f)\uff0c\u4e24\u4e2a\u8868\u5927\u5c0f\u5206\u522b\u662f\\(2^{\\frac{n}{2}}\\)\uff0c\u904d\u5386\u7b2c2\u4e2a\u8868\u7684\u6bcf\u4e00\u9879\uff0c\u770b\u5728\u88681\u4e2d\u662f\u5426\u5b58\u5728\u78b0\u649e</p> <p>\u590d\u6742\u5ea6\uff1a\u65f6\u95f4\uff1a\\(O(2^{n/2})\\)\uff1b\u6570\u636e\uff1a\\(|L_1| = |L_2| = O(2^{n/2})\\)</p> <p>\u5206\u6790\uff1a\u4e24\u4e2a\u5927\u5c0f\u4e3a\\(O(2^{n/2})\\)\u7684\u8868\u53ef\u4ee5\u4ea7\u751f\\(|L_1|\\times |L_2| = 2^n\\)\u79cd\u914d\u5bf9\uff0c\u800c\\(x_1 = x_2\\)\uff0c\u5373\u6bcf\u4e00bit\u90fd\u76f8\u7b49\u7684\u6982\u7387\u4e3a\\(2^{-n}\\)\uff0c\u56e0\u6b64\\(|L_1|\\times |L_2| = 2^n\\)\u79cd\u914d\u5bf9\u4e2d\u7684\u89e3\u7684\u4e2a\u6570\u6070\u597d\u4e3a1\uff0c\u5373\u6982\u7387\u4e0a\u5b58\u5728\u4e00\u4e2a\u89e3</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#4-tree","title":"4-tree","text":"<p>\u6574\u4f53\u601d\u60f3\u5c31\u662f\u5206\u6cbb:</p> <ul> <li>\u9996\u5148\u5212\u62104\u4e2a\u96c6\u5408\uff0c\u6bcf\u4e2a\u96c6\u5408\u5927\u5c0f\u8bbe\u4e3a\\(2^x\\)\uff08\u540e\u7eed\u8ba1\u7b97\u51fax\u7684\u4e0b\u754c\uff09\uff1b</li> <li>\u7136\u540e\u4e24\u4e2a\u4e00\u7ec4\uff0c\u5229\u7528\u751f\u65e5\u653b\u51fb\u8ba9\u4f4e\\(l\\)\u6bd4\u7279\u76f8\u7b49\uff0c\u8fd9\u4e00\u5c42\u590d\u6742\u5ea6\u662f\\(T_1 = O(2^x)\\)\uff1b</li> <li>\u7b5b\u9009\u4e4b\u540e\u5f97\u52302\u4e2a\u96c6\u5408\uff08\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u662f\u4e00\u5bf9\\(x\\)\uff0c\u6ee1\u8db3\u4f4e\\(l\\)\u6bd4\u7279\u76f8\u7b49\uff09\uff0c\u96c6\u5408\u5927\u5c0f\u5747\u4e3a\\(O(2^{2x-l})\\)\uff1b</li> <li>\u518d\u4e00\u6b21\u5229\u7528\u751f\u65e5\u653b\u51fb\uff0c\u8ba9\u9ad8\\(l\\)\u6bd4\u7279\u76f8\u7b49\uff0c\u8fd9\u4e00\u5c42\u590d\u6742\u5ea6\u662f\\(T_2 = O(2^{2x-l})\\)\uff1b</li> </ul> <p>\u8ba1\u7b97\u51fa\u6700\u4e0a\u5c42\u96c6\u5408\u5927\u5c0f\u4e3a\\(O(2^{4x-l-n})\\)\uff0c\u8981\u6ee1\u8db3\u81f3\u5c11\u6709\u4e00\u4e2a\u89e3\uff0c\u5373\\(2^{4x-l-n}&gt;1\\)\uff0c\u4e14\u53d6\u65f6\u95f4\u590d\u6742\u5ea6\u76f8\u540c\\(T_1 = T_2\\)\uff0c\u5f97\u5230\u6700\u7ec8\u590d\u6742\u5ea6\u5728\\(O(2^{n/3})\\)</p> <p></p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#k-tree","title":"k-tree","text":"<p>\\((4,S)\\)\u80cc\u5305\u95ee\u9898\u53ef\u4ee5\u5229\u75284-tree\u7b97\u6cd5\u628a\u590d\u6742\u5ea6\u4ece\\(O(2^{n})\\)\u964d\u4f4e\u5230\\(O(2^{n/3})\\)\uff1b\u63a8\u5e7f\u5230\\((k,S)\\)\u80cc\u5305\u95ee\u9898\uff0c\u53ef\u4ee5\u5229\u7528k-tree\u7b97\u6cd5\u6c42\u89e3\uff1a</p> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u6570\u636e\u590d\u6742\u5ea6\uff1a\\(O(k2^{n/\\lfloor\\log{k}\\rfloor})\\)</li> <li>\u5f53\\(k  =2^{2\\sqrt{n}}\\)\u65f6\uff0c\u4e0a\u5f0f\u53d6\u6700\u5c0f\u503c\uff1a\\(k2^{n/\\lfloor\\log{k}\\rfloor} = 2^{2\\sqrt{n}}\\)</li> <li>\u8fd9\u8981\u6c42\uff0c\u5982\u679c\u4e00\u4e2a\u5bc6\u7801\u7b97\u6cd5\u53ef\u4ee5\u5199\u6210K-SUM\u95ee\u9898\uff0c\u5219\u8981\u4fdd\u8bc1N-bit\u5b89\u5168\uff0c\u5219\u9700\u8981\\(2\\sqrt{n}\\geq N\\)\uff0c\u5373\u53c2\u6570\u89c4\u6a21\u4e0d\u5c0f\u4e8e\\(n^2/4\\)</li> </ul> <p>\u653b\u51fb<code>8-AdHash</code></p> <p>\u8bbe\\(M = M_1||M_2\\cdots ||M_8\\)\uff0c\\(AdHash(M) = h(1,M_1)+h(2,M_2)\\cdots+h(8,M_8) = y\\)</p> <p>\u8be5\u95ee\u9898\u89c4\u7ea6\u62108-SUM\u95ee\u9898\uff0c\u51713\u5c42\uff0c\u6545\u8bbe\\(y = y_1||y_2||y_3\\)\uff0c\u5373\\(L = l_1+l_2+l_3\\)\uff0c\u5176\u4e2d\\(l_1 = l_2 = l_3 = L/3\\)\u5206\u522b\u662f\\(y_1,y_2,y_3\\)\u5bbd\u5ea6</p> <ul> <li>\u6839\u636e\\(O(k2^{n/(1+\\lfloor\\log{k}\\rfloor)})\\)\uff0c\u4ece\u660e\u6587\u7a7a\u95f4\u5747\u5300\u9009\u53d68\u4e2a\u5927\u5c0f\u4e3a\\(O(2^{n/4})\\)\u89c4\u6a21\u7684\u96c6\u5408</li> <li>8\u4e2a\u96c6\u5408\u5212\u4e3a4\u7ec4\uff0c\u5229\u7528\u751f\u65e5\u653b\u51fb\u4ee4\u6bcf\u4e00\u7ec4\u7684\u4f4e\\(l_1\\)\u6bd4\u7279\u7684\u548c\u6a21\\(2^{l_1} = y_1\\)\uff0c\u5f97\u52304\u4e2a\u96c6\u5408\\(L_{12},L_{34},L_{56},L_{78}\\)</li> <li>\u518d\u628a4\u4e2a\u96c6\u5408\u5212\u4e3a2\u7ec4\uff0c\u5229\u7528\u751f\u65e5\u653b\u51fb\u4ee4\u6bcf\u4e00\u7ec4\u7684\u4f4e\\(l_1+l_2\\)\u6bd4\u7279\u7684\u548c\u6a21\\(2^{l_1+l_2} = y_1||y_2\\)\uff0c\u5f97\u52302\u4e2a\u96c6\u5408</li> <li>\u540c\u4e0a</li> </ul> <p>\u5982\u679c\u6ca1\u627e\u5230\uff0c\u91cd\u590d\uff1b\u65f6\u95f4\u548c\u5b58\u50a8\u590d\u6742\u5ea6\u5747\u5728\\(O(2^{n/4})\\)</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_39","title":"\u4e2d\u95f4\u76f8\u9047\u653b\u51fb","text":"<p>\u548cSquare\u653b\u51fb\u4e00\u6837\u662f\u901a\u8fc7\u8ffd\u8e2a\u96c6\u5408\u7279\u6027\u7684\u5206\u6790\u65b9\u5f0f</p> <ul> <li>\u4e2d\u95f4\u6574\u4f53\u76f8\u9047\uff1a\u5206\u522b\u4ece\u52a0\u5bc6\u548c\u89e3\u5bc6\u4e24\u4fa7\u63a8\u5230\u4e2d\u5c06\u72b6\u6001\uff0c\u4ee4b\u6bd4\u7279\u5168\u90e8\u78b0\u649e\uff0c\u590d\u6742\u5ea6\u8ba1\u7b97\u5982\u4e0b\uff1a</li> </ul> <p></p> <ul> <li>\u4e2d\u95f4\u90e8\u5206\u76f8\u9047\uff1a\u5206\u522b\u4ece\u52a0\u5bc6\u548c\u89e3\u5bc6\u4e24\u4fa7\u63a8\u5230\u4e2d\u5c06\u72b6\u6001\uff0c\u4ee4b\u4e2dm\u6bd4\u7279\u78b0\u649e\uff0c\u590d\u6742\u5ea6\u8ba1\u7b97\u5982\u4e0b\uff1a</li> </ul> <p></p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#aes3_1","title":"AES3\u8f6e\u533a\u5206\u5668","text":"<p>\u6839\u636e\u6d3b\u8dc3\u96c6\u7684\u4f20\u64ad\u7279\u6027\u53ef\u4ee5\u6784\u90203\u8f6e\u533a\u5206\u5668\uff0c\u4e0eSquare\u653b\u51fb\u7c7b\u4f3c\uff1a\u5728Square\u653b\u51fb\u4e2d\uff0c\u5982\u679c\\(a_{11}\\)\u662f\u6d3b\u8dc3\u96c6\uff0c\u90a3\u4e48\u4e09\u8f6e\u4e4b\u540e\u5f97\u5230\\(C_{11}\\)\u662f\u5e73\u8861\u96c6\uff1b\u800c\u5728\u8fd9\u91cc\uff0c\u4fdd\u8bc1\\(a_{11}\\)\u662f\u6d3b\u8dc3\u96c6\uff0c\u5219\u4e09\u8f6e\u4e4b\u540e\u53ef\u77e5\\(C_{11}^{(3)}\\)\u81f3\u591a\u4e0e\u4e2d\u95f4\u72b6\u6001\u76849\u4e2a\u5b57\u8282\u6709\u5173\u3002\u6545\\(a_{11}\\rightarrow C_{11}^{(3)}\\)2\u5b57\u8282\u4e4b\u95f4\u5b58\u5728\\(2^{8\\times 9} = 2^{72}\\)\u79cd\u6620\u5c04\uff0c\u800c\u5bf9\u4e8e\u968f\u673a\u7f6e\u6362\u6765\u8bf4\u6620\u5c04\u6570\u4e3a\\((2^{8})^{256} = 2^{2048}\\)(\u4e0d\u8981\u6c42\u6ee1\u5c04\u3001\u5355\u5c04\u7b49)\uff0c\u7531\u6b64\u533a\u5206\u968f\u673a\u7f6e\u6362</p> <p></p> <p>\u8fdb\u884c\u533a\u5206\u653b\u51fb\uff1a\u9884\u8ba1\u7b97\\(2^{72}\\)\u5f20\u8868\uff0c\u6bcf\u5f20\u8868\u5927\u5c0f\\(8bit\\times 2^8 entry\\)\uff1b\u7136\u540e\u9009\u62e9\u660e\u6587\u8f93\u5165(\u4fdd\u8bc1\u7b2c\u4e00\u5b57\u8282\u6d3b\u8dc3\u96c6)\uff0c\u5f97\u5230\u5bc6\u6587\u8f93\u51fa\uff0c\u4ece\u800c\u5f97\u5230\\(a_{11},C_{11}^{3}\\)\u7684\u4e00\u5f20\u6620\u5c04\u8868\uff0c\u770b\u8fd9\u4e2a\u8868\u662f\u5426\u5728\u9884\u8ba1\u7b97\u7684\\(2^{72}\\)\u5f20\u8868\u4e2d\uff0c\u5982\u679c\u5728\uff0c\u8bf4\u660e\u4e3aAES\u7b97\u6cd5\uff0c\u5426\u5219\u662f\u968f\u673a\u7f6e\u6362</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#31_1","title":"3+1\u5bc6\u94a5\u6062\u590d","text":"<ul> <li>\u57283\u8f6e\u533a\u5206\u5668\u540e\u52a0\u4e00\u8f6e(\u5982\u679c\u8003\u8651MC\u5219\u5229\u7528\u4ea4\u6362AK\u548cMC\u987a\u5e8f\u7684<code>trick</code>)\uff1b</li> <li>\u9009\u62e9\u4e00\u4e2a\u7ed3\u6784\u4f53(\u7b2c\u4e00\u4e2a\u5b57\u8282\u4e3a\u6d3b\u8dc3\u96c6A\uff0c\u5176\u5b83\u5b57\u8282\u4e3aC)</li> <li>\u731c\u6d4b1\u5b57\u8282\u7684\u5bc6\u94a5\\(K^4_0\\)\uff0c\u628a\u5bc6\u6587\u56de\u63a8\u5230\u533a\u5206\u5668\u5c3e\u90e8\u5f97\u5230\u6620\u5c04\u8868\u662f\\(a_{11}\\rightarrow C_{11}^{(3)}\\)</li> <li>\u770b\u6620\u5c04\u8868\u662f\u5426\u5728\u9884\u8ba1\u7b97\u8868\u96c6\u5408\u4e2d\u5373\u53ef</li> </ul>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#5","title":"5\u8f6e\u533a\u5206\u5668","text":"<p>\u57284\u8f6e\u4e4b\u540e\u52a01\u8f6e\uff0c\u4e0e\u4e2d\u95f4\u72b6\u600126\u5b57\u8282\u6709\u5173</p> <p></p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#41_1","title":"4+1\u5bc6\u94a5\u6062\u590d","text":"<p>\u9488\u5bf9AES256</p> <p>\u540c\u7406\u5f97\u52304\u8f6e\u533a\u5206\u5668\uff0c\u6b64\u65f6\\(a_{11}\\rightarrow C_{11}^{(3)}\\)\u7684\u6620\u5c04\u4e0e\u4e2d\u95f4\u72b6\u6001\u768425\u4e2a\u5b57\u8282\u6709\u5173\uff0c\u56e0\u6b64\u5b58\u5728\\(2^{25\\times 8} = 2^{200}\\)\u79cd\u6620\u5c04(\u8fd9\u610f\u5473\u7740\u6211\u4eec\u8981\u7a77\u4e3e\\(2^{200}\\)\uff0c\u628a\u8868\u90fd\u9884\u8ba1\u7b97\u51fa\u6765)\uff0c\u867d\u7136\u968f\u673a\u7f6e\u6362\u6709\\(2^{2048}\\)\u79cd\u53ef\u80fd\u7684\u6620\u5c04\uff0c\u4f46\u662f\\(2^{200}\\)\u8fd8\u662f\u8fc7\u4e8e\u5927\u4e86\uff0c\u5bf9\u4e8e<code>AES128</code>\u751a\u81f3<code>AES192</code>\u6765\u8bf4\uff0c\u90fd\u4e0d\u5982\u7a77\u4e3e\u5bc6\u94a5\u7a7a\u95f4\u7684\u590d\u6742\u5ea6\uff0c\u56e0\u6b64\u8fd9\u6837\u4e00\u6765\u53ea\u80fd\u5206\u6790<code>AES256</code>\uff0c\u5176\u5b83\u4e0e3+1\u76f8\u540c</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#142","title":"1+4+2\u5bc6\u94a5\u6062\u590d","text":"<p>\u9488\u5bf9AES256</p> <p>\u57284\u8f6e\u533a\u5206\u5668\u5934\u90e8\u52a01\u8f6e\uff0c\u5c3e\u90e8\u52a02\u8f6e(\u6700\u540e\u4e00\u8f6e\u6ca1\u6709MC)\uff0c\u4e0eSquare\u76843+2\u7c7b\u4f3c\uff1b</p> <p>\u9884\u8ba1\u7b97\uff1a\u5229\u7528\u7684\u662f4\u8f6e\u533a\u5206\u5668\uff0c\u56e0\u6b64\u4ecd\u7136\u662f \u9884\u8ba1\u7b97\\(a_{11}\\rightarrow C_{11}^{(3)}\\)\u6620\u5c04\u8868\u5171\\(2^{200}\\)\u4e2a\u8868</p> <p>\u5728\u7ebf\u8ba1\u7b97\uff1a</p> <ul> <li>\u731c\u6d4b\\(K_{init}\\)\u76844\u4e2a\u5b57\u8282\u548c\\(K_{11}^{(1)}\\)\uff0c\u51715\u5b57\u8282\u5bc6\u94a5\uff1b\u4e3a\u4fdd\u8bc1\u4e00\u8f6e\u52a0\u5bc6\u540e\u7b2c1\u5b57\u8282\u662f\u6d3b\u8dc3\u96c6\uff0c\u8fd9\u91cc\u4f7f\u7528\u5c0f\u6280\u5de7\u662f\uff0c\u5148\u786e\u5b9a\\(a_{11}\\)\u904d\u5386\uff0c\u7136\u540e\u6839\u636e\u731c\u6d4b\u7684\u5bc6\u94a5\u89e3\u5bc6\u4e0a\u53bb\uff0c\u5f97\u5230\u9700\u8981\u9009\u62e9\u7684\u660e\u6587</li> </ul> <p></p> <ul> <li>\u731c\u6d4b\u7b2c6\u8f6e\u76841\u5b57\u8282\u7b49\u4ef7\u5bc6\u94a5(\u4f7f\u7528\u4ea4\u6362MC\u548cAK\u7684\u6280\u5de7)\u548c\u7b2c7\u8f6e\u76844\u5b57\u8282\u5bc6\u94a5\uff0c\u51715\u5b57\u8282\uff1b\u5e76\u89e3\u5bc6\u4e24\u8f6e\u5230\u533a\u5206\u5668\u5c3e\u90e8\uff0c\u5f97\u5230\u6620\u5c04\u8868\\(C_{11}^{(1)}\\rightarrow C_{11}^{(5)}\\)</li> </ul> <p></p> <ul> <li> <p>\u82e5\u6620\u5c04\u8868\u5728\u9884\u8ba1\u7b97\u96c6\u5408\u4e2d\uff0c\u5219\u5224\u65ad\u731c\u6d4b\u768410\u5b57\u8282\u5bc6\u94a5\u6b63\u786e\uff1b</p> </li> <li> <p>\u7528\u7c7b\u4f3c\u7684\u65b9\u6cd5\uff0c\u6620\u5c04\u8868\u6539\u4e3a\\(C_{11}^{(1)}\\rightarrow C_{21}^{(5)}\\)\u3001\\(C_{11}^{(1)}\\rightarrow C_{31}^{(5)}\\)\u3001\\(C_{11}^{(1)}\\rightarrow C_{41}^{(5)}\\)\uff0c\u9009\u53d6\u660e\u6587\u96c6\u5408\u4e0d\u53d8\uff0c\u518d\u4f9d\u6b21\u6062\u590d6\u30017\u8f6e\u768415\u5b57\u8282\u5bc6\u94a5</p> </li> </ul>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#_40","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u9884\u8ba1\u7b97\uff0c4\u4e2a\u8868\\(2^{208}\\times 4~~byte\\)\uff1b~~\u5728\u7ebf\u90e8\u5206\uff1a\\(4\\times 2^{80}\\times 256 = 2^{90}\\)\u6b21\u90e8\u5206\u52a0\u89e3\u5bc6~~</li> <li>\u5b58\u50a8\u590d\u6742\u5ea6\uff1a\u9884\u8ba1\u7b97\u8868\u5927\u5c0f\u4e3a\\(2^{200}\\times 2^8\\times 4= 2^{210}~~byte\\)</li> <li>\u6570\u636e\u590d\u6742\u5ea6\uff1a\\(2^{32}\\)\u4e2a\u9009\u62e9\u660e\u6587(\u5c3d\u7ba1\u4e00\u4e2a\u7ed3\u6784\u4f53\\(2^8\\)\uff0c\u4f46\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u5bc6\u94a5\u9009\u7684\u660e\u6587\u4e0d\u4e00\u6837\u00b7\u00b7\u00b7\u660e\u65874\u4e2a\u5b57\u8282\u81f3\u591a\\(2^{32}\\))</li> </ul> <p>\u4e00\u70b9\u6539\u8fdb\uff1a</p> <p>\u6620\u5c04\u8868\u540e\u9762\u7684\u9879(255)\u4e0e\u7b2c\u4e00\u9879\u5f02\u6216\uff0c\u53ef\u4ee5\u6d88\u6389\u4e00\u4e2a\u4e2d\u95f4\u53d8\u91cf\uff0c\u4ece\\(2^{200}\\)\u5f20\u8868\u964d\u4f4e\u5230\\(2^{192}\\)\u5f20</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#hash","title":"Hash\u51fd\u6570","text":"\u5b89\u5168\u5c5e\u6027 \u653b\u51fb\u590d\u6742\u5ea6 \u6297\u539f\u8c61(\u5355\u5411\u6027) \\(2^n\\) \u6297\u7b2c\u4e8c\u539f\u50cf(\u6297\u5f31\u78b0\u649e) \\(2^n\\) \u6297\u78b0\u649e(\u6297\u5f3a\u78b0\u649e) \\(2^{n/2}\\) \u6297\u957f\u5ea6\u6269\u5c55 \\(2^n\\)","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#md","title":"MD\u7ed3\u6784\u7b2c\u4e8c\u539f\u8c61\u653b\u51fb","text":"<p>\u5373\u627e\u4e00\u4e2a\u503c\u548c\u4efb\u610f\u4e00\u4e2a\u4e2d\u95f4\u8fde\u63a5\u53d8\u91cf\u78b0\u649e\u5373\u53ef</p> <p>\u5728\u5f3a\u5316MD\u7ed3\u6784\u4e2d\uff0c\u56e0\u4e3a\u6700\u540e\u586b\u5145\u4e86\u6d88\u606f\u957f\u5ea6\u4fe1\u606f\\(|M|\\)\uff0c\u800c\u8fd9\u79cd\u653b\u51fb\u6784\u9020\u51fa\u6765\u7684\u6d88\u606f\u5927\u6982\u7387\u957f\u5ea6\u4e0d\u4e00\u6837(\u9664\u975e\u627e\u5230\\(x_1\\)\u7684\u78b0\u649e\uff1f)\uff0c\u56e0\u6b64\u8fd9\u79cd\u653b\u51fb\u65e0\u6cd5\u6210\u529f</p>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#md_1","title":"\u5f3aMD\u7ed3\u6784\u591a\u78b0\u649e","text":"","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#mdmac","title":"\u5f3aMD\u7ed3\u6784\u5bc6\u94a5\u524d\u7f00MAC\u5b89\u5168","text":"<ol> <li>\u957f\u5ea6\u6269\u5c55\uff1a\u5df2\u77e5\\(H(M) = h\\)\uff0c\u6c42\\(H(M||Z) = h'\\)\uff0c\u53ea\u9700\u8981\u4ee4\\(Z = 00\\cdots 0~||~|M|~||x\\)\uff0c\u5373\u5148\u586b\u5145\u5230\u548c\u539f\u6765\u6d88\u606f\u4e00\u81f4\u5c31\u53ef\u4ee5\u5728\u4e4b\u540e\u968f\u610f\u586b\u5145\u4e86\u00b7\u00b7\u00b7</li> <li>\u6613\u4e8e\u4e8c\u6b21\u78b0\u649e\uff1a\u53ea\u8981\u627e\u5230\u4e00\u5bf9\u78b0\u649e\uff0c\u5c31\u53ef\u4ee5\u5728\u5176\u540e\u65e0\u9650\u7ea7\u8054\u6d88\u606f\u6784\u9020\u591a\u6b21\u78b0\u649e</li> </ol>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6%E5%A4%8D%E4%B9%A0.html#md4","title":"\u6bd4\u7279\u8ffd\u8e2a\u6cd5\u2014MD4\u4e3a\u4f8b","text":"<p>\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ul> <li>\u5bfb\u627e\u5408\u9002\u7684\u6d88\u606f\u5dee\u5206\uff08\u6d88\u606f\u6269\u5c55\u5411\u91cf\uff09</li> </ul> <p>\u9009\u62e9\u4e00\u5bf9\u660e\u6587\u6d88\u606f\u7684\u5dee\u5206$\u2206M=M^\u2032-M $\uff0c\u8981\u4f7f\u5f97\u4fdd\u8bc1\u78b0\u649e\u8def\u7ebf\u6210\u7acb\u7684\u5145\u5206\u6761\u4ef6\u3001\u5c24\u5176\u662f\u540e\u51e0\u6b65\u7684\u5145\u5206\u6761\u4ef6\u5c3d\u53ef\u80fd\u7684\u5c11</p> <ul> <li>\u6784\u9020\u78b0\u649e\u8def\u7ebf</li> </ul> <p>\u5bf9\u4e8e\u78b0\u649e\u653b\u51fb\uff0c\u5408\u9002\u7684\u660e\u6587\u5dee\u5206\u8981\u4f7f\u5f97\u4fdd\u8bc1\u5dee\u5206\u7279\u5f81\u6210\u7acb\u7684\u5145\u5206\u6761\u4ef6\uff0c\u5c24\u5176\u662f\u540e\u51e0\u8f6e\u7684\u5145\u5206\u6761\u4ef6\u5c3d\u53ef\u80fd\u5c11\u3002\u5bf9\u4e8e\u7b2c\u4e8c\u539f\u50cf\u653b\u51fb\uff0c\u5408\u9002\u7684\u660e\u6587\u5dee\u5206\u8981\u4f7f\u5f97\u6240\u6709\u7684\u5145\u5206\u6761\u4ef6\u5c3d\u53ef\u80fd\u5c11\uff0c\u8fd9\u6837\uff0c\u624d\u80fd\u4fdd\u8bc1\u4e0d\u7ecf\u8fc7\u660e\u6587\u4fee\u6539\u8fc7\u7a0b\uff0c\u5dee\u5206\u7279\u5f81\u4e5f\u4ee5\u9ad8\u6982\u7387\u6210\u7acb\u3002</p> <ul> <li>\u786e\u5b9a\u78b0\u649e\u8def\u7ebf\u6210\u7acb\u7684\u5145\u5206\u6761\u4ef6</li> </ul> <p>\u63a8\u5bfc\u78b0\u649e\u8def\u7ebf\u6210\u7acb\u7684\u5145\u5206\u6761\u4ef6</p> <ul> <li>\u4f7f\u7528\u6d88\u606f\u4fee\u6539\u6280\u672f\u63d0\u9ad8\u5dee\u5206\u8def\u7ebf\u6210\u7acb\u7684\u6982\u7387</li> </ul> <p>\u901a\u8fc7\u6d88\u606f\u4fee\u6539\u6280\u672f\uff0c\u6ee1\u8db3\u5145\u5206\u6761\u4ef6\u3002\u57fa\u672c\u660e\u6587\u4fee\u6539\u6280\u672f\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u660e\u6587\uff0c\u4ece\u800c\u4fdd\u8bc1\u7b2c\u4e00\u8f6e\u7684\u5145\u5206\u6761\u4ef6\u90fd\u6ee1\u8db3\uff1b\u9ad8\u7ea7\u660e\u6587\u4fee\u6539\u6280\u672f\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u660e\u6587\uff0c\u4f7f\u5f97\u7b2c\u4e8c\u8f6e\u7684\u524d\u51e0\u6b65\u7684\u6761\u4ef6\u90fd\u6ee1\u8db3\u3002</p> <ul> <li>\u8fd0\u884c\u78b0\u649e\u653b\u51fb\u7b97\u6cd5\uff0c\u4ea7\u751f\u78b0\u649e</li> </ul> <p>\u7a77\u4e3e\u641c\u7d22\uff1a\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u660e\u6587M\uff0c\u5229\u7528\u660e\u6587\u4fee\u6539\u6280\u672f\u8fdb\u884c\u4fee\u6539\uff0c\u6d4b\u8bd5\\(M\\)\u548c\\(M^\u2032=M+\u2206M\\)\u662f\u5426\u662f\u4e00\u5bf9\u78b0\u649e\u3002\u91cd\u590d\u4ee5\u4e0a\u8fc7\u7a0b\uff0c\u76f4\u5230\u627e\u5230\u4e00\u5bf9\u78b0\u649e\u3002\u91cd\u590d\u6b21\u6570\u548c\u5145\u5206\u6761\u4ef6\u7684\u4e2a\u6570\u76f4\u63a5\u76f8\u5173\u3002</p> <p><code>MD4</code>\u7ed3\u6784\uff1a</p> <p></p> <ul> <li>\u4e00\u4e2a\u538b\u7f29\u51fd\u6570\u517148\u6b65\uff0c\u6bcf16\u6b65\u79f0\u4e3a\u4e00\u8f6e\uff08\u4e00\u5171\u4e09\u8f6e\uff0c\u6bcf\u8f6e\u4f7f\u7528\u7684F\u51fd\u6570\u4e0d\u4e00\u6837\uff09\uff0c\u7b2c1\uff0c2\uff0c3\u8f6e\u4f7f\u7528\u7684F\u51fd\u6570\u4f9d\u6b21\u4e3a<code>F\u3001G\u3001H</code>\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u52a0\u6cd5\u662f\u6a21\\(2^{32}\\)\u52a0\u6cd5</li> <li>\u5176\u4e2d<code>a,b,c,d</code>\u662f128\u6bd4\u7279\u8fde\u63a5\u53d8\u91cf\u5206\u6210\u76844\u4e2a32\u6bd4\u7279\u5b57</li> <li>\u6bcf\u4e00\u6b65\u5904\u7406\u4e00\u4e2a\u660e\u6587\u5757\uff0c\u6bcf\u4e00\u8f6e(16\u6b65)\u6070\u597d\u5904\u7406512\u6bd4\u7279\u6d88\u606f(16\u4e2a32\u6bd4\u7279\u5b57)\uff1b</li> <li>\u6bcf\u4e00\u6b65\u5904\u7406\u4e00\u4e2a\u94fe\u63a5\u53d8\u91cf\u4e2d\u768432\u6bd4\u7279\u5b57(\u7b2c\u4e00\u6b65\u5904\u7406a\uff0c\u7b2c\u4e8c\u6b65d\uff0c\u7b2c\u4e09\u6b65c\uff0c\u7b2c\u56db\u6b65b)</li> </ul> <p>\u5dee\u5206\u7684\u5b9a\u4e49\uff1a</p> <ul> <li> <p>\u4f20\u7edf\u5dee\u5206\u4e2d\uff1a1\u8868\u793a\u8be5\u6bd4\u7279\u4e0d\u540c\uff0c0\u8868\u793a\u8be5\u6bd4\u7279\u76f8\u540c</p> </li> <li> <p>\u5e26\u7b26\u53f7\u7684\u5dee\u5206\uff1a\u7531\u4e8e\u662f\u6a21\u52a0\u8fd0\u7b97\uff0c\u56e0\u6b64\u5f15\u5165\u5e26\u7b26\u53f7\u7684\u5dee\u5206\uff1b\u6bcf\u4e00\u6b65\u7684\u5dee\u5206\u523b\u753b\u5305\u62ec\u5dee\u5206\u5bf9\u5e94\u7684\u4e0d\u540c\u6bd4\u7279\u7684\u4f4d\u7f6e\u548c\u7b26\u53f7</p> </li> </ul> <p></p> <p>\u5176\u4e2d\u6b63\u53f7\u8868\u793a0\u53d81\uff1b\u8d1f\u53f7\u8868\u793a1\u53d80</p> <p>\u5dee\u5206\u8fc7\u5e03\u5c14\u51fd\u6570\u4f20\u64ad\u7279\u6027\uff1a</p> <ul> <li></li> </ul> <p><code>e.g.</code></p> <p></p> <p>\\(b_0[31] = c_0[31]\\)\uff1b\u56e0\u4e3a\u6839\u636eF\u51fd\u6570\u7b2c1\u6761\u6027\u8d28\uff0c\u8981\u4f7f\u5f97d1\u65e0\u5dee\u5206\uff0c\u5219F\u8f93\u51fa\u65e0\u5dee\u5206\uff0c\u5219\u6709\\(y = z\\)\u5373\\(b_0[31] = c_0[31]\\)</p> <p>\u5dee\u5206\u8fc7\u6a21\u52a0\u8fd0\u7b97\u4f20\u64ad\u7279\u6027\uff1a</p> <p><code>e.g.</code></p> <p></p> <p>\\(b_0[31] = c_0[31]\\oplus 1\\)\uff1b\\(m_1\\Longrightarrow m_1' = 0\\Longrightarrow 1\\)\uff0c\u56e0\u6b64\u8981\u4f7f\u5f97\\(d_1\\)\u65e0\u5dee\u5206\uff0cF\u51fd\u6570\u8f93\u51fa\u9700\u5f97\u6709\u5dee\u5206(\u6ce8\u610f\u8fd9\u91ccm1\u662f\u6700\u9ad8\u4f4d\uff0c\u4e0d\u8003\u8651\u8fdb\u4f4d\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u63a7\u5236\\(F\\Longrightarrow F' = 1\\Longrightarrow 0\\)\u4fdd\u8bc1\u4e0d\u8fdb\u4f4d)\uff0c\u56e0\u6b64\u6761\u4ef6\u53ea\u9700\u8981\u4ee4\\(b_0[31] \u548c c_0[31]\\)\u76f8\u53cd\u5373\u53ef</p> <p>\u540c\u7406\uff0c\u5982\u679c\u8ba9\\(d_1 = d_1'\\)\uff0c\u5219\u5e94\u8be5F\u8f93\u51fa\u65e0\u5dee\u5206\uff0c\u5373\u548c\u4e0a\u4e00\u9898\u7c7b\u4f3c</p> <p>\u4e00\u4e2aMD4\u7684\u4f8b\u5b50\uff1a</p> <ol> <li> <p>\u5bfb\u627e\u5408\u9002\u7684\u6d88\u606f\u5dee\u5206\uff08\u6d88\u606f\u6269\u5c55\u5411\u91cf\uff09\uff1a\uff1b</p> </li> <li> <p>\u786e\u5b9a\u5dee\u5206\u8def\u5f84(\u5dee\u5206\u7279\u5f81)\uff1a</p> </li> <li> <p>\u786e\u5b9a\u78b0\u649e\u8def\u7ebf\u6210\u7acb\u7684\u5145\u5206\u6761\u4ef6\uff1a</p> </li> </ol> <p></p> <p>\u7c7b\u4f3c\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u6700\u7ec8\u63a8\u5bfc\u51fa122\u4e2a\u6bd4\u7279\u65b9\u7a0b\uff0c\u5df2\u7ecf\u8fdc\u5927\u4e8e\u751f\u65e5\u653b\u51fb\u7684\\(2^{64}\\)\u590d\u6742\u5ea6\uff0c\u5982\u4f55\u964d\uff1f</p> <ol> <li>\u4f7f\u7528\u6d88\u606f\u4fee\u6539\u6280\u672f\u63d0\u9ad8\u5dee\u5206\u8def\u7ebf\u6210\u7acb\u7684\u6982\u7387</li> </ol> <p>\u7b80\u5355\u660e\u6587\u4fee\u6539\u6280\u672f\uff1a</p> <ul> <li>\u5bf9round 1\u7684\u5145\u5206\u6761\u4ef6\uff0c\u53ef\u901a\u8fc7\u76f4\u63a5\u5c06\u94fe\u63a5\u53d8\u91cf\u4e0a\u7684\u6761\u4ef6\u8f6c\u6362\u4e3a\u6d88\u606f\u5b57\u4e0a\u7684\u6761\u4ef6\u6765\u5b9e\u73b0</li> <li>\u7b2c\u4e00\u8f6e\u6761\u4ef6\u5168\u90e8\u4fee\u6539\u540e\uff0c\u53ea\u526925\u4e2a\u5145\u5206\u6761\u4ef6</li> </ul> <p>\u9ad8\u7ea7\u660e\u6587\u4fee\u6539\u6280\u672f\uff1a</p> <ul> <li>\u540c\u65f6\u4fee\u6539\u591a\u4e2a\u6d88\u606f\uff0c\u6ee1\u8db3\u7b2c\u4e8c\u8f6e\u9700\u8981\u7684\u5145\u5206\u6761\u4ef6</li> <li>\u6ce8\u610f\uff0c\u6b64\u65f6\u7684\u4fee\u6539\u8981\u4fdd\u8bc1\u7b2c\u4e00\u8f6e\u5df2\u4fee\u6539\u597d\u7684\u6761\u4ef6\u4ecd\u80fd\u6ee1\u8db3\uff0c\u53ef\u501f\u52a9\u4e8e\u5c40\u90e8\u78b0\u649e\u6765\u5b9e\u73b0</li> <li> <p>\u901a\u8fc7\u6d88\u606f\u4fee\u6539\u6280\u672f\uff0c\u57fa\u672c\u53ef\u6ee1\u8db3\u7b2c\u4e00\u8f6e\u3001\u7b2c\u4e8c\u8f6e\u7684\u5145\u5206\u6761\u4ef6</p> </li> <li> <p>\u8fd0\u884c\u78b0\u649e\u653b\u51fb\u7b97\u6cd5\uff0c\u4ea7\u751f\u78b0\u649e</p> </li> </ul>","tags":["\u5bc6\u7801\u5b66"]},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html","title":"\u5bc6\u7801\u5b66\u5f15\u8bba\u590d\u4e60","text":""},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_2","title":"\u7ef4\u5409\u5c3c\u4e9a\u5206\u6790","text":""},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_3","title":"\u91cd\u5408\u6307\u6570\uff1a","text":"<p>\u8bbe\\(x = x_1,x_2,x_3\\cdots x_n\\)\u662f\u542b\u6709n\u4e2a\u5b57\u6bcd\u7684\u4e32\uff0c\u5219\u4ece\u4e2d\u9009\u53d6\u4e24\u4e2a\u5143\u7d20\uff0c\u8fd9\u4e24\u4e2a\u5143\u7d20\u76f8\u540c\u7684\u6982\u7387\u5373\u4e3a\u91cd\u5408\u6307\u6570\uff1a</p> <p>\u8bbe\\(f_i\\)\u4e3a26\u4e2a\u5b57\u6bcd\u4e2d\u7b2c\\(i\\)\u4e2a\u5b57\u6bcd\u5728\\(x\\)\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff1a $$ I_c(x) = \\frac{\\sum_{i = 0}^{25}f_i(f_i-1)}{n(n-1)} $$ \u56e0\u6b64\u53ef\u4ee5\u6839\u636e\u91cd\u5408\u6307\u6570\u731c\u6d4b\u5bc6\u94a5\u957f\u5ea6\\(d\\)\uff1a\u63d0\u53d6\u95f4\u9694\u4e3a\\(d\\)\u7684\u5bc6\u94a5\u5b57\uff0c\u6d4b\u8bd5\u5176\u91cd\u5408\u6307\u6570\uff0c\u5982\u679c\u63a5\u8fd1\\(0.065\\)\uff0c\u5219\u53ef\u4ee5\u8ba4\u4e3a\u5bc6\u94a5\u957f\u5ea6\u5373\u4e3a\\(d\\)</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_4","title":"\u91cd\u5408\u4e92\u6307\u6570\uff1a","text":"<p>\u8bbe\\(x = x_1,x_2,x_3\\cdots x_n\\)\u662fn\u4e2a\u5b57\u6bcd\u7684\u4e32\uff0c\\(y = y_1,y_2\\cdots y_{n\u2018}\\)\u662f\u4e2a\u5b57\u6bcd\u7684\u4e32\uff0c\u4ece\u4e24\u4e2a\u4e32\u4e2d\u5206\u522b\u53d6\u4e00\u5143\u7d20\uff0c\u76f8\u540c\u7684\u6982\u7387\u5373\u4e3a\u91cd\u5408\u4e92\u6307\u6570\uff1a $$ MI_c(x) = \\frac{\\sum_{i = 0}^{25}f_i(f_{i'})}{nn'} $$ \u5728\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u4e2d $$ \\displaylines{c = m+k_i\\pmod {26} \\\\ m = c-k_i\\pmod {26}} $$ \u5176\u4e2d\\(i\\in\\{0,1\\cdots 25\\}\\)</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_5","title":"\u5bc6\u7801\u5b66\u7684\u4fe1\u606f\u8bba\u57fa\u7840","text":""},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_6","title":"\u71b5","text":"<p>\u63cf\u8ff0\u4fe1\u606f\u7684\u4e0d\u786e\u5b9a\u6027</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>\u8981\u8fbe\u5230\u5b8c\u7f8e\u4fdd\u5bc6\u6027\uff1a</p> <p></p> <p>\u52a0\u5bc6\u65b9\u6848\uff1a $$ c = m\\oplus k $$ \u200b   \u5728\u552f\u5bc6\u6587\u653b\u51fb\u4e0b\u662f\u5b89\u5168\u7684\uff1b\u4f46\u662f\u9700\u8981\u4e00\u6b21\u4e00\u5bc6\uff1b\u4e00\u6b21\u4e00\u5bc6\u5b58\u5728\u5bc6\u94a5\u7ba1\u7406\u95ee\u9898\uff1a\u65b0\u5bc6\u94a5\u7684\u5b89\u5168\u4f20\u8f93\u9650\u5236\u4e86\u5176\u4f7f\u7528</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_7","title":"\u5206\u7ec4\u5bc6\u7801","text":""},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#des","title":"DES\u7b97\u6cd5","text":"\u8f6e\u6570 16 \u5206\u7ec4\u957f\u5ea6 64\u6bd4\u7279 \u5bc6\u94a5\u957f\u5ea6 56\u6bd4\u7279\uff08\u52a0\u4e0a8\u6bd4\u7279\u6821\u9a8c\u4f4d\uff09 \u8f6e\u51fd\u6570\u662f\u5426\u53ef\u9006 \u5426 S-box\u6570\u91cf 8"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_8","title":"\u52a0\u5bc6\u8fc7\u7a0b\uff1a","text":"<p>\u5bf9\u4e8e\u4e00\u4e2a64\u6bd4\u7279\u660e\u6587\u5206\u7ec4\uff1a</p> <ul> <li> <p>\u521d\u59cb\u7f6e\u6362IP\uff0c\u5f97\u5230\\(x_0 = IP(x) = L_0||R_0\\)\uff0c\u5c0664\u6bd4\u7279\u660e\u6587\u5206\u7ec4\u7ecfIP\u7f6e\u6362\u540e\u5206\u6210\u5de6\u53f3\u4e24\u90e8\u5206\u540432\u6bd4\u7279</p> </li> <li> <p>\u8fdb\u884c16\u8f6e\u8fed\u4ee3\u8fd0\u7b97\uff1a</p> </li> </ul> <p>\\(L_i = R_{i-1}\\\\   R_i = L_{i-1}\\oplus F(R_{i-1})\\)</p> <ul> <li>\u5bf9\u6bd4\u7279\u4e32\u8fdb\u884cIP\u9006\u7f6e\u6362</li> </ul>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#feistel","title":"Feistel\u7ed3\u6784\u7684\u52a0\u89e3\u5bc6\u4e00\u81f4\u6027","text":"<p>\u5373Feistel\u7ed3\u6784\u4e2d\uff0c\u52a0\u89e3\u5bc6\u7528\u7684\u51fd\u6570\u76f8\u540c\uff0c\\(F\\)\u4e0d\u8981\u6c42\u53ef\u9006\u800c\u4e0d\u662f\u4e0d\u50cfSPN\u7ed3\u6784\u4e2d\uff0c\u9700\u8981\u4e00\u4e2a\\(F^{-1}\\) $$ \\displaylines{ Enc: LE_1 = RE_0~~~RE_1 = F(RE_0)\\oplus LE_0 \\\\  Dec: RE_0 = LE_1~~~LE_0 = F(RE_0)\\oplus LE_0} $$</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#f","title":"\u8f6e\u51fd\u6570F","text":"<p>F\u8f93\u516532\u6bd4\u7279\uff08\u5206\u7ec4\u53f3\u534a\u90e8\u5206\uff09\uff0c\u8f93\u51fa32\u6bd4\u7279</p> <ul> <li>E\u6269\u5c55</li> </ul> <p>\u5bf9\u4e8e32\u6bd4\u7279\u8f93\u5165\u6bcf4\u6bd4\u7279\u5206\u7ec4\uff0c\u5728\u5176\u524d\u540e\u6dfb\u52a0\u76f8\u90bb\u6bd4\u7279</p> <p></p> <p>E\u6269\u5c55\u5b9e\u9645\u4e0a\u662f\u548cS-box\u914d\u5408\u4f7f\u7528\u7684\uff0c\u5728S-box\u67e5\u8868\u8fc7\u7a0b\u4e2d\uff0c\u6269\u5c55\u51fa\u6765\u7684\u4e24\u4f4d\u88ab\u4f5c\u4e3a\u884c\u6807\uff080-3\uff09\uff0c\u4e2d\u95f4\u539f\u59cb\u6bd4\u7279\u88ab\u4f5c\u4e3a\u5217\u6807\uff080-15\uff09</p> <p>\u6bcf\u4e00\u884c\u8fc7\u4e00\u4e2aS\u76d2\uff0c\u6bcf\u4e2aS\u76d2\u8f93\u51fa4\u6bd4\u7279\uff0c\u5b9e\u8d28\u5c31\u662f\u628a\u539f\u6765\u768432bit\u5206\u7ec4\u6bcf4\u6bd4\u7279\u505a\u4e00\u4e2a\u4ee3\u6362</p> <ul> <li>\u8f6e\u5bc6\u94a5\u52a0</li> </ul> <p>48\u6bd4\u7279\u5206\u7ec4\u4e0e\u8f6e\u5bc6\u94a5\uff0848\u6bd4\u7279\uff09\u5f02\u6216</p> <ul> <li>S\u76d2</li> </ul> <p>\u6bcf\u4e00\u4e2aS\u76d2\u662f\u4e00\u4e2a4\u6bd4\u7279\u52304\u6bd4\u7279\u7684\u591a\u8868\u4ee3\u6362\uff0c\u5177\u4f53\u67e5\u54ea\u4e2a\u8868\u7531E\u6269\u5c55\u51b3\u5b9a</p> <p></p> <ul> <li>P\u7f6e\u6362</li> </ul> <p></p> <p>\u5982\u56fe\u6240\u793a\uff0c\u7ecf\u8fc7P\u7f6e\u6362\\(S_1\\)\u51fa\u6765\u76844\u6bd4\u7279\u6269\u6563\u5230\u4e0d\u540c\u7684\u5217\u4e2d</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_9","title":"\u5bc6\u94a5\u751f\u6210\u7b97\u6cd5","text":"<ul> <li>56bit\u5148\u521d\u59cb\u7f6e\u6362</li> <li>\u4e4b\u540e\u6bcf\u4e00\u8f6e\u7684\u5b50\u5bc6\u94a5\uff0848\u6bd4\u7279\uff09\u6309\u5982\u4e0b\u65b9\u5f0f\u751f\u6210\uff1a</li> <li>\u5148\u8fc7\u4e00\u4e2a56\u523048\u6bd4\u7279\u7684\u56fa\u5b9a\u7f6e\u6362</li> <li>\u518d\u5faa\u73af\u5de6\u79fb\uff081\u4f4d\u62162\u4f4d\uff0c\u89c6\u8f6e\u6570\u800c\u5b9a\uff09</li> </ul> <p>\u5b50\uff08\u8f6e\uff09\u5bc6\u94a5\u7528\u4e8e\u76d2E\u6269\u5c55\u4e4b\u540e\u768448\u6bd4\u7279\u5206\u7ec4\u7f6e\u6362\uff0c\u518d\u8fc7S\u76d2</p> <p>\u89e3\u5bc6\u7684\u65f6\u5019\u9700\u8981\u53cd\u7740\u752816\u8f6e\u5bc6\u94a5</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#des_1","title":"DES\u7684\u5b89\u5168\u6027\u5206\u6790","text":"<ul> <li>\u5bc6\u94a5\u7684\u4e92\u8865\u6027\uff1a\\(E_{\\bar{k}}(\\bar x) = \\bar{E_k(x)}\\)</li> </ul> <p>\u53ef\u4ee5\u6839\u636e\u8fd9\u4e00\u7279\u70b9\u6784\u9020\u653b\u51fb</p> <p></p> <ul> <li>\u5f31\u5bc6\u94a5\u7684\u5b58\u5728</li> </ul> <p>\\(E_K(E_K(x)) = x\\)\uff0c\u5982\u679c16\u8f6e\u5b50\u5bc6\u94a5\u90fd\u76f8\u540c\uff0c\u5219\u5176\u5c31\u662f\u4e00\u4e2a\u5f31\u5bc6\u94a5</p> <ul> <li>\u534a\u5f31\u5bc6\u94a5\u7684\u5b58\u5728</li> </ul> <p>\\(E_K(E_{K'}(x)) = x\\)\uff0c\u5373K\u76d2K'\u7684\u8f6e\u5bc6\u94a5\u4e92\u8865\u5c31\u662f\u534a\u5f31\u5bc6\u94a5\u5bf9\uff1a\\(subK_{i} = subK'_{15-i}\\)</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#aes","title":"AES\u7b97\u6cd5","text":"\u8f6e\u6570\uff08AES128\u3001192\u3001256\uff09 10\u300112\u300114 \u5206\u7ec4\u957f\u5ea6 128\u6bd4\u7279\u300116\u5b57\u8282 \u5bc6\u94a5\u957f\u5ea6 128\u6bd4\u7279\u300116\u5b57\u8282 \u8f6e\u51fd\u6570\u662f\u5426\u53ef\u9006 \u662f S-box\u6570\u91cf 1"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_10","title":"\u52a0\u5bc6\u8fc7\u7a0b\uff1a","text":""},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#spnfeistel","title":"SPN\u7ed3\u6784\u5bf9\u6bd4Feistel\u7ed3\u6784","text":"<ul> <li>\u6bd4Feistel\u7ed3\u6784\u66f4\u6613\u4e8e\u5e76\u884c\u5904\u7406</li> <li>\u8981\u6c42S\u76d2\u53ef\u9006</li> <li>\u52a0\u89e3\u5bc6\u51fd\u6570\u4e0d\u540c</li> <li>\u96ea\u5d29\u6548\u5e94\u66f4\u597d\uff0c\u56e0\u6b64\u76f8\u5e94\u52a0\u5bc6\u8f6e\u6570\u66f4\u77ed</li> </ul>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#f_1","title":"\u8f6e\u51fd\u6570F","text":"<p>F\u8f93\u5165128\u6bd4\u7279\uff0c\u8f93\u51fa128\u6bd4\u7279</p> <ul> <li> <p>S\u76d2</p> </li> <li> <p>\u884c\u79fb\u4f4d</p> </li> </ul> <p>16\u5b57\u8282\u5199\u6210\\(4*4\\)\u77e9\u9635\uff0c\u6bcf\u4e00\u884c\u5faa\u73af\u5de6\u79fb\uff1a\u7b2c\u4e00\u884c0\uff0c\u7b2c\u4e8c\u884c1\uff0c\u7b2c\u4e09\u884c2\uff0c\u7b2c\u56db\u884c3</p> <p>\u4f7f\u5f97\u67d0\u4e00\u5217\u76844\u4e2a\u5b57\u8282\u6269\u6563\u52304\u5217</p> <ul> <li>\u5217\u6df7\u5408</li> </ul> <p>\\(4*4\\)\u5b57\u8282\u77e9\u9635\u7684\u6bcf\u4e00\u5217\u4e58\u4ee5\u4e2a\u77e9\u9635\uff0c\u4e58\u6cd5\u662f\\(GF(2^8)\\)\u4e0a\u7684\u4e58\u6cd5\uff0c\u57df\u4e0a\u7684\u4e0d\u53ef\u7ea6\u591a\u9879\u5f0f\u53d6\\(x^8+x^4+x^3+x+1\\)</p> <p></p> <p>\u5173\u4e8e8\u6bd4\u7279\u5b57\u8282\u4e58{02},{03}\u7684\u5feb\u901f\u8fd0\u7b97\uff1a</p> <p></p> <ul> <li>\u8f6e\u5bc6\u94a5\u52a0</li> </ul> <p>128\u6bd4\u7279\u5206\u7ec4\u4e0e\u8f6e\u5bc6\u94a5\uff08128\u6bd4\u7279\uff09\u5f02\u6216</p> <p>\u6ce8\u610fDES\u4e2d\u662f48\u6bd4\u7279\u8f6e\u5bc6\u94a5\u4e0eE\u6269\u5c55\u4e4b\u540e\uff0c\u8fc7S-box\u4e4b\u524d\u768448\u6bd4\u7279\u5f02\u6216</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_11","title":"\u5bc6\u94a5\u751f\u6210\u7b97\u6cd5","text":"<p>/ /</p> <p>\u89e3\u5bc6\u7684\u65f6\u5019\u9700\u8981\u53cd\u7740\u752816\u8f6e\u5bc6\u94a5</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#s","title":"S\u76d2\u7684\u9009\u53d6\u539f\u5219","text":"<ul> <li>\u975e\u7ebf\u6027\u5ea6</li> <li>\u76f8\u5173\u5ea6\uff1a\u8f93\u5165\u8f93\u51fa\u76f8\u5173\u5ea6\u8d8a\u5c0f\u8d8a\u597d</li> <li> <p>\u5dee\u5206\u4f20\u64ad\u6982\u7387\uff1a\u8d8a\u5c0f\u8d8a\u597d</p> </li> <li> <p>\u4ee3\u6570\u590d\u6742\u5ea6</p> </li> </ul> <p>\u4ee3\u6570\u8868\u8fbe\u5f0f\u5fc5\u987b\u590d\u6742</p> <ul> <li>\u5728DES\u4e2d\uff0cS\u76d2\u6bcf1\u6bd4\u7279\u7684\u8f93\u5165\u53d8\u5316\u5c06\u5bfc\u81f4\u81f3\u5c112\u6bd4\u7279\u8f93\u51fa\u53d8\u5316\uff1b\u8fd92\u6bd4\u7279\u5c06\u6269\u6563\u52302\u4e2aS\u76d2\u4e2d\uff0c\u53c8\u5f15\u8d77\u81f3\u5c114\u6bd4\u7279\u53d8\u6362\uff0c\u5373\u96ea\u5d29\u6548\u5e94\u3002</li> </ul>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#des_2","title":"\u53cc\u91cdDES","text":"<p>\u53cc\u91cdDES\u5bc6\u94a5\u957f\u5ea656*2 = 112 \u6bd4\u7279\uff0c\u5373\u8c03\u7528\u4e24\u6b21DES\u5bf9\u4e00\u7ec4\u660e\u6587\u52a0\u5bc6\u4e24\u6b21\u3002\u4f46\u5176\u5b89\u5168\u5f3a\u5ea6\u8fbe\u4e0d\u5230\\(2^{112}\\)\uff0c\u56e0\u4e3a\u5b58\u5728\u4e2d\u95f4\u76f8\u9047\u653b\u51fb\u3002</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_12","title":"\u4e2d\u95f4\u76f8\u9047\u653b\u51fb","text":"<p>\u5df2\u77e5\u660e\u6587\u653b\u51fb</p> <p>\u7a77\u4e3e\\(K_1\\)\uff0c\u7528DES\u52a0\u5bc6P\uff0c\u5b58\u50a8\u5bc6\u6587\u5230\u8868\\(L\\)\uff08\\(2^{56}\\)\u9879\uff09</p> <p>\u7a77\u4e3e\\(K_2\\)\uff0c\u7528DES\u89e3\u5bc6C\uff0c\u89e3\u5bc6\u7ed3\u679c\u67e5\u8868\uff0c\u5982\u679c\u5728L\u4e2d\uff0c\u5219\\(K_1,K_2\\)\u6709\u53ef\u80fd\u662f\u5bc6\u94a5</p> <p></p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#des_3","title":"\u4e09\u91cdDES","text":"<p>56*3 = 168\u6bd4\u7279\u5bc6\u94a564\u6bd4\u7279\u5206\u7ec4</p> <p>\u91c7\u7528\\(E-D-E\\)\u6a21\u5f0f\u3002</p> <p>\u4e09\u4e2a\u5bc6\u94a5\u72ec\u7acb\u9009\u53d6\u7684\u5b89\u5168\u6027\uff1a\u5b58\u5728\u4e2d\u95f4\u76f8\u9047\u653b\u51fb\\(2^{112}\\)</p> <p>\u5f53\\(K_1 = K_3\\)\u65f6\u5b58\u5728\u9009\u62e9\u660e\u6587\u653b\u51fb\uff08\u4e2d\u95f4\u76f8\u9047\uff09</p> <p>\u9009\u62e9\u660e\u6587P\u6ee1\u8db3 \\(P = Dec_{K_1}(0)\\)</p> <p></p> <p></p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_13","title":"\u5206\u7ec4\u5bc6\u7801\u5de5\u4f5c\u6a21\u5f0f","text":"<ul> <li>ECB\u6a21\u5f0f\uff1a</li> </ul> <p>\u91cd\u590d\u7684\u660e\u6587\u5206\u7ec4\u88ab\u52a0\u5bc6\u6210\u540c\u6837\u7684\u5bc6\u6587\u5206\u7ec4</p> <ul> <li>\u5e76\u884c\u6027\uff1a\u52a0\u89e3\u5bc6\u90fd\u53ef\u4ee5\u5e76\u884c</li> <li>\u663e\u8457\u7f3a\u70b9\uff1a\u76f8\u540c\u7684\u660e\u6587\u88ab\u52a0\u5bc6\u6210\u76f8\u540c\u7684\u5bc6\u6587</li> <li> <p>\u7528\u4e8e\u6570\u636e\u8f83\u5c11\uff0c\u5982\u52a0\u5bc6\u4f1a\u8bdd\u5bc6\u94a5\u7b49(\u73b0\u5728\u5df2\u7ecf\u5f88\u5c11\u4f7f\u7528)</p> </li> <li> <p>CBC\u6a21\u5f0f\uff1a</p> </li> </ul> <p>\u5bc6\u7801\u5206\u7ec4\u94fe\u63a5\u6a21\u5f0f\uff1b\u91cd\u590d\u7684\u660e\u6587\u5206\u7ec4\u4e00\u822c\u4f1a\u88ab\u52a0\u5bc6\u6210\u4e0d\u540c\u7684\u5bc6\u6587\u5206\u7ec4</p> <p>IV\u8981\u6c42\u4fdd\u8bc1\u65f6\u53d8\u4e14\u7b2c\u4e09\u65b9\u4e0d\u53ef\u77e5</p> <p></p> <p>\u4f20\u8f93\u65f6\u4e00\u4e2a\u5bc6\u6587\u5206\u7ec4\u7684\u9519\u8bef\u81f3\u591a\u4f20\u64ad\u5230\u4e24\u4e2a\u89e3\u5bc6\u5206\u7ec4\uff1b</p> <p>\u52a0\u5bc6\u65f6\u4e00\u4e2a\u5bc6\u6587\u5206\u7ec4\u9519\u8bef\u81f3\u591a\u4f20\u9012\u5230\u6240\u6709\u5206\u7ec4\uff0c\u4f46\u662f\u89e3\u5bc6\u77e5\u6094\u5f71\u54cd\u4e00\u4e2a\u5206\u7ec4\u3002 </p> <ul> <li> <p>\u5e76\u884c\u6027\uff1a</p> <p>\u52a0\u5bc6\u4e0d\u53ef\u5e76\u884c\uff0c\u89e3\u5bc6\u53ef\u5e76\u884c\uff1a\u4e0b\u4e00\u7ec4\u7684\u8ba1\u7b97\u4f9d\u8d56\u4e8e\u4e0a\u4e00\u7ec4\u7684\u5bc6\u6587\uff0c\u52a0\u5bc6\u65f6\u53ea\u80fd\u4e32\u884c\uff1b\u89e3\u5bc6\u65f6\uff0c\u6240\u6709\u5bc6\u6587\u5206\u7ec4\u5df2\u77e5\uff0c\u6545\u53ef\u5e76\u884c\u89e3\u5bc6</p> </li> <li> <p>CFB\u6a21\u5f0f\uff1a</p> </li> </ul> <p>\u6570\u636e\u4e0d\u9700\u8981\u586b\u5145\uff0c\u4e0d\u9700\u8981\u4e3a\u5206\u7ec4\u6574\u6570\u500d\u3002\u52a0\u5bc6\u4e0d\u53ef\u5e76\u884c\uff0c\u89e3\u5bc6\u53ef\u4ee5\u3002</p> <p>\u6bcf\u6b21\u79fb\u4f4d\u52a0\u5bc6\\(s\\)(\u901a\u5e38\u4e3a8)\u6bd4\u7279\uff1a\u6570\u636e\u52a0\u5bc6\u6548\u7387\u53d8\u4f4e\u3002</p> <p>\u6bcf\u6b21\u52a0\u5bc6\u64cd\u4f5c\uff1a</p> <ul> <li>\u4e0a\u8f6eS\u6bd4\u7279\u8f93\u51fa\u8fdb\u5165\u79fb\u4f4d\u5bc4\u5b58\u5668\uff1b\u5206\u7ec4\u5bc6\u7801\u52a0\u5bc6\u5bc4\u5b58\u5668\u5185\u503c\uff08\u660e\u6587\u5206\u7ec4\u957f\u5ea6\uff09\uff0c\u5f97\u5230\u5bc6\u6587\u5206\u7ec4\u8f93\u51fa</li> <li>\u53d6\u5bc6\u6587\u5206\u7ec4\u7684\u4f4eS\u6bd4\u7279\u4e0e\u660e\u6587\u7684S\u6bd4\u7279\u505a\u5f02\u6216\uff0c\u4f5c\u4e3a\u672c\u8f6e\u8f93\u51fa</li> </ul> <p>\u53ef\u770b\u51fa\u6b64\u8fc7\u7a0b\u53ea\u9700\u89818\u6bd4\u7279\u5bc6\u94a5\uff0c\u4f46\u6bcf\u6b21\u9700\u8ba1\u7b97\u5bc6\u6587\u5206\u7ec4\u957f\u5ea6\u7684\u201c\u5bc6\u94a5\u201d\uff0c\u9ad8\u4f4d\u820d\u5f03\u4e0d\u7528\u3002\u52a0\u89e3\u5bc6\u8fc7\u7a0b\u4e2d\u53ea\u7528\u5230\u5206\u7ec4\u5bc6\u7801\u7684\u52a0\u5bc6\u51fd\u6570\u3002</p> <p></p> <ul> <li>OFB\u6a21\u5f0f\uff1a</li> </ul> <p>\u6570\u636e\u4e0d\u9700\u8981\u586b\u5145\uff0c\u4e0d\u9700\u8981\u4e3a\u5206\u7ec4\u6574\u6570\u500d\u3002</p> <p>\u514b\u670d\u4e86CBC\u548cCFB\u9519\u8bef\u4f20\u64ad\u7684\u95ee\u9898\uff0c\u4e00\u4e2a\u5bc6\u6587\u5757\u7684\u9519\u8bef\u4e0d\u4f1a\u5f71\u54cd\u5230\u5176\u5b83\u5bc6\u6587\u5757\u89e3\u5bc6\uff1a\u4f46\u8fd9\u4e5f\u5bfc\u81f4\u4e86\u9519\u8bef\u96be\u4ee5\u68c0\u6d4b\u3002</p> <p>\u56e0\u4e3a\u514b\u670d\u4e86\u9519\u8bef\u4f20\u64ad\u95ee\u9898\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u5728\u9ad8\u566a\u58f0\u4fe1\u9053\u4e0a\uff1b\u4f46\u662f\u4e0d\u80fd\u7528\u4e8e\u8ba4\u8bc1\u4f5c\u7528\uff08CBC\u548cCFB\uff09</p> <p>\u6ce8\u610f\u8fd9\u91cc\u62c9\u7ebf\u8fdb\u5165\u4e0b\u4e00\u8f6e\u7684\u4f4d\u7f6e\u4e8eCFB\u4e0d\u540c\uff0c\u56e0\u6b64OFB\u7406\u8bba\u4e0a\u65e0\u6cd5\u5e76\u884c\u89e3\u5bc6\u3002\u4f46\u5982\u679c\u63d0\u524d\u77e5\u9053IV\uff0c\u53ef\u4ee5\u9884\u8ba1\u7b97\u5bc6\u94a5\u6d41</p> <p></p> <ul> <li>CTR\u6a21\u5f0f\uff1a</li> </ul> <p>\u514b\u670d\u4e86CBC\u548cCFB\u9519\u8bef\u4f20\u64ad\u7684\u95ee\u9898\uff0c\u4e00\u4e2a\u5bc6\u6587\u5757\u7684\u9519\u8bef\u4e0d\u4f1a\u5f71\u54cd\u5230\u5176\u5b83\u5bc6\u6587\u5757\u89e3\u5bc6\u3002</p> <p>\u4f46\u8fd9\u4e5f\u5bfc\u81f4\u4e86\u9519\u8bef\u96be\u4ee5\u68c0\u6d4b\u3002</p> <p></p> <p>\u52a0\u89e3\u5bc6\u5747\u53ef\u4ee5\u5e76\u884c\uff1b</p> <p>\u4fbf\u4e8e\u968f\u673a\u8bbf\u95ee\u67d0\u4e00\u5757\u5206\u7ec4\uff1b</p> <p>\u53ea\u9700\u8981\u52a0\u5bc6\u7b97\u6cd5\uff1b</p> <p>\u9ad8\u901f\u52a0\u5bc6\u7b97\u6cd5\u591a\u91c7\u7528\u8fd9\u79cd\u6a21\u5f0f\uff1b</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_14","title":"\u5206\u7ec4\u5bc6\u7801\u5e38\u89c1\u653b\u51fb\u7c7b\u578b","text":"\u540d\u79f0 \u89e3\u91ca\u8bf4\u660e \u5f3a\u5ea6 \u552f\u5bc6\u6587\u653b\u51fb \u654c\u624b\u4ec5\u83b7\u5f97\u540c\u4e00\u5bc6\u94a5\u52a0\u5bc6\u7684\u82e5\u5e72\u7ec4\u660e\u6587 \u6700\u5f31 \u5df2\u77e5\u660e\u6587\u653b\u51fb \u654c\u624b\u638c\u63e1\u4e00\u4e9b\u7ed9\u5b9a\u7684\u660e\u5bc6\u6587\u5bf9\u3002\u662f\u5bc6\u7801\u7b97\u6cd5\u88ab\u8981\u6c42\u81f3\u5c11\u62b5\u6297\u7684\u4e00\u79cd\u653b\u51fb \u6b21\u4e4b \u9009\u62e9\u660e\u6587\u653b\u51fb \u654c\u624b\u80fd\u591f\u9009\u62e9\u660e\u6587\u5e76\u83b7\u5f97\u76f8\u5e94\u7684\u5bc6\u6587\u3002\u5206\u7ec4\u5bc6\u7801\u4e00\u822c\u8981\u6c42\u62b5\u6297\u8fd9\u4e2a \u8f83\u5f3a \u9009\u62e9\u5bc6\u6587\u653b\u51fb \u654c\u624b\u80fd\u591f\u9009\u62e9\u5bc6\u6587\uff0c\u5e76\u83b7\u5f97\u76f8\u5e94\u7684\u660e\u6587\u3002\u5728\u516c\u94a5\u3001\u6570\u5b57\u7b7e\u540d\u4e2d\u8003\u8651\u8f83\u591a \u6700\u5f3a <ul> <li>\u5dee\u5206\u5206\u6790\u662f\u9009\u62e9\u660e\u6587\u653b\u51fb\u3002\u5728\u786e\u5b9a\u4e86\u9ad8\u6982\u7387\u5dee\u5206\u8def\u7ebf\u4e4b\u540e\uff0c\u5fc5\u987b\u9009\u62e9\u80fd\u591f\u6ee1\u8db3\u8fd9\u6761\u5dee\u5206\u8def\u5f84\u7684\u660e\u5bc6\u6587\u5bf9\uff0c\u624d\u80fd\u591f\u8ba1\u7b97\u51fa\u76f8\u5173\u7684\u5bc6\u94a5\u3002</li> <li>\u7ebf\u6027\u5206\u6790\u662f\u5df2\u77e5\u660e\u6587\u653b\u51fb\u3002\u5728</li> </ul> <p>\u5bf9\u4e8e\u9009\u62e9\u660e\u6587\u653b\u51fb\u4e00\u4e2a\u901a\u4fd7\u7684\u89e3\u91ca\uff1a\u901a\u8fc7\u5bf9\u5bf9\u65b9\u7b97\u6cd5\u7684\u5927\u91cf\u7814\u7a76\u5206\u6790\uff0c\u6211\u4eec\u53d1\u73b0\u5982\u679c\u5bf9\u65b9\u52a0\u5bc6\u4e00\u4e9b\u7279\u5b9a\u5185\u5bb9\uff08\u5728\u5dee\u5206\u5206\u6790\u4e2d\u5373\u7b26\u5408\u5dee\u5206\u8def\u5f84\u7684\u5185\u5bb9\uff09\uff0c\u6839\u636e\u5176\u5bc6\u6587\uff0c\u5c31\u53ef\u4ee5\u63a8\u65ad\u5bc6\u94a5\u3002</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_15","title":"\u5f3a\u529b\u653b\u51fb","text":"<p>\u5bf9\u4e8e\\(k\\) bit \u957f\u7684\u5bc6\u94a5\uff1a</p> \u5f3a\u529b\u653b\u51fb \u653b\u51fb\u7c7b\u578b T\uff08\u5728\u7ebf\uff09 T(\u79bb\u7ebf) D M \u6ce8\u91ca \u7a77\u4e3e\u653b\u51fb \u5df2\u77e5\u660e\u6587 \\(O(2^k)\\) \\(0\\) \\(O(1)\\) \\(O(1)\\) \u654c\u624b\u6bcf\u6b21\u83b7\u5f97\u660e\u5bc6\u6587\u5bf9\uff0c\u5747\u9700\u7a77\u4e3e \u67e5\u8868\u653b\u51fb \u9009\u62e9\u660e\u6587 \\(O(1)\\) \\(O(2^k)\\) \\(O(1)\\) \\(O(2^k)\\) \u9009\u62e9\u4e00\u4e2a\u660e\u6587\\(p*\\)\u7a77\u4e3e\\(2^k\\)\u5bc6\u94a5\uff0c\u5b58\u5230\u8868\u4e2d \u65f6\u95f4\u5b58\u50a8\u6743\u8861\u653b\u51fb \u9009\u62e9\u660e\u6587 \\(O(2^{2k/3})\\) \\(O(2^k)\\) \\(O(1)\\) \\(O(2^{2k/3})\\) \u8282\u7ea6\u5b58\u50a8\uff0c\u4e00\u6b21\u67e5\u8be2\u6392\u591a\u4e2a\u5bc6\u94a5"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_16","title":"\u65f6\u95f4\u5b58\u50a8\u6743\u8861\u653b\u51fb","text":"<p>\u654c\u624b\u9009\u62e9\u660e\u6587P\u5e76\u83b7\u5f97\u5bf9\u5e94\u5bc6\u6587C\uff0c\u5c1d\u8bd5\u6062\u590d\u5bc6\u94a5K</p> <ul> <li>\u7ea6\u5316\u51fd\u6570(reduction function): \\(R:n~bit\\rightarrow k~bit\\), \u5176\u4e2d\\(n\\)\u4e3a\u5206\u7ec4\u957f\u5ea6\\(k\\)\u4e3a\u5bc6\u94a5\u957f\u5ea6\u3002\u53ef\u4ee5\u662f\u622a\u53d6\u6216\u8005\\(hash\\)</li> <li>\u94fe\u63a5\u51fd\u6570\uff1a\\(g(K) = R(E_K(P^*))\\)\uff0c\u5176\u4e2d\\(p^{*}\\)\u4e3a\u654c\u624b\u9009\u5b9a\u7684\u660e\u6587</li> <li> <p></p> </li> <li> <p></p> </li> </ul> <p>\u4e00\u5f20\u8868\u662f\\(m\\)\u4e2a\u94fe\uff0c\u6bcf\u4e2a\u94fe\u957f\\(t\\)\uff0c\u4e00\u5171\u6709\\(s\\)\u4e2a\u8fd9\u6837\u7684\u8868\uff0c\u6bcf\u4e2a\u8868\u9009\u7528\u4e0d\u540c\u7684\u7ea6\u5316\u51fd\u6570\uff0c\u4f7f\u5f97\u5b58\u50a8\u7684\u8fd9\u4e9b\u96c6\u548c\u5c3d\u53ef\u80fd\u8986\u76d6\u5bc6\u94a5\u7a7a\u95f4</p> <p>\u6bcf\u8ba1\u7b97\u4e00\u4e2a\\(C_i\\)\uff0c\u5c31\u628a\\(C_i\\)\u548c\\(S\\)\u4e2a\u8868\u4e2d\u6bcf\u4e2a\u8868\u7684\u7ec8\u6b62\u70b9\u96c6\u5408\u6bd4\u8f83\uff1a</p> <ul> <li> <p>\u6bd4\u65b9\u8bf4\u5982\u679c\u5728\u7b2cS\u4e2a\u8868\u4e2d\uff0c\u6709\\(C_i = K_{j,t}\\)\uff08\u5176\u4e2d\\(1&lt;j&lt;m\\)\uff09\uff0c\u5219\u8981\u6c42\u7684\u5bc6\u94a5\u5373\u4e3a\\(K_{j,t-i}\\)</p> </li> <li> <p>\u5982\u679cS\u6b21\u67e5\u8868\u5747\u4e0d\u5728\uff0c\u5219\u7ee7\u7eed\u8ba1\u7b97\\(C_{i+1} = g(C_i)\\)</p> </li> </ul> <p>\u5e73\u5747\u67e5\u5230\u94fe\u7684\u4e00\u534a\u80fd\u67e5\u5230\u5bc6\u94a5\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(tS)\\)\uff08\u56e0\u4e3a\u6bcf\u6b21\u8981\u67e5S\u5f20\u8868\uff09</p> <ul> <li>\u53ef\u4ee5\u770b\u5230\uff0c\u76f8\u6bd4\u4e8e\u67e5\u627e\u653b\u51fb\uff0c\u65f6\u95f4\u5b58\u50a8\u6743\u8861\u653b\u51fb\u4ecd\u7136\u662f\u9884\u8ba1\u7b97\u9636\u6bb5\u7a77\u4e3e\u5bc6\u94a5\uff0c\u5728\u7ebf\u9636\u6bb5\u67e5\u8868 / \u94fe\u5c3e\u3001\u5934\u3002\u5176\u6838\u5fc3\u601d\u60f3\u5728\u4e8e\u4e0d\u662f\u5b58\u50a8\u6240\u6709\u7684\u9884\u8ba1\u7b97\u5bc6\u6587\u3002\u800c\u662f\u901a\u8fc7\u7ea6\u5316\u51fd\u6570\u5efa\u7acb\u4e86\u8fd9\u4e9b\u5bc6\u94a5\u4e4b\u95f4\u7684\u5173\u8054\uff0c\u53ea\u5b58\u50a8\u94fe\u5934\u548c\u94fe\u5c3e\uff0c\u8282\u7701\u4e86\u7a7a\u95f4\uff1b</li> </ul> <p>\u4e0e\u6b64\u540c\u65f6\u4e00\u6b21\u9519\u8bef\u67e5\u627e\u6392\u9664\u4e00\u5217\\(m\\)\u4e2a\u5bc6\u94a5\uff0c\u800c\u4e0d\u662f\u67e5\u8868\u653b\u51fb\u4e00\u6b21\u67e5\u627e\u6392\u9664\u4e00\u4e2a\u9519\u8bef\u5bc6\u94a5\uff1a</p> <p></p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_17","title":"\u5dee\u5206\u5206\u6790","text":"<p>\u5dee\u5206\u5206\u6790\u662f\u9009\u62e9\u660e\u6587\u653b\u51fb\uff1b\u5dee\u5206\u8868\u793a\u5dee\u5f02\u6027\uff1b\u5dee\u5206\u5206\u6790\u4e2d\u5173\u5fc3\u5dee\u5206\u4f20\u64ad\u7279\u6027\uff1b</p> <p>\u5dee\u5206\u7279\u5f81 \u53c8\u79f0\u4e3a \u5dee\u5206\u8def\u7ebf</p> <p>r\u8f6e\u5dee\u5206\u7684\u6982\u7387\uff1a\u786e\u5b9a\u4e86\u8f93\u5165\u8f93\u51fa\u5dee\u5206\u4e4b\u540e\uff0c\u6240\u6709\u53ef\u80fd\u7684\u5dee\u5206\u8def\u7ebf\uff08\u4e00\u5bf9\u8f93\u5165\u8f93\u51fa\u5dee\u5206\u4f1a\u5bf9\u5e94\u591a\u6761\u5dee\u5206\u8def\u5f84\uff09\u7684\u6982\u7387\u4e4b\u548c</p> <p>r\u8f6e\u5dee\u5206\u533a\u5206\u5668\uff1a\u4ee5\u6982\u7387p\u6210\u7acb\u7684r\u8f6e\u8f93\u5165\u8f93\u51fa\u5dee\u5206\uff1b\u5176\u4e2dp\u5e94\u8be5\u5927\u4e8e\\(1/2^n\\)\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u5dee\u5206\uff0c\u5219\u8ba4\u4e3a\u5176\u4e3a\u968f\u673a\u7f6e\u6362</p> <p>\u4fe1\u566a\u6bd4\uff1a\u6b63\u786e\u5bf9/\u6b63\u786e\u5bf9\u7684\u6570\u91cf+\u9519\u8bef\u5bf9\u7684\u6570\u91cf</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#3des","title":"\u5dee\u5206\u653b\u51fb\u6d41\u7a0b\uff0c\u4ee53\u8f6eDES\u4e3a\u4f8b\uff0c\u9610\u8ff0\u5dee\u5206\u653b\u51fb\u7684\u57fa\u672c\u65b9\u6cd5\uff1a","text":"<ul> <li>\u641c\u5bfb\u5dee\u5206\u8def\u5f84\uff0c\u6784\u9020\u4e00\u4e2a(2\u8f6e\u62161\u8f6e)\u5dee\u5206\u533a\u5206\u5668\\(\uff08\u5bf9\u4e8e\u7ed9\u5b9a\u8f93\u5165\u5dee\u5206X\uff0c\u9ad8\u6982\u7387\u8f93\u51fa\u5dee\u5206X\u2019\uff0cP = P_1\\cdot P_2\uff09\\)</li> <li>\u9009\u62e9\u5927\u91cf\u6ee1\u8db3\u8be5\u5dee\u5206\u7684\u660e\u6587\u5bf9\uff0c\u8f93\u5165\u7b97\u6cd5\uff0c\u5f97\u5230\u5bc6\u6587\u8f93\u51fa</li> <li>\u5bf9\u5bc6\u6587\u6c42\u5dee\u5206\uff0c\u5f80\u56de\u63a8\u5230\u533a\u5206\u5668\u5c3e\u90e8\uff0c\u6784\u5efaS-box\u65b9\u7a0b\uff0c\u4f7f\u5176\u6ee1\u8db3\u533a\u5206\u5668\u5c3e\u90e8\u5dee\u5206\uff08\u7a77\u4e3e\u6216\u5229\u7528\u5dee\u5206\u5206\u5e03\u8868\uff09\uff0c\u786e\u5b9a\u5bc6\u94a5\u90e8\u5206\u6bd4\u7279\u4fe1\u606f\u3002</li> <li>\u7a77\u4e3e\u5bc6\u94a5\u5269\u4f59\u6bd4\u7279\u4fe1\u606f\uff0c\u6062\u590d</li> <li>\u5982\u679c\u7528\u6b63\u786e\u5bc6\u94a5\u89e3\u5bc6\uff0c\u5219\u89e3\u5bc6\u7ed3\u679c\u5e94\u5f53\u4ee5\u6982\u7387\\(P\\)\u6ee1\u8db3\u5dee\u5206\u533a\u5206\u5668\u7684\u5c3e\u90e8\u5dee\u5206</li> <li>\u5982\u679c\u7528\u9519\u8bef\u5bc6\u94a5\u89e3\u5bc6\uff0c\u5219\u89e3\u5bc6\u7ed3\u679c\u5e94\u5f53\u4ee5\\(1/2^{64}\\)\uff08\u5e73\u5747\u6982\u7387\uff09\u6ee1\u8db3\u5dee\u5206\u533a\u5206\u5668\u7684\u5c3e\u90e8\u5dee\u5206</li> <li>\u4e8b\u5b9e\u4e0a\u8fd9\u91cc\u4e0d\u9700\u8981\u5b8c\u5168\u7a77\u4e3e\uff0c\u53ea\u9700\u8981\u5efa\u7acb\u5173\u4e8eS\u76d2\u7684\u65b9\u7a0b\uff0c\u7a77\u4e3e\u5bf9\u5e94\u4f4d\u7f6e\u8f6e\u5bc6\u94a5\uff0c\u786e\u5b9a\u5019\u9009\u5bc6\u94a5\u5373\u53ef</li> <li>\u4ece\u5dee\u5206\u533a\u5206\u5668\u5c3e\u90e8\u63a8\u5bc6\u6587\u7684\u65f6\u5019\u5229\u7528DES\u4e2dS-box\u7684\u6027\u8d28\uff0c\u7a77\u4e3e\u5bc6\u94a5\u65f6\u5355\u72ec\u8ba1\u7b97\u6bcf\u4e2as-box\uff0c\u53ef\u4ee5\u66f4\u7ec6\u7c92\u5ea6\u7684\u786e\u5b9a\u8f93\u51fa\u5dee\u5206\uff1a</li> <li>\u8f93\u5165\u5dee\u5206\u4e3a0\uff0c\u8f93\u51fa\u5dee\u5206\u4e5f\u4e3a0</li> <li>\u8f93\u5165\u5dee\u5206\u4e0d\u4e3a0\uff0c\u8f93\u51fa\u5dee\u5206\u4e0d\u4e00\u5b9a</li> <li>\u4e5f\u53ef\u4ee5\u5229\u7528S-box\u7684\u5dee\u5206\u5206\u5e03\u8868\u6765\u6784\u9020\u6c42\u89e3\u65b9\u7a0b</li> </ul>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_18","title":"\u7ebf\u6027\u5206\u6790","text":""},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#s_1","title":"S\u76d2\u7684\u7ebf\u6027\u8fd1\u4f3c\u8868\uff1a","text":"<p>\u8f93\u5165\u63a9\u7801\uff1aS-box\u8f93\u5165\u7684\u7279\u5b9a\u4f4d\u7f6e\u5f02\u6216\uff08\u8f93\u5165\u63a9\u7801\u53d6\u503c\u4e3a1\u7684\u4f4d\u7f6e\uff09</p> <p>\u8f93\u5165\u63a9\u7801\uff1aS-box\u8f93\u51fa\u7684\u7279\u5b9a\u4f4d\u7f6e\u5f02\u6216\uff08\u8f93\u51fa\u63a9\u7801\u53d6\u503c\u4e3a1\u7684\u4f4d\u7f6e\uff09</p> <p>\u8ba1\u7b97\u65b9\u6cd5\uff1a</p> <p>\u884c\u5750\u6807\u662f\u8f93\u5165\u63a9\u7801\uff0c\u5217\u5750\u6807\u662f\u8f93\u51fa\u63a9\u7801\uff1b</p> <p>\u5bf9\u4e8e\u8868\u4e2d\u7684\u6bcf\u4e00\u9879<code>LAT[i][j]</code>\uff0c\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u8ba1\u7b97\uff1a</p> <p>\u904d\u5386\u6240\u6709\u8f93\u5165\uff0c\u8ba1\u7b97\uff1a<code>if( &lt;\u8f93\u5165\u63a9\u7801\uff0c\u8f93\u5165&gt; == &lt;\u8f93\u51fa\u63a9\u7801\uff0c\u8f93\u51fa&gt; ) LAT[i][j]++;</code></p> <p>\u4e3a\u4ec0\u4e48\u8868\u9879\u503c\u662f\u5076\u6570\uff1a $$ \u8f93\u5165&lt;\\alpha,x&gt;\uff0c\u8f93\u51fa&lt;\\beta,s[x]&gt;\u3002\\ \u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u63a9\u7801\\alpha\uff0c\u904d\u5386\u6240\u6709\u8f93\u5165\uff0c&lt;\\alpha,x&gt;\u7684\u53d6\u503c\u4e2d\uff0c0\u548c1\u7684\u6570\u91cf\u76f8\u540c\u3002\\</p> <p>\u8f93\u51fa&lt;\\beta,s[x]&gt;\u53d6\u503c\u540c\u7406\u3002\\ \u63a9\u7801\\alpha\u548c\\beta\u4f4d\u6570\u76f8\u540c\u65f6\uff0c\u8f93\u5165&lt;\\alpha,x&gt;\u4e0e\u8f93\u51fa&lt;\\beta,s[x]&gt;\u4e00\u4e00\u5bf9\u5e94\uff0c\u6613\u77e5(0,0)(1,1)\u6570\u91cf\u4e3a\u5076\u6570\\ \u8f93\u5165/\u8f93\u51fa \u63a9\u7801\u4f4d\u6570\u589e\u52a0\u4e0d\u6539\u53d8&lt;\\alpha,x&gt;,&lt;\\beta,s[x]&gt;\u53d6\u503c\u3002\u6545\u4f4d\u6570\u4e3a\u5076\u6570\u3002 $$</p> <p>\u53ef\u4ee5\u60f3\u60f30\u5bf9\u5e940\uff0c1\u5bf9\u5e941\uff0c\u8fd9\u4e2a\u65f6\u5019\u8868\u9879\u53d6\u503c\u6700\u5927\uff0c\u4e14\u4e3a\u5076\u6570\uff0c\u4ea4\u6362\u4f4d\u7f6e\u53ef\u4ee5\u6362\u51fa\u6240\u6709\u5bf9\u5e94\u60c5\u51b5\uff0c\u4e14\u6bcf\u6b21\u4ea4\u6362\uff0c\uff080\uff0c0\uff09\uff081\uff0c1\uff09\u7684\u5bf9\u5e94\u5173\u7cfb\u8981\u4e48\u4e0d\u53d8\uff0c\u8981\u4e48\u4e00\u4e0b\u53d8\u5076\u6570\u4e2a\u3002\u3002</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_19","title":"\u591a\u8f6e\u7ebf\u6027\u903c\u8fd1\u5f0f\u4e0e\u5bc6\u94a5\u6062\u590d\u653b\u51fb","text":"<p>\u5982\u56fe\u6240\u793a\uff0c\u591a\u8f6e\u7ebf\u6027\u903c\u8fd1\u5f0f\u5229\u7528\u4e86\u80fd\u62b5\u6d88\u7684\u4f4d\u7f6e\uff08\u4e0a\u4e00\u8f6e\u7684\u8f93\u5165\u4f5c\u4e3a\u4e0b\u4e00\u8f6e\u7684\u8f93\u51fa\uff09</p> <p></p> <p>\u4e09\u4e2a\u5f0f\u5b50\u5f02\u6216\u5f97\u5230\uff1a\\(X_0[15]\\oplus F(X_2,K_2)[8] = K_0[15]\\oplus K_1[3] \\oplus K_2[0]\\)\uff0c\u5f97\u5230\u4e00\u4e2a\u53ea\u4e0e\u8f93\u5165\u3001\u8f93\u51fa\u3001\u5bc6\u94a5\u6bd4\u7279\u76f8\u5173\u7684\u5f0f\u5b50\uff0c\u4e0e\u4e2d\u95f4\u72b6\u6001\u65e0\u5173\u3002</p> <p>\u5bf9\u4e8e\\(n\\)\u8f6e\u7ebf\u6027\u903c\u8fd1\u5f0f\u504f\u5dee\u7684\u8ba1\u7b97\uff1a\u5806\u79ef\u5f15\u7406\uff1a\\((\\frac{1}{2}+2^{n-1}\\prod_{1}^{n}(p_i-\\frac{1}{1}))-\\frac{1}{2}\\)</p> <p>\u5bc6\u94a5\u6062\u590d\u653b\u51fb\u4e0e\u5dee\u5206\u76f8\u540c\uff0c\u53ea\u662f\u8fd9\u91cc\u6539\u4e3a\u7ebf\u6027\u533a\u5206\u5668\uff0c\u4e14\u4e0d\u9700\u8981\u6311\u9009\u7279\u5b9a\u660e\u5bc6\u6587\u5bf9\uff08\u7ebf\u6027\u662f\u5df2\u77e5\u660e\u6587\u653b\u51fb\uff09</p> <p></p> <p>\u4e00\u3001\uff084\uff094\u8f6eDES\u7684\u7ebf\u6027\u653b\u51fb\uff1a 1\u3001\u6839\u636e\u6784\u5efaDES\u7684\u9ad8\u504f\u5dee3\u8f6e\u7ebf\u6027\u903c\u8fd1\u5f0f\uff0c\u6839\u636e\u6784\u5efa\u7684\u533a\u5206\u5668\u786e\u5b9a\u4e2d\u95f4\u72b6\u6001\u9700\u8981\u6062\u590d\u7684l\u6bd4\u7279 2\u3001\u83b7\u53d6N\u7ec4\u8f93\u5165\u660e\u6587\u5e76\u8ba1\u7b97\u5bc6\u6587 2\u3001\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5bc6\u6587c\uff0c\u5206\u522b\u5229\u75282^l\u4e2a\u731c\u6d4b\u8f6e\u5bc6\u94a5\u53bb\u8fdb\u884c\u4e00\u8f6e\u89e3\u5bc6\uff0c\u6c42\u89e3\u4e2d\u95f4\u72b6\u6001Q\uff0c\u8ba1\u7b97\u7ebf\u6027\u903c\u8fd1\u5f0f\u5de6\u8fb9\u662f\u5426\u4e3a0\uff1b\u82e5\u6210\u91cc\uff0c\u7ed9\u76f8\u5e94\u7684\u8ba1\u6570\u5668+1 3\u3001\u7edf\u8ba1\u8ba1\u7b97\u7ed3\u679c\uff0c\u5bf9\u7167\u533a\u5206\u5668\u7684\u504f\u5dee\uff0c\u7559\u4e0b\u504f\u5dee\u6700\u5927\u7684\u524d\u82e5\u5e72\u5019\u9009\u5bc6\u94a5\uff0c\u7528\u989d\u5916\u7684\u5bc6\u6587\u5bf9\u9a8c\u8bc1\u5019\u9009\u5bc6\u94a5</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_20","title":"\u6d41\u5bc6\u7801","text":""},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_21","title":"\u6d41\u5bc6\u7801\u7279\u70b9\uff1a","text":"<ul> <li>\u5904\u7406\u6548\u7387\u9ad8</li> <li>\u5b9e\u73b0\u7b80\u5355</li> <li>\u4fbf\u4e8e\u786c\u4ef6\u5b9e\u73b0</li> <li>\u52a0\u89e3\u5bc6\u901f\u5ea6\u5feb</li> <li>\u6ca1\u6709\u6216\u53ea\u6709\u6709\u9650\u7684\u9519\u8bef\u4f20\u64ad\uff1a\u6d41\u5bc6\u7801\u8981\u6c42\u6536\u53d1\u65b9\u540c\u6b65\u3002\u5982\u679c1\u4e2a\u5bc6\u6587\u51fa\u9519\uff0c</li> </ul> <p>\u5176\u5b89\u5168\u6027\u53d6\u51b3\u4e8e\u5bc6\u94a5\u6d41\u751f\u6210\u5668\u7684\u8bbe\u8ba1\uff1a\u5468\u671f\u3001\u590d\u6742\u6027\u3001\u4f2a\u968f\u673a\u6027\u7b49</p> <p>\u6d41\u5bc6\u7801\u548c\u5206\u7ec4\u5bc6\u7801\u5bf9\u6bd4\uff1a</p> <p></p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_22","title":"\u540c\u6b65\u6d41\u5bc6\u7801","text":"<ul> <li>\u5bc6\u94a5\u6d41\u7684\u4ea7\u751f\u72ec\u7acb\u4e8e\u660e\u6587\u548c\u5bc6\u6587\uff0c\u7531\u79cd\u5b50\u5bc6\u94a5\u4f5c\u4e3a\u8f93\u5165\uff0c\u4ea7\u751f\u52a0\u5bc6\u5bc6\u94a5\u6d41\u548c\u89e3\u5bc6\u5bc6\u94a5\u6d41\u7528\u4e8e\u52a0\u89e3\u5bc6</li> </ul> <p>\u4e3a\u4e86\u4e0d\u53d7\u540c\u6b65\u72b6\u6001\u7684\u9650\u5236\uff0c\u53ef\u4ee5\u4f7f\u7528\u81ea\u540c\u6b65\u6d41\u5bc6\u7801\uff1a</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_23","title":"\u81ea\u540c\u6b65\u6d41\u5bc6\u7801","text":"<p>\u4e0e\u540c\u6b65\u6d41\u5bc6\u7801\u7684\u533a\u522b\u5728\u4e8e\u5bc6\u94a5\u6d41\u7684\u4ea7\u751f\u4e0d\u4ec5\u4e0e\u79cd\u5b50\u5bc6\u94a5\u6709\u5173\uff0c\u8fd8\u548c\u5df2\u4ea7\u751f\u7684\u5bc6\u6587\u6709\u5173</p> <p>\u6bd4\u5982\uff1a\u6bcf\u6b21\u4f7f\u7528\u4ea7\u751f\u7684\u4e00\u4e2a\u5bc6\u6587\u538b\u5165\u79fb\u4f4d\u5bc4\u5b58\u5668\uff0c\u548c\u79cd\u5b50\u5bc6\u94a5\u76f8\u4f5c\u7528\u4ea7\u751f\u5bc6\u94a5\u6d41\uff1b\u786e\u4fdd\u4e86\u5bc6\u94a5\u6d41\u751f\u6210\u5668\u7684\u8f93\u5165\u5728\u4e0d\u65ad\u53d8\u5316</p> <p></p> <p>\u4e00\u4e2a\u81ea\u540c\u6b65\u6d41\u5bc6\u7801\u7684\u4f8b\u5b50\uff1a</p> <p></p> <ul> <li>\u81ea\u540c\u6b65\u6d41\u5bc6\u7801\u7684\u7279\u70b9\uff1a</li> </ul> <p></p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#lfsr","title":"\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668(LFSR)","text":"<p>\u5bc6\u94a5\u6d41\u751f\u6210\u5668\u7684\u7ed3\u6784\uff1a</p> <p></p> <p>n\u7ea7\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u7684\u6784\u6210\uff1a</p> <p>\u5bc4\u5b58\u5668\u7684\u957f\u5ea6\uff1a\u7ea7\u6570</p> <p>\u521d\u59cb\u72b6\u6001\u7531n\u4e2a\u5143\u7d20\u7ec4\u6210(\u6bd4\u65b9\u8bf4n\u6bd4\u7279)\uff0c\u5171\\(2^n\\)\u79cd\u53d6\u503c</p> <p>\u53cd\u9988\u51fd\u6570\uff1a\u7ebf\u6027\u51fd\u6570</p> <p></p> <p></p> <p>\u6ce8\u610f\\(a_{j+1}\\)\u662f\u79fb\u4f4d\u5bc4\u5b58\u5668\u7684\u9ad8\u4f4d\uff0c\u6bcf\u6b21\u66f4\u65b0\uff0c\u4f4e\u4f4d\u4f5c\u4e3a\u8f93\u51fa\u79fb\u9664\u5bc4\u5b58\u5668\u3002</p> <p>n\u7ea7LFSR\u7684\u5468\u671f\u6700\u5927\u4e3a\\(2^{n-1}\\)\uff0c\u6b64\u65f6\u79f0\u4e3am\u5e8f\u5217</p> <ul> <li> <p>\u5982\u4f55\u9009\u62e9\u5c3d\u53ef\u80fd\u77ed\u7684LFSR\u4ea7\u751f\u5468\u671f\u957f\u7684\u5e8f\u5217\uff1a\u53ea\u8981\u9009\u62e9\u7684\u8fde\u7ed3\u591a\u9879\u5f0f\u662f\u4e00\u4e2a\\(F_2\\)\u4e0a\u7684n\u6b21\u672c\u5143\u591a\u9879\u5f0f\uff0c\u5219\u751f\u6210\u7684LFSR\u662f\u4e00\u4e2am\u5e8f\u5217</p> </li> <li> <p>\u5df2\u77e5\u4e00\u4e2a\u5e8f\u5217a\uff0c\u5982\u4f55\u6784\u9020\u4e00\u4e2a\u5c3d\u53ef\u80fd\u77ed\u7684LFSR\u6765\u4ea7\u751fa\uff1aBM\u7b97\u6cd5</p> </li> </ul>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#bm","title":"BM\u7b97\u6cd5","text":""},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#hash","title":"Hash\u51fd\u6570","text":"<p>\u5c06\u4efb\u610f\u957f\u5ea6\u7684\u6d88\u606f\\(x\\)\u538b\u7f29\u4e3a\u56fa\u5b9a\u957f\u5ea6\u7684\u6d88\u606f\u503c\\(y\\)</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_24","title":"\u5e94\u7528\u573a\u666f\uff1a","text":"<ul> <li>\u68c0\u6d4b\u6d88\u606f\u5b8c\u6574\u6027</li> <li>\u6784\u5efa\u4f2a\u968f\u673a\u51fd\u6570</li> <li>\u7528\u4f5c\u4f2a\u968f\u673a\u6570\u53d1\u751f\u5668</li> <li>\u6570\u5b57\u7b7e\u540d</li> </ul>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_25","title":"\u751f\u65e5\u653b\u51fb","text":""},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_26","title":"\u751f\u65e5\u95ee\u9898\uff1a","text":"<p>m\u4e2a\u4eba\u7684\u751f\u65e5\u5728365\u5929\u968f\u673a\u5747\u5300\u5206\u5e03\uff0c\u6c42\u81f3\u5c11\u4e24\u4e2a\u4eba\u751f\u65e5\u76f8\u540c\u7684\u6982\u7387\u5927\u4e8e1/2\uff0cm\u53d6\u591a\u5927</p> <p>\u5148\u6c42\u5176\u53cd\u4e8b\u4ef6\uff1am\u4e2a\u4eba\u751f\u65e5\u5168\u90fd\u4e0d\u540c\u7684\u6982\u7387\uff0c\u518d\u75281\u51cf\u4e4b\u5373\u53ef</p> <p></p> <p>\u5bf9\u4e8e\u6982\u7387\u7a7a\u95f4\u4e3an\u7684\u5206\u5e03\uff1a\u628a365\u6362\u6210n\u5373\u53ef</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_27","title":"\u5b89\u5168\u5c5e\u6027\uff1a","text":"Hash\u51fd\u6570\u7684\u653b\u51fb \u5b89\u5168\u6027 \u89e3\u91ca \u6297\u539f\u50cf\uff08\u5355\u5411\u6027\uff09 \\(2^n\\) \u7ed9\u5b9a\\(H\\)\u548c\u4efb\u610f\u4e00\u4e2a\u50cf\\(y\\)\uff0c\u5176\u5bf9\u5e94\u8f93\u5165\u672a\u77e5\u3002\u627e\u5230\u539f\u50cf\u6ee1\u8db3\\(y = H(x)\\)\u518d\u8ba1\u7b97\u4e0a\u662f\u4e0d\u53ef\u884c\u7684 \u6297\u7b2c\u4e8c\u539f\u50cf\uff08\u6297\u5f31\u78b0\u649e\uff09 \\(2^n\\) \u7ed9\u5b9a\\(H\\)\u6d88\u606f\u548c\u6d88\u606f\\(x\\)\uff0c\u627e\u53e6\u4e00\u4e2a\u6d88\u606f\\(x'\\)\uff0c\u6ee1\u8db3\\(H(x)=H(x')\\)\u662f\u8ba1\u7b97\u4e0a\u4e0d\u53ef\u884c\u7684 \u6297\u78b0\u649e\uff08\u6297\u5f3a\u78b0\u649e\uff09 \\(2^{n/2}\\) \u7ed9\u5b9a\\(H\\)\uff0c\u627e\u5230\u4efb\u610f\u4e24\u4e2a\u4e0d\u540c\u7684\u8f93\u5165\\(x\\)\u548c\\(x'\\)\uff0c\u6ee1\u8db3\\(H(x)=H(x')\\)\u5728\u8ba1\u7b97\u4e0a\u662f\u4e0d\u53ef\u884c\u7684 \u6297\u957f\u5ea6\u6269\u5c55 MD\u7ed3\u6784\u7684\u7f3a\u9677 \u7ed9\u5b9a\\(H(M)\\)\u548c\u6d88\u606f\u957f\u5ea6\uff0c\u627e\u5230\\(h',z\\)\u6ee1\u8db3\\(H(M\\parallel z) = h'\\)\uff0c\u8ba1\u7b97\u4e0a\u4e0d\u53ef\u884c <p>\u4e09\u8005\u4e4b\u95f4\u5173\u7cfb\u5927\u81f4\u53ef\u4ee5\u7528\u4e0b\u56fe\u8868\u793a\uff1a</p> <p></p> <ul> <li>\u6297\u78b0\u649e\u4e00\u5b9a\u6297\u7b2c\u4e8c\u539f\u50cf\uff1a\u4efb\u610f\u4e00\u5bf9\u78b0\u649e\u90fd\u627e\u4e0d\u5230\uff0c\u7ed9\u5b9a\u7684\u78b0\u649e\u66f4\u627e\u4e0d\u5230</li> <li>\u6297\u78b0\u649e\u4e00\u5b9a\u6297\u539f\u50cf\u5417\uff1f\u4e0d\u4e00\u5b9a</li> <li>\u6297\u7b2c\u4e8c\u539f\u50cf\u4e00\u5b9a\u6297\u539f\u50cf\uff1b</li> </ul>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#mac","title":"MAC\u7b97\u6cd5","text":""},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#hashmac","title":"\u57fa\u4e8eHash\u7684MAC","text":""},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#mac_1","title":"\u57fa\u4e8e\u5206\u7ec4\u5bc6\u7801\u7684MAC","text":""},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#daa","title":"DAA","text":"<p>\u8003\u8651DES\u7684CBC\u6a21\u5f0f\uff0c\u6bcf\u4e00\u7ec4\u90fd\u7528\u76f8\u540c\u7684\u5bc6\u94a5\uff0c\u53d6\u6700\u540e\u4e00\u5bc6\u6587\u5206\u7ec4\u7684\u82e5\u5e72\u6bd4\u7279\u4f5c\u4e3a\u8f93\u51fa\uff1a</p> <p></p> <p>\u5176\u5b58\u5728\u4f2a\u9020\u653b\u51fb\uff1a</p> <ul> <li>\u5047\u8bbe\u660e\u6587\\(m_1\\)\u957f\u4e3a\u4e00\u4e2a\u5206\u7ec4\uff0c\u5176DAA\u8f93\u51fa\u4e3a\\(t\\)\uff1b\u6211\u4eec\u5728\u4e0d\u77e5\u9053\u5bc6\u94a5K\u7684\u60c5\u51b5\u4e0b\u5c1d\u8bd5\u4f2a\u9020\\(m'\u4f7f\u5f97m' = m_1||m_2\\)\uff0c\u5e76\u83b7\u53d6\u5176MAC\u503c</li> <li>\u53ea\u9700\u8981\u53d6\\(m_2 = m_1\\oplus t\\)\uff0c\u5c06\\(m_1||m_2\\)\u505a\u4e3aDAA\u7684\u8f93\u5165\uff0c\u5176\u8f93\u51fa\u4ecd\u7136\u4e3a\\(t\\)</li> <li>\u4f2a\u9020\u6210\u529f</li> </ul>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#daacmac","title":"\u6539\u8fdb\u7684DAA\uff1aCMAC","text":"<p>\u5728MAC\u8f93\u51fa\u7684\u5206\u7ec4\u8ba1\u7b97\uff0c\u9009\u7528\u4e00\u4e2a\u989d\u5916\u7684\u5bc6\u94a5</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_28","title":"\u590d\u6742\u6027\u7406\u8bba","text":""},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_29","title":"\u5355\u5411\u51fd\u6570","text":"<p>\u5355\u5411\u51fd\u6570\u6307\u5bf9\u503c\u57df\u4e2d\u51e0\u4e4e\u6240\u6709\u503c\uff0c\u8ba1\u7b97\u51fa\u539f\u50cf\u662f\u56f0\u96be\u7684\uff1b\u4f46\u5176\u503c\u57df\u4e2d\u4e5f\u53ef\u80fd\u5b58\u5728\u4e00\u4e9b\u503c\uff0c\u6c42\u89e3\u539f\u50cf\u5bb9\u6613\u3002</p> <p>\u540c\u6837\u5730\uff0c\u4e00\u4e2a\u975e\u5355\u5411\u51fd\u6570\uff0c\u5176\u4e0d\u4fdd\u8bc1\u5bf9\u503c\u57df\u4e2d\u51e0\u4e4e\u6240\u6709\u503c\u6c42\u89e3\u539f\u50cf\u56f0\u96be\u3002\u4f46\u5176\u503c\u57df\u4e2d\u4ecd\u53ef\u80fd\u5b58\u5728\u6c42\u89e3\u539f\u50cf\u56f0\u96be\u7684\u503c\u3002</p> <p></p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#pnp","title":"P\u95ee\u9898\u548cNP\u95ee\u9898","text":""},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_30","title":"\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668","text":"<p>\u662f\u4e00\u7c7b\u786e\u5b9a\u6027\u7b97\u6cd5\uff1a\u5e94\u5f53\u8f93\u51fa\u4efb\u610f\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\uff0c\u4e14\u8f93\u51fa\u5b57\u7b26\u4e32\u7684\u5206\u5e03\u4e0e\u5747\u5300\u5206\u5e03\u8ba1\u7b97\u4e0a\u4e0d\u53ef\u5206\u3002</p> <p>\u6536\u96c6\u71b5\u6e90\u4f5c\u4e3a\u771f\u968f\u673a\u6570\u751f\u6210\u5668\u8f93\u5165\uff0c\u8f93\u51fa\u4e00\u4e2a\u968f\u673a\u79cd\u5b50\uff0c\u4f5c\u4e3a\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u8f93\u5165\u3002</p> <p>\u53ef\u4ee5\u5229\u7528\u6d41\u5bc6\u7801\u3001\u5206\u7ec4\u5bc6\u7801\u3001Hash\u51fd\u6570\u3001\u516c\u94a5\u5bc6\u7801\u7b49\u6784\u9020\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668</p> <p></p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#rsa","title":"RSA\u52a0\u5bc6","text":"<ol> <li> <p>\u968f\u673a\u9009\u62e9\u5927\u7d20\u6570\\(p\u3001q\\)</p> </li> <li> <p>\u8ba1\u7b97\\(n = p\\cdot q\\quad \u3001\\quad \\varphi(n) = (p-1)(q-1)\\)  \u5176\u4e2d\\(\\varphi()\\)\u4e3a\u6b27\u62c9\u51fd\u6570\uff0c\\(\\varphi(n) = \\varphi(p)\\varphi(q)\\)</p> </li> <li> <p>\u9009\u62e9\\(e:gcd(e,(\\varphi(n))) = 1\\)</p> </li> <li> <p>\u786e\u5b9a\\(d:ed\\equiv 1 \\pmod {\\varphi(n)}\\)  \u5176\u4e2d \\(\\varphi(n) = (p-1)(q-1)\\)</p> </li> <li> <p>\u52a0\u5bc6\uff1a\\(c = m^e\\pmod{n}\\)</p> </li> </ol> <p>\u89e3\u5bc6\uff1a\\(m = c^d\\pmod{n}\\)</p> <ul> <li> <p>\u5176\u4e2d\\((n,e)\\)\u4f5c\u4e3a\u516c\u94a5\u516c\u5f00\uff0c\\((n,d)\\)\u4f5c\u4e3a\u79c1\u94a5\u4fdd\u5bc6</p> </li> <li> <p>\u654c\u624b\u5982\u679c\u60f3\u8981\u76f4\u63a5\u89e3\u5bc6\uff0c\u5219\u9700\u8981\u77e5\u9053d\uff0c\u8ba1\u7b97d\u5219\u9700\u8981\u8ba1\u7b97\\(\\varphi(n)\\)\uff0c\u800c\u7531\\(n\\rightarrow\\varphi(n)\\)\u76ee\u524d\u6ca1\u6709\u76f4\u63a5\u89e3\u6cd5\u30101\u3011\uff0c\u53ea\u80fd\u5206\u89e3\\(n\\)\u6c42\u51fa\\(pq\\)\uff0c\u56e0\u6b64RSA\u7684\u5b89\u5168\u6027\u4f9d\u8d56\u4e8e\u56e0\u5b50\u5206\u89e3\u7684\u56f0\u96be\u6027</p> </li> </ul> <p>\u30101\u3011\uff1a\\(\\varphi(n) = (p-1)(q-1) = pq-(p+q)+1\\Longrightarrow p+q = n-\\varphi(n)+1\\)\uff0c\u5982\u679c\u77e5\u9053\\(\\varphi(n)\\)\uff0c\u5219\u53ef\u4ee5\u5f88\u8f7b\u6613\u5730\u5206\u89e3n\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u8ba1\u7b97\\(\\varphi(n)\\)\u5e76\u4e0d\u6bd4\u5206\u89e3\\(n\\)\u5bb9\u6613</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#rsa_1","title":"RSA\u89e3\u5bc6\u8fc7\u7a0b\u7684\u6b63\u786e\u6027\u8bc1\u660e","text":"<p>\\(c = m^e\\pmod{n}\\quad m = c^d\\pmod{n}\\quad\\Longrightarrow m^{ed}\\equiv m\\pmod{n}\\)</p> <p>\u8bc1\u660e\uff1a\u56e0\u4e3a\\(ed\\equiv 1 \\pmod {\\varphi(n)}\\Longrightarrow \u5373\u8bc1m^{k\\varphi(n)+1}\\equiv m\\pmod{n}\\)</p> <p>\u8fd9\u91cc\u4e0d\u80fd\u76f4\u63a5\u5199\u6b27\u62c9\u5b9a\u7406\uff0c\u56e0\u4e3a\u6b27\u62c9\u5b9a\u7406\\(m^{\\varphi(n)}\\equiv1\\pmod{n}\\)\u8981\u6c42\\(m\\in n^*\\)</p> <p>\u5206\u60c5\u51b5\uff1a</p> <ul> <li> <p>\\(p\\mid m\\)  \u5219\u6709 \\(m^{\\varphi(n)+1}\\equiv m \\pmod p\\)</p> </li> <li> <p>\\(p\\nmid m\\) \u5219\u6709 \\(m^{p-1}\\equiv 1 \\pmod p \\Longrightarrow m^{k(p-1)(q-1)+1}\\equiv m\\pmod p\\)</p> </li> </ul> <p>\u56e0\u6b64\u65e0\u8bba\\(p|m\\) or \\(p\\nmid m\\)\uff0c\u5747\u6709\\(m^{k\\varphi(n)+1}\\equiv m\\pmod{p}\\)\uff0c\u540c\u7406\u53ef\u4ee5\u8bc1\u660e\\(m^{k\\varphi(n)+1}\\equiv m\\pmod{q}\\)</p> <p>\u800c\\(pq\\)\u4e92\u7d20\uff0c\u56e0\u6b64\u6839\u636e\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u6709\\(m^{k\\varphi(n)+1}\\equiv1\\pmod{n}\\)</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#rsa_2","title":"RSA\u4e2d\u51e0\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6","text":"<p>\u6a21\\(n\\)\u8fd0\u7b97\uff0c\u51762\u8fdb\u5236\u957f\u5ea6\u4e3a\\(k\\)\uff1a</p> \u8fd0\u7b97 \u65f6\u95f4\u590d\u6742\u5ea6 \u7b97\u6cd5 \u52a0\u6cd5 \\(O(k)\\) \u51cf\u6cd5 \\(O(k)\\) \u4e58\u6cd5 \\(O(k^2)\\) \u6c42\u9006 \\(O(k^3)\\) \u6a21\u5e42(\u6307\u6570\u4e3ac) \\(O(\\log c \\times k^2)\\) \u5e73\u65b9\u4e58\u7b97\u6cd5"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_31","title":"\u89e3\u5bc6\u7b97\u6cd5\u7684\u52a0\u901f\uff1a","text":"<p>\u56e0\u4e3a\u89e3\u5bc6\u65b9\u77e5\u9053p\u7684\u5206\u89e3m\u3001n\u6240\u4ee5\u53ef\u4ee5\u628a\\(m = {c}^d\\pmod n\\)\u6362\u6210\u4e24\u4e2a\u65b9\u7a0b\uff1a $$ \\displaylines{m_1 = c_1^{d_1}\\pmod p\\\\ m_2 = c_2^{d_2}\\pmod q \\\\ \u5176\u4e2dc_1 = c \\pmod p,c_2 = c\\pmod q\\\\ d_1 = d\\pmod {p-1},d_2 = d\\pmod {q-1}} $$ \u7136\u540e\u7528CRT\u9006\u56de\u53bb\u5373\u53ef\uff0c\u80fd\u591f\u63d0\u9ad84-8\u500d</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#rsa_3","title":"RSA\u5b89\u5168\u6027\u5206\u6790","text":""},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#drightarrown","title":"\u5047\u8bbe\u5b58\u5728\u8ba1\u7b97d\u7684\u7b97\u6cd5\\(\\rightarrow\\)\u6784\u9020\u5206\u89e3n\u7684\u7b97\u6cd5","text":"<p>Las Vegas\u7b97\u6cd5</p> <ul> <li>\u57fa\u672c\u601d\u60f3\uff1a\u5229\u75281\u6a21n\u7684\u975e\u5e73\u51e1\u5e73\u65b9\u6839</li> </ul> <p>\\(x^2 \\equiv1\\pmod{n}\\)\u5373\\(n|(x-1)(x+1)\\Longrightarrow pq|(x-1)(x+1)\\)\u4e14\u6709\\(n\\nmid x-1 \\quad,\\quad n\\nmid x+1\\) </p> <p>\u56e0\u4e3a\u5982\u679c\\(n\\mid x-1\\rightarrow x\\equiv1\\pmod{n}\\)\uff0cx\u662f\u5e73\u51e1\u5e73\u65b9\u6839\u3002\\(n\\mid x+1\\)\u540c\u7406</p> <p>\u82e5\u8981\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u5219\u53ea\u6709\u60c5\u51b5</p> <ol> <li>\\(p|x-1,q|x+1\\)</li> <li>\\(p|x+1,q|x-1\\)</li> </ol> <p>\u5373\u6709\\(\\gcd(x+1,n) = p(\u6216q)\u6216\u8005\\gcd(x-1,n) = q(\u6216p)\\)</p> <p>\u5c31\u6210\u529f\u5206\u89e3\u4e86n\uff0c\u4e0b\u9762\u8003\u8651\u5982\u4f55\u6c42\u89e3\u975e\u5e73\u51e1\u5e73\u65b9\u6839</p> <ul> <li>\u6c42\u89e3\u975e\u5e73\u51e1\u5e73\u65b9\u6839\uff08\u9700\u8981\\(e\uff0cd\\)\uff09\uff1a</li> </ul> <p>\u56e0\u4e3a\\(ed\\equiv1\\pmod{\\varphi(n)}\\)\uff0c\u6240\u4ee5\\(ed-1 = k\\varphi(n)\\)</p> <p>\u8868\u793a\u6210\\(ed-1 = 2^s\\cdot r\\)\uff0c\u968f\u673a\u9009\u62e9\\(w\\in\\{1,2,3\\cdots n\\}\\)\u5982\u679c\\(\\gcd(w,n) \\neq 1\\)\uff0c\u5219\u5206\u89e3\u6210\u529f\u00b7\u00b7\u00b7\uff08\u6982\u7387\u5f88\u4f4e\uff09</p> <p>\u5426\u5219\u7684\u8bdd\uff0c\\(w\\in n^*\\)\uff0c\u8ba1\u7b97\\(w^{2^ir}\\)\uff0c\u5982\u679c\\(w^{2^ir} = 1\\pmod{n}\\)\uff0c\u4e14\\(w^{2^{i-1}r}\\neq{-1}\\pmod{n}\\)\uff0c\u5219 \\(w^{2^{i-1}r}\\)\u5373\u4e3a\u4e00\u4e2a\u975e\u5e73\u51e1\u89e3</p> <p>\u5176\u4e2d\\(i\\in\\{0,1,2\\cdots s\\}\\)\uff0c\u5982\u679c\u904d\u53860-s\u5747\u672a\u627e\u5230\uff0c\u5219\u53e6\u9009\u4e00\u4e2aw\u8ba1\u7b97\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u6210\u529f\u7684\u6982\u7387\u5927\u4e8e\\(\\frac{1}{2}\\)</p> <p>\u4e0a\u8ff0\u653b\u51fb\u544a\u8bc9\u6211\u4eec\uff1a\u4e00\u65e6\u89e3\u5bc6\u6307\u6570\u6cc4\u9732\uff0c\u5fc5\u987b\u8981\u66f4\u6362\u6a21n\uff0c\u4e0d\u80fd\u4ec5\u66f4\u6362d\uff0c\u5426\u5219\u654c\u624b\u53ef\u4ee5\u5206\u89e3n</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_32","title":"\u540c\u6a21\u653b\u51fb","text":"<p>\u653b\u51fb\u573a\u666f\uff1a\u4e00\u7ec4\u7528\u6237\uff08A\u3001B\uff09\u5171\u4eab\u6a21n\uff0c\u4f7f\u7528\u4e0d\u540c\u7684\u52a0\u5bc6\u6307\u6570e\u548c\u89e3\u5bc6\u6307\u6570d\uff0cC\u5411A\u3001B\u53d1\u9001\u6d88\u606f\uff0c\u654c\u624b\u53ef\u4ee5\u4e0d\u77e5\u9053\u89e3\u5bc6\u6307\u6570\u83b7\u53d6\u660e\u6587</p> <p>\u8bbe\\(m\\)\u662f\u6d88\u606f\uff0c\u5171\u540c\u7684\u6a21\u6570\u662f\\(n\\)\uff0c\u4e24\u4e2a\u5bc6\u6587\u5206\u522b\u4e3a</p> <ul> <li>\\(C_1 = m^{e_1}\\pmod{n}\\)</li> <li>\\(C_2 = m^{e_2}\\pmod{n}\\)</li> </ul> <p>\u5982\u679c\\(e_1,e_2\\)\u4e92\u7d20\uff0c\u53ef\u4ee5\u6839\u636e\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u8ba1\u7b97\u51fa\\(r,s\u6ee1\u8db3re_1+se_2 = 1\\)\uff0c\u5219\\(C_1^rC_2^s = m^{e_1r}m^{e_2s} = m\\)</p> <p>\u5373\u654c\u624b\u4e0d\u7528\u83b7\u5f97\u89e3\u5bc6\u6307\u6570\uff0c\u4e5f\u53ef\u4ee5\u6062\u590d\u660e\u6587</p> <p>\u4e0a\u8ff0\u653b\u51fb\u544a\u8bc9\u6211\u4eec\uff1a\u4e0d\u80fd\u5728\u4e00\u7ec4\u7528\u6237\u4e4b\u95f4\u5171\u4eab\u6a21n</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_33","title":"\u9009\u62e9\u5bc6\u6587\u653b\u51fb","text":"<p>\u5229\u7528\u4e86RSA\u52a0\u5bc6\u540c\u6001\u7684\u6027\u8d28\uff0c\u5373\\(Enc(m_1)Enc(m_2) = Enc(m_1m_2)\\)</p> <p>\u8bbe\u516c\u94a5\u4e3a\\((n,e)\\)\u5bf9\u4e8e\u654c\u624b\u60f3\u8981\u7834\u8bd1\u7684\u6d88\u606f\\(C^*\\)\uff0c\u5176\u8ba1\u7b97\\(C^{'} =C^{\\ast}\\cdot x^e\\pmod{n}\\)</p> <p>\u8be2\u95ee\u83b7\u5f97\\(C'\\)\u5bf9\u5e94\u7684\u660e\u6587\\(m'\\)\uff0c\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\\(m' = m^{\\ast}\\cdot x\\pmod{n}\\)</p> <p>\\(m'/x\\)\u5373\u4e3a\\(m^*\\)</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#rsa-oaep","title":"\u514b\u670d\u540c\u6001\u653b\u51fb\u7684RSA OAEP\u6a21\u5f0f","text":""},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_34","title":"\u5176\u5b83\u95ee\u9898","text":"<ul> <li>\u5b89\u5168\u9690\u60a3\uff1a\u4e0d\u540c\u7684\u6a21\u5171\u4eab\u7d20\u56e0\u5b50</li> <li>\u53c2\u6570\u8bbe\u7f6e\uff1ap,q\u4e3a\u5b89\u5168\u7d20\u6570\uff0c\u4e0d\u80fd\u592a\u63a5\u8fd1(\u592a\u63a5\u8fd1\u53ef\u4ee5\u76f4\u63a5\u5f00\u65b9\u7a77\u641c\uff0c\u6709\u592a\u5c0f\u7684\u56e0\u5b50\u53c8\u4f1a\u5bb9\u6613\u88ab\u5206\u89e3)\uff0c\u4e00\u822c\u76f8\u5dee\u51e0\u4f4d</li> <li>\u52a0\u5bc6\u89e3\u5bc6\u6307\u6570\u4e0d\u80fd\u8bbe\u7f6e\u592a\u5c0f</li> </ul>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_35","title":"\u7d20\u6027\u68c0\u6d4b\u4e0e\u56e0\u5b50\u5206\u89e3","text":""},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_36","title":"\u7d20\u6027\u68c0\u6d4b","text":""},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#solovay-strassen","title":"Solovay-Strassen\u7b97\u6cd5","text":"<ul> <li>\u9519\u8bef\u6982\u7387\u81f3\u591a\u4e3a\\(1/2\\)</li> </ul>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#miller-rabin","title":"Miller-Rabin\u7b97\u6cd5","text":"<ul> <li>\u9519\u8bef\u6982\u7387\u81f3\u591a\u4e3a\\(1/4\\)</li> <li>\u901a\u8fc7\u7684\u7d20\u6570\u53ef\u80fd\u662f\u5f3a\u4f2a\u7d20\u6570</li> </ul> <p>\u56e0\u5b50\u5206\u89e3\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\uff1a</p> \u7b97\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6 \u5907\u6ce8 Pollard p-1\u7b97\u6cd5 \\(O(B~\\log B(\\log n)^2+(\\log n)^3)\\) ( B\u6b21\u6a21\u5e42 + 1\u6b21GCD) \u544a\u8bc9\u6211\u4eec\u8981\u9009\u5b89\u5168\u7d20\u6570\uff0cp-1\u5e94\u8be5\u6709\u8db3\u591f\u5927\u7684\u7d20\u56e0\u5b50 Pollard \\(\\rho\\)\u7b97\u6cd5 \\(1.17\\sqrt{p}\\) Dixon\u968f\u673a\u5e73\u65b9\u7b97\u6cd5 \\(O(e^{1+o(1)\\sqrt{\\ln n \\ln \\ln n}})\\) \u968f\u673a\u7b97\u6cd5"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#pollard-p-1","title":"Pollard p-1\u7b97\u6cd5","text":"<p>\u5047\u5b9a\\(p\\)\u662f\\(n\\)\u7684\u4e00\u4e2a\u7d20\u56e0\u5b50\uff0c\u4e14\\(p-1\\)\u7684\u6bcf\u4e00\u4e2a\u7d20\u6570\u5e42\u6b21\\(q\\)\u6709\\(q\\leqslant B\\)\uff0c\u5219\u6709\\((p-1)|B!\\)</p> <p>\u4ee4\\(a\\equiv2^{B!}\\pmod{n}\\)\uff0c\u56e0\\((p-1)|B!\\)\uff0c\u6545\u6709\\(a\\equiv 2^{p-1}\\pmod{p}\\Longrightarrow a\\equiv1\\pmod{p}\\)</p> <p>\u6545\u6709\\(p|a-1\\)\uff0c\u6c42\\(\\gcd(a-1,n)\\)\u5373\u53ef\u5f97\u5230\u7d20\u56e0\u5b50\\(p\\)</p> <p></p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#pollard-rho","title":"Pollard \\(\\rho\\)\u7b97\u6cd5","text":"<p>\u5bfb\u627e\u4e24\u4e2a\u5143\u7d20\\(x_1,x_2\\)\u6ee1\u8db3\\(x_1\\neq x_2\\pmod{n},x_1=x_2\\pmod{p}\\Longrightarrow p|x_1-x_2\\)</p> <p>\u6c42\\(\\gcd(x_1-x_2,p)\\)\u5373\u53ef\u5206\u89e3</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#dixon","title":"Dixon\u968f\u673a\u5e73\u65b9\u7b97\u6cd5","text":"<p>\\(x\\neq \\pm y\\pmod{n}\\)</p> <p>\\(x^2\\equiv y^2\\pmod{n}\\)</p> <p>\\(x^2-y^2\\equiv0\\pmod{n}\\Longrightarrow n|(x+y)(x-y)\\)</p> <p>\u5047\u8bbe \\(n\\)\u5206\u89e3\u6210\\(pq\\)\uff0c\u5219\u56e0\u4e3a\\(n\\nmid x\\pm y\\)\uff0c\u6545\u53ea\u6709\\(p|(x+y),q|(x-y)\\)\u6216\\(p|(x-y),q|(x+y)\\)\u4e24\u79cd\u60c5\u51b5</p> <p>\u6c42\\(\\gcd(x+y,n)\\)\u5373\u53ef\u5f97\u5230\u4e00\u4e2a\u56e0\u5b50</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#elgamal","title":"ElGamal\u52a0\u5bc6","text":"<p>\u5728\u5faa\u73af\u7fa4\\(Z_p^*\\)\u4e0a\uff0c\u5faa\u73af\u7fa4\u7684\u9636\u4e3a\\(p-1\\)</p> <p>\u52a0\u5bc6\uff1a</p> <ul> <li>\u9009\u62e9\u968f\u673a\u5143\u7d20k</li> <li>\u8ba1\u7b97\\(c_1 = g^k\\pmod p,c_2 = y^k\\cdot m\\pmod p\\)</li> <li>\u8f93\u51fa\\((c_1,c_2)\\)</li> </ul> <p>\\(y^k\\)\u88ab\u89c6\u4e3a\u4e00\u4e2a\u5747\u5300\u968f\u673a\u5143\u7d20\uff0c\u4f7f\u7528\u4e86\u5747\u5300\u968f\u673a\u5143\u7d20\u9690\u85cf\u660e\u6587m</p> <p>\u89e3\u5bc6\uff1a</p> <ul> <li>\u56e0\u4e3a\\(y^k = (g^x)^k = (c_1)^x\\)</li> <li>\u6240\u4ee5\\(m = c_2/(c_1)^x \\pmod p\\)</li> </ul>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_37","title":"\u79bb\u6563\u5bf9\u6570\u95ee\u9898","text":"<p>\u5bf9\u4e8e\\(a^\\alpha = \\beta\\pmod n\\)</p> <p>\u5df2\u77e5\\(\\alpha,\\beta\\)\u6c42\u89e3\\(a\\)</p> <p>\u6c42\u89e3\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u65b9\u6cd5\uff1a</p> \u65b9\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6 \u5907\u6ce8 Shanks\uff08BSGS\uff09 \\(O(\\sqrt{n})\\) \u544a\u8bc9\u6211\u4eec\u5faa\u73af\u7fa4\u7684\u9636\u5e94\u8be5\u8db3\u591f\u5927\u4fdd\u8bc1\u4e0d\u5bb9\u6613\u88ab\u5206\u89e3 Pohlig-Hellman \u5fd8\u8bb0\u4e86 \u544a\u8bc9\u6211\u4eec\u7fa4\u7684\u9636\u5e94\u8be5\u6709\u8db3\u591f\u5927\u7684\u7d20\u56e0\u5b50 Pollard-\\(\\rho\\) \\(O(\\sqrt{n})\\) \u544a\u8bc9\u6211\u4eec\u5faa\u73af\u7fa4\u7684\u9636\u5e94\u8be5\u8db3\u591f\u5927\u4fdd\u8bc1\u4e0d\u5bb9\u6613\u88ab\u5206\u89e3 \u6307\u6570\u8ba1\u7b97\u7b97\u6cd5 \\(O(e^{(1/2+o(1))\\sqrt{\\ln{p\\ln \\ln p}}})\\)\uff08\u5728\u7ebf\u9636\u6bb5\uff09 \u53ea\u9488\u5bf9\\(z_p^*\\)\u4e0a\u7684\u79bb\u6563\u5bf9\u6570\u95ee\u9898"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_38","title":"\u79bb\u6563\u5bf9\u6570\u7684\u6bd4\u7279\u5b89\u5168\u6027","text":"<p>\u8bbe\u751f\u6210\u5143\\(\\alpha\\in Z_P^*\\)\u5bf9\u4e8e\u79bb\u6563\u5bf9\u6570\u95ee\u9898\\(\\log {_\\alpha \\beta}\\)</p> <p>\u6c42\u89e3\u79bb\u6563\u5bf9\u6570\u56f0\u96be\uff0c\u4f46\u662f\u6c42\u89e3\u79bb\u6563\u5bf9\u6570\u7684\u90e8\u5206\u6bd4\u7279\u662f\u5bb9\u6613\u7684\uff0c\u5177\u4f53\u5730\uff1a</p> <ul> <li>\u6700\u4f4e\u6bd4\u7279\\(L_1(\\beta)\\)\u5bb9\u6613\u6c42</li> <li>\u82e5\\(P-1 = 2^st\\)\u5176\u4e2d\\(t\\)\u4e3a\u5947\u6570\uff0c\uff08\u5373\\(P-1\\)\u4e3a\u5076\u6570\uff09\uff0c\u5219\u6c42\u89e3\u4f4es\u6bd4\u7279\u662f\u5bb9\u6613\u7684</li> <li>\u6c42\u89e3\u9ad8\u4e8es\u6bd4\u7279\u7684\u4fe1\u606f\u662f\u56f0\u96be\u7684</li> <li>\u751f\u6210\u5143\u662f\u4e8c\u6b21\u975e\u5269\u4f59\uff1b\u4e8c\u6b21\u5269\u4f59 X \u4e8c\u6b21\u5269\u4f59 = \u4e8c\u6b21\u5269\u4f59\uff1b\u4e8c\u6b21\u975e X \u4e8c\u6b21\u975e = \u4e8c\u6b21\u975e\uff1b\u4e8c\u6b21\u5269\u4f59 X \u4e8c\u6b21\u975e = \u4e8c\u6b21\u5269\u4f59</li> <li>\u5224\u65ad\\(Z_P^{\\ast}\\)\u4e0a\u7684\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u662f\u4e8c\u6b21\u5269\u4f59\u662f\u591a\u9879\u5f0f\u65f6\u95f4\u53ef\u89e3\u95ee\u9898 (\u6ce8\u610f\u4e00\u5b9a\u662f$Z_P^{\\ast} $\u4e0a\u7684)</li> </ul> <p>\u82e5\\(\\beta\\in QR\\)\uff08\u662f\u4e8c\u6b21\u5269\u4f59\uff09\uff0c\u5219\u56e0\u751f\u6210\u5143\u662f\u4e8c\u6b21\u975e\uff0c\u5219\\(\\alpha^a = \\beta\\)\uff0c\u53ef\u77e5\\(a\\)\u4e00\u5b9a\u4e3a\u5076\u6570\uff0c\u5373\u6700\u4f4e\u6bd4\u7279\u662f0</p> <p>\u6c42\u89e3\u6a21\u7d20\u6570\u7684\u5e73\u65b9\u6839\u662f\u6709\u591a\u9879\u5f0f\u65f6\u95f4\u7b97\u6cd5\u7684</p> <p>\u5982\u679c\\(\\beta\\)\u662f\u4e8c\u6b21\u5269\u4f59\uff1a</p> <p>\u5bf9\\(\\beta\\)\u5f00\u5e73\u65b9\uff0c\u53ef\u4ee5\u5229\u7528\u540c\u6837\u65b9\u6cd5\u5224\u65ad\u5176\u5012\u6570\u7b2c\u4e8c\u6bd4\u7279</p> <p>\u5982\u679c\\(\\beta\\)\u662f\u4e8c\u6b21\u975e\u5269\u4f59\uff1a</p> <p>\u8ba1\u7b97\\(\\beta/\\alpha\\)\u7684\u4e24\u4e2a\u5e73\u65b9\u6839\uff0c\u540c\u7406</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#rsa_4","title":"RSA\u7b7e\u540d","text":""},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#rsa_5","title":"\u9488\u5bf9RSA\u7b7e\u540d\u7684\u653b\u51fb","text":""},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_39","title":"\u552f\u5bc6\u94a5\u653b\u51fb\u4e0b\u7684\u5b58\u5728\u6027\u4f2a\u9020","text":"<p>\u5728\\(Z_n\\)\u4e2d\u4efb\u610f\u9009\u62e9\u4e00\u4e2a\u6570s\u4f5c\u4e3a\u7b7e\u540d\uff0c\u518d\u8ba1\u7b97\\(s^e\\pmod n\\)\u4f5c\u4e3a\u6d88\u606f\\(m\\)</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_40","title":"\u5df2\u77e5\u6d88\u606f\u653b\u51fb\u4e0b\u7684\u5b58\u5728\u6027\u4f2a\u9020","text":"<p>\u5229\u7528\u540c\u6001\u7684\u6027\u8d28</p> <p>\u5df2\u77e5\\(s_1 = Sign_{sk}(m_1),s_s = Sign_{sk}(m_2)\\)</p> <p>\u5219\\(s_1\\cdot s_2\\)\u662f\u5bf9\u6d88\u606f\\(m_1\\cdot m_2\\)\u7684\u7b7e\u540d\u4f2a\u9020</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_41","title":"\u8865\u6551\u65b9\u6cd5","text":"<ul> <li>\u5bf9\u6d88\u606f\u7684hash\u503c\u8fdb\u884c\u7b7e\u540d</li> </ul> <p>\u8981\u6c42hash\u51fd\u6570\u6297\u78b0\u649e</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_42","title":"\u79bb\u6563\u5bf9\u6570\u7b7e\u540d","text":""},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#eigmal","title":"EIGmal\u7b7e\u540d","text":"<p>\\(\u79c1\u94a5x\uff0c\u516c\u94a5y = g^x\\)</p> <ul> <li>\u7b7e\u540d\uff1a\u9009\u62e9\u968f\u673a\u6570k\uff0c\u8ba1\u7b97\\(r = g^k \\pmod p\\)\u4ee5\u53ca\\(s = (H(m)-xr){k^{-1}}\\pmod{p-1}\\)</li> <li>\u9a8c\u8bc1\uff1a\\(y^rr^s = g^{H(m)}\\)</li> </ul>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#eigmalhash","title":"EIGmal\u7b7e\u540d\u53bb\u6389hash\u540e\u7684\u5b58\u5728\u6027\u4f2a\u9020","text":"<p>\u5bf9\u4e8e\\(y^rr^s = g^m; r = g^k\\)</p> <p>\\(s = (m-xr)k^{-1} \\pmod {P-1}\\)</p> <p>\u5b58\u5728\u6027\u4f2a\u9020\uff1a\u5373\u4f7f\u4e0d\u77e5\u9053\u79c1\u94a5\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u660e\u6587\u5e76\u4ea7\u751f\u5408\u6cd5\u7684\u7b7e\u540d</p> <p>\u601d\u8def\uff1a\u56e0\u4e3a\u79c1\u94a5\u672a\u77e5\uff0c\u6240\u4ee5y\u662f\u672a\u77e5\u7684\uff0c\u8003\u8651\u6d88\u6389\u9a8c\u8bc1\u7b49\u5f0f\u5de6\u8fb9\u7684y\u5373\u53ef </p> <ul> <li>\u4ee4\\(r = g^iy^j\\)\u5176\u4e2d\\(\\gcd(j,P-1) = 1\\)</li> <li>\\(\\Longrightarrow y^r(g^iy^j)^s = g^m\\)</li> <li>\\(\\Longrightarrow y^{r+js} = g^{m-is}\\)</li> <li>\u4ee4\\(r+js = 0\\pmod{p-1},m-is = 0\\pmod{p-1}\\)</li> <li>\u8ba1\u7b97\u51fas\uff0c\u8fdb\u800c\u8ba1\u7b97\u51fam\uff0c\u5373\u6210\u529f\u4f2a\u9020\u4e86m\u7684\u7b7e\u540d</li> </ul>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#schnorr","title":"Schnorr \u7b7e\u540d","text":"<ul> <li>\u7b7e\u540d\uff1a\\(c = H(m||g^k)\\)\u4e0e\\(s = k+xc\\pmod q\\)\uff0c\u516c\u5e03\\((c,s)\\)</li> <li>\u9a8c\u8bc1\uff1a\\(H(m||g^sy^{-c}) = c\\)</li> </ul>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#dsa","title":"DSA\u7b7e\u540d","text":""},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_43","title":"\u96f6\u77e5\u8bc6\u8bc1\u660e","text":"<ul> <li>\u5b8c\u5907\u6027\uff1a\u4fdd\u969c\u8bc1\u660e\u8005\uff08P\uff09\u6743\u76ca\uff1aV\u65e0\u6cd5\u6b3a\u9a97P\u3002\u82e5P\u77e5\u9053\u4e00\u4e2a\u5b9a\u7406\u7684\u8bc1\u660e\u65b9\u6cd5\uff0c\u5219P\u4f7fV\u4ee5\u7edd\u5bf9\u4f18\u52bf\u7684\u6982\u7387\u76f8\u4fe1\u4ed6\u80fd\u8bc1\u660e\u3002</li> <li>\u5408\u7406\u6027\uff1a\u4fdd\u8bc1\u9a8c\u8bc1\u8005\uff08V\uff09\u6743\u76ca\uff1aP\u65e0\u6cd5\u6b3a\u9a97V\u3002\u6362\u8a00\u4e4b\uff0c\u82e5P\u4e0d\u77e5\u9053\u4e00\u4e2a\u5b9a\u7406\u7684\u8bc1\u660e\u65b9\u6cd5\uff0c\u5219P\u4f7fV\u76f8\u4fe1\u4ed6\u4f1a\u8bc1\u660e\u5b9a\u7406\u7684\u6982\u7387\u5f88\u4f4e\u3002</li> <li>\u96f6\u77e5\u8bc6\u6027\uff1aV \u9664\u4e86P\u8981\u8bc1\u660e\u7684\u77e5\u8bc6\u5916\uff0c\u4e0d\u80fd\u83b7\u5f97\u4efb\u4f55\u989d\u5916\u7684\u77e5\u8bc6</li> </ul>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_44","title":"\u5bc6\u94a5\u5206\u53d1","text":""},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_45","title":"\u534f\u8bae\u7684\u5b89\u5168\u6027\u8981\u6c42","text":"<ul> <li> <p>\u534f\u8bae\u7ed3\u675f\u540e\uff0c\u5408\u6cd5\u53c2\u4e0e\u8005\u90fd\u62e5\u6709\u4e86\u4e00\u4e2a\u76f8\u540c\u5f97\u5bc6\u94a5\\(K\\)\u4e14\u4efb\u4f55\u5176\u5b83\u7b2c\u4e09\u65b9\u65e0\u6cd5\u83b7\u77e5\\(K\\)\u7684\u4fe1\u606f(\u53ef\u4fe1\u7b2c\u4e09\u65b9\u9664\u5916)</p> </li> <li> <p>\u8ba4\u8bc1\u6027\uff1a\u80fd\u591f\u8ba4\u8bc1\u53c2\u4e0e\u8005\u7684\u8eab\u4efd</p> </li> </ul> <p>\u653b\u51fb\u624b\u6bb5\uff1a</p> <ul> <li>\u76d1\u542c\u4fe1\u9053\u4fe1\u606f</li> <li>\u4fee\u6539\u3001\u91cd\u653e\u3001\u5192\u5145\u8eab\u4efd</li> </ul>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#kdc","title":"\u4f9d\u8d56KDC\u7684\u5bf9\u79f0\u5bc6\u94a5\u5206\u53d1","text":"<p>\u4e24\u79cd\u7c7b\u578b\u5bc6\u94a5\uff1a</p> <ul> <li>\u4e3b\u5bc6\u94a5\uff1a\u957f\u671f\u5bc6\u94a5\u7528\u4e8e\u52a0\u5bc6\u4f1a\u8bdd\u5bc6\u94a5</li> <li>\u4f1a\u8bdd\u5bc6\u94a5\uff1a\u4e00\u6b21\u901a\u4fe1\u4e2d\u8bf7\u6c42KDC\u5206\u53d1\u7684\u5bc6\u94a5\uff0c\u7528\u4e8e\u901a\u4fe1\u52a0\u5bc6</li> </ul> <p>\u4f18\u52bf\uff1a</p> <ul> <li>\u9650\u5236\u4e86\u653b\u51fb\u8005\u7528\u540c\u4e00\u5bc6\u94a5\u52a0\u5bc6\u7684\u5bc6\u6587\u6570\u91cf\uff08\u4f1a\u8bdd\u5bc6\u94a5\u6bcf\u6b21\u4e0d\u540c\uff09</li> <li>\u964d\u4f4e\u4e86\u5bc6\u94a5\u6cc4\u9732\u5e26\u6765\u7684\u635f\u5931</li> </ul>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#needham-schroeder","title":"Needham-Schroeder\u534f\u8bae","text":"<p>\u5176\u7f3a\u70b9\u5728\u4e8e\u7b2c\u4e09\u6b65\u4e2d\u6ca1\u6709\u9632\u91cd\u653e\uff0c\u654c\u624b\u5982\u679c\u77e5\u9053\u4e86\\(K_s\\)\u53ef\u4ee5\u5192\u5145A\u8fdb\u884c\u91cd\u653e\u653b\u51fb</p> <p>\u53ef\u4ee5\u60f3\u5230\u7684\u6539\u8fdb\u662f\u52a0\u65f6\u95f4\u6233\uff0c\u4f46\u662f\u8fd9\u8981\u6c42\u65f6\u949f\u540c\u6b65</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#kerberos-v5","title":"Kerberos V5\u534f\u8bae","text":"<p>\u5728\u4e0a\u4e00\u4e2a\u534f\u8bae\u7684\u57fa\u7840\u4e0a\u52a0\u5165\u4e86\u751f\u5b58\u65f6\u95f4L\uff0c\u62b5\u6297\u91cd\u653e\u653b\u51fb</p> <p></p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#bellare-rogaway","title":"Bellare-Rogaway\u534f\u8bae","text":""},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_46","title":"\u57fa\u4e8e\u516c\u94a5\u7684\u5bf9\u79f0\u5bc6\u94a5\u5206\u53d1","text":""},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#dh","title":"DH\u534f\u8bae","text":"<ul> <li>CDH\u95ee\u9898</li> </ul> <p>\u7ed9\u5b9a\\(g,g^a,g^b\\)\uff0c\u8ba1\u7b97\\(g^{ab}\\)</p> <ul> <li>DDH\u95ee\u9898</li> </ul> <p>\u7ed9\u5b9a\\(g,g^a,g^b,g^c\\)\uff0c\u5224\u5b9a\\(g^c = g^ag^b\\)</p> <p>\u524d\u8005\u6bd4\u540e\u8005\u66f4\u96be</p> <p>\u4e2d\u95f4\u4eba\u653b\u51fb\uff1a\u7f3a\u5c11\u8ba4\u8bc1\u6027\uff0c\u4f7f\u7528\u8bc1\u4e66\u89e3\u51b3</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_47","title":"\u91cf\u5b50\u5bc6\u94a5\u5206\u53d1","text":"<p>\u5229\u7528\u76d1\u542c\u4f1a\u6539\u53d8\u91cf\u5b50\u7684\u72b6\u6001\uff0c\u6765\u5224\u65ad\u662f\u5426\u88ab\u4eba\u76d1\u542c</p> <p></p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_48","title":"\u7535\u5b50\u8d27\u5e01","text":"<p>\u5b9e\u8d28\u662f\u8ba4\u8bc1\u7cfb\u7edf</p> <p>\u57fa\u672c\u5b89\u5168\u8981\u6c42\uff1a</p> <ul> <li>\u534f\u8bae\u7ed3\u675f\u540e\uff0c\u53ea\u6709\u8bae\u5b9a\u4ea4\u6613\u65b9\u4f59\u989d\u53d1\u751f\u53d8\u5316\uff08\u4e0d\u80fd\u53cc\u82b1\uff09</li> <li>\u8bae\u5b9a\u6536\u6b3e\u65b9\u8d27\u5e01\u589e\u52a0\u6570\u91cf = \u4ed8\u6b3e\u65b9\u8d27\u5e01\u51cf\u5c11\u6570\u91cf</li> </ul> <p></p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#set","title":"\u8ba4\u4eba\u6a21\u5f0f\u7684SET\u534f\u8bae","text":"<p>\u4e70\u5bb6\u5411\u5546\u5bb6\u63d0\u4ea4\u8ba2\u5355\u4fe1\u606f\u7684\u65f6\u5019\uff0c\u5e76\u4e0d\u53d1\u7ed9\u5546\u5bb6\\(PI\\)\uff0c\u5373\u81ea\u5df1\u7684\u77e5\u798f\u4fe1\u606f\uff0c\u800c\u662f\u53d1\u9001\u4e86\\(H(PI)\\)\uff0c\u8fd9\u6837\u4e00\u6765\u5546\u5bb6\u65e0\u6cd5\u77e5\u9053\u5176\u652f\u4ed8\u4fe1\u606f\uff0c\u4f46\u662f\u5546\u5bb6\u8f6c\u53d1\u7ed9\u652f\u4ed8\u7f51\u7ba1\u540e\uff0c\u7f51\u5173\u53ef\u4ee5\u9a8c\u8bc1\u3002\u4f46\u4e70\u5bb6\u53d1\u9001\\(H(PI)\\)\u7ed9\u5546\u5bb6\uff0c\u8ba9\u5546\u5bb6\u80fd\u591f\u9a8c\u8bc1\\(OI\\)\u4fe1\u606f\uff0c\u5373\u8ba2\u5355\u4fe1\u606f\uff0c\u4ee5\u53ca\u6d88\u606f\u5b8c\u6574\u6027\u3002</p> <p></p> <p>\u540c\u6837\u5730\uff0c\u4e70\u5bb6\u4e0e\u652f\u4ed8\u7f51\u5173\u505a\u8eab\u4efd\u8ba4\u8bc1\u7684\u65f6\u5019\uff08\u7531\u5546\u5bb6\u8f6c\u53d1\uff09\uff0c\u540c\u6837\u5229\u7528\u4e86\u6b64\u601d\u8def\u3002\u652f\u4ed8\u7f51\u5173\u65e0\u6cd5\u770b\u5230\u8ba2\u8d2d\u4fe1\u606f\u3002</p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#e-cash","title":"\u8ba4\u94b1\u6a21\u5f0f\u7684e-cash\u534f\u8bae","text":"<p>\u5982\u516c\u4ea4\u5361\u3001\u7535\u5b50\u73b0\u91d1\u7b49\u3002</p> <p>\u4f7f\u7528\u6570\u5b57\u7b7e\u540d\u8868\u793a\u7535\u5b50\u8d27\u5e01\u3002</p> <p>\u4f7f\u7528\u76f2\u7b7e\u540d\u6280\u672f\u4fdd\u8bc1\u4e86\u4f7f\u7528\u8005\u4fe1\u606f\u4e0d\u53ef\u8ffd\u8e2a\u3002</p> <p></p> <p></p>"},{"location":"courses/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%BC%95%E8%AE%BA%E5%A4%8D%E4%B9%A0.html#_49","title":"\u6bd4\u7279\u5e01","text":""},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html","title":"\u7b2c0\u7ae0   \u6982\u8ff0","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#os","title":"OS\u4e3a\u4ec0\u4e48\u8981\u5206\u7528\u6237\u6001\u548c\u5185\u6838\u6001\uff1f","text":"<p>CPU\u53ef\u4ee5\u6267\u884c\u5176\u6307\u4ee4\u96c6\u4e2d\u7684\u6bcf\u6761\u6307\u4ee4\uff0c\u5e76\u5728\u5185\u6838\u6001\u4e0b\u6267\u884c\u65f6\u4f7f\u7528\u786c\u4ef6\u7684\u5404\u79cd\u529f\u80fd\u3002 </p> <p>\u4f46\u662f\u7528\u6237\u6001\u53ea\u80fd\u6267\u884c\u90e8\u5206\u6307\u4ee4\uff0c\u6267\u884c\u65f6\u4ec5\u4f7f\u7528\u90e8\u5206\u529f\u80fd\u3002 </p> <p>\u62e5\u6709\u4e24\u79cd\u6a21\u5f0f\u5141\u8bb8\u8bbe\u8ba1\u4eba\u5458\u4ee5\u7528\u6237\u6001\u8fd0\u884c\u7528\u6237\u7a0b\u5e8f\uff0c\u4ece\u800c\u62d2\u7edd\u4ed6\u4eec\u8bbf\u95ee\u5173\u952e\u6307\u4ee4\u3002</p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_1","title":"\u4e2d\u65ad\u548c\u5f02\u5e38","text":"<ul> <li>\u4e2d\u65ad\u7684\u5206\u7c7b\u6309\u7167\u8001\u5e08\u8bfe\u4ef6\uff1a</li> </ul> <ul> <li> <p>\u4e2d\u65ad\u5904\u7406\u6d41\u7a0b\uff1a</p> </li> <li> <p>\u63a5\u6536\u4e2d\u65ad\u4fe1\u53f7</p> </li> <li>\u786c\u4ef6\u4fdd\u62a4\u73b0\u573a\uff08\u7a0b\u5e8f\u4fe1\u606f\u538b\u5165\u5806\u6808\uff09</li> <li>\u6839\u636e\u4e2d\u65ad\u6e90\u67e5\u627e\u4e2d\u65ad\u5411\u91cf</li> <li>\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5165\u53e3address\u63a8\u5165\u76f8\u5e94\u5bc4\u5b58\u5668</li> <li>\u6267\u884c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f</li> <li>\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u6267\u884c\u7ed3\u675f\u4e4b\u540e\u6062\u590d\u72b6\u6001</li> <li>\u7ee7\u7eed\u6267\u884c\u539f\u6765\u7684\u7a0b\u5e8f</li> </ul>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_2","title":"\u7cfb\u7edf\u8c03\u7528","text":"<p>\u7cfb\u7edf\u8c03\u7528\u5c5e\u4e8e\u8f6f\u4e2d\u65ad\uff0c\u662f\u552f\u4e00\u53ef\u4ee5\u8ba9\u7a0b\u5e8f\u4e3b\u52a8\u8fdb\u5165\u64cd\u4f5c\u7cfb\u7edf\uff08\u7279\u6743\u6a21\u5f0f\uff09\u7684\u64cd\u4f5c </p> <ul> <li>\u51fd\u6570\u5e93\u8c03\u7528\u548c\u7cfb\u7edf\u8c03\u7528\uff1a</li> </ul> <p></p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_3","title":"\u5b8f\u5185\u6838\u548c\u5fae\u5185\u6838","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_4","title":"\u51e0\u4e2a\u8bbe\u8ba1\u601d\u60f3","text":"<ul> <li>\u591a\u9053\u7a0b\u5e8f\u8bbe\u8ba1\uff08multiprogramming\uff09\uff1a\u591a\u9053\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u4e3b\u8981\u539f\u56e0\u662f\u5728\u67d0\u4e2a\u7a0b\u5e8f\u7b49\u5f85I/O\u5b8c\u6210\u65f6\uff0c\u53ef\u4ee5\u8ba9CPU\u505a\u4e00\u4e9b\u5176\u4ed6\u64cd\u4f5c\u3002</li> <li>\u5206\u65f6\u64cd\u4f5c\u7cfb\u7edf\uff08timesharing\uff09\uff1a\u591a\u7528\u6237\u5171\u4eab\u4e3b\u673a\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4e3a\u591a\u7528\u6237\u63d0\u4f9b\u5feb\u901f\u4ea4\u4e92\u5f0f\u670d\u52a1\u3002\u540c\u65f6\u6027\u3001\u72ec\u7acb\u6027\u3001\u53ca\u65f6\u6027\u3001\u4ea4\u4e92\u4f5c\u7528\u6027</li> </ul>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#1","title":"\u7b2c1\u7ae0   \u8fdb\u7a0b","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_5","title":"\u8fdb\u7a0b\u57fa\u7840","text":"<p>\u8fdb\u7a0b\u662f\u64cd\u4f5c\u7cfb\u7edf\u8d44\u6e90\u5206\u914d\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u800c\u7ebf\u7a0b\u662f\u4efb\u52a1\u8c03\u5ea6\u548c\u6267\u884c\u7684\u57fa\u672c\u5355\u4f4d\u3002</p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_6","title":"\u8fdb\u7a0b\u7684\u4e09\u4e2a\u72b6\u6001","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#cpu","title":"\u591a\u9053\u7a0b\u5e8f\u8bbe\u8ba1\u7684CPU\u5229\u7528\u7387","text":"<ul> <li>\\(CPU\u5229\u7528\u7387 = 1-P^n\\)\uff0c</li> <li>\u5176\u4e2dP\u4e3a\\(\u8fdb\u7a0b\u7b49\u5f85IO\u65f6\u95f4/\u8fdb\u7a0b\u5728\u5185\u5b58\u65f6\u95f4\\)</li> <li>n\u4e3a\u591a\u9053\u7a0b\u5e8f\u8bbe\u8ba1\u9053\u6570</li> <li>\u4ece\u516c\u5f0f\u53ef\u4ee5\u770b\u51fa\uff0c\u8fdb\u7a0bIO\u65f6\u95f4\u5360\u6bd4\u8d8a\u5c11\uff0c\u8fdb\u7a0b\u9053\u6570\u8d8a\u591a\uff0cCPU\u5229\u7528\u7387\u8d8a\u9ad8</li> </ul>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_7","title":"\u7528\u6237\u7ea7\u7ebf\u7a0b\u548c\u5185\u6838\u7ea7\u7ebf\u7a0b","text":"<p>\u4e8c\u8005\u533a\u522b\u5728\u4e8e\u6027\u80fd\uff1a</p> <ul> <li>\u7528\u6237\u7ea7\u7ebf\u7a0b\u7684\u5207\u6362\u53ea\u9700\u8981\u5c11\u6570\u51e0\u6761\u673a\u5668\u6307\u4ee4\uff1b\u800c\u5185\u6838\u7ea7\u7ebf\u7a0b\u5207\u6362\u9700\u8981\u5b8c\u6574\u4fdd\u5b58\u4e0a\u4e0b\u6587\uff0c\u4fee\u6539\u5185\u5b58\u6620\u50cf\uff0c\u4f7fcache\u5931\u6548</li> <li>\u7528\u6237\u7ea7\u7ebf\u7a0b\u4f7f\u7528\u7cfb\u7edf\u8c03\u7528\uff08\u5982IO\u963b\u585e\uff09\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u6574\u4e2a\u8fdb\u7a0b\u6302\u8d77\uff1b\u800c\u5185\u6838\u7ea7\u7ebf\u7a0b\u5219\u4e0d\u4f1a</li> </ul>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_8","title":"\u8fdb\u7a0b\u8c03\u5ea6","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_9","title":"\u8c03\u5ea6\u7b97\u6cd5\u5206\u7c7b\u548c\u76ee\u6807\uff1a","text":"<p>\u5bf9\u4e8e\u4e0d\u540c\u7684\u7cfb\u7edf\uff0c\u8fdb\u7a0b\u8c03\u5ea6\u7b97\u6cd5\u6709\u7740\u4e0d\u540c\u7684\u76ee\u6807\u548c\u5ea6\u91cf\u6307\u6807</p> <ul> <li>\u6279\u5904\u7406\u7cfb\u7edf\uff1a</li> <li>\u541e\u5410\u91cf\uff08throughput\uff09\uff1a\u7cfb\u7edf\u5355\u4f4d\u65f6\u95f4\u5b8c\u6210\u4f5c\u4e1a\u6570\u91cf\uff0c\u8d8a\u5927\u8d8a\u597d</li> <li>\u5468\u8f6c\u65f6\u95f4\uff08turnaround time\uff09\uff1a\u63d0\u4ea4\u4f5c\u4e1a\u5230\u5b8c\u6210\u4f5c\u4e1a\u7684\u65f6\u95f4\uff0c\u8d8a\u5c0f\u8d8a\u597d</li> <li>\u54cd\u5e94\u6bd4\uff1a\u5468\u8f6c\u65f6\u95f4/\u6267\u884c\u65f6\u95f4</li> <li>\u5e26\u6743\u5468\u8f6c\u65f6\u95f4\uff1a\u54cd\u5e94\u6bd4\u4e4b\u548c/\u8fdb\u7a0b\u6570</li> <li>CPU\u5229\u7528\u7387</li> <li>\u4ea4\u4e92\u5f0f\u7cfb\u7edf\uff1a</li> <li>\u54cd\u5e94\u65f6\u95f4</li> <li>\u5747\u8861\u6027</li> <li>\u5b9e\u65f6\u7cfb\u7edf\uff1a</li> <li>\u6ee1\u8db3\u622a\u6b62\u65f6\u95f4</li> <li>\u53ef\u9884\u6d4b\u6027\u00b7\u00b7\u00b7</li> </ul> <p></p> <p></p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_10","title":"\u8c03\u5ea6\u7b97\u6cd5","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_11","title":"\u6279\u5904\u7406\u7cfb\u7edf\u4e2d\u7684\u8c03\u5ea6\u7b97\u6cd5\uff1a","text":"<ul> <li> <p>\u5148\u6765\u5148\u670d\u52a1\uff08FCFS: First Come First Serve \uff09</p> </li> <li> <p>\u957f\u8fdb\u7a0b\u540e\u9762\u7684\u77ed\u8fdb\u7a0b\u9700\u8981\u7b49\u5f88\u957f\u65f6\u95f4\uff0c\u4e0d\u5229\u4e8e\u7528\u6237\u4f53\u9a8c  </p> </li> <li> <p>\u77ed\u4f5c\u4e1a\u4f18\u5148\uff08SJF: Shortest Job First \uff09</p> </li> <li> <p>\u975e\u62a2\u5360\u5f0f</p> </li> <li> <p>\u7f3a\u70b9\uff1a\u5efa\u7acb\u5728 \u53ef\u4ee5\u7cbe\u786e\u9884\u6d4b\u6bcf\u4e2a\u4f5c\u4e1a\u8fd0\u884c\u65f6\u95f4  \u7684\u5047\u8bbe\u4e4b\u4e0a\uff0c\u8fd9\u79cd\u5047\u8bbe\u663e\u7136\u662f\u7406\u60f3\u60c5\u51b5</p> </li> <li> <p>\u6700\u77ed\u5269\u4f59\u65f6\u95f4\u4f18\u5148\uff08SRTN: Shortest Remaining Time Nest  \uff09</p> </li> <li> <p>\u6700\u77ed\u4f5c\u4e1a\u4f18\u5148 SJF \u7684\u62a2\u5360\u5f0f\u7248\u672c </p> </li> <li>\u5f53\u4e00\u4e2a\u65b0\u5c31\u7eea\u7684\u8fdb\u7a0b\u6bd4\u5f53\u524d\u8fd0\u884c\u8fdb\u7a0b\u5177\u6709\u66f4\u77ed\u7684\u5b8c\u6210\u65f6\u95f4\u65f6\uff0c\u7cfb\u7edf\u62a2\u5360\u5f53\u524d\u8fdb\u7a0b\uff0c\u9009\u62e9\u65b0\u5c31\u7eea\u7684\u8fdb\u7a0b\u6267\u884c  </li> <li>\u5728\u6240\u6709\u8fdb\u7a0b\u540c\u65f6\u53ef\u8fd0\u884c\u65f6\uff0c\u91c7\u7528SJF\u8c03\u5ea6\u7b97\u6cd5\u53ef\u4ee5\u5f97\u5230\u6700\u77ed\u7684\u5e73\u5747\u5468\u8f6c\u65f6\u95f4 </li> <li> <p>\u7f3a\u70b9\uff1a\u4e0d\u516c\u5e73 \uff1a\u4f7f\u957f\u65f6\u95f4\u4efb\u52a1\u5f97\u4e0d\u5230\u8fd0\u884c \uff1b\u65e0\u6cd5\u7cbe\u786e\u77e5\u9053\u4e00\u4e2a\u4f5c\u4e1a\u7684\u8fd0\u884c\u65f6\u95f4 \uff1b</p> </li> <li> <p>\u9ad8\u54cd\u5e94\u6bd4\u4f18\u5148\uff08HRRN: Highest Response Ratio Next  \uff09</p> </li> <li> <p>\u54cd\u5e94\u6bd4R   = \u5468\u8f6c\u65f6\u95f4 / \u5904\u7406\u65f6\u95f4</p> <p>\u200b               =\uff08\u5904\u7406\u65f6\u95f4 + \u7b49\u5f85\u65f6\u95f4\uff09 / \u5904\u7406\u65f6\u95f4  </p> <p>\u200b               = 1 +\uff08\u7b49\u5f85\u65f6\u95f4 / \u5904\u7406\u65f6\u95f4\uff09</p> <p>\u8c03\u5ea6\u65f6\uff0c\u9996\u5148\u8ba1\u7b97\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u54cd\u5e94\u6bd4R\uff0c\u4e4b\u540e\u603b\u662f\u9009\u62e9 R \u6700\u9ad8\u7684\u8fdb\u7a0b\u6267\u884c \u3002</p> </li> <li> <p>\u662f\u4e00\u79cd\u6298\u8877\u6743\u8861\u7684\u7b97\u6cd5</p> </li> </ul>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_12","title":"\u4ea4\u4e92\u5f0f\u7cfb\u7edf\u4e2d\u7684\u8c03\u5ea6\u7b97\u6cd5\uff1a","text":"<ul> <li>\u8f6e\u8f6c\u8c03\u5ea6\uff08RR-Round Robin\uff09</li> <li>\u516c\u5e73\uff0c\u6709\u5229\u4e8e\u4ea4\u4e92\u5f0f\u8ba1\u7b97\uff0c\u54cd\u5e94\u5feb</li> <li>\u8fdb\u7a0b\u5207\u6362\u9700\u8981\u65f6\u95f4\u5f00\u9500\uff0c\u56e0\u6b64\u65f6\u95f4\u7247\u592a\u5c0f\u4f1a\u5bfc\u81f4\u8fdb\u7a0b\u5207\u6362\u6d88\u8017\u8fc7\u9ad8\uff0c\u800c\u5982\u679c\u65f6\u95f4\u7247\u592a\u957f\u5219\u4f1a\u589e\u5927\u8fdb\u7a0b\u54cd\u5e94\u65f6\u95f4</li> <li>\u65f6\u95f4\u7247\u5927\u5c0f\u5e94\u8be5\u7565\u5927\u4e8e\u4e00\u6b21\u5178\u578b\u4ea4\u4e92\u5927\u5c0f</li> <li>\u6700\u9ad8\u4f18\u5148\u7ea7\u8c03\u5ea6\uff08HPF\u2014Highest Priority First\uff09</li> <li>\u7ef4\u62a4N\u4e2a\u5c31\u7eea\u961f\u5217\uff0c\u6bcf\u4e2a\u961f\u5217\u5bf9\u5e94\u4e00\u4e2a\u4f18\u5148\u7ea7\u7c7b \uff1b\u5904\u4e8e\u540c\u4e00\u4f18\u5148\u7ea7\u7c7b\u5185\u90e8\u7684\u8fdb\u7a0b\u6309\u7167\u65f6\u95f4\u7247\u8f6e\u8f6c\u65b9\u5f0f\u8c03\u5ea6  </li> <li>\u6bcf\u6b21\u8c03\u5ea6\u8fd0\u884c\u51fa\u6700\u9ad8\u4f18\u5148\u7ea7\u961f\u5217\u7684\u961f\u9996\u8fdb\u7a0b \uff1b\u9ad8\u4f18\u5148\u7ea7\u8fdb\u7a0b\u62a2\u5360\u5f53\u524d\u8fdb\u7a0b </li> <li>\u591a\u7ea7\u53cd\u9988\u961f\u5217\uff08Multiple feedback queue\uff09</li> <li>\u6bd4\u6700\u9ad8\u4f18\u5148\u7ea7\u8c03\u5ea6\u591a\u4e86\u4e00\u4e2a\u65f6\u95f4\u7247\u7684\u533a\u522b\uff1a\u6bcf\u4e00\u4f18\u5148\u7ea7\u7684\u65f6\u95f4\u7247\u5927\u5c0f\u4e0d\u540c\uff1b\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u65f6\u95f4\u7247\u8d8a\u77ed</li> <li>\u82e5\u65f6\u95f4\u7247\u7528\u5b8c\u7684\u65f6\u5019\u4efb\u52a1\u8fd8\u6ca1\u6709\u6267\u884c\u5b8c\uff1a\u8fdb\u5165\u4e0b\u4e00\u4f18\u5148\u7ea7\u961f\u5217\u961f\u5c3e\uff1b\u82e5\u65f6\u95f4\u7247\u672a\u7528\u5b8c\u65f6\u6709\u65b0\u7684\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u5165\u961f\uff0c\u5219\u9ad8\u4f18\u5148\u7ea7\u62a2\u5360\u5f53\u524d\u4efb\u52a1</li> <li>\u6700\u77ed\u8fdb\u7a0b\u4f18\u5148\uff08Shortest Process Next\uff09 </li> <li>\u4e0e\u77ed\u4f5c\u4e1a\u4f18\u5148\u7c7b\u4f3c\uff0c\u4f46\u662f\u663e\u7136\u65e0\u6cd5\u9884\u5148\u77e5\u9053\u8fdb\u7a0b\u7684\u8fd0\u884c\u65f6\u95f4\uff1b\u4e0d\u8fc7\u8fd9\u4e2a\u65f6\u95f4\u53ef\u4ee5\u6839\u636e\u8fdb\u7a0b\u8fc7\u53bb\u7684\u884c\u4e3a\u63a8\u6d4b</li> <li>\u5047\u8bbe\u6d4b\u91cf\u5230\u4e0b\u4e00\u6b21\u7684\u8fd0\u884c\u65f6\u95f4\u4e3a\\(T_1\\)\uff0c\u4f7f\u7528\u8001\u5316\u7b97\u6cd5\u51cf\u5c11\u4e4b\u524d\u4f30\u8ba1\u65f6\u95f4\u7684\u6bd4\u91cd\uff1a\u65b0\u7684\u4f30\u8ba1\u8fd0\u884c\u65f6\u95f4\uff1a\\(T' = aT_0+(1-a)T_1\\)</li> </ul>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_13","title":"\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u8c03\u5ea6\uff1a","text":"<p>\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u79f0\u8fd9\u4e2a\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u662f\u53ef\u8c03\u5ea6\u7684\uff1a $$ \\sum_{i = 1}^{m}\\frac{C_i}{P_i}\\leq1 $$ m\u4e2a\u5468\u671f\u4e8b\u4ef6\uff0c\u6bcf\u4e2a\u4e8b\u4ef6i\u4ee5\u5468\u671f\\(P_i\\)\u53d1\u751f\uff0c\u4e14\u9700\u8981\\(C_i\\)\u79d2CPU\u65f6\u95f4\u5904\u7406\u4e00\u4e2a\u4e8b\u4ef6</p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_14","title":"\u8fdb\u7a0b\u901a\u4fe1","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_15","title":"\u5c4f\u853d\u4e2d\u65ad\u6cd5","text":"<p>\u4e0d\u5b89\u5168\uff0c\u4e14\u4e0d\u9002\u7528\u591a\u6838</p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_16","title":"\u9501\u53d8\u91cf","text":"<p>\u6bcf\u4e2a\u8fdb\u7a0b\u8981\u8fdb\u5165\u4e34\u754c\u533a\u65f6\u5148\u770b\u770b\u9501\u662f\u5426\u88ab\u8bbe\u7f6e\uff0c\u672a\u88ab\u8bbe\u7f6e\u5219\u53ef\u8fdb\u5165\u3002\u53ef\u80fd\u4f1a\u540c\u65f6\u8fdb\u5165\u3002</p> <p>\u573a\u666f\uff1a0\u68c0\u67e5\uff0c\u53d1\u73b0\u672a\u88ab\u8bbe\u7f6e\uff1b\u6b64\u65f6\u88ab\u8c03\u5ea6\u52301\uff1b1\u68c0\u67e5\uff0c\u53d1\u73b0\u672a\u88ab\u8bbe\u7f6e\uff1b\u52190\u30011\u5747\u8fdb\u5165</p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_17","title":"\u4e25\u683c\u8f6e\u6362\u6cd5\uff08\u5355\u6807\u5fd7\u6cd5\uff09","text":"<p>\u4e00\u4e2a\u8fdb\u7a0b\u662f\u5426\u80fd\u8fdb\u5165\u4e34\u754c\u533a\u7531\u5176\u5b83\u8fdb\u7a0b\u79bb\u5f00\u65f6\u8bbe\u7f6e\u7684\u6807\u5fd7\u51b3\u5b9a\u3002\u5fd9\u7b49\u5f85\uff0c\u4e14\u5b58\u5728\u6548\u7387\u95ee\u9898\u3002</p> <p>\u573a\u666f\uff1a0\u8fdb\u5165\uff0c\u79bb\u5f00\uff1b1\u5728\u963b\u585e\uff1b\u6b64\u65f60\u60f3\u8fdb\u5165\u5219\u5fc5\u987b\u8981\u7b49\u5f851\u8fdb\u5165\u4e4b\u540e\u518d\u79bb\u5f00</p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#peterson","title":"Peterson\u7b97\u6cd5","text":"<p>\u8fd9\u4e2a\u548c\u4e66\u4e0a\u4e0d\u592a\u4e00\u6837\uff1b\u6309\u7167\u4e66\u4e0a\uff0c\u5e94\u5f53<code>turn = \u81ea\u5df1\u7684\u7f16\u53f7</code></p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#tsl","title":"TSL\u6307\u4ee4\u6cd5","text":"<p>\u4e0e\u9501\u53d8\u91cf\u6cd5\u4e00\u81f4\u3002\u9501\u53d8\u91cf\u7684\u95ee\u9898\u5728\u4e8e\u68c0\u67e5\u9501\u548c\u8fdb\u5165\u4e34\u754c\u533a\u4e24\u4e2a\u64cd\u4f5c\u4e0d\u8fde\u7eed\uff0c\u800c\u4f7f\u7528\u786c\u4ef6\u6307\u4ee4\u5219\u53ef\u4ee5\u4f7f\u5176\u53d8\u6210\u539f\u5b50\u64cd\u4f5c\uff0c\u4fdd\u8bc1\u4e86\u6b63\u786e\u3002\u4f46\u662f\u540c\u6837\u5b58\u5728\u5fd9\u7b49\u5f85\u7684\u95ee\u9898\u3002</p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#-","title":"\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u95ee\u9898","text":"<p>\u5171\u7528\u4e00\u4e2a\u7f13\u51b2\u533a\uff1b\u8fdb\u5165\u524d\u68c0\u67e5\uff1b</p> <p>\u82e5\u6d88\u8d39\u8005\u8fdb\u5165\u524d\u68c0\u67e5\u4e3aempty\uff0c\u5219<code>sleep()</code>\uff0c\u5373\u81ea\u6211\u963b\u585e\uff08\u8fd9\u4e0e\u5fd9\u7b49\u5f85\u4e0d\u505c\u5faa\u73af\u5360\u7528CPU\u8d44\u6e90\u4e0d\u540c\uff09\uff0c\u8c03\u5ea6\u5230\u751f\u4ea7\u8005\uff0c\u751f\u4ea7\u8005<code>insert_item()</code>\u4e4b\u540e\u53d1\u73b0\u7f13\u51b2\u533a\u4e3a1\uff0c\u5224\u65ad\u6d88\u8d39\u8005\u6b64\u524d\u963b\u585e\uff0c\u4e8e\u65f6<code>wakeup()</code>\u5524\u9192\u6d88\u8d39\u8005\uff1b</p> <p>\u82e5\u751f\u4ea7\u8005\u8fdb\u5165\u524d\u68c0\u67e5\u4e3afull\uff0c\u5219<code>sleep()</code>\uff0c\u5373\u81ea\u6211\u963b\u585e\uff08\u8fd9\u4e0e\u5fd9\u7b49\u5f85\u5360\u7528CPU\u8d44\u6e90\u4e0d\u540c\uff09\uff0c\u8c03\u5ea6\u5230\u6d88\u8d39\u8005\uff0c\u6d88\u8d39\u8005<code>remove_item()</code>\u4e4b\u540e\u53d1\u73b0\u7f13\u51b2\u533a\u4e3aN-1\uff0c\u5224\u65ad\u6d88\u8d39\u8005\u6b64\u524d\u963b\u585e\uff0c\u4e8e\u65f6<code>wakeup()</code>\u5524\u9192\u6d88\u8d39\u8005\uff1b</p> <p>\u8003\u8651\u4e00\u4e2a\u573a\u666f\uff1a</p> <p>\u6d88\u8d39\u8005\u68c0\u67e5\u7f13\u51b2\u533a\uff0c\u8bfb\u53d6\u5230<code>item</code>\u9879\u4e3a0\uff0c\u4f46\u6b64\u65f6\u8c03\u5ea6\u7a0b\u5e8f\u56e0\u65f6\u95f4\u7247\u7528\u5b8c\u6216\u5176\u4ed6\u539f\u56e0\u6682\u505c\u6d88\u8d39\u8005\u8c03\u5ea6\u5230\u751f\u4ea7\u8005\uff1b</p> <p>\u6b64\u65f6\u751f\u4ea7\u8005\u6267\u884c<code>insert_item()</code>\u4e4b\u540e\u53d1\u73b0\u7f13\u51b2\u533a\u4e3a1\uff0c\u56e0\u6b64\u6267\u884c<code>wakeup()</code>\u5524\u9192\u6d88\u8d39\u8005\uff0c\u7136\u800c\u6b64\u65f6\u6d88\u8d39\u8005\u5e76\u672asleep\uff0c\u4e8e\u65f6\u4fe1\u53f7\u4e22\u5931\uff1b</p> <p>\u8fdb\u7a0b\u8c03\u5ea6\u56de\u6d88\u8d39\u8005\uff0c\u56e0\u6b64\u524d\u8bfb\u53d6\u5230<code>item</code>\u9879\u4e3a0\uff0c\u56e0\u6b64\u6d88\u8d39\u8005sleep\uff1b\u6b64\u540e\u5c06\u76f4\u81f3\u751f\u4ea7\u8005\u56e0\u7f13\u51b2\u533a\u6ee1sleep\u540e\uff0c\u4e8c\u8005\u90fdsleep</p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#semaphore","title":"\u4fe1\u53f7\u91cf\uff08semaphore\uff09","text":"<p>\u4e3a\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\uff0cDijkstra\u5f15\u5165\u4fe1\u53f7\u91cf\uff0c\u4ee5\u53ca\u4e24\u79cd\u64cd\u4f5c<code>P(down)</code>\u548c<code>V(up)</code>\uff0c\u5206\u522b\u5bf9\u5e94\u4e00\u822c\u5316\u540e\u7684<code>sleep()</code>\u548c<code>wakeup()</code>\u3002\u4fe1\u53f7\u91cf\u8868\u793a\u7cfb\u7edf\u4e2d\u7684\u67d0\u79cd\u8d44\u6e90\u3002\u5f53\u4e3a0\u65f6\u8868\u660e\u8d44\u6e90\u8017\u5c3d\u3002</p> <p>\u4fe1\u53f7\u91cf\u53ef\u4ee5\u89e3\u51b3\u4e92\u65a5\u548c\u540c\u6b65\u95ee\u9898\uff0c\u5176\u4e2d\u89e3\u51b3\u4e92\u65a5\u95ee\u9898\u7684\u4e8c\u5143\u4fe1\u53f7\u91cf\u53c8\u79f0\u4e3a\u4e92\u65a5\u91cf(mutex)</p> <p>\u7528\u4fe1\u53f7\u91cf\u89e3\u51b3\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u95ee\u9898\uff1a</p> <p>\u4e0e\u6b64\u524d\u4e0d\u540c\uff0cP\u3001V\u64cd\u4f5c\u5747\u4e3a\u539f\u5b50\u64cd\u4f5c\uff0c\u5373\u68c0\u67e5\u4fe1\u53f7\u91cf\u6570\u503c\u548c\u6267\u884csleep\u963b\u585e\uff08\u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff09/ \u6267\u884cwakeup\u5524\u9192\u4e00\u4e2a\u8fdb\u7a0b\uff08\u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff09\uff0c\u68c0\u67e5\u6570\u503c\u3001\u4fee\u6539\u53d8\u91cf\u3001\u963b\u585e/\u5524\u9192 \u4e09\u4e2a\u52a8\u4f5c\u53d8\u4e3a\u4e00\u4e2a\u4e0d\u53ef\u5206\u5272\u7684\u539f\u5b50\u64cd\u4f5c\u3002\u5728\u4e0a\u4e00\u573a\u666f\u4e2d\u6b63\u56e0\u4e3a\u53ef\u5206\u5272\u6240\u4ee5\u5bfc\u81f4\u95ee\u9898\u3002</p> <p></p> <p>\u80fd\u5426\u6539\u53d8PV\u64cd\u4f5c\u987a\u5e8f\uff1a</p> <p></p> <p>\u5b9e\u73b0\u4e92\u65a5\u7684P\u64cd\u4f5c\u9700\u8981\u5728\u5b9e\u73b0\u540c\u6b65\u7684P\u64cd\u4f5c\u4e4b\u540e\uff1b\u5426\u5219\u53ef\u80fd\u4f1a\u5f15\u8d77\u6b7b\u9501\u3002</p> <p>\u7528\u4fe1\u53f7\u91cf\u673a\u5236\u5b9e\u73b0\u524d\u9a71\u5173\u7cfb\uff1a</p> <p></p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_18","title":"\u7ba1\u7a0b","text":"<p>\u7ba1\u7a0b\u53ef\u4ee5\u7406\u89e3\u6210\u4e00\u4e2a\u7c7b\uff0c\u6709\u6570\u636e\uff0c\u6709\u51fd\u6570\u63a5\u53e3\u3002\u5bf9\u6570\u636e\u7684\u64cd\u4f5c\u5fc5\u987b\u901a\u8fc7\u51fd\u6570\u63a5\u53e3\u3002</p> <p>\u4efb\u4e00\u65f6\u523b\u7ba1\u7a0b\u4e2d\u4ec5\u5141\u8bb8\u6709\u4e00\u4e2a\u6d3b\u8dc3\u7684\u8fdb\u573a\uff0c\u4ee5\u4fdd\u8bc1\u5bf9\u4e8e\u4e34\u754c\u533a\u7684\u4e92\u65a5\u8bbf\u95ee(\u8fd9\u4e00\u70b9\u662f\u7f16\u8bd1\u5668\u4fdd\u8bc1\u7684\uff0c\u5373\u7f16\u8bd1\u5668\u4fdd\u8bc1\u5bf9\u4e34\u754c\u533a\u7684\u4e92\u65a5\u8bbf\u95ee)</p> <p>\u5982\u679c\u8981\u5b9e\u73b0\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u4e2d\u7684\uff1a\u7f13\u51b2\u533a\u6ee1\u751f\u4ea7\u8005\u963b\u585e\uff1b\u7f13\u51b2\u533a\u7a7a\u6d88\u8d39\u8005\u963b\u585e\uff1b\u5219\u5e94\u5f53\u4f7f\u7528\u6761\u4ef6\u53d8\u91cf(condition variables)</p> <p>\u4fe1\u53f7\u91cf\u548c\u7ba1\u7a0b\u7684\u533a\u522b\uff1a</p> <p></p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#ipc","title":"\u7ecf\u5178IPC\u95ee\u9898","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_19","title":"\u54f2\u5b66\u5bb6\u8fdb\u9910","text":"<p>\u54f2\u5b66\u5bb6\u8fdb\u9910\u524d\u9700\u8981\u5148\u68c0\u67e5\u5de6\u53f3\u4e24\u4eba\u662f\u5426\u8fdb\u9910\uff1b\u5982\u679c\u5de6\u53f3\u4e24\u4eba\u90fd\u672a\u8fdb\u9910\uff0c\u5219\u5c06\u4fe1\u53f7\u91cf<code>V(s[i])</code>\uff1b\u68c0\u67e5\u5b8c\u6bd5\u540e<code>P(s[i])</code>\uff1b</p> <p>\u8fd9\u6837\u4e00\u6765\u5982\u679c\u54f2\u5b66\u5bb6\u5de6\u6216\u53f3\u6709\u4eba\u8fdb\u9910\uff0c\u5219\u8be5\u54f2\u5b66\u5bb6\u5c06\u4f1a\u88ab\u963b\u585e</p> <p>\u54f2\u5b66\u5bb6\u8fdb\u9910\u5b8c\u6bd5\u65f6\u68c0\u67e5\u5de6\u53f3\u4e24\u4eba\uff0c\u5982\u679c\u6709\u56e0\u81ea\u5df1\u5360\u6709\u8d44\u6e90\u800c\u963b\u585e\u7684\u54f2\u5b66\u5bb6\uff0c\u5219\u6b64\u65f6\u88ab\u5524\u9192</p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#-_1","title":"\u8bfb\u8005-\u5199\u8005","text":"<p>\u6570\u636e\u5e93\u53ef\u4ee5\u540c\u65f6\u88ab\u591a\u4e2a\u8bfb\u8005\u8bbf\u95ee\uff1b\u4f46\u5199\u8005\u72ec\u5360\u6570\u636e\u5e93\uff1b</p> <p>\u7b2c\u4e00\u4e2a\u8bfb\u8005\u8fdb\u5165\u65f6\u5c06\u5bf9\u4e8e\u4fe1\u53f7\u91cf<code>db</code>\u6267\u884c<code>P(db)</code>\uff0c\u6700\u540e\u4e00\u4e2a\u79bb\u5f00\u65f6\u5c06<code>V(db)</code>\uff1b</p> <p>\u8fd9\u6837\u4e00\u6765\u9664\u975e\u6700\u540e\u4e00\u4e2a\u8bfb\u8005\u79bb\u5f00\uff0c\u5426\u5219\u5199\u8005\u8fdb\u5165\u5c06\u88ab\u963b\u585e</p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_20","title":"\u6b7b\u9501","text":"<p>\u6b7b\u9501\u662f\u6307\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u7684\u8fdb\u7a0b\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u7531\u4e8e\u7ade\u4e89\u8d44\u6e90\u6216\u8005\u7531\u4e8e\u5f7c\u6b64\u901a\u4fe1\u800c\u9020\u6210\u7684\u4e00\u79cd\u963b\u585e\u7684\u73b0\u8c61</p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_21","title":"\u6b7b\u9501\u53d1\u751f\u7684\u56db\u4e2a\u5fc5\u8981\u6761\u4ef6","text":"<ul> <li>\u4e92\u65a5\u6761\u4ef6\uff1a\u8d44\u6e90\u8981\u4e48\u662f\u5206\u914d\u4e2a\u4e86\u5355\u72ec\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u8981\u4e48\u662f\u53ef\u7528\u7684</li> <li>\u4e0d\u53ef\u62a2\u5360\u6761\u4ef6\uff1a\u8d44\u6e90\u53ea\u80fd\u4e3b\u52a8\u91ca\u653e</li> <li>\u5360\u6709\u548c\u7b49\u5f85\u6761\u4ef6\uff1a\u5f97\u5230\u4e86\u8d44\u6e90\u7684\u8fdb\u7a0b\u53ef\u4ee5\u8bf7\u6c42\u5176\u4ed6\u7684\u8d44\u6e90</li> <li>\u73af\u8def\u7b49\u5f85\u6761\u4ef6\uff1a\u4e0d\u540c\u8fdb\u7a0b\u4e4b\u95f4\u7684\u8d44\u6e90\u8bf7\u6c42\u548c\u5360\u6709\u5f62\u6210\u73af\u8def</li> </ul>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_22","title":"\u6b7b\u9501\u68c0\u6d4b\u548c\u6b7b\u9501\u907f\u514d","text":"<p>\u6b7b\u9501\u68c0\u6d4b\u4e0d\u4f1a\u963b\u6b62\u6b7b\u9501\u7684\u53d1\u751f\uff0c\u800c\u662f\u8ba9\u8fdb\u7a0b\u6267\u884c\uff0c\u5bf9\u5df2\u7ecf\u5206\u914d\u7684\u8d44\u6e90\u8fdb\u884c\u68c0\u67e5\uff0c\u53d1\u751f\u6b7b\u9501\u4e86\u518d\u8003\u8651\u8fdb\u884c\u6062\u590d\u3002</p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_23","title":"\u6709\u5411\u56fe\u5224\u5b9a\u73af","text":"<p>\u6210\u73af\u7684\u8fdb\u7a0b\u4e4b\u95f4\u53d1\u751f\u6b7b\u9501\uff0c\u73af\u6307\u51fa\u53bb\u7684\u8fdb\u7a0b\u4e0d\u4f1a\u6b7b\u9501</p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_24","title":"\u6bcf\u7c7b\u578b\u591a\u4e2a\u8d44\u6e90\u6b7b\u9501\u68c0\u6d4b","text":"<p>\u5bf9\u4e8e \u5f53\u524d\u77e9\u9635C\uff0c\u8bf7\u6c42\u77e9\u9635R\uff0c\u73b0\u6709\u8d44\u6e90\u5411\u91cfE\uff0c\u53ef\u7528\u8d44\u6e90\u5411\u91cfA</p> <p>\u77e9\u9635\u4e2d\u7684\u6bcf\u4e00\u884c\u4ee3\u8868\u4e00\u4e2a\u8fdb\u7a0b\u6240\u62e5\u6709/\u8bf7\u6c42\u7684\u8d44\u6e90</p> <ol> <li>\u5bfb\u627e\u4e00\u4e2a\u6ca1\u6709\u6807\u8bb0\u7684\u8fdb\u7a0bP\uff0c\u5bf9\u4ed6\u800c\u8a00R\u77e9\u9635\u7684\u5bf9\u5e94\u884c\u5c0f\u4e8e\u6216\u7b49\u4e8eA</li> <li>\u5982\u679c\u627e\u5230\u8fd9\u6837\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u628aC\u77e9\u9635\u4e2dP\u8fdb\u7a0b\u5bf9\u5e94\u884c\u52a0\u5230A\u4e2d\uff08P\u8fd0\u884c\u5b8c\u6bd5\uff0c\u91ca\u653e\u8d44\u6e90\u5230\u53ef\u7528\u8d44\u6e90\u4e2d\uff09\uff0c\u5e76\u6807\u8bb0\u8be5\u8fdb\u7a0b</li> <li>\u5982\u679c\u6ca1\u6709\u627e\u5230\u8fd9\u6837\u7684\u8fdb\u7a0b\uff0c\u7b97\u6cd5\u7ec8\u6b62</li> </ol>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_25","title":"\u6b7b\u9501\u907f\u514d","text":"<p>\u5efa\u7acb\u5728\u7cfb\u7edf\u9884\u5148\u77e5\u9053\u8fdb\u7a0b\u6240\u9700\u8981\u7684\u8d44\u6e90\u7684\u524d\u63d0\u4e0b</p> <p>\u94f6\u884c\u5bb6\u7b97\u6cd5\u662f\u4e0a\u4e00\u7b97\u6cd5\u7684\u6269\u5c55\uff1a</p> <p>\u53ea\u9700\u8981\u628a\u4e0a\u8ff0\u7b97\u6cd5\u4e2d\u7684\u8bf7\u6c42\u77e9\u9635R\u7684\u610f\u4e49\u66f4\u6362\u4e3a\u6700\u5927\u9700\u6c42\u91cf\u5373\u53ef\u3002</p> <p>\u5176\u6838\u5fc3\u601d\u60f3\u4e3a\uff1a\u5bf9\u6bcf\u4e00\u4e2a\u8bf7\u6c42\u8fdb\u884c\u68c0\u67e5\uff0c\u68c0\u67e5\u5982\u679c\u6ee1\u8db3\u8fd9\u4e00\u8bf7\u6c42\u662f\u5426\u4f1a\u8fbe\u5230\u5b89\u5168\u72b6\u6001\u3002</p> <ul> <li>\u82e5\u662f\uff0c\u90a3\u4e48\u5c31\u6ee1\u8db3\u8be5\u8bf7\u6c42\uff1b </li> <li>\u5426\u5219\uff0c\u5c31\u63a8\u8fdf\u5bf9\u8fd9\u4e00\u8bf7\u6c42\u7684\u6ee1\u8db3\u3002  </li> </ul>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_26","title":"\u6b7b\u9501\u9884\u9632","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#2","title":"\u7b2c2\u7ae0   \u5185\u5b58\u7ba1\u7406","text":"<p>\u7a0b\u5e8f\u7684\u88c5\u8f7d\uff1a</p> <p></p> <p>\u5185\u788e\u7247\u4e0e\u5916\u788e\u7247\uff1a</p> <ul> <li>\u5185\u90e8\u788e\u7247\u662f\u6307\u5df2\u7ecf\u5206\u914d\u7ed9\u4f5c\u4e1a\u4f46\u4e0d\u80fd\u88ab\u5229\u7528\u7684\u5185\u5b58\u7a7a\u95f4</li> <li>\u5916\u90e8\u788e\u7247\u662f\u6307\u7cfb\u7edf\u4e2d\u8fd8\u6ca1\u6709\u5206\u914d\u7ed9\u4f5c\u4e1a\uff0c\u4f46\u7531\u4e8e\u788e\u7247\u592a\u5c0f\u800c\u65e0\u6cd5\u5206\u914d\u7ed9\u7533\u8bf7\u5185\u5b58\u7a7a\u95f4\u7684\u65b0\u8fdb\u7a0b\u7684\u5b58\u50a8\u5757  </li> </ul>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_27","title":"\u7a7a\u95f2\u5185\u5b58\u7ba1\u7406","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_28","title":"\u4f4d\u56fe","text":"<ul> <li>\u7a7a\u95f2\u7f6e0\uff0c\u975e\u7a7a\u95f2\u7f6e1\uff1b\u8282\u7701\u7a7a\u95f4</li> <li>\u7f3a\u70b9\uff1a\u5206\u914d\u5185\u5b58\u65f6\u9700\u8981\u641c\u5bfb\u8fde\u7eed0\u4e32\u6bd4\u8f83\u9ebb\u70e6</li> </ul>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_29","title":"\u94fe\u8868","text":"<p>\u7ef4\u62a4\u4e00\u4e2a\u8bb0\u5f55\u5df2\u5206\u914d\u5185\u5b58\u6bb5\u548c\u7a7a\u95f2\u5185\u5b58\u6bb5\u7684\u94fe\u8868  </p> <p>\u4e00\u4e2a\u8fdb\u7a0b\u8c03\u5165\u65f6\uff0c\u9009\u62e9\u90a3\u4e2a\u5185\u5b58\u5462\uff1f </p> <ul> <li>\u9996\u6b21\u9002\u914d</li> <li>\u4e0b\u6b21\u9002\u914d\uff1a\u6bcf\u6b21\u4e0d\u662f\u4ece\u5934\u641c\uff0c\u800c\u662f\u4ece\u4e0a\u4e00\u6b21\u7684\u4f4d\u7f6e\u7ee7\u7eed</li> <li>\u6700\u4f73\u9002\u914d\uff1a\u627e\u5230\u80fd\u5bb9\u7eb3\u8fdb\u7a0b\u7684\u6700\u5c0f\u7a7a\u95f2\u533a</li> <li>\u6700\u5dee\u9002\u914d\uff1a\u603b\u662f\u5206\u914d\u6700\u5927\u7684\u7a7a\u95f2\u533a</li> <li>\u5feb\u901f\u9002\u914d\uff1a\u4e3a\u5e38\u7528\u5927\u5c0f\u7684\u7a7a\u95f2\u533a\u5355\u72ec\u7ef4\u62a4\u94fe\u8868</li> </ul>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_30","title":"\u865a\u62df\u5185\u5b58","text":"<p>\u4e00\u4e2a\u5185\u5b58\u5730\u5740(\u865a\u62df\u5730\u5740)---\u865a\u62df\u9875\u9762\u53f7---&gt;MMU\u5c06VPN(Virtual Page Number)\u4e0eTLB\u8868\u9879\u5339\u914d(\u5e76\u884c)------&gt;\u627e\u5230\u7269\u7406\u5730\u5740/\u672a\u627e\u5230\u7269\u7406\u5730\u5740</p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_31","title":"\u5206\u9875\u5b58\u50a8","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_32","title":"\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u7684\u5feb\u901f\u6620\u5c04","text":"<ul> <li>\u5f15\u5165TLB\uff1a</li> </ul> <p>\u5bf9\u4e8e\u5355\u7ea7\u9875\u8868\u4e14\u672a\u4ea7\u751f\u9875\u7f3a\u5931\u7684\u4e00\u6b21\u8bbf\u5b58\uff1a\u5b9e\u9645\u4e0a\u9700\u8981\u8bbf\u95ee\u4e24\u6b21\u7269\u7406\u5185\u5b58\uff1a\u7b2c\u4e00\u6b21\u4ece\u5185\u5b58\u4e2d\u8bfb\u865a\u62df\u5730\u5740\u5bf9\u5e94\u7684\u9875\u8868\u9879\uff0c\u7b2c\u4e8c\u6b21\u6839\u636e\u9875\u8868\u9879\u7684\u503c+\u504f\u79fb\u91cf\u8bbf\u95ee\u6570\u636e</p> <p>\u5728\u5f15\u5165TLB\u4e4b\u540e\uff1a\u8bbf\u95eeTLB\u6bd4\u8bbf\u95ee\u5185\u5b58\u5feb\u5f97\u591a\uff08\u5e94\u8be5\u662f\u4e00\u4e2a\u9ad8\u901f\u5185\u5b58\uff0ccache\u4e2d\uff1f\uff09\u5e38\u7528\u7684\u9875\u8868\u9879\u88ab\u8bb0\u5f55\u5728TLB\u4e2d\uff0c\u7c7b\u4f3ccache\u7684\u4f5c\u7528\uff0c\u6bcf\u6b21\u67e5\u9875\u8868\u4e4b\u524d\u5148\u67e5TLB\uff0c\u5982\u679c\u547d\u4e2d\u5219\u53ea\u9700\u8981\u4e00\u6b21\u8bbf\u95ee\u5185\u5b58\uff0c\u53ef\u4ee5\u6781\u5927\u63d0\u9ad8\u67e5\u9875\u8868\u7684\u901f\u5ea6\u3002</p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_33","title":"\u5927\u5185\u5b58\u7684\u9875\u8868\u7ba1\u7406","text":"<ul> <li>\u591a\u7ea7\u9875\u8868\uff1a\u5206\u7ea7\u8d8a\u591a\u8d8a\u7075\u6d3b\uff0c\u4f46\u662f\u5206\u7ea7\u8d8a\u591a\u6bcf\u6b21\u8bbf\u5b58\u9700\u8981\u67e5\u8868\u7684\u6b21\u6570\u4e5f\u5c31\u8d8a\u591a\u3002</li> <li>\u5012\u6392\u9875\u8868\uff1a\u7d22\u5f15\u5927\u5c0f\u4e3a\u7269\u7406\u7a7a\u95f4\u5927\u5c0f\uff0c\u4e0d\u540c\u4e8e\u666e\u901a\u9875\u8868\u4e2d\u7d22\u5f15\u4e3a\u865a\u62df\u5730\u5740\u7a7a\u95f4\u5927\u5c0f\uff1b\u7f3a\u70b9\u662f\u67e5\u8868\u5f88\u6162\uff0c\u6bcf\u6b21\u90fd\u9700\u8981\u641c\u6574\u4e2a\u8868</li> </ul>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_34","title":"\u9875\u9762\u7f6e\u6362\u7b97\u6cd5","text":"<ul> <li>\u98a0\u7c38\uff08Thrashing\uff0c\u6296\u52a8\uff09   \u865a\u62df\u5185\u5b58\u4e2d\uff0c\u9875\u9762\u5728\u5185\u5b58\u4e0e\u78c1\u76d8\u4e4b\u95f4\u9891\u7e41\u8c03\u5ea6\uff0c\u4f7f\u5f97\u8c03\u5ea6\u9875\u9762\u6240\u9700\u7684\u65f6\u95f4\u6bd4\u8fdb\u7a0b\u5b9e\u9645\u8fd0\u884c\u7684\u65f6\u95f4\u8fd8\u591a\uff0c\u8fd9\u6837\u5bfc\u81f4\u7cfb\u7edf\u6548\u7387\u6025\u5267\u4e0b\u964d\uff0c\u8fd9\u79cd\u73b0\u8c61\u79f0\u4e3a\u98a0\u7c38\u6216\u6296\u52a8\u3002</li> </ul> <p>\u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u73b0\u8c61\u7684\u53d1\u751f\uff0c\u8981\u4f7f\u7528\u5408\u9002\u7684\u9875\u9762\u7f6e\u6362\u7b97\u6cd5\uff0c\u51cf\u5c11\u9875\u9762\u5728\u78c1\u76d8\u548c\u5185\u5b58\u4e4b\u95f4\u7684\u4ea4\u6362\u6b21\u6570</p> <p>\u51e0\u79cd\u7b97\u6cd5\uff1a</p> <ul> <li>\u6700\u4f73\u9875\u9762\u7f6e\u6362\u7b97\u6cd5\uff1a</li> </ul> <p>\u7f6e\u6362\u4ee5\u540e\u4e0d\u518d\u9700\u8981\u7684\u6216\u6700\u8fdc\u7684\u5c06\u6765\u624d\u4f1a\u7528\u5230\u7684\u9875\u9762\uff1b\u6548\u679c\u6700\u597d\uff0c\u4f46\u65e0\u6cd5\u5b9e\u73b0\u3002</p> <p>\u56e0\u4e3a\u64cd\u4f5c\u7cfb\u7edf\u65e0\u6cd5\u77e5\u9053\u5404\u4e2a\u9875\u9762\u4e0b\u4e00\u6b21\u5c06\u5728\u4ec0\u4e48\u65f6\u5019\u88ab\u8bbf\u95ee\u3002\u4f5c\u4e3a\u4e00\u79cd\u6807\u51c6\u6765\u8861\u91cf\u5176\u4ed6\u7b97\u6cd5\u7684\u6027\u80fd  </p> <ul> <li>\u5148\u8fdb\u5148\u51fa\u7f6e\u6362\u7b97\u6cd5\uff08FIFO\uff09\uff1a</li> </ul> <p>\u7ef4\u62a4\u4e00\u4e2a\u6240\u6709\u5f53\u524d\u5728\u5185\u5b58\u4e2d\u7684\u9875\u9762\u7684\u94fe\u8868\uff0c\u6700\u65b0\u8fdb\u5165\u7684\u9875\u9762\u653e\u5728\u8868\u5c3e\uff0c\u6700\u65e9\u8fdb\u5165\u7684\u9875\u9762\u653e\u5728\u8868\u5934\u3002</p> <p>\u51e0\u4e4e\u6ca1\u6709\u8003\u8651\u9875\u9762\u7684\u4f7f\u7528\u9891\u7387\uff0c\u4f1a\u6dd8\u6c70\u9891\u7e41\u4f7f\u7528\u7684\u9875\u9762</p> <ul> <li>\u7b2c\u4e8c\u6b21\u673a\u4f1a\u7b97\u6cd5\uff08second chance\uff09\uff1a</li> </ul> <p>\u5728FIFO\u7684\u57fa\u7840\u4e0a\u8003\u8651\u4e86R\u4f4d\u3002\u5373\uff0c\u5982\u679c\u961f\u9996\u5143\u7d20\u7684R\u4f4d\u4e3a1\uff0c\u5219\u8bf4\u660e\u5176\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5219\u628a\u4ed6\u5165\u961f\u5c3e\u5e76\u7f6eR=0\uff1b\u5982\u679cR=0\uff0c\u5219\u7f6e\u6362\u3002</p> <ul> <li>\u65f6\u949f\u9875\u9762\u7f6e\u6362\u7b97\u6cd5\uff1a</li> </ul> <p>\u662f\u7b2c\u4e8c\u6b21\u673a\u4f1a\u7b97\u6cd5\u7684\u4e00\u4e2a\u66f4\u597d\u7684\u5b9e\u73b0\u3002</p> <p>\u8003\u8651\u7b2c\u4e8c\u6b21\u673a\u4f1a\u7b97\u6cd5\u628a\u961f\u9996\u5143\u7d20\u653e\u5230\u961f\u5c3e\u8fd9\u4e00\u64cd\u4f5c\uff0c\u53ef\u6784\u9020\u4e00\u4e2a\u73af\u5f62\u961f\u5217\uff0c\u6bcf\u6b21\u628a\u961f\u9996\u6307\u9488\u540e\u79fb\u5373\u53ef\u3002\u56e0\u5de5\u4f5c\u8d77\u6765\u50cf\u4e00\u4e2a\u8868\u76d8\u5f97\u540d</p> <ul> <li>\u6539\u8fdb\u578b\u65f6\u949f\u7b97\u6cd5\uff1a</li> </ul> <p>\u5728\u8003\u8651\u8bbf\u95ee\u7684\u57fa\u7840\u4e0a\u989d\u5916\u8003\u8651\u4e86\u9875\u9762\u8f7d\u5165\u5185\u5b58\u540e\u662f\u5426\u88ab\u4fee\u6539\u7684\u95ee\u9898\uff1a\u4f18\u5148\u66ff\u6362\u6389\u88ab\u6ca1\u6709\u4fee\u6539\u7684\uff08\u56e0\u4e3a\u5199\u78c1\u76d8\u64cd\u4f5c\u8017\u65f6\u957f\uff0c\u5728\u5185\u5b58\u4e2d\u7684\u9875\u9762\u53ef\u80fd\u591a\u6b21\u88ab\u4fee\u6539\uff0c\u5c3d\u53ef\u80fd\u51cf\u5c11\u5199\u5165\u6b21\u6570\uff0c\u56e0\u6b64\u4fee\u6539\u6807\u8bb0\u4e3a1\u7684\u9875\u9762\u88ab\u7f6e\u6362\u7684\u4f18\u5148\u7ea7\u66f4\u4f4e\uff09</p> <p>\u4f7f\u7528\uff08R\uff0cM\uff09\u4e24\u4e2a\u6807\u8bb0\u4f4d</p> <p></p> <ul> <li>\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\uff08LRU\uff09\uff1a</li> </ul> <p>\u7406\u8bba\u4e0a\u7ef4\u62a4\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf\u6b21\u8bbf\u5b58\u628a\u8bbf\u95ee\u7684\u9875\u9762\u653e\u5230\u961f\u9996\uff0c\u7f6e\u6362\u7684\u65f6\u5019\u628a\u961f\u5c3e\u7f6e\u6362\u5373\u53ef</p> <p></p> <ul> <li>\u6700\u4e0d\u7ecf\u5e38\u4f7f\u7528\u7b97\u6cd5\uff08NFU\uff09\u53ca\u5176\u6539\u8fdb\uff1a</li> </ul> <p></p> <ul> <li>\u5de5\u4f5c\u96c6\u9875\u9762\u7f6e\u6362\u7b97\u6cd5\uff1a</li> </ul> <p></p> <p></p> <p>\u5de5\u4f5c\u96c6\u65f6\u949f\u548c\u5de5\u4f5c\u96c6\uff1a</p> <p>\u524d\u8005\u5728\u626b\u63cf\u5230\u4e00\u4e2a\u4e0d\u5728\u5de5\u4f5c\u96c6\u4e2d\u7684\u9875\u9762\u7684\u65f6\u5019\uff0c\u5e76\u4e0d\u76f4\u63a5\u66ff\u6362\uff0c\u800c\u662f\u5148\u5224\u65ad\u5176M\u4f4d\u662f\u5426\u4e3a1\uff0c\u5982\u679c\u4e3a1\uff0c\u5219\u8bf4\u660e\u5176\u88ab\u4fee\u6539\u8fc7\uff0c\u5148\u628a\u5176\u5199\u56de\uff0c\u7ee7\u7eed\u626b\u63cf\u3002\u56e0\u4e3a\uff0c\u6bd5\u7adf\u6709\u53ef\u80fd\u5b58\u5728\u4e00\u4e2a\u65e7\u7684\u4e14\u5e72\u51c0\u7684\u9875\u9762\u53ef\u4ee5\u7acb\u5373\u8c03\u7528\u3002\uff08\u5229\u7528\u4e86\u626b\u63cf\u9875\u8868\u548c\u5199\u56de\u9875\u8868\u64cd\u4f5c\u53ef\u4ee5\u5e76\u884c\uff09</p> <p></p> <p></p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_35","title":"\u9875\u9762\u5c3a\u5bf8\u95ee\u9898","text":"<ul> <li>\u5c0f\u9875\u9762\uff1a\u5185\u788e\u7247\u66f4\u5c0f\uff0c\u6d6a\u8d39\u66f4\u5c11\uff1b\u4f46\u662f\u610f\u5473\u7740\u66f4\u591a\u7684\u9875\u9762\\(\\Longrightarrow\\)\u66f4\u5927\u7684\u9875\u8868&amp;TLB\u6bcf\u4e2a\u8868\u9879\u6620\u5c04\u66f4\u5c0f\u7684\u5185\u5b58\uff0c\u4ea4\u6362\u6548\u7387\u4f4e</li> <li>\u5927\u9875\u9762\uff1a\u5145\u5206\u5229\u7528TLB\u8868\u9879\uff0c\u5185\u5b58\u4e0e\u78c1\u76d8\u4ea4\u6362\u6548\u7387\u66f4\u9ad8\uff08\u4ea4\u6362\u5355\u4f4d\u4e3a\u9875\uff09\uff1b\u4f46\u662f\u610f\u5473\u7740\u66f4\u5927\u7684\u5185\u788e\u7247</li> </ul> <p>\u5047\u8bbes\u4e3a\u8fdb\u7a0b\u5e73\u5747\u5927\u5c0f\uff0c\u6bcf\u4e2a\u9875\u8868\u9879\u9700\u8981e\u4e2a\u5b57\u8282\uff0c\u9875\u9762\u5927\u5c0f\u4e3ap\u5b57\u8282</p> <p></p> <p>\u6c42\u5bfc\u53ef\u4ee5\u89e3\u51fa\u6700\u4f18\u9875\u9762\u5927\u5c0f  \\(p = \\sqrt{2se}\\) </p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_36","title":"\u6e05\u9664\u7b56\u7565","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_37","title":"\u9501\u5b9a","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_38","title":"\u5206\u6bb5\u5b58\u50a8","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_39","title":"\u5206\u6bb5\u548c\u5206\u9875\u7684\u5bf9\u6bd4\uff1a","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_40","title":"\u6bb5\u9875\u5f0f\u5b9e\u73b0\uff1a","text":"<ul> <li>MULTICS  </li> </ul> <ul> <li>\u57fa\u4e8ex86</li> </ul> <p>\u4e0d\u540c\u4e8eMUTICS\u4e2d\u6bcf\u6bb5\u4e2d\u90fd\u6709\u4e00\u4e2a\u9875\u8868\uff0c\u57fa\u4e8eX86\u7684\u5b9e\u73b0\u4e2d\u53ea\u6709\u4e00\u5f20\u9875\u8868</p> <p></p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#3","title":"\u7b2c3\u7ae0   \u6587\u4ef6","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_41","title":"\u5982\u4f55\u4e3a\u6587\u4ef6\u5206\u914d\u78c1\u76d8","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_42","title":"\u8fde\u7eed\u5206\u914d","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_43","title":"\u94fe\u8868\u5206\u914d","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#fat","title":"FAT\u5206\u914d","text":"<p>\u7f3a\u70b9\uff1a</p> <ul> <li>\u5fc5\u987b\u628a\u6574\u4e2a\u8868\u90fd\u5b58\u653e\u5728\u5185\u5b58\u4e2d</li> <li>FAT\u7684\u7ba1\u7406\u65b9\u5f0f\u4e0d\u80fd\u8f83\u597d\u5730\u6269\u5c55\u5e76\u5e94\u7528\u4e8e\u5927\u578b\u78c1\u76d8\u4e2d\uff08\u5bf9\u4e8e\u5927\u78c1\u76d8\uff0cFAT\u5c06\u53d8\u5f97\u5f88\u5927\uff09</li> </ul>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_44","title":"\u94fe\u63a5","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_45","title":"\u786c\u94fe\u63a5","text":"<ul> <li>\u76ee\u5f55\u9879\u76f4\u63a5\u6307\u5411\u8981\u5171\u4eab\u6587\u4ef6\u7684i\u7ed3\u70b9</li> </ul>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_46","title":"\u8f6f\u8fde\u63a5","text":"<ul> <li> <p>Create\u4e00\u4e2a\u94fe\u63a5\u6587\u4ef6\uff1a\u6587\u4ef6\u6570\u636e\u5757\u4e2d\u5b58\u653e\u7684\u5185\u5bb9\u662f\u53e6\u4e00\u6587\u4ef6\u7684\u8def\u5f84\u540d\u7684\u6307\u5411</p> </li> <li> <p>\u53ef\u4ee5\u8de8\u64cd\u4f5c\u7cfb\u7edf\u3001\u6587\u4ef6\u7cfb\u7edf</p> </li> </ul>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_47","title":"\u4e24\u79cd\u94fe\u63a5\u65b9\u5f0f\u5bf9\u6bd4","text":"<ul> <li>\u786c\u94fe\u63a5\u5bf9\u6bd4\u8f6f\u94fe\u63a5\u7684\u4f18\u70b9\uff1a\u8282\u7701\u8d44\u6e90\uff0c\u4e0d\u9700\u8981\u989d\u5916\u7684\u78c1\u76d8\u8bbf\u95ee\uff1b\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u7b26\u53f7\u94fe\u63a5\u5219\u9700\u5148\u8bfb\u53d6\u94fe\u63a5\u6587\u4ef6\u5185\u5bb9\uff0c\u518d\u6839\u636e\u5176\u5185\u5bb9\u4e00\u6b65\u6b65\u627e\u5230\u5171\u4eab\u6587\u4ef6\u6240\u5728\u4f4d\u7f6e\u3002</li> <li>\u8f6f\u94fe\u63a5\u5bf9\u6bd4\u786c\u94fe\u63a5\u7684\u4f18\u70b9\uff1a\u7b26\u53f7\u94fe\u63a5\u53ef\u4ee5\u8de8\u64cd\u4f5c\u7cfb\u7edf\uff0c\u751a\u81f3\u53ef\u4ee5\u901a\u8fc7Internet\u3002\u786c\u94fe\u63a5\u4ec5\u9650\u4e8e\u6307\u5411\u5176\u81ea\u5df1\u5206\u533a\u4e2d\u7684\u6587\u4ef6\u3002</li> </ul>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_48","title":"\u6587\u4ef6\u7cfb\u7edf","text":"<p>\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u8d1f\u8d23\u7ba1\u7406\u548c\u5b58\u50a8\u6587\u4ef6\u4fe1\u606f\u7684\u8f6f\u4ef6\u673a\u6784\u79f0\u4e3a\u6587\u4ef6\u7ba1\u7406\u7cfb\u7edf\uff0c\u7b80\u79f0\u6587\u4ef6\u7cfb\u7edf\u3002\u6587\u4ef6\u7cfb\u7edf\u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff1a\u6587\u4ef6\u7cfb\u7edf\u7684\u63a5\u53e3\uff0c\u5bf9\u5bf9\u8c61\u64cd\u7eb5\u548c\u7ba1\u7406\u7684\u8f6f\u4ef6\u96c6\u5408\uff0c\u5bf9\u8c61\u53ca\u5c5e\u6027\u3002</p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_49","title":"\u65e5\u5fd7\u7ed3\u6784\u6587\u4ef6\u7cfb\u7edf","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_50","title":"\u65e5\u5fd7\u6587\u4ef6\u7cfb\u7edf","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_51","title":"\u78c1\u76d8\u7a7a\u95f4\u7ba1\u7406","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_52","title":"\u5757\u5927\u5c0f","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_53","title":"\u7a7a\u95f2\u5757\u7ba1\u7406","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_54","title":"\u7a7a\u95f2\u5757\u8868","text":"<p>\u7528\u4e00\u5f20\u8868\u8bb0\u5f55\u78c1\u76d8\u4e2d\u6240\u6709\u7684\u7a7a\u95f2\u5757\uff0c\u8fd9\u5f20\u8868\u5927\u90e8\u5206\u5b58\u50a8\u5728\u78c1\u76d8\u4e2d\uff0c\u5728\u5185\u5b58\u4e2d\u4fdd\u7559\u8868\u7684\u4e00\u4e2a\u5757\u5927\u5c0f\uff08\u4e66\u4e0a\uff1a\u6307\u9488\u5757\uff09\u7528\u4e8e\u68c0\u7d22\u3002</p> <p>\u8868\u7684\u6bcf\u4e00\u9879\u5305\u62ec\u7a7a\u95f2\u5757\u7684\u8d77\u59cb\u5730\u5740\u548c\u5757\u6570\uff08\u8fd9\u6837\u65b9\u4fbf\u8868\u793a\u8fde\u7eed\u7a7a\u95f2\u5757\uff09</p> <p></p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_55","title":"\u4f4d\u56fe","text":"<p>\u76f8\u6bd4\u7a7a\u95f2\u8868\u5360\u7528\u66f4\u5c11\u7684\u5185\u5b58</p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_56","title":"\u78c1\u76d8\u914d\u989d","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_57","title":"\u6587\u4ef6\u7cfb\u7edf\u5907\u4efd","text":"<ul> <li>\u7269\u7406\u8f6c\u50a8</li> </ul> <ul> <li>\u903b\u8f91\u8f6c\u50a8</li> </ul>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_58","title":"\u6587\u4ef6\u7cfb\u7edf\u7684\u6027\u80fd","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#4-io","title":"\u7b2c4\u7ae0   IO","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#io","title":"I/O\u7684\u7ba1\u7406\u7684\u76ee\u6807\u548c\u4efb\u52a1","text":"<ul> <li>\u6309\u7167\u7528\u6237\u7684\u8bf7\u6c42\uff0c\u63a7\u5236\u8bbe\u5907\u7684\u5404\u79cd\u64cd\u4f5c\uff0c\u5b8c\u6210I/O\u8bbe\u5907\u4e0e\u5185\u5b58\u4e4b\u95f4\u7684\u6570\u636e\u4ea4\u6362\uff0c\u6700\u7ec8\u5b8c\u6210\u7528\u6237\u7684I/O\u8bf7\u6c42\u3002</li> <li>\u8bbe\u5907\u5206\u914d\u4e0e\u56de\u6536 <ul> <li>\u8bb0\u5f55\u8bbe\u5907\u7684\u72b6\u6001  </li> <li>\u6839\u636e\u7528\u6237\u7684\u8bf7\u6c42\u548c\u8bbe\u5907\u7684\u7c7b\u578b\uff0c\u91c7\u7528\u4e00\u5b9a\u7684\u5206\u914d\u7b97\u6cd5\uff0c\u9009\u62e9\u4e00\u6761\u6570\u636e\u901a\u8def  </li> </ul> </li> <li>\u6267\u884c\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\uff0c\u5b9e\u73b0\u771f\u6b63\u7684I/O\u64cd\u4f5c  </li> <li>\u8bbe\u5907\u4e2d\u65ad\u5904\u7406\uff1a\u5904\u7406\u5916\u90e8\u8bbe\u5907\u7684\u4e2d\u65ad  </li> <li> <p>\u7f13\u51b2\u533a\u7ba1\u7406\uff1a\u7ba1\u7406I/O\u7f13\u51b2\u533a  </p> </li> <li> <p>\u5efa\u7acb\u65b9\u4fbf\u3001\u7edf\u4e00\u7684\u72ec\u7acb\u4e8e\u8bbe\u5907\u7684\u63a5\u53e3  </p> </li> <li>\u65b9\u4fbf\u6027\uff1a\u5411\u7528\u6237\u63d0\u4f9b\u4f7f\u7528\u5916\u90e8\u8bbe\u5907\u7684\u65b9\u4fbf\u63a5\u53e3\uff0c\u4f7f\u7528\u6237\u7f16\u7a0b\u65f6\u4e0d\u8003\u8651\u8bbe\u5907\u7684\u590d\u6742\u7269\u7406\u7279\u6027 </li> <li>\u7edf\u4e00\u6027\uff1a\u5bf9\u4e0d\u540c\u7684\u8bbe\u5907\u91c7\u53d6\u7edf\u4e00\u7684\u64cd\u4f5c\u65b9\u5f0f\uff0c\u5373\u5728\u7528\u6237\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7684\u662f\u903b\u8f91\u8bbe\u5907\uff08\u5c4f\u853d\u786c\u4ef6\u7ec6\u8282  \uff09</li> <li>\u5145\u5206\u5229\u7528\u5404\u79cd\u6280\u672f\uff08\u901a\u9053\uff0c\u4e2d\u65ad\uff0c\u7f13\u51b2\uff0c\u5f02\u6b65I/O\u7b49\uff09\u63d0\u9ad8CPU\u4e0e\u8bbe\u5907\u3001\u8bbe\u5907\u4e0e\u8bbe\u5907\u4e4b\u95f4\u7684\u5e76\u884c\u5de5\u4f5c\u80fd\u529b\uff0c\u5145\u5206\u5229\u7528\u8d44\u6e90\uff0c\u63d0\u9ad8\u8d44\u6e90\u5229\u7528\u7387</li> <li>\u5e76\u884c\u6027</li> <li>\u5747\u8861\u6027\uff08\u4f7f\u8bbe\u5907\u5145\u5206\u5fd9\u788c\uff09</li> <li>\u4fdd\u62a4\u6570\u636e</li> <li>\u8bbe\u5907\u4f20\u9001\u6216\u7ba1\u7406\u7684\u6570\u636e\u5e94\u8be5\u662f\u5b89\u5168\u7684\u3001\u4e0d\u88ab\u7834\u574f\u7684\u3001\u4fdd\u5bc6\u7684  </li> </ul> <p></p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_59","title":"\u78c1\u76d8","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_60","title":"\u78c1\u76d8\u7ed3\u6784","text":"<ul> <li> <p>\u4e00\u4e2a255GB\u5927\u5c0f\u7684\u78c1\u76d8\u670965535\u4e2a\u67f1\u9762\uff0c\u6bcf\u4e2a\u67f1\u9762255\u4e2a\u6247\u533a\u3002\u6bcf\u4e2a\u6247\u533a512\u5b57\u8282\u3002\u8fd9\u4e2a\u78c1\u76d8\u6709\u591a\u5c11\u76d8\u7247\u548c\u78c1\u5934\uff1f\u5047\u8bbe\u5e73\u5747\u5bfb\u9053\u65f6\u95f4\u4e3a11ms,\u5e73\u5747\u65cb\u8f6c\u5ef6\u8fdf\u4e3a7ms,\u8bfb\u53d6\u901f\u5ea6100MB/s,\u8ba1\u7b97\u4ece\u4e00\u4e2a\u6247\u533a\u8bfb\u53d6400KB\u9700\u8981\u7684\u5e73\u5747\u65f6\u95f4\u3002</p> </li> <li> <p>\u89e3\uff1a\\(\u78c1\u5934\u6570=  255 GB /\uff0865536 * 255 * 512\uff09= 16\\)</p> </li> </ul> <p>\\(\u78c1\u5934\u6570 = \u76d8\u9762\u6570 = \u76d8\u7247\u6570*2\\Longrightarrow\u76d8\u7247\u6570 = 8\\)</p> <p>\u8bfb\u53d6\u64cd\u4f5c\u5b8c\u6210\u7684\u65f6\u95f4 = \u5bfb\u9053\u65f6\u95f4+\u65cb\u8f6c\u5ef6\u8fdf+\u4f20\u8f93\u65f6\u95f4\uff0c\u5bfb\u9053\u65f6\u95f4\u4e3a11ms\uff0c\u65cb\u8f6c\u5ef6\u8fdf\u4e3a7ms\uff0c\u4f20\u8f93\u65f6\u95f4\u4e3a4ms</p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_61","title":"\u78c1\u76d8\u4f4e\u7ea7\u683c\u5f0f\u5316","text":"<ul> <li>\u67f1\u9762\u659c\u8fdb\uff1a\u659c\u8fdb\u8ddd\u79bb\u5e94\u5f53\u4e3a\u78c1\u76d8\u81c2\u5bfb\u76f8\u90bb\u9053\u65f6\u95f4*\u78c1\u76d8\u901f\u5ea6\uff1b\u4fdd\u8bc1\u4e86\u5bfb\u9053\u64cd\u4f5c\u521a\u597d\u53ef\u4ee5\u5230\u4e0b\u4e00\u78c1\u90530\u53f7\u6247\u533a</li> <li>\u4ea4\u9519\uff1a\u65cb\u8f6c\u901f\u5ea6\u8f83\u5feb\uff0c\u8bfb\u53d6\u901f\u5ea6\u8f83\u6162\uff1b\u56e0\u6b64\u5c06\u903b\u8f91\u4e0a\u8fde\u7eed\u7684\u4fe1\u606f\u5728\u7269\u7406\u4e0a\u4ea4\u9519\u5b58\u50a8\uff0c\u4ece\u800c\u7ed9\u63a7\u5236\u5668\u4ee5\u5598\u606f\u7a7a\u95f4\u4e00\u8fb9\u5c06\u7f13\u51b2\u533a\u590d\u5236\u5230\u4e3b\u5b58</li> <li>\u4f4e\u7ea7\u683c\u5f0f\u5316\uff1a[\u524d\u5bfc\u7801 | \u6570\u636e | ECC]</li> </ul>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_62","title":"\u78c1\u76d8\u81c2\u8c03\u5ea6","text":"<ul> <li>\u7535\u68af\u7b97\u6cd5\uff1a\u5bf9\u4e8e\u4efb\u610f\u4e00\u7ec4\u8bf7\u6c42\uff0c\u78c1\u76d8\u81c2\u79fb\u52a8\u6b21\u6570\u4e0a\u754c\u662f\u67f1\u9762\u6570\u7684\u4e24\u500d</li> </ul>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_63","title":"\u9519\u8bef\u5904\u7406","text":"<ul> <li>\u574f\u5757\u7684\u5904\u7406\uff1a\u9a71\u52a8\u5668\u542f\u7528\u5907\u7528\u6247\u533a\uff1a\u628a\u539f\u672c\u574f\u5757\u6620\u5c04\u5230\u5907\u7528\u6247\u533a\uff0cor \u79fb\u52a8\u6240\u6709\u6247\u533a\u4ee5\u56de\u907f\u574f\u6247\u533a\uff08\u6574\u4e2a\u78c1\u9053\u4ecd\u53ef\u4ee5\u5728\u65cb\u8f6c\u4e00\u5468\u4e2d\u8bfb\u51fa\uff09\uff1b</li> </ul> <p>\u6216\u8005\u64cd\u4f5c\u7cfb\u7edf\u5904\u7406\uff1a\u64cd\u4f5c\u7cfb\u7edf\u83b7\u5f97\u4e00\u4e2a\u574f\u6247\u533a\u5217\u8868\uff0c\u64cd\u4f5c\u7cfb\u7edf\u786e\u4fdd\u4e0d\u4f7f\u7528\u8fd9\u4e9b\u5757\u5373\u53ef</p> <ul> <li>\u673a\u68b0\u6545\u969c\u5f15\u8d77\u7684\u5bfb\u9053\u9519\u8bef\uff1a\u673a\u68b0\u81c2\u91cd\u6821\u51c6</li> </ul>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#raid","title":"RAID","text":"<ul> <li>RAID0\uff0c\u7a81\u51fa\u5e76\u884c\u8bfb\u5199\u80fd\u529b</li> </ul> <ul> <li>RAID1 \u7a81\u51fa\u5bb9\u9519\u6027\uff0c\u4e5f\u53ef\u5e76\u884c\u8bfb\uff082\u500d\uff09</li> </ul> <ul> <li>RAID2 \u9762\u5411\u5b57\u8282\uff0c\u91c7\u7528\u6c49\u660e\u7801\u7ea0\u9519</li> </ul> <ul> <li>RAID3 \u5c06\u6c49\u660e\u7801\u53d8\u4e3a\u5947\u5076\u6821\u9a8c\uff0c\u4ecd\u7136\u53ef\u4ee5\u7ea0\u9519\uff0c\u4e14\u5229\u7528\u7387\u66f4\u9ad8</li> <li>RAID4 \u4e0e3\u7c7b\u4f3c\uff0c\u4f46\u662f\u9762\u5411\u6761\u5e26\u3002RAID3\u548cRAID4\u7684\u7f3a\u70b9\u5728\u4e8e\u8d1f\u8d23\u5947\u5076\u6821\u9a8c\u7684\u9a71\u52a8\u5668\u8d1f\u8f7d\u5f88\u5927\uff0c\u5373\u4f7f\u5176\u5b83\u9a71\u52a8\u5668\u4e2d\u7684\u4e00\u4e2a\u505a\u4e86\u5f88\u5c0f\u7684\u6539\u52a8\uff0c\u8d1f\u8d23\u6821\u9a8c\u5757\u7684\u9a71\u52a8\u5668\u4e5f\u8981\u91cd\u65b0\u8ba1\u7b97\uff0c\u5199\u5165\u3002</li> <li>RAID5 \u6ca1\u6709\u8ba9\u4e00\u4e2a\u9a71\u52a8\u5668\u4e13\u95e8\u8d1f\u8d23\u6821\u9a8c</li> </ul> <ul> <li>RAID6 \u6bd4RAID5\u591a\u4f7f\u7528\u4e00\u4e2a\u6821\u9a8c\u5757\u3002\u5199\u4ee3\u4ef7\u66f4\u9ad8\uff0c\u4f46\u662f\u7ea0\u9519\u80fd\u529b\u66f4\u5f3a</li> </ul>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_64","title":"\u786c\u4ef6","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_65","title":"\u4e2d\u65ad","text":"<ul> <li>\u8f6e\u8be2\uff1aCPU\u53ea\u80fd\u987a\u5e8f\u6267\u884c\u4efb\u52a1\uff0c\u5fc5\u987b\u7b49\u5f85\u7f13\u6162\u7684IO\u64cd\u4f5c\uff0c\u65e0\u6cd5\u591a\u9053\u7a0b\u5e8f\u5e76\u884c</li> <li>\u4e2d\u65ad\uff1a\u63d0\u9ad8\u4e86CPU\u5229\u7528\u7387\uff0c\u4f46\u662f\u5728\u591a\u7ea7\u6d41\u6c34\u7ebf\u7684CPU\u4e2d\uff0c\u4e3a\u7ef4\u6301\u7cbe\u786e\u4e2d\u65ad\u8981\u5f88\u5927\u5f00\u9500\uff08\u4e0b\u56fea\u4f4d\u7cbe\u786e\u4e2d\u65ad\uff0cb\u4e3a\u4e0d\u7cbe\u786e\uff09</li> </ul> <ul> <li>DMA\uff08Data Memory Access\uff09\uff1a</li> </ul> <p>CPU\u5bf9DMA\u7f16\u7a0b\u3002DMA\u5b8c\u6210\u4efb\u52a1\u540e\u901a\u8fc7\u4e2d\u65ad\u901a\u77e5CPU</p> <p></p> <p>DMA\u4e24\u79cd\u4f7f\u7528\u603b\u7ebf\u7684\u65b9\u5f0f\uff1a</p> <p></p> <p></p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_66","title":"\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f","text":"","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_67","title":"\u9a71\u52a8\u7a0b\u5e8f\u529f\u80fd","text":"<ul> <li>\u63a5\u6536\u6765\u81ea\u4e0e\u8bbe\u5907\u65e0\u5173\u7684\u8f6f\u4ef6\u6240\u53d1\u51faI/O\u8bf7\u6c42\uff0c\u5e76\u6267\u884c\uff08\u4e0a\u5c42\u5bf9\u4e0b\u5c42\u8c03\u7528\uff09</li> <li>\u63a5\u6536\u8bbe\u5907\u7684\u8bf7\u6c42\uff08\u6765\u81ea\u4e2d\u65ad\uff09\uff0c\u5e76\u5904\u7406\uff08\u4e0b\u5c42\u901a\u77e5\u4e0a\u5c42\uff09</li> <li>\u9a71\u52a8\u7a0b\u5e8f\u5fc5\u987b\u5bf9\u8bbe\u5907\u8fdb\u884c\u521d\u59cb\u5316  </li> <li>\u5bf9\u7535\u6e90\u9700\u6c42\u548c\u65e5\u5fd7\u4e8b\u4ef6\u8fdb\u884c\u7ba1\u7406  </li> <li>\u9a71\u52a8\u7a0b\u5e8f\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u6709\u53ef\u80fd\u81ea\u8eab\u4f1a\u88ab\u518d\u6b21\u8c03\u7528\uff1a\u56e0\u6b64\u5fc5\u987b\u53ef\u91cd\u5165</li> </ul> <p>\u4e00\u4e2a\u5178\u578b\u7ed3\u6784\uff1a</p> <p></p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#_68","title":"\u5b8f\u5185\u6838\u4e0e\u5fae\u5185\u6838\u4e2d\u7684\u9a71\u52a8\u7a0b\u5e8f","text":"<ul> <li>\u5b8f\u5185\u6838\u4e2d\uff1a</li> <li>\u6700\u65e9\u671fUNIX\uff1a\u9a71\u52a8\u7a0b\u5e8f\u5728\u5185\u6838\u4e2d\uff0c\u8fd9\u6837\u6548\u7387\u66f4\u9ad8\uff0c\u4f46\u662f\u66f4\u6df7\u4e71\uff0c\u4e14\u6bcf\u52a0\u5165\u4e00\u4e2a\u8bbe\u5907\u90fd\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\u5185\u6838</li> <li>\u9a71\u52a8\u7a0b\u5e8f\u5355\u72ec\u7f16\u8bd1\uff1a\u9700\u8981\u7684\u65f6\u5019\u5185\u6838\u52a8\u6001\u88c5\u5165\uff0c\u9700\u8981\u5185\u6838\u4e2d\u6709\u4e00\u4e2a\u7a0b\u5e8f\u4e13\u95e8\u7ba1\u7406\u9a71\u52a8\u7a0b\u5e8f\uff1b\u4f46\u6709\u4e9b\u7279\u5b9a\u7684\u9a71\u52a8\u7a0b\u5e8f\u8fd8\u662f\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\u5185\u6838\u3002</li> <li>\u5fae\u5185\u6838\u4e2d\uff1a\u9a71\u52a8\u7a0b\u5e8f\u8fd0\u884c\u5728\u7528\u6237\u7a7a\u95f4</li> </ul>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#io_1","title":"\u4e0e\u8bbe\u5907\u65e0\u5173\u7684I/O\u8f6f\u4ef6","text":"<p>\u4e0e\u8bbe\u5907\u65e0\u5173\u7684\u8f6f\u4ef6\u7684\u57fa\u672c\u529f\u80fd\u662f\u6267\u884c\u5bf9\u6240\u6709\u8bbe\u5907\u516c\u5171\u7684I/O\u529f\u80fd\uff0c\u5e76\u4e14\u5411\u7528\u6237\u5c42\u8f6f\u4ef6\u63d0\u4f9b\u4e00\u4e2a\u7edf\u4e00\u7684\u63a5\u53e3\uff0c\u5982\u7cfb\u7edf\u8c03\u7528<code>Read</code>\uff0c<code>Write</code>\u7b49\u3002</p> <p></p>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#io_2","title":"\u7528\u6237\u7a7a\u95f4IO\u8f6f\u4ef6","text":"<ul> <li>\u5e93\u51fd\u6570\u7b49\u7ec4\u6210\uff1a\u5982C\u5e93\u4e2d\u7684<code>read</code>\uff0c<code>write</code>\u7b49\uff08\u4e0e\u8bbe\u5907\u65e0\u5173IO\u8f6f\u4ef6\u4e2d\u7684read\uff0cwrite\u7cfb\u7edf\u8c03\u7528\u533a\u5206\uff09</li> <li>\u5047\u8131\u673a\u7cfb\u7edfspooling\uff08Simultaneous Peripheral Operation On-Line\uff09\uff1a</li> </ul>","tags":["OS"]},{"location":"courses/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html#io_3","title":"IO\u63a7\u5236\u5668","text":"","tags":["OS"]},{"location":"courses/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.html","title":"\u7f16\u8bd1\u539f\u7406","text":"<ul> <li> <p>\u672c\u7bc7\u5185\u5bb9\u53c2\u8003hit mooc \u548c Stanford CS143 Compilers</p> </li> <li> <p>\u5b9e\u8df5\u5185\u5bb9\u4f7f\u7528LLVM \u5b98\u65b9\u6587\u6863\u6559\u7a0b \u548c PKU \u7f16\u8bd1\u5b9e\u8df5</p> </li> </ul>"},{"location":"courses/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.html#1","title":"1. \u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\u53ca\u5176\u6587\u6cd5","text":"<p>\ud83d\udca1\u672c\u7ae0\u5173\u6ce8\u5728\u8ba1\u7b97\u673a\u4e2d\u5982\u4f55\u8868\u793a\u8bed\u8a00\u53ca\u6587\u6cd5</p>"},{"location":"courses/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.html#11","title":"1.1. \u57fa\u672c\u6982\u5ff5","text":"<ol> <li> <p>\u5b57\u6bcd\u8868(alphabet) \\(\\Sigma\\) \u662f\u4e00\u4e2a\u6709\u7a77\u7b26\u53f7\u96c6\u5408\u3002\u4f8b\u5982:</p> <ul> <li>\u4e8c\u8fdb\u5236\u5b57\u6bcd\u8868: \\(\\{0, 1\\}\\)</li> <li>Unicode \u5b57\u7b26\u96c6</li> </ul> </li> <li> <p>\u5b57\u6bcd\u8868\u4e0a\u7684\u8fd0\u7b97</p> <ul> <li>\u4e58\u79ef: \\(\\Sigma_1 \\Sigma_2 = \\{ab | a \\in \\Sigma_1 , b \\in \\Sigma_2\\}\\)</li> <li>\u6b21\u5e42: \\(\\Sigma^0 = \\epsilon\\) \u5373\u7a7a\u4e32</li> <li>\u6b63\u95ed\u5305(positive closure): \\(\\Sigma^+ = \\Sigma \\bigcup \\Sigma^2 \\bigcup \\Sigma^3 \\cdots\\) \u5373\u5b57\u6bcd\u8868\u7684\u6b63\u95ed\u5305\uff1a\u957f\u5ea6\u6b63\u6570\u7684\u7b26\u53f7\u4e32\u6784\u6210\u7684\u96c6\u5408</li> <li>\u514b\u6797\u95ed\u5305(Kleene closure): \\(\\Sigma^* = \\Sigma^+ \\bigcup \\Sigma^0\\) \u5373\u5b57\u6bcd\u8868\u7684\u514b\u6797\u95ed\u5305\uff1a\u4efb\u610f\u7b26\u53f7\u4e32(\u53ef\u4e3a\u7a7a\u4e32)\u6784\u6210\u7684\u96c6\u5408</li> </ul> </li> <li>\u4e32(String)<ul> <li>\u8bbe \\(\\Sigma\\) \u662f\u4e00\u4e2a\u5b57\u6bcd\u8868\uff0c \\(\\forall x\\in \\Sigma^*\\), \\(x\\) \u79f0\u4e3a\u662f \\(\\Sigma\\) \u4e0a\u7684\u4e00\u4e2a \u4e32</li> <li>\u4e32\\(s\\)\u7684\u957f\u5ea6\\(|s|\\)\u6307\\(s\\)\u7b26\u53f7\u7684\u4e2a\u6570</li> <li>\u7a7a\u4e32\u662f\u957f\u5ea6\u4e3a0\u7684\u4e32\uff0c\u7528\\(\\epsilon\\)\u8868\u793a</li> </ul> </li> <li>\u4e32\u4e0a\u7684\u8fd0\u7b97<ul> <li>\u8fde\u63a5(concatenation): \u4f8b\uff0c\u5982\u679c x = dog \u4e14 y = house \uff0c\u90a3\u4e48 xy = doghouse</li> <li>\u5e42: \\(s^1 = s^0s = \\epsilon s = s,~s^2 = ss,~s^3 = sss\\)</li> </ul> </li> </ol>"},{"location":"courses/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.html#12","title":"1.2. \u6587\u6cd5\u7684\u5b9a\u4e49","text":"<p>\u6587\u6cd5\u7684\u5f62\u5f0f\u5316\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <p>\\(G = (V_T, V_N, P, S)\\)</p> <ul> <li> <p>\\(V_T\\): \u7ec8\u7ed3\u7b26\u96c6\u5408(terminal symbol) \u662f\u6587\u6cd5\u6240\u5b9a\u4e49\u7684\u8bed\u8a00\u7684\u57fa\u672c\u7b26\u53f7\uff0c\u6709\u65f6\u79f0\u4e3a token\u3002</p> <p>\u4f8b\u5982 \\(V_T = \\{apple, boy, eat, little\\}\\)</p> </li> <li> <p>\\(V_N\\): \u975e\u7ec8\u7ed3\u7b26\u96c6\u5408(nonterminal) \u662f\u7528\u6765\u8868\u793a\u8bed\u6cd5\u6210\u5206\u7684\u7b26\u53f7\uff0c\u6709\u65f6\u4e5f\u6210\u4e3a\u8bed\u6cd5\u53d8\u91cf</p> <p>\u4f8b\u5982 \\(V_N = \\{&lt;\u53e5\u5b50&gt;, &lt;\u540d\u8bcd\u77ed\u8bed&gt;, &lt;\u52a8\u8bcd\u77ed\u8bed&gt;, &lt;\u540d\u8bcd&gt;, \\cdots\\}\\)</p> </li> <li> <p>\\(P\\): \u4ea7\u751f\u5f0f\u96c6\u5408(production) \u63cf\u8ff0\u4e86\u5c06\u7ec8\u7ed3\u7b26\u548c\u975e\u7ec8\u7ed3\u7b26\u7ec4\u5408\u6210\u4e32\u7684\u65b9\u6cd5\u3002</p> <p>\u4ea7\u751f\u5f0f\u7684\u4e00\u822c\u5f62\u5f0f\uff1a\\(\\alpha \\rightarrow \\beta\\)</p> <p>\u8bfb\u4f5c\\(\\alpha\\)\u5b9a\u4e49\u4e3a\\(\\beta\\)\u3002\u5176\u4e2d\\(\\alpha\\in (V_T\\bigcup V_N)^+\\) \u4e14 \u03b1 \u4e2d\u81f3\u5c11\u5305\u542b \\(V_N\\) \u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\uff1a\u79f0\u4e3a\u4ea7\u751f\u5f0f\u7684\u5934\u90e8\u6216\u5de6\u90e8\uff1b\u800c\u5176\u4e2d\\(\\beta\\in (V_T\\bigcup V_N)^*\\)\uff1a\u79f0\u4e3a\u4ea7\u751f\u5f0f\u7684\u4f53\u6216\u53f3\u90e8</p> </li> <li> <p>\\(S\\): \u5f00\u59cb\u7b26\u53f7\uff0c\\(S\\in V_N\\)\uff0c\u8868\u793a\u7684\u662f\u8be5\u6587\u6cd5\u4e2d\u6700\u5927\u7684\u8bed\u6cd5\u6210\u5206</p> <p>\u4f8b\u5982\uff1a \\(S\\in &lt;\u53e5\u5b50&gt;\\)</p> </li> </ul> <p>\u4e0b\u56fe\u662f\u4e00\u4e2a\u7b80\u5316\u7248\u7684\u7b97\u672f\u8868\u8fbe\u5f0f\u6587\u6cd5\uff0c\u8be5\u6587\u6cd5\u4e2d\u53ea\u6709\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26\\(E\\)\u4ee3\u8868 \u8868\u8fbe\u5f0fexpression\uff1b\u6709\u5de6\u62ec\u53f7\uff0c\u53f3\u62ec\u53f7\uff0c\u52a0\u53f7\u7b49\u7ec8\u7ed3\u7b26\uff1a</p> <p></p> <p>\u7b26\u53f7\u7ea6\u5b9a\uff1a</p> <p></p>"},{"location":"courses/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.html#13","title":"1.3. \u8bed\u8a00\u7684\u5b9a\u4e49","text":"<p>\u5728\u6709\u4e86\u6587\u6cd5(\u8bed\u8a00\u89c4\u5219)\u4e4b\u540e\uff0c\u5982\u4f55\u5224\u65ad\u67d0\u4e00\u8bcd\u4e32\u662f\u5426\u662f\u8be5\u8bed\u8a00\u7684\u53e5\u5b50\uff1f</p> <ul> <li>\u53e5\u5b50\u7684 \u63a8\u5bfc(derivations)(\u5373\u7528\u4ea7\u751f\u5f0f\u7684\u53f3\u8fb9\u66ff\u6362\u4ea7\u751f\u5f0f\u7684\u5de6\u8fb9) \u4ece \u751f\u6210 \u8bed\u8a00\u7684\u89d2\u5ea6 \u6765\u5224\u65ad</li> <li>\u53e5\u5b50\u7684 \u5f52\u7ea6(Reductions)(\u5373\u7528\u4ea7\u751f\u5f0f\u7684\u5de6\u8fb9\u66ff\u6362\u4ea7\u751f\u5f0f\u7684\u53f3\u8fb9) \u4ece \u8bc6\u522b \u8bed\u8a00\u7684\u89d2\u5ea6 \u6765\u5224\u65ad</li> </ul> <p></p> <ul> <li>\u5982\u679c \\(S \\Rightarrow^* \\alpha\\), \\(\\alpha\\in (V_T \\bigcup V_N)^*\\) \u5219\u79f0\\(\\alpha\\)\u662f\u6587\u6cd5\\(G\\)\u7684\u4e00\u4e2a\u53e5\u578b(sentential form)\u3002\u53e5\u578b\u4e2d\u53ef\u4ee5\u5305\u542b\u7ec8\u7ed3\u7b26\u548c\u975e\u7ec8\u7ed3\u7b26</li> <li>\u5982\u679c\u4e00\u4e2a\u53e5\u578b\u4e2d\u6ca1\u6709\u975e\u7ec8\u7ed3\u7b26\uff0c\u5219\u5176\u662f\u4e00\u4e2a\u53e5\u5b50(sentence)</li> <li>\u7531\u6587\u6cd5\\(G\\)\u7684\u5f00\u59cb\u7b26\u53f7\\(S\\)\u63a8\u51fa\u7684\u6240\u6709\u53e5\u5b50\u6784\u6210\u7684\u96c6\u5408\u79f0\u4e3a\u6587\u6cd5G\u751f\u6210\u7684\u8bed\u8a00\uff0c\u8bb0\u4f5c\\(L(G)\\)</li> </ul> <p>Note</p> <p>\\(E \\rightarrow E+E | E*E | (E) | id\\) \u751f\u6210\u7684\u8bed\u8a00\u4e2d\u5305\u542b\u65e0\u7a77\u4e2a\u53e5\u5b50\u3002</p> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u6587\u6cd5\u901a\u8fc7\u9012\u5f52\u7684\u5b9a\u4e49\u89e3\u51b3\u4e86\u65e0\u7a77\u8bed\u8a00\u7684\u6709\u7a77\u8868\u793a\u95ee\u9898\u3002</p> <p>\ud83d\ude80\u4e0b\u9762\u662f\u4e00\u4e2a\u8bed\u8a00\u7684\u4f8b\u5b50\uff1a</p> <p></p>"},{"location":"courses/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.html#14","title":"1.4. \u6587\u6cd5\u7684\u5206\u7c7b","text":"<p>Chomsky \u6587\u6cd5\u5206\u7c7b</p> <ul> <li> <p>0\u578b\u6587\u6cd5(Type 0 Grammar)</p> <ul> <li> <p>\u65e0\u9650\u5236\u6587\u6cd5(Unrestricted Grammar)/\u77ed\u8bed\u7ed3\u6784\u6587\u6cd5(Phrase Structure Grammar, PSG)</p> </li> <li> <p>\\(\\forall \\alpha \\rightarrow \\beta \\in P\\), \\(\\alpha\\)\u4e2d\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26</p> </li> </ul> </li> <li> <p>1\u578b\u6587\u6cd5(Type 1 Grammar)</p> <ul> <li> <p>\u4e0a\u4e0b\u6587\u6709\u5173\u6587\u6cd5(Context Sensitive Grammar, CSG)</p> </li> <li> <p>\\(\\forall \\alpha \\rightarrow \\beta \\in P\\), \\(|\\alpha| \\leq |\\beta|\\)</p> </li> <li> <p>\u4ea7\u751f\u5f0f\u7684\u4e00\u822c\u5f62\u5f0f\uff1a\\(\\alpha_1 A \\alpha_2 \\rightarrow \\alpha_1 \\beta \\alpha_2\\) \u5176\u4e2d \\(\\beta \\neq \\epsilon\\)\uff0c\u56e0\u4e3a\\(\\alpha\\)\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26\uff0c\u56e0\u6b64\u5176\u957f\u5ea6\u81f3\u5c11\u4e3a1\uff0c\\(\\beta\\)\u7684\u957f\u5ea6\u56e0\u6b64\u5927\u4e8e0</p> </li> </ul> </li> <li> <p>2\u578b\u6587\u6cd5(Type 2 Grammar)</p> <ul> <li> <p>\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5(Context-Free Grammar, CFG)</p> </li> <li> <p>\\(\\forall \\alpha \\rightarrow \\beta \\in P\\), \\(\\alpha \\in V_N\\)</p> </li> <li> <p>\u4ea7\u751f\u5f0f\u7684\u4e00\u822c\u5f62\u5f0f\uff1a\\(A \\rightarrow \\beta\\) \u5176\u4e2d \\(A\\) \u9075\u5faa\u524d\u9762\u7684\u5b9a\u4e49\uff0c\u8868\u793a\u975e\u7ec8\u7ed3\u7b26(\u5373\u5c06A\u66ff\u6362\u6210\u03b2\u4e0d\u9700\u8981\u8003\u8651\u4e0a\u4e0b\u6587)</p> </li> </ul> </li> <li> <p>3\u578b\u6587\u6cd5(Type-3 Grammar)</p> <ul> <li> <p>\u6b63\u5219\u6587\u6cd5(Regulatr Grammar, RG)</p> </li> <li> <p>\u53f3\u7ebf\u6027(Right Linear)\u6587\u6cd5: \\(A\\rightarrow wB | w\\)\uff0c \u5176\u4e2d\\(w\\)\u9075\u5faa\u524d\u9762\u7684\u7ea6\u5b9a\u8868\u793a\u7ec8\u7ed3\u7b26\u53f7\u4e32\uff0c\\(B\\)\u8868\u793a\u975e\u7ec8\u7ed3\u7b26</p> </li> <li> <p>\u5de6\u7ebf\u6027(Left Linear)\u6587\u6cd5: \\(A\\rightarrow Bw | w\\)\uff0c \u5176\u4e2d\\(w\\)\u9075\u5faa\u524d\u9762\u7684\u7ea6\u5b9a\u8868\u793a\u7ec8\u7ed3\u7b26\u53f7\u4e32\uff0c\\(B\\)\u8868\u793a\u975e\u7ec8\u7ed3\u7b26</p> </li> <li> <p>\u5de6\u7ebf\u6027\u6587\u6cd5\u548c\u53f3\u7ebf\u6027\u6587\u6cd5\u90fd\u79f0\u4e3a\u6b63\u5219\u6587\u6cd5\u3002\u5373\u5728\u6b63\u5219\u6587\u6cd5\u4e2d\uff0c\u4ea7\u751f\u5f0f\u7684\u53f3\u90e8\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26\uff0c\u800c\u4e14\u7ec8\u7ed3\u7b26\u5fc5\u987b\u5728\u540c\u4e00\u4fa7</p> </li> </ul> <p>\ud83d\ude80\u5173\u4e8e\u6b63\u5219\u8bed\u6cd5\u7684\u4e00\u4e2a\u4f8b\u5b50(\u751f\u6210\u6807\u8bc6\u7b26):</p> <p></p> </li> </ul> <p>\ud83d\udca1\u56db\u79cd\u6587\u6cd5\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a \u6b63\u5219\u6587\u6cd5\u80fd\u8868\u793a\u7684\u6700\u5c11\uff0c\u65e0\u9650\u5236\u6587\u6cd5\u80fd\u8868\u793a\u7684\u6700\u591a\u3002 \u4efb\u4f55\u4e00\u4e2a\u6b63\u5219\u8bed\u8a00\u90fd\u662f\u4e00\u4e2a\u4e0a\u4e0b\u6587\u65e0\u5173\u8bed\u8a00\uff0c\u4f46\u53cd\u8fc7\u6765\u4e0d\u6210\u7acb\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b58\u5728\u4e00\u4e9b\u4e0a\u4e0b\u6587\u65e0\u5173\u8bed\u8a00\u4e0d\u80fd\u7531\u6b63\u5219\u6587\u6cd5\u4ea7\u751f\u3002</p> <p>new bing \u7684\u56de\u7b54\uff1a</p> <ul> <li> <p>0\u578b\u6587\u6cd5\u662f\u6700\u5f3a\u5927\u7684\u4e00\u79cd\u6587\u6cd5\uff0c\u5b83\u6ca1\u6709\u4efb\u4f55\u9650\u5236\uff0c\u53ef\u4ee5\u63cf\u8ff0\u4efb\u4f55\u4e00\u4e2a\u56fe\u7075\u53ef\u8bc6\u522b\u7684\u8bed\u8a00\u30020\u578b\u6587\u6cd5\u5bf9\u5e94\u4e8e\u56fe\u7075\u673a\uff0c\u5b83\u4eec\u5177\u6709\u6700\u9ad8\u7684\u8ba1\u7b97\u80fd\u529b\u3002</p> </li> <li> <p>1\u578b\u6587\u6cd5\u662f\u4e00\u79cd\u4e0a\u4e0b\u6587\u6709\u5173\u7684\u6587\u6cd5\uff0c\u5b83\u8981\u6c42\u4ea7\u751f\u5f0f\u5de6\u8fb9\u7684\u957f\u5ea6\u4e0d\u80fd\u8d85\u8fc7\u53f3\u8fb9\u30021\u578b\u6587\u6cd5\u53ef\u4ee5\u63cf\u8ff0\u4e00\u4e9b\u65e0\u9650\u4e14\u590d\u6742\u7684\u8bed\u8a00\uff0c\u6bd4\u5982\u81ea\u7136\u8bed\u8a00\u30021\u578b\u6587\u6cd5\u5bf9\u5e94\u4e8e\u7ebf\u6027\u6709\u754c\u975e\u786e\u5b9a\u56fe\u7075\u673a\uff0c\u5b83\u4eec\u5177\u6709\u8f83\u9ad8\u7684\u8ba1\u7b97\u80fd\u529b\u3002</p> </li> <li> <p>2\u578b\u6587\u6cd5\u662f\u4e00\u79cd\u4e0a\u4e0b\u6587\u65e0\u5173\u7684\u6587\u6cd5\uff0c\u5b83\u8981\u6c42\u4ea7\u751f\u5f0f\u5de6\u8fb9\u53ea\u80fd\u6709\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26\u30022\u578b\u6587\u6cd5\u53ef\u4ee5\u63cf\u8ff0\u4e00\u4e9b\u7b80\u5355\u4e14\u89c4\u5219\u7684\u8bed\u8a00\uff0c\u6bd4\u5982\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\u30022\u578b\u6587\u6cd5\u5bf9\u5e94\u4e8e\u4e0b\u63a8\u81ea\u52a8\u673a\uff0c\u5b83\u4eec\u5177\u6709\u4e2d\u7b49\u7684\u8ba1\u7b97\u80fd\u529b\u3002</p> </li> <li> <p>3\u578b\u6587\u6cd5\u662f\u4e00\u79cd\u6b63\u5219\u6216\u53f3\u7ebf\u6027\u6216\u5de6\u7ebf\u6027\u7684\u6587\u6cd5\uff0c\u5b83\u8981\u6c42\u4ea7\u751f\u5f0f\u53f3\u8fb9\u53ea\u80fd\u6709\u4e00\u4e2a\u975e\u7ec8\u7ed3\u7b26\uff0c\u5e76\u4e14\u5728\u6700\u53f3\u6216\u6700\u5de6\u4f4d\u7f6e\u30023\u578b\u6587\u6cd5\u53ef\u4ee5\u63cf\u8ff0\u4e00\u4e9b\u6709\u9650\u4e14\u7b80\u5355\u7684\u8bed\u8a00\uff0c\u6bd4\u5982\u6807\u8bc6\u7b26\u6216\u5e38\u6570\u30023\u578b\u6587\u6cd5\u5bf9\u5e94\u4e8e\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\u6216\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u5b83\u4eec\u5177\u6709\u6700\u4f4e\u7684\u8ba1\u7b97\u80fd\u529b\u3002</p> </li> </ul> <p>\u56db\u79cd\u7c7b\u578b\u4e4b\u95f4\u5b58\u5728\u5305\u542b\u5173\u7cfb\uff1a0\u578b&gt;1\u578b&gt;2\u578b&gt;3\u578b\u3002 </p>"},{"location":"courses/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.html#15-cfg","title":"1.5. CFG\u7684\u5206\u6790\u6811","text":"<p>\u4e8c\u4e49\u6027\u6587\u6cd5(Ambiguous Grammar):</p> <p>\u5982\u679c\u4e00\u4e2a\u6587\u6cd5\u53ef\u4ee5\u4e3a\u67d0\u4e2a\u53e5\u5b50\u751f\u6210\u591a\u68f5\u5206\u6790\u6811\uff0c\u5219\u79f0\u8fd9\u4e2a\u6587\u6cd5\u662f\u4e8c\u4e49\u6027\u7684\u3002</p> <p>\ud83d\ude80\u4e0b\u9762\u662f\u4e00\u4e2a\u5b58\u5728\u4e8c\u4e49\u6027\u7684\u6587\u6cd5\uff0c\u4ee5\u53ca\u901a\u8fc7\u6dfb\u52a0\u989d\u5916\u7684\u6d88\u6b67\u89c4\u5219\uff0c\u786e\u5b9a\u552f\u4e00\u63a8\u5bfc\u7684\u4f8b\u5b50\uff1a</p> <p></p> <p>\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\uff0c\u4e0d\u5b58\u5728\u4e00\u4e2a\u7b97\u6cd5\uff0c\u5224\u5b9a\u5b83\u662f\u65e0\u4e8c\u4e49\u6027\u7684\uff1b\u4f46\u80fd\u7ed9\u51fa\u4e00\u7ec4 \u5145\u5206\u6761\u4ef6\uff0c\u6ee1\u8db3\u8fd9\u7ec4\u5145\u5206\u6761\u4ef6\u7684\u6587\u6cd5\u662f\u65e0\u4e8c\u4e49\u6027\u7684\u3002</p>"},{"location":"courses/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.html#2","title":"2. \u8bcd\u6cd5\u5206\u6790","text":""},{"location":"courses/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.html#21","title":"2.1. \u6b63\u5219\u8868\u8fbe\u5f0f\u548c\u6b63\u5219\u5b9a\u4e49","text":"<p>\u7a0b\u5e8f\u8bed\u8a00\u4e2d\u7684\u5927\u591a\u6570\u5355\u8bcd\uff0c\u90fd\u53ef\u4ee5\u7528\u6b63\u5219\u6587\u6cd5\u6765\u63cf\u8ff0\u3002\u6b63\u5219\u8868\u8fbe\u5f0f(Regular Expression, RE)\u662f\u4e00\u79cd\u63cf\u8ff0\u6b63\u5219\u8bed\u8a00\u7684\u66f4\u7d27\u51d1\u7684\u65b9\u6cd5\u3002\u6b63\u5219\u8868\u8fbe\u5f0f\u548c\u6b63\u5219\u6587\u6cd5\u662f\u7b49\u4ef7\u7684\u3002</p> <p>\u6b63\u5219\u8868\u8fbe\u5f0f\u53ef\u4ee5\u7531\u8f83\u5c0f\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u6309\u7167\u7279\u5b9a\u89c4\u5219\u9012\u5f52\u5730\u6784\u5efa\u3002\u6bcf\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0fr\u5b9a\u4e49\uff08\u8868\u793a\uff09\u4e00\u4e2a\u8bed\u8a00\uff0c\u8bb0\u4e3a\\(L(r)\\)\u3002\u8fd9\u4e2a\u8bed\u8a00\u4e5f\u662f\u6839\u636er\u7684\u5b50\u8868\u8fbe\u5f0f\u6240\u8868\u793a\u7684\u8bed\u8a00\u9012\u5f52\u5b9a\u4e49\u7684\u3002\u5176\u6b63\u5f0f\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <ul> <li>\\(\\epsilon\\) \u662f\u4e00\u4e2aRE\uff0c \\(L(\\epsilon) = \\{\\epsilon \\}\\)</li> <li>\u5982\u679c\\(a\\in \\Sigma\\)\uff0c \u5219\\(a\\)\u662f\u4e00\u4e2aRE\uff0c\\(L(a) = \\{a\\}\\)</li> <li> <p>\u5047\u8bbe\\(r\\)\u548c\\(s\\)\u90fd\u662fRE\uff0c\u8868\u793a\u7684\u8bed\u8a00\u5206\u522b\u662f\\(L(r)\\)\u548c\\(L(s)\\)\uff0c \u5219</p> <ul> <li>\\(r|s\\) \u662f\u4e00\u4e2aRE, \\(L(r|s) = L(r)\\bigcup L(s)\\)</li> <li>\\(rs\\) \u662f\u4e00\u4e2aRE, \\(L(rs) = L(r)L(s)\\)</li> <li>\\(r*\\) \u662f\u4e00\u4e2aRE, \\(L(r*) = (L(r))*\\)</li> <li>\\((r)\\) \u662f\u4e00\u4e2aRE, \\(L((r)) = L(r)\\)</li> </ul> <p>\u4e0a\u9762\u63d0\u5230\u7684\u8fd0\u7b97\u4f18\u5148\u7ea7\u4f9d\u6b21\u662f *\u3001 \u8fde\u63a5\u3001 |</p> </li> </ul> <p>\ud83d\ude80\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u4f8b\u5b50</p> <ul> <li> <p>\u5341\u8fdb\u5236\u6574\u6570\u7684RE:</p> <p>\\((1|\\cdots|9)(0|\\cdots|9)^*|0\\)</p> </li> <li> <p>\u516b\u8fdb\u5236\u6574\u6570\u7684RE:</p> <p>\\(0(0|1|2|3|4|5|6|7)(0|1|2|3|4|5|6|7)^*\\)</p> </li> <li> <p>\u5341\u516d\u8fdb\u5236\u6574\u6570\u7684RE</p> <p>\\(0x(0|1|\\cdots|9|a|\\cdots|f|A|\\cdots|F)(0|\\cdots|9|a|\\cdots|f|A|\\cdots|F)^*\\)</p> </li> </ul> <p>\u6b63\u5219\u5b9a\u4e49(RegularDefinition)\u662f\u6307\uff0c\u7ed9\u4e00\u4e9bRE\u547d\u540d\uff0c\u5e76\u5728\u4e4b\u540e\u7684RE\u4e2d\u50cf\u4f7f\u7528\u5b57\u6bcd\u8868\u4e2d\u7684\u7b26\u53f7\u4e00\u6837\u4f7f\u7528\u8fd9\u4e9b\u540d\u5b57\u3002</p> <p>\u6b63\u5219\u5b9a\u4e49\u662f\u5177\u6709\u5982\u4e0b\u5f62\u5f0f\u7684\u5b9a\u4e49\u5e8f\u5217\uff1a\\(d_1 \\rightarrow r_1, d_2 \\rightarrow r_2, \\cdots, d_n \\rightarrow r_n\\) \u3002 </p> <ul> <li>\u5176\u4e2d\u6bcf\u4e2a\\(d_i\\)\u90fd\u662f\u4e00\u4e2a\u65b0\u7b26\u53f7\uff0c\u4e0d\u5728\u5b57\u6bcd\u8868\\(\\Sigma\\)\u4e2d\uff0c\u800c\u4e14\u5404\u4e0d\u76f8\u540c\uff1b</li> <li>\u6bcf\u4e2a\\(r_i\\)\u662f\u5b57\u6bcd\u8868\\(\\Sigma\\bigcup {d_1,\\cdots, d_{i-1}}\\) \u4e0a\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002</li> </ul> <p>\ud83d\ude80C\u8bed\u8a00\u4e2d\u6807\u8bc6\u7b26\u7684\u6b63\u5219\u5b9a\u4e49\u4f8b\u5b50</p> <ul> <li>\\(digit \\rightarrow 0|1|2|\\cdots|9\\)</li> <li>\\(letter\\_ \\rightarrow A|B|\\cdots|Z|a|b|\\cdots|z|\\_\\)</li> <li>\\(id \\rightarrow letter\\_(letter\\_|digit)^*\\)</li> </ul>"},{"location":"courses/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.html#22-fa","title":"2.2. \u6709\u7a77\u81ea\u52a8\u673a(FA)","text":"<p>new bing:</p> <ul> <li> <p>FA\u6a21\u578b\u662f\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\u7684\u7b80\u79f0\uff0c\u5b83\u662f\u4e00\u79cd\u6700\u7b80\u5355\u7684\u8ba1\u7b97\u673a\u6a21\u578b\uff0c\u53ea\u80fd\u8bc6\u522b\u6b63\u5219\u8bed\u8a00\u3002FA\u6a21\u578b\u7531\u4e00\u4e2a\u6709\u9650\u7684\u72b6\u6001\u96c6\u5408\u3001\u4e00\u4e2a\u8f93\u5165\u7b26\u53f7\u96c6\u5408\u3001\u4e00\u4e2a\u521d\u59cb\u72b6\u6001\u3001\u4e00\u4e2a\u7ec8\u6b62\u72b6\u6001\u96c6\u5408\u548c\u4e00\u4e2a\u8f6c\u79fb\u51fd\u6570\u7ec4\u6210\u3002FA\u6a21\u578b\u5728\u6bcf\u4e2a\u65f6\u523b\u53ea\u80fd\u5904\u4e8e\u4e00\u79cd\u72b6\u6001\uff0c\u5e76\u6839\u636e\u8f93\u5165\u7b26\u53f7\u548c\u8f6c\u79fb\u51fd\u6570\u6765\u6539\u53d8\u72b6\u6001\u3002</p> </li> <li> <p>\u56fe\u7075\u673a\u6a21\u578b\u662f\u4e00\u79cd\u6700\u5f3a\u5927\u7684\u8ba1\u7b97\u673a\u6a21\u578b\uff0c\u53ef\u4ee5\u8bc6\u522b\u4efb\u4f55\u53ef\u8ba1\u7b97\u7684\u8bed\u8a00\u3002\u56fe\u7075\u673a\u6a21\u578b\u7531\u4e00\u4e2a\u65e0\u9650\u957f\u7684\u7eb8\u5e26\u3001\u4e00\u4e2a\u8bfb\u5199\u5934\u3001\u4e00\u4e2a\u6709\u9650\u7684\u63a7\u5236\u89c4\u5219\u548c\u4e00\u4e2a\u6709\u9650\u7684\u72b6\u6001\u96c6\u5408\u7ec4\u6210\u3002\u56fe\u7075\u673a\u6a21\u578b\u5728\u6bcf\u4e2a\u65f6\u523b\u53ef\u4ee5\u8bfb\u53d6\u6216\u5199\u5165\u7eb8\u5e26\u4e0a\u7684\u7b26\u53f7\uff0c\u5e76\u6839\u636e\u63a7\u5236\u89c4\u5219\u548c\u5f53\u524d\u72b6\u6001\u6765\u6539\u53d8\u4f4d\u7f6e\u548c\u72b6\u6001\u3002</p> </li> </ul> <p>\u6709\u7a77\u81ea\u52a8\u673a( Finite Automata\uff0cFA )\u7531\u4e24\u4f4d\u795e\u7ecf\u7269\u7406\u5b66\u5bb6MeCuloch\u548cPitts\u4e8e1948\u5e74\u9996\u5148\u63d0\u51fa\uff0c\u662f\u5bf9\u4e00\u7c7b\u5904\u7406\u7cfb\u7edf\u5efa\u7acb\u7684\u6570\u5b66\u6a21\u578b\u3002</p> <p>\u8fd9\u7c7b\u7cfb\u7edf\u5177\u6709\u4e00\u7cfb\u5217\u79bb\u6563\u7684\u8f93\u5165\u8f93\u51fa\u4fe1\u606f\u548c\u6709\u7a77\u6570\u76ee\u7684\u5185\u90e8\u72b6\u6001\uff08\u72b6\u6001\uff1a\u6982\u62ec\u4e86\u5bf9\u8fc7\u53bb\u8f93\u5165\u4fe1\u606f\u5904\u7406\u7684\u72b6\u51b5\uff09\u3002\u7cfb\u7edf\u53ea\u9700\u8981\u6839\u636e\u5f53\u524d\u6240\u5904\u7684\u72b6\u6001\u548c\u5f53\u524d\u9762\u4e34\u7684\u8f93\u5165\u5c31\u53ef\u4ee5\u51b3\u5b9a\u7cfb\u7edf\u7684\u540e\u7ee7\u884c\u4e3a\u3002\u6bcf\u5f53\u7cfb\u7edf\u5904\u7406\u4e86\u5f53\u524d\u7684\u8f93\u5165\u540e\uff0c\u7cfb\u7edf\u7684\u5185\u90e8\u72b6\u6001\u4e5f\u5c06\u53d1\u751f\u6539\u53d8\u3002</p> <ul> <li> <p>FA\u7684\u8868\u793a\uff1a\u8f6c\u6362\u56fe(Transition Graph)</p> <ul> <li> <p>\u7ed3\u70b9\uff1aFA\u7684\u72b6\u6001</p> <ul> <li>\u521d\u59cb\u72b6\u6001\uff08\u5f00\u59cb\u72b6\u6001\uff09\uff1a\u53ea\u6709\u4e00\u4e2a\uff0c\u7531start\u7bad\u5934\u6307\u5411</li> <li>\u7ec8\u6b62\u72b6\u6001\uff08\u63a5\u6536\u72b6\u6001\uff09\uff1a\u53ef\u4ee5\u6709\u591a\u4e2a\uff0c\u7528\u53cc\u5708\u8868\u793a</li> </ul> </li> <li> <p>\u5e26\u6807\u8bb0\u7684\u6709\u5411\u8fb9\uff1a\u5982\u679c\u5bf9\u4e8e\u8f93\u5165a\uff0c\u5b58\u5728\u4e00\u4e2a\u4ece\u72b6\u6001p\u5230\u72b6\u6001q\u7684\u8f6c\u6362\uff0c\u5c31\u5728p\u3001q\u4e4b\u95f4\u753b\u4e00\u6761\u6709\u5411\u8fb9\uff0c\u5e76\u6807\u8bb0\u4e0aa</p> </li> </ul> <p></p> </li> <li> <p>FA\u5b9a\u4e49\uff08\u63a5\u6536\uff09\u7684\u8bed\u8a00</p> <ul> <li>\u7ed9\u5b9a\u8f93\u5165\u4e32x\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u5bf9\u5e94\u4e8e\u4e32x\u7684\u4ece\u521d\u59cb\u72b6\u6001\u5230\u67d0\u4e2a\u7ec8\u6b62\u72b6\u6001\u7684\u8f6c\u6362\u5e8f\u5217\uff0c\u5219\u79f0\u4e32x\u88ab\u8be5FA\u63a5\u6536</li> <li>\u7531\u4e00\u4e2a\u6709\u7a77\u81ea\u52a8\u673a\\(M\\)\u63a5\u6536\u7684\u6240\u6709\u4e32\u6784\u6210\u7684\u96c6\u5408\u79f0\u4e3a\u662f\u8be5FA\u5b9a\u4e49\uff08\u6216\u63a5\u6536\uff09\u7684\u8bed\u8a00\uff0c\u8bb0\u4e3a\\(L(M)\\)</li> </ul> <p>\ud83d\ude80\u4e0b\u9762\u662f\u4e00\u4e2a\u975e\u786e\u5b9a\u578b(\u540e\u9762\u4f1a\u89e3\u91ca)\u6709\u7a77\u81ea\u52a8\u673a\u63a5\u53d7\u8bed\u8a00\u7684\u4f8b\u5b50</p> <p></p> </li> <li> <p>FA\u7684\u6700\u957f\u5b50\u4e32\u5339\u914d\u539f\u5219(LongestString MatchingPrinciple)     </p> <p>\u5982\u679c\u8f93\u5165 &lt;= \u7b26\u53f7\uff0c\u5219\u4ee5\u72b6\u60012\u4e3a\u7ec8\u7ed3\u72b6\u6001\uff0c\u800c\u4e0d\u662f\u4ec5\u5339\u914d\u5230\u72b6\u60011</p> </li> <li> <p>FA\u7684\u5206\u7c7b</p> <ul> <li> <p>\u786e\u5b9a\u7684FA(Deterministic finite automata, DFA)</p> <p>\u27a1 \u5728\u4e00\u4e2a\u786e\u5b9a\u72b6\u6001\u5bf9\u4e8e\u7ed9\u5b9a\u8f93\u5165\uff0c\u8f6c\u79fb\u5230\u4e00\u4e2a\u7279\u5b9a\u72b6\u6001</p> </li> <li> <p>\u975e\u786e\u5b9a\u7684FA(Nondeterministic finite automata, NFA)</p> <p>\u27a1 \u5728\u4e00\u4e2a\u786e\u5b9a\u72b6\u6001\u5bf9\u4e8e\u7ed9\u5b9a\u8f93\u5165\uff0c\u53ef\u80fd\u8f6c\u79fb\u5230\u591a\u4e2a\u72b6\u6001</p> <p>\u5e26\u6709\u548c\u4e0d\u5e26\u6709\u201c\u03b5-\u8fb9\u201d(\u7a7a\u8fb9)\u7684NFA \u4e5f\u662f\u7b49\u4ef7\u7684\uff0c\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362</p> </li> </ul> <p>DFA\u548cNFA\u4e24\u8005\u662f\u7b49\u4ef7\u7684\uff0c\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362</p> </li> </ul> <p>\u6b63\u5219\u6587\u6cd5\u21d4\u6b63\u5219\u8868\u8fbe\u5f0f\u21d4FA \u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u8003\u8651\u5982\u4f55\u5c06\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u8868\u793a\u6210FA\uff0c\u901a\u5e38\u6211\u4eec\u4f1a\u9996\u5148\u5c06\u6b63\u5219\u8868\u8fbe\u5f0f\u8868\u793a\u6210NFA\uff0c\u518d\u5c06NFA\u8f6c\u5316\u6210\u8ba1\u7b97\u673a\u66f4\u5bb9\u6613\u5b9e\u73b0\u7684DFA\u3002\u6700\u7ec8\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u4f7f\u7528DFA\u5bf9\u6e90\u7801\u8fdb\u884c\u8bcd\u6cd5\u89e3\u6790\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u7684\u8fde\u63a5\u8fd0\u7b97\uff0c\u6216\u8fd0\u7b97\uff0c\u514b\u6797\u95ed\u5305\u8fd9\u4e09\u79cd\u8fd0\u7b97\u5728\u6709\u7a77\u81ea\u52a8\u673a\u4e2d\u7684\u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\uff1a</p> <p></p> <p>\ud83d\ude80\u4e00\u4e2a\u4f8b\u5b50 \\((a|b)^*abb\\) \u5bf9\u5e94\u7684NFA\uff1a</p>"},{"location":"courses/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.html#23-nfadfa","title":"2.3. NFA\u5230DFA\u7684\u8f6c\u6362","text":"<p>\u8fd9\u91cc\u4ecb\u7ecd\u5b50\u96c6\u6784\u9020\u6cd5\uff1a</p> <p>\u901a\u5e38\u6211\u4eec\u5148\u5199\u51faNFA\u7684\u8f6c\u6362\u8868\u3002NFA\u4e2d\u4e00\u4e2a\u72b6\u6001\u53ef\u80fd\u5728\u4e00\u4e2a\u8f93\u5165\u4e0b\u8f6c\u79fb\u5230\u591a\u4e2a\u72b6\u6001\uff0c\u76f4\u63a5\u628a\u6240\u6709\u53ef\u80fd\u8f6c\u79fb\u7684\u72b6\u6001\u6784\u9020\u6210DFA\u7684\u4e00\u4e2a\u65b0\u7684\u72b6\u6001\u5373\u53ef\uff0c\u8fd9\u6837\u4e00\u6765\uff0cDFA\u7684\u6bcf\u4e2a\u72b6\u6001\u90fd\u662f\u4e00\u4e2a\u7531NFA\u4e2d\u7684\u72b6\u6001\u6784\u6210\u7684\u96c6\u5408,\u5373NFA\u72b6\u6001\u96c6\u5408\u7684\u4e00\u4e2a\u5b50\u96c6\u3002</p> <p>\ud83d\ude80\u4e00\u4e2a\u4f8b\u5b50\uff1a</p> <p>\u56e0\u4e3a\u4e0a\u56fe\u7684NFA\u4e2d\u542b\u6709\u7a7a\u8fb9\uff0c\u56e0\u6b64\u5bf9\u4e8estart\u72b6\u6001\uff0c\u9047\u5230\u8f93\u51650\u4e4b\u540e\uff0c\u53ef\u4ee5\u8f6c\u79fb\u5230A\u3001B\u3001C\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u72b6\u6001</p>"},{"location":"courses/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.html#3","title":"3. \u8bed\u6cd5\u5206\u6790","text":""},{"location":"courses/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.html#31","title":"3.1. \u81ea\u9876\u5411\u4e0b","text":""},{"location":"courses/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86.html#32","title":"3.2. \u81ea\u5e95\u5411\u4e0a","text":""},{"location":"cpp/CRTP.html","title":"CRTP","text":"<p>C++ CRTP \u662f\u4e00\u4e2a C++ idiom\uff0c\u5b83\u7684\u5168\u79f0\u662f Curiously Recurring Template Pattern\uff08\u5947\u5f02\u9012\u5f52\u6a21\u677f\u6a21\u5f0f\uff09\u3002\u5b83\u7684\u540d\u5b57\u662f\u7531 James Coplien \u5728 1995 \u5e74\u63d0\u51fa\u7684\uff0c\u662f\u65e9\u671f C++ \u6a21\u677f\u4ee3\u7801\u4e2d\u7684\u4e00\u4e2a\u6784\u9020\u3002CRTP \u7684\u7279\u70b9\u662f\u4e00\u4e2a\u7c7b X \u7ee7\u627f\u81ea\u4e00\u4e2a\u4ee5 X \u4e3a\u6a21\u677f\u53c2\u6570\u7684\u7c7b\u6a21\u677f\u3002</p> <ul> <li> <p>CRTP\u7684\u4f18\u70b9\u662f\u53ef\u4ee5\u907f\u514d\u4f7f\u7528\u865a\u62df\u8868\u6765\u5b9e\u73b0\u591a\u6001\uff0c\u4ece\u800c\u63d0\u9ad8\u6027\u80fd\uff1bCRTP\u7684\u7f3a\u70b9\u662f\u4e0d\u80fd\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u5730\u6539\u53d8\u63a5\u53e3\u7684\u5b9e\u73b0</p> </li> <li> <p>virtual\u52a8\u6001\u6d3e\u53d1\u7684\u4f18\u70b9\u662f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u5730\u6539\u53d8\u63a5\u53e3\u7684\u5b9e\u73b0\uff0c\u4ece\u800c\u5b9e\u73b0\u66f4\u5f3a\u5927\u7684\u591a\u6001\uff1bvirtual\u52a8\u6001\u6d3e\u53d1\u7684\u7f3a\u70b9\u662f\u9700\u8981\u4e3a\u6bcf\u4e2a\u5bf9\u8c61\u589e\u52a0\u4e00\u4e2a\u865a\u62df\u6307\u94883\uff0c\u4ece\u800c\u589e\u52a0\u5185\u5b58\u5f00\u9500\uff0c\u5e76\u4e14\u4e0d\u80fd\u5185\u8054\u865a\u62df\u51fd\u65703\uff0c\u4ece\u800c\u964d\u4f4e\u6027\u80fd\u3002</p> </li> </ul>"},{"location":"cpp/CRTP.html#_1","title":"\u5b9e\u73b0\u7ec6\u8282","text":"<p>\u7236\u7c7b\u58f0\u660e\u4e3a\u6a21\u677f\uff0c\u5b50\u7c7b\u7ee7\u627f\u7236\u7c7b\u65f6\uff0c\u5c06\u81ea\u5df1\u7684\u7c7b\u578b\u4f5c\u4e3a\u6a21\u677f\u53c2\u6570\u4f20\u9012\u7ed9\u7236\u7c7b\u6a21\u677f\uff1b\u5728\u7236\u7c7b\u4e2d\u58f0\u660e\u516c\u5171API\uff0c\u4f46\u662f\u5177\u4f53\u7684\u5b9e\u73b0\u901a\u8fc7 \u5728\u7236\u7c7b\u4e2d<code>static_cast&lt;Derived*&gt;(this)</code> \u8fdb\u884c\u9759\u6001dispatch \u8f6c\u53d1\u7ed9\u5b50\u7c7b</p> <pre><code>template &lt;class Derived&gt;\nstruct Base { void name() { (static_cast&lt;Derived*&gt;(this))-&gt;impl(); } };\nstruct D1 : public Base&lt;D1&gt; { void impl() { std::puts(\"D1::impl()\"); } };\nstruct D2 : public Base&lt;D2&gt; { void impl() { std::puts(\"D2::impl()\"); } };\n\ntemplate&lt;typename T&gt;\nvoid SayMyName(Base&lt;T&gt;* obj){\nobj-&gt;name();\n}\n\nint main() {\nD1 d1;\nD2 d2;\nSayMyName(&amp;d1);\nSayMyName(&amp;d2);\n}\n</code></pre> <p>\u5728 <code>D1 : public Base&lt;D1&gt;</code> \u4e2d\uff0c <code>Base&lt;D1&gt;</code> \u662f\u5148\u4e8e D1 \u800c\u5b58\u5728\u7684\uff0c\u6240\u4ee5\u5f53 <code>Base&lt;D1&gt;::name()</code> \u88ab\u7533\u660e\u65f6\uff0c\u7f16\u8bd1\u5668\u5e76\u4e0d\u77e5\u9053 <code>D1</code> \u7684\u5b58\u5728\u7684\uff0c\u4f46\u7531\u4e8e\u6b64\u65f6 <code>Base&lt;D1&gt;::name()</code> \u5e76\u4e0d\u4f1a\u88ab\u5b9e\u4f8b\u5316\u3002\u53ea\u6709\u5f53 <code>Base&lt;D1&gt;::name()</code> \u88ab\u8c03\u7528\u65f6\uff0c\u624d\u4f1a\u88ab\u5b9e\u4f8b\u5316\uff0c\u800c\u6b64\u65f6\u7f16\u8bd1\u5668\u4e5f\u5df2\u7ecf\u77e5\u9053\u4e86 <code>D1::impl()</code> \u7684\u58f0\u660e\u4e86\u3002</p> <p>\u5bf9\u6bd4\u4f20\u7edf virtual \u505a\u6cd5\uff1a</p> <pre><code>struct Base { virtual void name(); };\nstruct D1 : public Base { void name() override { std::puts(\"D1::impl()\"); } };\nstruct D2 : public Base { void name() override { std::puts(\"D2::impl()\"); } };\n\nvoid SayMyName(Base* obj){\nobj-&gt;name();\n}\n\nint main() {\nD1 d1;\nD2 d2;\nSayMyName(&amp;d1);\nSayMyName(&amp;d2);\n}\n</code></pre> <ul> <li> <p>virtual \u8c03\u7528\u8fc7\u7a0b\uff1acall <code>SayMyName</code> \u65f6\uff0c \u4f20\u5165\u7684\u6307\u9488\u88ab\u8f6c\u6362\u6210\u4e86 <code>obj</code> \u2014\u2014 Base\u7c7b\u578b\u6307\u9488\uff0c \u5728\u8c03\u7528 <code>obj-&gt;name</code> \u65f6\uff0c \u4f1a\u901a\u8fc7\u67e5\u627e\u865a\u51fd\u6570\u8868\uff0c \u6839\u636e RTTI \u4fe1\u606f\u5c06\u8c03\u7528\u6d3e\u53d1\u5230\u771f\u6b63\u7684\u8fd0\u884c\u65f6\u7c7b\u578b\u7684\u5bf9\u5e94\u65b9\u6cd5\u4e0a</p> </li> <li> <p>CRTP call <code>SayMyName</code> \u65f6\uff0c \u4f20\u5165\u7684\u6307\u9488\u5219\u662f\u88ab\u8f6c\u6362\u6210\u4e86 <code>Base&lt;T&gt;</code> \u7c7b\u578b\u7684\u6307\u9488\uff0c \u8fd9\u91cc\u7684 <code>T</code> \u662f\u5b50\u7c7b\u7c7b\u578b\uff0c \u5728\u8c03\u7528 <code>obj-&gt;name</code> \u65f6\uff0c \u4f1a\u76f4\u63a5\u6839\u636e\u6a21\u677f\u53c2\u6570\u8c03\u7528\u5b50\u7c7b\u4e2d\u5bf9\u5e94\u65b9\u6cd5\uff0c\u7701\u53bb\u4e86\u67e5\u865a\u51fd\u6570\u8868\u7684\u5f00\u9500</p> </li> </ul>"},{"location":"cpp/CRTP.html#_2","title":"\u5e94\u7528\u5b9e\u4f8b","text":"<p>TODO:</p>"},{"location":"cpp/IO-multiplexing.html","title":"IO \u591a\u8def\u590d\u7528","text":""},{"location":"cpp/IO-multiplexing.html#_1","title":"\u524d\u7f6e\u77e5\u8bc6","text":""},{"location":"cpp/IO-multiplexing.html#_2","title":"\u6587\u4ef6\u63cf\u8ff0\u7b26","text":"<p>Linux \u4e2d\u4e00\u5207\u90fd\u53ef\u4ee5\u770b\u4f5c\u6587\u4ef6\uff0c\u5305\u62ec\u666e\u901a\u6587\u4ef6\u3001\u94fe\u63a5\u6587\u4ef6\u3001Socket \u4ee5\u53ca\u8bbe\u5907\u9a71\u52a8\u7b49\uff0c\u5bf9\u5176\u8fdb\u884c\u76f8\u5173\u64cd\u4f5c\u65f6\uff0c\u90fd\u53ef\u80fd\u4f1a\u521b\u5efa\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u6587\u4ef6\u63cf\u8ff0\u7b26\uff08file descriptor\uff09\u662f\u5185\u6838\u4e3a\u4e86\u9ad8\u6548\u7ba1\u7406\u5df2\u88ab\u6253\u5f00\u7684\u6587\u4ef6\u6240\u521b\u5efa\u7684\u7d22\u5f15\uff0c\u7528\u4e8e\u6307\u4ee3\u88ab\u6253\u5f00\u7684\u6587\u4ef6\uff0c\u5bf9\u6587\u4ef6\u6240\u6709 I/O \u64cd\u4f5c\u76f8\u5173\u7684\u7cfb\u7edf\u8c03\u7528\u90fd\u9700\u8981\u901a\u8fc7\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002</p> <p></p> <p>\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e0e\u6587\u4ef6\u662f\u4ec0\u4e48\u5173\u7cfb\u5462\uff1f\u4e0b\u56fe\u53ef\u4ee5\u4f53\u73b0\uff1a</p> <p></p> <ul> <li>\u8fdb\u7a0b\u7ea7\u522b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u8868\uff1a\u5185\u6838\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u7ef4\u62a4\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u8868\uff0c\u8be5\u8868\u8bb0\u5f55\u4e86\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u5305\u62ec\u6587\u4ef6\u63cf\u8ff0\u7b26\u3001\u6307\u5411\u6253\u5f00\u6587\u4ef6\u8868\u4e2d\u8bb0\u5f55\u7684\u6307\u9488\u3002</li> <li>\u7cfb\u7edf\u7ea7\u522b\u7684\u6253\u5f00\u6587\u4ef6\u8868\uff1a\u5185\u6838\u5bf9\u6240\u6709\u6253\u5f00\u6587\u4ef6\u7ef4\u62a4\u7684\u4e00\u4e2a\u8fdb\u7a0b\u5171\u4eab\u7684\u6253\u5f00\u6587\u4ef6\u63cf\u8ff0\u8868\uff0c\u8868\u4e2d\u5b58\u50a8\u4e86\u5904\u4e8e\u6253\u5f00\u72b6\u6001\u6587\u4ef6\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u5305\u62ec\u6587\u4ef6\u7c7b\u578b\u3001\u8bbf\u95ee\u6743\u9650\u3001\u6587\u4ef6\u64cd\u4f5c\u51fd\u6570(file_operations)\u7b49\u3002</li> <li>\u7cfb\u7edf\u7ea7\u522b\u7684 <code>i-node</code> \u8868\uff1a\u6bcf\u4e2a\u6587\u4ef6\u7cfb\u7edf\u90fd\u4f1a\u4e3a\u5176\u4e2d\u6240\u6709\u6587\u4ef6\u5efa\u7acb\u4e00\u4e2a<code>inode</code>\u8868\u3002<code>i-node</code> \u7ed3\u6784\u4f53\u8bb0\u5f55\u4e86\u6587\u4ef6\u76f8\u5173\u7684\u4fe1\u606f\uff0c\u5305\u62ec\u6587\u4ef6\u957f\u5ea6\uff0c\u6587\u4ef6\u6240\u5728\u8bbe\u5907\uff0c\u6587\u4ef6\u7269\u7406\u4f4d\u7f6e\uff0c\u521b\u5efa\u3001\u4fee\u6539\u548c\u66f4\u65b0\u65f6\u95f4\u7b49\uff0c<code>ls -i</code>\u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u6587\u4ef6 <code>i-node</code> \u8282\u70b9</li> </ul> <p>\u8fdb\u7a0bA\u4e2d\u6587\u4ef6\u63cf\u8ff0\u7b261\u548c20\u90fd\u6307\u5411\u540c\u4e00\u4e2a\u6253\u5f00\u7684\u6587\u4ef6\u53e5\u67c4(\u6807\u53f7\u4e3a23)\uff0c\u8fd9\u53ef\u80fd\u662f\u901a\u8fc7\u8c03\u7528<code>dup</code>\u3001<code>dup2</code>\u6216<code>fcntl</code>\u5f62\u6210\u7684\u3002</p> <p>\u8fdb\u7a0bA\u7684\u6587\u4ef6\u63cf\u8ff0\u7b262\u548c\u8fdb\u7a0bB\u7684\u6587\u4ef6\u63cf\u8ff0\u7b262\u90fd\u6307\u5411\u540c\u4e00\u4e2a\u6253\u5f00\u7684\u6587\u4ef6\u53e5\u67c4(\u6807\u53f7\u4e3a73)\uff0c\u8fd9\u53ef\u80fd\u662f\u8c03\u7528fork\u540e\u51fa\u73b0\u7684\uff0c\u5373\u8fdb\u7a0bA\u4e0e\u8fdb\u7a0bB\u662f\u7236\u5b50\u5173\u7cfb\u3002</p> <p>\u8fdb\u7a0bA\u7684\u6587\u4ef6\u63cf\u8ff0\u7b260\u548c\u8fdb\u7a0bB\u7684\u6587\u4ef6\u63cf\u8ff0\u7b263\u5206\u522b\u6307\u5411\u4e0d\u540c\u7684\u6253\u5f00\u6587\u4ef6\u53e5\u67c4\uff0c\u4f46\u662f\u8fd9\u4e9b\u53e5\u67c4\u5747\u6307\u5411<code>inode</code>\u8868\u4e2d\u7684\u76f8\u540c\u6761\u76ee(1976)\uff0c\u5373\u6307\u5411\u540c\u4e00\u6587\u4ef6\u3002\u8fd9\u53ef\u80fd\u56e0\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u5404\u81ea\u5bf9\u540c\u4e00\u4e2a\u6587\u4ef6\u53d1\u8d77\u4e86open\u8c03\u7528\uff0c\u540c\u4e00\u4e2a\u8fdb\u7a0b\u4e24\u6b21\u6253\u5f00\u540c\u4e00\u6587\u4ef6\uff0c\u4e5f\u4f1a\u53d1\u751f\u7c7b\u4f3c\u60c5\u51b5\u3002</p>"},{"location":"cpp/IO-multiplexing.html#io_1","title":"\u7406\u89e3IO","text":"<p>\u7528\u4e00\u4e2a<code>socket</code>\u7684\u4f8b\u5b50\u6765\u7406\u89e3IO\uff1a</p> <pre><code>//\u521b\u5efasocket \nint s = socket(AF_INET, SOCK_STREAM, 0);    //\u7ed1\u5b9a \nbind(s, ...) //\u76d1\u542c \nlisten(s, ...) //\u63a5\u53d7\u5ba2\u6237\u7aef\u8fde\u63a5 \nint c = accept(s, ...) //\u63a5\u6536\u5ba2\u6237\u7aef\u6570\u636e \nrecv(c, ...); //\u5c06\u6570\u636e\u6253\u5370\u51fa\u6765 \nprintf(...) </code></pre> <p>\u5148\u65b0\u5efa Socket \u5bf9\u8c61\uff0c\u4f9d\u6b21\u8c03\u7528<code>Bind</code>\u3001<code>Listen</code>\u4e0e<code>Accept</code>\uff0c\u6700\u540e\u8c03\u7528<code>recv</code>\u63a5\u6536\u6570\u636e\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u53ea\u5173\u5fc3<code>recv</code>\u7684\u8fc7\u7a0b\uff0c<code>recv</code>\u662f\u5982\u4f55\u628a\u6570\u636e\u4ece\u5ba2\u6237\u7aef\u63a5\u6536\u5230\u8fdb\u7a0b\u7a7a\u95f4\u4e2d\u8fdb\u884c\u5904\u7406\u7684\u5462\uff1f</p> <p><code>recv</code>\u662f\u4e2a\u963b\u585e\u65b9\u6cd5\uff0c\u5f53\u7a0b\u5e8f\u8fd0\u884c\u5230<code>Recv</code>\u65f6\uff0c\u5b83\u4f1a\u4e00\u76f4\u7b49\u5f85\uff0c\u76f4\u5230\u63a5\u6536\u5230\u6570\u636e\u624d\u5f80\u4e0b\u6267\u884c\u3002</p> <p></p> <p>\u4e0a\u56fe\u5c55\u793a\u4e86\u6570\u636e\u63a5\u6536\u7684\u5168\u8fc7\u7a0b\uff0c\u8fdb\u7a0b\u5728<code>Recv</code>\u963b\u585e\u671f\u95f4\u5904\u4e8e\u963b\u585e\u6001\uff0c\u4e0d\u5728\u5c31\u7eea\u961f\u5217\u4e2d\uff1a</p> <ol> <li>\u8ba1\u7b97\u673a\u6536\u5230\u4e86\u5bf9\u7aef\u4f20\u9001\u7684\u6570\u636e(\u6b65\u9aa4 \u2460)</li> <li>\u6570\u636e\u7ecf\u7531\u7f51\u5361\u4f20\u9001\u5230\u5185\u5b58\uff0c\u7531DMA\u7b49\u6267\u884c\uff0c\u4e0d\u9700\u8981CPU\u53c2\u4e0e(\u6b65\u9aa4 \u2461)</li> <li>\u7136\u540e\u7f51\u5361\u901a\u8fc7\u4e2d\u65ad\u4fe1\u53f7\u901a\u77e5 CPU \u6709\u6570\u636e\u5230\u8fbe\uff0cCPU \u6267\u884c\u4e2d\u65ad\u7a0b\u5e8f(\u6b65\u9aa4 \u2462)</li> </ol> <p>\u6b64\u5904\u7684\u4e2d\u65ad\u7a0b\u5e8f\u4e3b\u8981\u6709\u4e24\u9879\u529f\u80fd\uff1a</p> <ol> <li>\u5c06\u7f51\u7edc\u6570\u636e\u5199\u5165\u5230\u5bf9\u5e94 Socket \u7684\u63a5\u6536\u7f13\u51b2\u533a\u91cc\u9762(\u6b65\u9aa4 \u2463)</li> <li>\u5524\u9192\u8fdb\u7a0b A(\u6b65\u9aa4 \u2464)\uff0c\u91cd\u65b0\u5c06\u8fdb\u7a0b A \u653e\u5165\u5de5\u4f5c\u961f\u5217\u4e2d</li> </ol> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u6309\u7167\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u5219\u4e00\u4e2a\u8fdb\u7a0b(\u7ebf\u7a0b)\u540c\u65f6\u53ea\u80fd\u76d1\u89c6\u4e00\u4e2asocket\uff0c\u56e0\u4e3a\u5728<code>recv</code>\u628a\u8fdb\u7a0b\u963b\u585e\uff0c\u76f4\u5230\u8be5socket\u53ef\u7528\u3002\u8bd5\u60f3\u5982\u679c\u670d\u52a1\u7a0b\u5e8f\u5c31\u662f\u8fd9\u6837\u4e00\u4e2a\u5355\u8fdb\u7a0b\uff0c\u9762\u5bf9\u5230\u6765\u76841000\u4e2a\u8fde\u63a5\uff0c\u53ea\u8003\u8651<code>recv</code>\uff0c\u670d\u52a1\u5668\u53ea\u80fd\u6309\u5230\u8fbe\u987a\u5e8f\uff0c\u8c03\u75281000\u6b21<code>recv</code>\u4f9d\u6b21\u63a5\u6536\u6570\u636e\uff0c\u5219\u5fc5\u7136\u4f1a\u5bfc\u81f4\u9965\u997f\u7684\u95ee\u9898(\u53ef\u80fd\u6700\u540e\u4e00\u4e2a\u8fde\u63a5\u53ea\u4f20\u8f93\u5f88\u5c11\u7684\u6570\u636e\uff0c\u4f46\u662f\u88ab\u524d\u9762\u5927\u91cf\u8fde\u63a5\u963b\u585e)\u3002\u603b\u7ed3\u4ee5\u4e0b\u4e09\u70b9\uff1a</p> <ol> <li>\u8fdb\u7a0b\u5728 <code>recv</code> \u7684\u65f6\u5019\u5927\u6982\u7387\u4f1a\u88ab\u963b\u585e\u6389\uff0c\u5bfc\u81f4\u4e00\u6b21\u8fdb\u7a0b\u5207\u6362</li> <li>\u5f53\u8fde\u63a5\u4e0a\u6570\u636e\u5c31\u7eea\u7684\u65f6\u5019\u8fdb\u7a0b\u53c8\u4f1a\u88ab\u5524\u9192\uff0c\u53c8\u662f\u4e00\u6b21\u8fdb\u7a0b\u5207\u6362</li> <li>\u4e00\u4e2a\u8fdb\u7a0b\u540c\u65f6\u53ea\u80fd\u7b49\u5f85\u4e00\u6761\u8fde\u63a5\uff0c\u5982\u679c\u6709\u5f88\u591a\u5e76\u53d1\uff0c\u5219\u9700\u8981\u5f88\u591a\u8fdb\u7a0b</li> </ol> <p>\u6709\u6ca1\u6709\u4e00\u79cd\u65b9\u5f0f\u80fd\u591f\u8ba9\u8fdb\u7a0b\u540c\u65f6\u76d1\u89c6\u591a\u4e2asocket\u5462\uff1f</p> <p>\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u628a<code>read</code>(\u5373<code>recv</code>)\u8bbe\u7f6e\u4e3a\u975e\u963b\u585e\uff0c\u5373\u5982\u679c\u6587\u4ef6\u63cf\u8ff0\u7b26\u5904\u4e8eready\uff0c\u5219\u8fd4\u56de\u4e4b\uff0c\u5426\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u503c\uff1b\u8fd9\u6837\u4e00\u6765\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u4ee3\u7801\u91cc\u628a\u6240\u6709\u63cf\u8ff0\u7b26\u653e\u5230\u4e00\u4e2a\u6570\u7ec4\u7406\uff0c\u5199\u4e00\u4e2a\u5faa\u73af\u4f7f\u7528<code>read</code>\u4e0d\u65ad\u8f6e\u8be2\u8fd9\u4e2a\u6570\u7ec4\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u5b9e\u73b0\u4e86\u4e00\u4e2a\u8fdb\u7a0b\u76d1\u89c6\u591a\u4e2asocket\u3002</p> <pre><code>int fd_set[1000];\n//...\nwhile(1){\nfor(int fd : fd_set){\nif(read(fd)){\n//\u5bf9\u6587\u4ef6\u63cf\u8ff0\u7b26\u64cd\u4f5c\n} else{ continue; }\n}\n}\n</code></pre> <p>\u95ee\u9898\u4f3c\u4e4e\u5f97\u5230\u4e86\u89e3\u51b3\uff0c\u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u5b58\u5728\u4e25\u91cd\u7684\u6548\u7387\u95ee\u9898\uff0c\u56e0\u4e3a<code>read</code>\u662f\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\uff0c\u6bcf\u6b21\u8c03\u7528<code>read</code>\u90fd\u4ea7\u751f\u4e00\u6b21OS\u5728\u7528\u6237\u6001\u548c\u5185\u6838\u6001\u5207\u6362\u7684\u5f00\u9500\u3002</p> <p>\u5047\u5982\u6211\u4eec\u80fd\u591f\u5411\u5185\u6838\u9884\u5148\u4f20\u5165\u4e00\u4e2a socket \u5217\u8868(\u800c\u4e0d\u662f1\u4e2asocket)\uff0c\u5185\u6838\u5e2e\u6211\u4eec\u904d\u5386\u8fd9\u4e2a\u5217\u8868\uff0c\u5982\u679c\u5217\u8868\u4e2d\u7684 socket \u90fd\u6ca1\u6709\u6570\u636e\uff0c\u6302\u8d77\u8fdb\u7a0b\uff0c\u76f4\u5230\u6709\u4efb\u4f55\u4e00\u4e2asocket \u6536\u5230\u6570\u636e\uff0c\u5524\u9192\u8fdb\u7a0b\uff0c\u5f00\u9500\u5c31\u5f88\u5c0f\u4e86\u2014\u2014\u8fd9\u5c31\u662f\u7cfb\u7edf\u8c03\u7528<code>select</code>\u7684\u505a\u6cd5\u3002</p> <p></p>"},{"location":"cpp/IO-multiplexing.html#select","title":"select","text":"<p>\u63a5\u53e3\u5982\u4e0b\uff1a</p> <pre><code>#include &lt;sys/select.h&gt;\n/** \n * \u904d\u5386\u68c0\u67e5n\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u662f\u5426\u5904\u4e8eIO\u5c31\u7eea\u72b6\u6001(\u53ef\u8bfb\u6216\u53ef\u5199)\uff0c\u5e76\u628a\u7b26\u5408\u6761\u4ef6\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26(\u6bd4\u5982\u4e00\u4e2a\u5957\u63a5\u5b57)\n * \u52a0\u5230\u76f8\u5e94(\u8bfb\u3001\u5199\u3001\u5f02\u5e38)\u96c6\u5408\u4e2d(\u5373\u8bbe\u7f6e\u76f8\u5e94fdset\u7684\u76f8\u5e94bit\u4e3a1\uff0c\u4e0d\u7b26\u5408\u6761\u4ef6\u8bbe\u7f6e\u4e3a0)\u3002\u8c03\u7528\u8005\u8d1f\u8d23\u68c0\u67e5\u96c6\u5408\n *\n * @param n         \u4f7f\u7528\u65f6\u8bb0\u4f4f\u8fd9\u4e2a\u503c\u4e3a\u5f85\u68c0\u6d4b\u7684\u6700\u5927\u6587\u4ef6\u63cf\u8ff0\u7b26\u52a01\u5373\u53ef\uff1b\n * @param readfds   \u6307\u5b9a\u4e86\u88ab\u8bfb\u76d1\u63a7\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\uff1b\n * @param writefds  \u6307\u5b9a\u4e86\u88ab\u5199\u76d1\u63a7\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\uff1b\n * @param exceptfds \u6307\u5b9a\u4e86\u88ab\u4f8b\u5916\u6761\u4ef6\u76d1\u63a7\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\uff1b\n * @param timeout   \u5f88\u5e38\u7528\u7684\u4e00\u4e2atimeeval\u7ed3\u6784\uff0c\u8d77\u5b9a\u65f6\u5668\u7684\u4f5c\u7528\uff1a\u5230\u6307\u5b9a\u7684\u65f6\u95f4\uff0c\u65e0\u8bba\u662f\u5426\u6709fd\u51c6\u5907\u597d\uff0c\u90fd\u8fd4\u56de\u8c03\u7528\n */\nint select(int maxfd, fd_set *readfds, fd_set *writefds, fe_set *exceptfds, const struct timeval *timeout);\n</code></pre> <p>\u8be6\u7ec6\u7684\u89e3\u91ca\uff1a</p> <ul> <li>\u6d4b\u8bd5\u6307\u5b9a\u7684<code>fd</code>(\u53ef\u4ee5\u662f\u5f88\u591a\u4e2a<code>fd</code>)\u53ef\u8bfb\uff1f\u53ef\u5199\uff1f\u6709\u5f02\u5e38\u6761\u4ef6\u5f85\u5904\u7406\uff1f  </li> <li><code>maxfd</code>\uff1a\u9700\u8981\u68c0\u67e5\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u4e2a\u6570\uff08\u5373\u68c0\u67e5\u5230<code>fd_set</code>\u7684\u7b2c\u51e0\u4f4d\uff09\uff0c\u6570\u503c\u5e94\u8be5\u6bd4\u4e09\u7ec4<code>fd_set</code>\u4e2d\u6240\u542b\u7684\u6700\u5927<code>fd</code>\u503c\u66f4\u5927\uff0c\u4e00\u822c\u8bbe\u4e3a\u4e09\u7ec4<code>fd_set</code>\u4e2d\u6240\u542b\u7684\u6700\u5927<code>fd</code>\u503c\u52a01\uff08\u5982\u5728<code>readset</code>,<code>writeset</code>,<code>exceptset</code>\u4e2d\u6240\u542b\u6700\u5927\u7684<code>fd</code>\u4e3a5\uff0c\u5219<code>nfds=6</code>\uff0c\u56e0\u4e3a<code>fd</code>\u662f\u4ece0\u5f00\u59cb\u7684\uff09\u3002\u8fd9\u4e2a\u503c\u662f\u4e3a\u63d0\u9ad8\u6548\u7387\uff0c\u4f7f\u51fd\u6570\u4e0d\u5fc5\u68c0\u67e5<code>fd_set</code>\u7684\u6240\u67091024\u4f4d\u3002</li> <li><code>readfs</code>\uff1a<code>fd_set* readfds</code>\u662f\u6307\u5411<code>fd_set</code>\u7ed3\u6784\u7684\u6307\u9488\uff0c\u8fd9\u4e2a\u96c6\u5408\u4e2d\u5e94\u8be5\u5305\u62ec\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u6211\u4eec\u662f\u8981\u76d1\u89c6\u8fd9\u4e9b\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u8bfb\u53d8\u5316\u7684\uff0c\u5373\u6211\u4eec\u5173\u5fc3\u662f\u5426\u53ef\u4ee5\u4ece\u8fd9\u4e9b\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u4e86\uff0c\u5982\u679c\u8fd9\u4e2a\u96c6\u5408\u4e2d\u6709\u4e00\u4e2a\u6587\u4ef6\u53ef\u8bfb\uff0c<code>select</code>\u5c31\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5927\u4e8e0\u7684\u503c\uff0c\u8868\u793a\u6709\u6587\u4ef6\u53ef\u8bfb\uff0c\u5982\u679c\u6ca1\u6709\u53ef\u8bfb\u7684\u6587\u4ef6\uff0c\u5219\u6839\u636etimeout\u53c2\u6570\u518d\u5224\u65ad\u662f\u5426\u8d85\u65f6\uff0c\u82e5\u8d85\u51fatimeout\u7684\u65f6\u95f4\uff0c<code>select</code>\u8fd4\u56de0\uff0c\u82e5\u53d1\u751f\u9519\u8bef\u8fd4\u56de\u8d1f\u503c\u3002\u53ef\u4ee5\u4f20\u5165<code>NULL</code>\u503c\uff0c\u8868\u793a\u4e0d\u5173\u5fc3\u4efb\u4f55\u6587\u4ef6\u7684\u8bfb\u53d8\u5316\u3002</li> <li><code>timeout</code>\uff1a\u9650\u5b9a\u4e86<code>select</code>\u7684\u963b\u585e\u4e0a\u9650\uff0c\u5373\u6700\u4e45\u8f6e\u8be2\u65f6\u95f4\uff1b\u5982\u679c\u8981\u975e\u963b\u585e\uff0c\u5219\u8bbe\u7f6e\u4e3a0\u5373\u53ef</li> <li>\u8fd4\u56de\u503c\uff1a\u8fd4\u56de\u5bf9\u5e94\u4f4d\u4e3a1\u7684<code>fd</code>\u7684\u603b\u6570</li> </ul> <p>\u4e0e\u4e4b\u76f8\u5173\u7684\u51e0\u4e2a\u5b8f\uff1a</p> <pre><code>void FD_SET(int fd, fd_set *fdset);//\u8bbe\u7f6e\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6fdset\u4e2d\u5bf9\u5e94\u4e8e\u6587\u4ef6\u63cf\u8ff0\u7b26fd\u7684\u4f4d(\u8bbe\u7f6e\u4e3a1)\uff0c\u5373\u5c06fd\u52a0\u5165fdset\u96c6\u7684\u64cd\u4f5c\uff1b\nvoid FD_CLR(int fd, fd_set *fdset);//\u6e05\u9664\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6fdset\u4e2d\u5bf9\u5e94\u4e8e\u6587\u4ef6\u63cf\u8ff0\u7b26fd\u7684\u4f4d(\u8bbe\u7f6e\u4e3a0)\uff0c\u4e0e\u4e0a\u76f8\u53cd\u64cd\u4f5c\uff1b\nvoid FD_ISSET(int fd, fd_set *fdset);//\u68c0\u6d4b\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6fdset\u4e2d\u5bf9\u5e94\u4e8e\u6587\u4ef6\u63cf\u8ff0\u7b26fd\u7684\u4f4d\u662f\u5426\u88ab\u8bbe\u7f6e,\u5982\u679c\u7f6e1\uff0c\u5c31\u8fdb\u884c\u76f8\u5e94\u64cd\u4f5c\uff1b\nvoid FD_ZERO(fd_set *fdset);//\u6e05\u9664\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6fdset\u4e2d\u7684\u6240\u6709\u4f4d(\u65e2\u628a\u6240\u6709\u4f4d\u90fd\u8bbe\u7f6e\u4e3a0)\n</code></pre> <p>\u4f7f\u7528<code>select</code>\u7684\u8fc7\u7a0b\u4e00\u822c\u662f\uff1a</p> <p>\u5148\u8c03\u7528\u5b8fFD_ZERO\u5c06\u6307\u5b9a\u7684<code>fd_set</code>\u6e05\u96f6\uff0c\u7136\u540e\u8c03\u7528\u5b8fFD_SET\u5c06\u9700\u8981\u6d4b\u8bd5\u7684<code>fd</code>\u52a0\u5165<code>fd_set</code>(\u5373\u628a\u5bf9\u5e94\u4f4d\u7f6e1)\uff0c\u63a5\u7740\u8c03\u7528\u51fd\u6570select\u6d4b\u8bd5<code>fd_set</code>\u4e2d\u7684\u6240\u6709<code>fd</code>(\u5982\u679c<code>fd</code>\u7b26\u5408\u6761\u4ef6\uff0c\u5219\u4e0d\u4f1a\u88ab\u7f6e0\uff0c\u5426\u5219\u4f1a\u88ab\u7f6e0)\uff0c\u6700\u540e\u7528\u5b8fFD_ISSET\u68c0\u67e5\u67d0\u4e2a<code>fd</code>\u5728\u51fd\u6570select\u8c03\u7528\u540e\uff0c\u76f8\u5e94\u4f4d\u662f\u5426\u4ecd\u7136\u4e3a1\u3002</p> <p>\u6ce8\u610f\uff1a\u4e0a\u8ff0\u8fc7\u7a0b\u4e2d\u7701\u7565\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u5373\u5185\u6838\u662f\u5982\u4f55\u5f97\u77e5\u5982\u679c\u8fd9\u4e2a\u96c6\u5408\u4e2d\u6709\u4e00\u4e2a\u6587\u4ef6\u53ef\u8bfb\u8fd9\u4e00\u4e8b\u4ef6\u7684\u5462\uff1f\u5728<code>select</code>\u4e2d\uff0c\u4e8b\u5b9e\u4e0a\u5185\u6838\u53ea\u662f\u7b80\u5355\u7684\u8f6e\u8be2\u6240\u6709\u63cf\u8ff0\u7b26\uff0c\u770b\u8d77\u662f\u5426\u5904\u4e8e\u53ef\u8bfb\u72b6\u6001\uff0c\u56e0\u6b64<code>select</code>\u4e0d\u4f1a\u8ba9\u51faCPU\uff01\uff01\uff01</p> <p>\u518d\u4e00\u6b21\u603b\u7ed3<code>select</code>\u89e3\u51b3\u540c\u65f6\u76d1\u89c6\u591a\u4e2asocket\u95ee\u9898\u7684\u601d\u60f3\uff1a\u6211\u4eec\u6784\u5efa\u4e00\u4e2a\u5174\u8da3\u5217\u8868(\u5373\u6dfb\u52a0\u4e86\u63cf\u8ff0\u7b26\u7684<code>fd_set</code>)\u5305\u542b\u8981\u76d1\u89c6\u7684\u6240\u6709socket\uff0c\u7136\u540e\u901a\u8fc7<code>select</code>\u5411\u5185\u6838\u4f20\u5165\u8fd9\u4e2asocket\u5217\u8868\uff0c\u5982\u679c\u5217\u8868\u4e2d\u7684socket\u90fd\u6ca1\u6709\u6570\u636e\uff0c\u6302\u8d77\u8fdb\u7a0b\uff0c\u76f4\u5230\u6709\u4e00\u4e2asocket\u6536\u5230\u6570\u636e\uff0c\u4e2d\u65ad\u7a0b\u5e8f\u5c06\u5524\u8d77\u8fdb\u7a0b\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u79cd\u65b9\u5f0f\uff0c\u65e2\u505a\u5230\u4e86\u4e00\u4e2a\u7ebf\u7a0b\u5904\u7406\u591a\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5socket\uff0c\u53c8\u51cf\u5c11\u4e86\u7cfb\u7edf\u8c03\u7528\u7684\u5f00\u9500\uff08\u591a\u4e2asocket\u53ea\u6709\u4e00\u6b21 select \u7684\u7cfb\u7edf\u8c03\u7528 + n \u6b21\u5c31\u7eea\u72b6\u6001\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684 read \u7cfb\u7edf\u8c03\u7528\uff09\u3002\u4f46\u662f\u6ce8\u610f\u5230<code>select</code>\u7684\u4e09\u4e2a\u9650\u5236\uff1a</p> <ul> <li>\u6bcf\u6b21\u8c03\u7528<code>select</code>\uff0c\u90fd\u9700\u8981\u628a<code>fd_set</code>\u4ece\u7528\u6237\u6001\u62f7\u8d1d\u5230\u5185\u6838\u6001\uff0c\u8fd9\u4e2a\u5f00\u9500\u5728<code>fd</code>\u5f88\u591a\u65f6\u4f1a\u5f88\u5927</li> <li><code>select</code>\u5728\u5185\u6838\u5c42\u4ecd\u7136\u662f\u901a\u8fc7\u904d\u5386\u7684\u65b9\u5f0f\u68c0\u67e5\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5c31\u7eea\u72b6\u6001\uff0c\u662f\u4e2a\u540c\u6b65\u8fc7\u7a0b\uff0c\u53ea\u4e0d\u8fc7\u65e0\u7cfb\u7edf\u8c03\u7528\u5207\u6362\u4e0a\u4e0b\u6587\u7684\u5f00\u9500(\u76f8\u6bd4\u4e8e\u6211\u4eec\u628a<code>read</code>\u8bbe\u7f6e\u4e3a\u975e\u963b\u585e\uff0c\u7136\u540e\u5728\u7528\u6237\u5c42\u4e0d\u65ad\u8f6e\u5faa\u591a\u4e2a\u63cf\u8ff0\u7b26)\u3002</li> <li>\u5bf9\u4e8e<code>select</code>\u6bcf\u6b21\u7684\u8fd4\u56de\u503c(\u5982\u679c\u4e0d\u4e3a0)\uff0c\u6211\u4eec\u90fd\u9700\u8981\u904d\u5386\u4ece\u5185\u6838\u8fd4\u56de\u6765\u7684<code>fd_set</code>\uff0c\u8fd9\u4e2a\u5f00\u9500\u5728<code>fd</code>\u5f88\u591a\u65f6\u5f88\u5927</li> <li><code>select</code>\u53ea\u652f\u6301\u6709\u9650\u6587\u4ef6\u63cf\u8ff0\u7b26\u6570\u91cf\uff0c\u9ed8\u8ba4\u662f1024</li> </ul> <p>\u57fa\u4e8e\u4ee5\u4e0a\u4e0d\u8db3\uff0cLinux2.6\u4e4b\u540e\u63d0\u4f9b\u7684\u53e6\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848<code>epoll</code>\u9488\u5bf9\u4e0a\u8ff0\u7f3a\u70b9\u8fdb\u884c\u4e86\u6539\u8fdb\uff0c\u6027\u80fd\u66f4\u597d\u3002</p> <p></p>"},{"location":"cpp/IO-multiplexing.html#epoll","title":"epoll","text":"<p>\u53c2\u8003 epoll</p>"},{"location":"cpp/IO-multiplexing.html#event-driven","title":"event-driven","text":"<p>I/O\u591a\u8def\u590d\u7528\u53ef\u4ee5\u7528\u505a\u5e76\u53d1\u4e8b\u4ef6\u9a71\u52a8(event-driven)\u7a0b\u5e8f\u7684\u57fa\u7840\uff0c\u5728\u4e8b\u4ef6\u9a71\u52a8\u7a0b\u5e8f\u4e2d\uff0c\u67d0\u4e9b\u4e8b\u4ef6\u4f1a\u5bfc\u81f4\u6d41\u5411\u524d\u63a8\u8fdb\u3002\u4e00\u822c\u7684\u601d\u8def\u662f\u5c06\u903b\u8f91\u6d41\u6a21\u578b\u5316\u4e3a\u72b6\u6001\u673a\u3002\u4e0d\u4e25\u683c\u5730\u8bf4\uff0c\u4e00\u4e2a\u72b6\u6001\u673a\u5c31\u662f\u4e00\u7ec4\u72b6\u6001\u3001\u8f93\u5165\u4e8b\u4ef6\u548c\u8f6c\u79fb\u3002\u5176\u4e2d\u8f6c\u79fb\u662f\u5c06\u72b6\u6001\u548c\u8f93\u4eba\u4e8b\u4ef6\u6620\u5c04\u5230\u72b6\u6001\u3002\u6bcf\u4e2a\u8f6c\u79fb\u662f\u5c06\u4e00\u4e2a(\u8f93\u5165\u72b6\u6001\uff0c\u8f93\u4eba\u4e8b\u4ef6)\u5bf9\u6620\u5c04\u5230\u4e00\u4e2a\u8f93\u51fa\u72b6\u6001\u3002\u81ea\u5faa\u73af(self-loop)\u662f\u540c\u4e00\u8f93\u5165\u548c\u8f93\u51fa\u72b6\u6001\u4e4b\u95f4\u7684\u8f6c\u79fb\u3002\u901a\u5e38\u628a\u72b6\u6001\u673a\u753b\u6210\u6709\u5411\u56fe\uff0c\u5176\u4e2d\u8282\u70b9\u8868\u793a\u72b6\u6001\uff0c\u6709\u5411\u5f27\u8868\u793a\u8f6c\u79fb\uff0c\u800c\u5f27\u4e0a\u7684\u6807\u53f7\u8868\u793a\u8f93\u5165\u4e8b\u4ef6\u3002\u4e00\u4e2a\u72b6\u6001\u673a\u4ece\u67d0\u79cd\u521d\u59cb\u72b6\u6001\u5f00\u59cb\u6267\u884c\u3002\u6bcf\u4e2a\u8f93\u5165\u4e8b\u4ef6\u90fd\u4f1a\u5f15\u53d1\u4e00\u4e2a\u4ece\u5f53\u524d\u72b6\u6001\u5230\u4e0b\u4e00\u72b6\u6001\u7684\u8f6c\u79fb\u3002</p> <p>\u5bf9\u4e8e\u6bcf\u4e2a\u65b0\u7684\u5ba2\u6237\u7aef\\(k\\)\uff0c\u57fa\u4e8eI/O\u591a\u8def\u590d\u7528\u7684\u5e76\u53d1\u670d\u52a1\u5668\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u72b6\u6001\u673a\\(s_k\\)\uff0c\u5e76\u5c06\u5b83\u548c\u5df2\u8fde\u63a5\u63cf\u8ff0\u7b26\\(d_k\\)\u8054\u7cfb\u8d77\u6765\u3002\u5982\u56fe12-7\u6240\u793a\uff0c\u6bcf\u4e2a\u72b6\u6001\u673a\\(s_k\\),\u90fd\u6709\u4e00\u4e2a\u72b6\u6001(\u201c\u7b49\u5f85\u63cf\u8ff0\u7b26\\(d\\),\u51c6\u5907\u597d\u53ef\u8bfb\u201d)\u3001\u4e00\u4e2a\u8f93\u4eba\u4e8b\u4ef6(\u201c\u63cf\u8ff0\u7b26\\(d_k\\),\u51c6\u5907\u597d\u53ef\u4ee5\u8bfb\u4e86\u201d)\u548c\u4e00\u4e2a\u8f6c\u79fb(\u201c\u4ece\u63cf\u8ff0\u7b26\\(d_k\\),\u8bfb\u4e00\u4e2a\u6587\u672c\u884c\u201d)\u3002</p> <p></p> <p>\u670d\u52a1\u5668\u4f7f\u7528I/\u041e\u591a\u8def\u590d\u7528\uff0c\u501f\u52a9<code>select</code>\u51fd\u6570\u68c0\u6d4b\u8f93\u5165\u4e8b\u4ef6\u7684\u53d1\u751f\u3002\u5f53\u6bcf\u4e2a\u5df2\u8fde\u63a5\u63cf\u8ff0\u7b26\u51c6\u5907\u597d\u53ef\u8bfb\u65f6\uff0c\u670d\u52a1\u5668\u5c31\u4e3a\u76f8\u5e94\u7684\u72b6\u6001\u673a\u6267\u884c\u8f6c\u79fb\uff0c\u5728\u8fd9\u91cc\u5c31\u662f\u4ece\u63cf\u8ff0\u7b26\u8bfb\u548c\u5199\u56de\u4e00\u4e2a\u6587\u672c\u884c\u3002</p> <p>\u56fe<code>12-8</code>\u5c55\u793a\u4e86\u4e00\u4e2a\u57fa\u4e8eI/O\u591a\u8def\u590d\u7528\u7684\u5e76\u53d1\u4e8b\u4ef6\u9a71\u52a8\u670d\u52a1\u5668\u7684\u5b8c\u6574\u793a\u4f8b\u4ee3\u7801\u3002\u4e00\u4e2a<code>pool</code>\u7ed3\u6784\u91cc\u7ef4\u62a4\u7740\u6d3b\u52a8\u5ba2\u6237\u7aef\u7684\u96c6\u5408(\u7b2c3\uff5e11\u884c)\u3002\u5728\u8c03\u7528<code>init_pool</code>\u521d\u59cb\u5316\u6c60(\u7b2c27\u884c)\u4e4b\u540e\uff0c\u670d\u52a1\u5668\u8fdb\u4eba\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u3002\u5728\u5faa\u73af\u7684\u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0c\u670d\u52a1\u5668\u8c03\u7528select\u51fd\u6570\u6765\u68c0\u6d4b\u4e24\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u8f93\u5165\u4e8b\u4ef6:</p> <ul> <li>a)\u6765\u81ea\u4e00\u4e2a\u65b0\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u8bf7\u6c42\u5230\u8fbe\uff0c</li> <li>b)\u4e00\u4e2a\u5df2\u5b58\u5728\u7684\u5ba2\u6237\u7aef\u7684\u5df2\u8fde\u63a5\u63cf\u8ff0\u7b26\u51c6\u5907\u597d\u53ef\u4ee5\u8bfb\u4e86\u3002</li> </ul> <p>\u5f53\u4e00\u4e2a\u8fde\u63a5\u8bf7\u6c42\u5230\u8fbe\u65f6(\u7b2c35\u884c)\uff0c\u670d\u52a1\u5668\u6253\u5f00\u8fde\u63a5(\u7b2c37\u884c)\uff0c\u5e76\u8c03\u7528<code>add_client</code>\u51fd\u6570\uff0c\u5c06\u8be5\u5ba2\u6237\u7aef\u6dfb\u52a0\u5230\u6c60\u91cc(\u7b2c38\u884c)\u3002\u6700\u540e\uff0c\u670d\u52a1\u5668\u8c03\u7528<code>check_clients</code>\u51fd\u6570\uff0c\u628a\u6765\u81ea\u6bcf\u4e2a\u51c6\u5907\u597d\u7684\u5df2\u8fde\u63a5\u63cf\u8ff0\u7b26\u7684\u4e00\u4e2a\u6587\u672c\u884c\u56de\u9001\u56de\u53bb(\u7b2c42\u884c)\u3002</p> <p></p>"},{"location":"cpp/IO-multiplexing.html#io-vs","title":"IO\u591a\u8def\u590d\u7528 v.s. \u591a\u7ebf\u7a0b","text":"<p>IO\u591a\u8def\u590d\u7528\u7684\u4f18\u52bf\u5728\u4e8e\uff0c\u5f53\u5904\u7406\u7684\u6d88\u8017\u5bf9\u6bd4IO\u51e0\u4e4e\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\u65f6\uff0c\u53ef\u4ee5\u5904\u7406\u5927\u91cf\u7684\u5e76\u53d1IO\uff0c\u800c\u4e0d\u7528\u6d88\u8017\u592a\u591aCPU/\u5185\u5b58\u3002\u5bf9\u6bd4\u591a\u7ebf\u7a0b\uff0c\u7701\u53bb\u4e86\u7ebf\u7a0b\u5207\u6362\u7684\u5f00\u9500\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u7ebf\u7a0b\u5355\u72ec\u7ef4\u62a4\u7684\u6808\u8d44\u6e90\u7b49\u3002\u8fd9\u5c31\u50cf\u662f\u4e00\u4e2a\u5de5\u4f5c\u5f88\u9ad8\u6548\u7684\u4eba\uff0c\u624b\u4e0a\u4e00\u4e2atodo list\uff0c\u4ed6\u9ad8\u6548\u7684\u4f9d\u6b21\u5904\u7406\u6bcf\u4e2a\u4efb\u52a1\u3002\u8fd9\u6bd4\u6bcf\u4e2a\u4efb\u52a1\u5355\u72ec\u5b89\u6392\u4e00\u4e2a\u4eba\u8981\u8282\u7701\uff08\u96c7\u4eba\u662f\u8981\u53d1\u5de5\u8d44\u7684\u2026\u2026\uff09\u3002\u5178\u578b\u7684\u4f8b\u5b50\u662f<code>nginx</code>\u505a\u4ee3\u7406\uff0c\u4ee3\u7406\u7684\u8f6c\u53d1\u903b\u8f91\u76f8\u5bf9\u6bd4\u8f83\u7b80\u5355\u76f4\u63a5\uff0c\u90a3\u4e48IO\u591a\u8def\u590d\u7528\u5f88\u9002\u5408\u3002\u76f8\u53cd\uff0c\u5982\u679c\u662f\u4e00\u4e2a\u505a\u590d\u6742\u8ba1\u7b97\u7684\u573a\u666f\uff0c\u8ba1\u7b97\u672c\u8eab\u53ef\u80fd\u662f\u4e2a\u590d\u6742\u7684\u4e1c\u897f\uff0cIO\u4e0d\u662f\u74f6\u9888\u3002\u90a3\u4e48\u600e\u4e48\u5145\u5206\u5229\u7528CPU\u6216\u8005\u663e\u5361\u7684\u6838\u5fc3\u591a\u5e72\u6d3b\u624d\u662f\u5173\u952e\u3002</p>"},{"location":"cpp/align.html","title":"Alignment","text":""},{"location":"cpp/align.html#alignment_1","title":"Alignment \u6982\u5ff5","text":"<p>\u5185\u5b58\u5bf9\u9f50\u6307\u7684\u662f\u6570\u636e\u5728\u5185\u5b58\u4e2d\u7684\u5e03\u5c40\u9700\u8981\u4fdd\u8bc1\u4e00\u5b9a\u7684\u5bf9\u9f50\u89c4\u5219\u3002 \u4fdd\u8bc1\u5b57\u8282\u5bf9\u9f50\u4e3b\u8981\u662f\u4e3a\u4e86\u4fdd\u8bc1CPU\u9ad8\u6548\u8bfb\u53d6\u6570\u636e\u3002 \u5bf9\u4e8e\u5199\u4ee3\u7801\u7684\u4eba\u6765\u8bf4\uff0c\u4f7f\u7528\u5b57\u8282\u5bf9\u9f50\u7684\u6280\u5de7\u5728\u6d89\u53ca\u5230\u642d\u5efa\u5e95\u5c42\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u53ca\u7f51\u7edc\u7f16\u7a0b\uff0c\u6570\u636e\u7ed3\u6784\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u7b49\u573a\u666f\u65f6\u975e\u5e38\u6709\u7528\u3002</p> <p>\u5173\u4e8eC/C++ POT\u7c7b\u578b\u5b57\u8282\u5bf9\u9f50\u89c4\u5219\u7f51\u4e0a\u6709\u5f88\u591a\u8d44\u6599\u3002\u53ef\u4ee5\u53c2\u8003 Microsoft-learn-Alignment</p> <p>\u7b80\u5355\u6765\u8bf4\uff1a</p> <ol> <li>By default, the compiler aligns class and struct members on their size value: <code>bool</code> and <code>char</code> on 1-byte boundaries, <code>short</code> on 2-byte boundaries, <code>int</code>, <code>long</code>, and <code>float</code> on 4-byte boundaries, and <code>long long</code>, <code>double</code>, and <code>long double</code> on 8-byte boundaries.</li> <li>\u5bf9\u4e8e\u7ed3\u6784\u4f53\u6765\u8bf4\uff0c\u9664\u4e86\u4fdd\u8bc1\u4e0a\u8ff0\u89c4\u5219\u4e4b\u5916\uff0c\u8fd8\u9700\u8981\u4fdd\u8bc1\u7ed3\u6784\u4f53\u7684\u5927\u5c0f\u662f\u5176\u6210\u5458\u4e2d\u6700\u5927\u7684\u90a3\u4e00\u4e2a\u7684\u6574\u6570\u500d\uff08\u4f8b\u5982\uff0c\u7ed3\u6784\u4f53\u4e2d\u6709uint64_t\uff0c\u90a3\u4e48\u7ed3\u6784\u4f53\u9700\u8981\u4fdd\u8bc1\u81ea\u5df1\u7684size\u4e3a8\u5b57\u8282\u7684\u500d\u6570\uff09</li> </ol> <p><pre><code>struct x_\n{\nchar a;     // 1 byte\nint b;      // 4 bytes\nshort c;    // 2 bytes\nchar d;     // 1 byte\n} bar[3];\n\n// Shows the actual memory layout\nstruct x_\n{\nchar a;            // 1 byte\nchar _pad0[3];     // padding to put 'b' on 4-byte boundary\nint b;            // 4 bytes\nshort c;          // 2 bytes\nchar d;           // 1 byte\nchar _pad1[1];    // padding to make sizeof(x_) multiple of 4\n} bar[3];\n</code></pre> - Both declarations return sizeof(struct x_) as 12 bytes. - Both declarations return alignof(struct x_) as 4 bytes.</p>"},{"location":"cpp/align.html#alignment_2","title":"Alignment \u4f7f\u7528\u573a\u666f","text":"<p>\u8fd9\u4e2a\u6982\u5ff5\u843d\u5b9e\u5230\u4ee3\u7801\u4e0a\u4e3b\u8981\u8868\u73b0\u4e3a\uff0c\u6709\u65f6\u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u81ea\u5b9a\u4e49\u7684<code>struct</code>,<code>class</code>\u7b49\u9075\u5faa\u4e00\u5b9a\u7684\u5bf9\u9f50\u89c4\u5219\u3002</p> <p>\u6bd4\u5982\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u53ef\u4ee5\u770b\u5230<code>struct x_</code>\u5728default\u60c5\u51b5\u5b58\u5728\u4e00\u5b9a\u7684\u586b\u5145\uff0c\u800c\u8fd9\u4e2a\u586b\u5145\u5728\u4e0d\u540c\u7684\u673a\u5668(or \u4e0d\u540c\u7f16\u8bd1\u5668)\u4e0a\u7f16\u8bd1\u51fa\u7684\u7a0b\u5e8f\u53ef\u80fd\u662f\u4e0d\u4e00\u6837\u7684\u3002\u8003\u8651\u4e00\u4e2a\u5c06\u8be5\u7ed3\u6784\u4f53\u5e8f\u5217\u5316\uff0c\u901a\u8fc7\u7f51\u7edc\u6536\u53d1\u7684\u573a\u666f\uff0c\u5982\u679c\u6ca1\u6709\u9884\u5148\u6c9f\u901a\u597d\u5b57\u8282\u5bf9\u9f50\u89c4\u5219\u7684\u8bdd\uff0c\u5219\u53ef\u80fd\u51fa\u73b0\u89e3\u6790\u9519\u8bef\u3002</p> <p>\u518d\u6bd4\u5982SIMD\u6307\u4ee4\u4f7f\u7528\u4e2d\uff0c\u5f80\u5f80\u5bf9\u4e8e\u6570\u636e\u7684\u5bf9\u9f50\u6709\u4e00\u4e9b\u8981\u6c42\uff1a <pre><code>/*\u5c06 256 \u4f4d\uff08\u7531 4 \u4e2a\u6253\u5305\u7684 64 \u4f4d\u6574\u6570\u7ec4\u6210\uff09\u4ece\u5185\u5b58\u52a0\u8f7d\u5230 dst\u3002 mem_addr \u5fc5\u987b\u5728 32 \u5b57\u8282\u8fb9\u754c\u4e0a\u5bf9\u9f50\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u751f\u6210\u4e00\u822c\u4fdd\u62a4\u5f02\u5e38\u3002\n*/\n__m256i _mm256_load_epi64 (void const* mem_addr)\n\n/*\u5c06 256 \u4f4d\uff08\u7531 4 \u4e2a\u6253\u5305\u7684 64 \u4f4d\u6574\u6570\u7ec4\u6210\uff09\u4ece\u5185\u5b58\u52a0\u8f7d\u5230 dst\u3002 mem_addr \u4e0d\u9700\u8981\u5728\u4efb\u4f55\u7279\u5b9a\u8fb9\u754c\u4e0a\u5bf9\u9f50\u3002\n*/\n__m256i _mm256_loadu_epi64 (void const* mem_addr)\n</code></pre> \u53ef\u4ee5\u770b\u5230<code>_mm256_load_epi64</code>\u5c31\u8981\u6c42load\u7684\u5730\u5740\u5fc5\u987b\u662f32\u5b57\u8282\u5bf9\u9f50\u7684\uff0c\u8fd9\u4e2a\u7ea6\u675f\u540c\u65f6\u4e5f\u4f1a\u5e26\u6765\u6548\u7387\u4e0a\u7684\u63d0\u5347\u3002\u56e0\u6b64\u5728\u4f7f\u7528SIMD\u65f6\uff0c\u5e94\u5f53\u5c3d\u91cf\u4fdd\u8bc1\u5b57\u8282\u5bf9\u9f50\u8981\u6c42\uff0c\u907f\u514d\u6027\u80fd\u635f\u5931\u3002</p> <p>Stackoverflow-difference between loadu and load?</p>"},{"location":"cpp/align.html#alignofalignasaligned_new","title":"\u4f7f\u7528<code>alignof</code>,<code>alignas</code>,<code>aligned_new</code>","text":"<p>\u5728C++11\u4e4b\u524d\uff0c\u901a\u8fc7\u4f7f\u7528\u4e0d\u540c\u7f16\u8bd1\u5668\u7684\u4e0d\u540cbuilt-in\u6307\u4ee4\u6765\u63a7\u5236\u5185\u5b58\u5bf9\u9f50\uff1a <pre><code>#if !defined(ALIGN16)\n#if defined(__GNUC__)\n#define ALIGN16 __attribute__((aligned(16)))\n#define ALIGN32 __attribute__((aligned(32)))\n#else\n#define ALIGN16 __declspec(align(16))\n#define ALIGN32 __declspec(align(32))\n#endif\n#endif\n\nuint8_t unaligned_arr[42]{};\nALIGN16 uint8_t aligned16_arr[42]{};\nALIGN32 uint8_t aligned32_arr[42]{};\n</code></pre> \u5728C++11\u4e4b\u540e\uff0c\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5173\u952e\u5b57operator <code>alignof</code>\uff0c\u63d0\u4f9b\u4e86<code>alignas specifier</code>\u6765\u4fdd\u8bc1\u5206\u914d\u6570\u636e\u7684\u5185\u5b58\u5bf9\u9f50\uff08\u5373\u4ee3\u66ff\u4e0a\u9762\u7684<code>ALIGN16/32</code>\uff09\u3002 C++17 \u8fd8\u63d0\u4f9b\u4e86<code>aligned_new</code>\u6765\u63d0\u4f9b\u4fdd\u8bc1\u81ea\u5b9a\u4e49\u5bf9\u9f50\u89c4\u5219\u7684\u5185\u5b58\u5206\u914d\uff0c\u5373<code>new(std::align_val_t(16)) Bar</code>\u3002 <pre><code>// alignas_alignof.cpp\n// compile with: cl /EHsc alignas_alignof.cpp\n#include &lt;iostream&gt;\n\nstruct alignas(16) Bar {\nint i;       // 4 bytes\nint n;      // 4 bytes\nalignas(16) char arr[3];\nshort s;          // 2 bytes\n};\n\nint main() {\nstd::cout &lt;&lt; alignof(Bar) &lt;&lt; std::endl; // output: 16\nstd::cout &lt;&lt; sizeof(Bar) &lt;&lt; std::endl; // output: 32\nstd::unique_ptr&lt;__m256i[]&gt; arr{new(std::align_val_t{alignof(__m256i)}) __m256i[32]}; // aligned new\n}\n</code></pre></p>"},{"location":"cpp/benchmark.html","title":"Benchmark","text":"<p>\u8fd9\u91cc\u4ecb\u7ecd\u4e24\u4e2a\u5e93\uff0c<code>Google Benchmark</code>\u4ee5\u53ca<code>Catch2</code>\u3002 \u5176\u4e2d\u524d\u8005\u4f7f\u7528\u6700\u5e7f\u6cdb\uff0c\u540e\u8005\u662f\u5355\u5143\u6d4b\u8bd5\u6846\u67b6\uff0c\u4f46\u662f\u4e5f\u52a0\u5165\u4e86benchmark\u529f\u80fd\u3002</p> <p>\u5728\u4e86\u89e3Catch2\u7684benchmark\u4e4b\u524d\uff0c\u9996\u5148\u56de\u987e\u4e00\u4e0bGoogle\u7684Benchmark\uff1a</p>"},{"location":"cpp/benchmark.html#google-benchmark","title":"Google benchmark","text":"<ul> <li> <p>\u4f7f\u7528<code>BENCHMARK</code>macro\u6ce8\u518cbenchmark\u51fd\u6570\uff1a</p> <pre><code>#include &lt;benchmark/benchmark.h&gt;\n#include &lt;stdint.h&gt;\nstd::uint64_t FibonacciRecur(std::uint64_t number) {\nreturn number &lt; 2 ? 1 : FibonacciRecur(number - 1) + FibonacciRecur(number - 2);\n}\nstd::uint64_t FibonacciIter(std::uint64_t number) {\nint pre{1}, cur{1}, tmp{};\nfor (size_t i = 1; i &lt; number; i++) {\ntmp = cur;\ncur += pre;\npre = tmp;\n}\nreturn cur;\n}\nstatic void BM_FibRecur(benchmark::State&amp; state){\nfor (auto _ : state) FibonacciRecur(state.range(0));\n}\nstatic void BM_FibIter(benchmark::State&amp; state){\nfor (auto _ : state) FibonacciIter(state.range(0));\n}\n\nBENCHMARK(BM_FibRecur)-&gt;Arg(20)-&gt;Arg(25)-&gt;Arg(30);\nBENCHMARK(BM_FibIter)-&gt;DenseRange(10, 30, 5);\nspecific step[]\n</code></pre> <ul> <li>\u5176\u4e2d<code>DenseRange</code>\uff1aRun this benchmark once for all values in the range [start..limit] with specific step</li> <li>\u5176\u4e2d <code>Arg()</code> \uff1a\u5411\u76ee\u6807\u51fd\u6570\u4f20\u5165\u7684\u53c2\u6570\uff0c\u6ce8\u610f\u5728<code>BM_*</code>\u51fd\u6570\u4e2d\u8981\u4f7f\u7528 <code>state.range(x)</code> \u6765\u6307\u660e\u7b2c<code>x</code>\u4e2a\u53c2\u6570\uff1b\u4f20\u5165\u591a\u4e2a\u53c2\u6570\u65f6(\u5982\u4e09\u4e2a)\u7c7b\u4f3c\uff1a <code>Arg({1, \"2\", 3})</code></li> </ul> </li> <li> <p>\u9632\u6b62\u7f16\u8bd1\u5668\u4f18\u5316\uff1a</p> <p>\u4f7f\u7528<code>benchmark::DoNotOptimize()</code></p> <pre><code>std::uint64_t FibonacciIter(std::uint64_t number) {\nint pre{1}, cur{1}, tmp{};\nfor (size_t i = 1; i &lt; number; i++) {\nbenchmark::DoNotOptimize(tmp = cur);\nbenchmark::DoNotOptimize(cur += pre);\nbenchmark::DoNotOptimize(pre = tmp);\n}\nreturn cur;\n}\n</code></pre> </li> <li> <p>\u4f7f\u7528 <code>Unit</code> \u6307\u5b9a\u8bfb\u6570\u5355\u4f4d\uff1a</p> <pre><code>BENCHMARK(FibonacciIter)\n-&gt;Unit(benchmark::kMillisecond)\n-&gt;RangeMultiplier(1 &lt;&lt; 1)\n-&gt;Range(1ll, 1ll &lt;&lt; 7);\n</code></pre> </li> </ul>"},{"location":"cpp/epoll.html","title":"Epoll","text":"<p>Ref:</p> <ul> <li>\u539f\u6587\uff1aThe method to epoll\u2019s madness</li> <li>epoll \u539f\u7406\u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff1f - \u77e5\u4e4e (zhihu.com)</li> </ul> <p>epoll\u662fLinux\u7279\u6709\u7684\u6784\u9020\u3002\u5b83\u5141\u8bb8\u5355\u4e2a\u8fdb\u7a0b\u76d1\u89c6\u591a\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5e76\u5728\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u80fd\u51fa\u73b0I/O\u65f6\u83b7\u5f97\u901a\u77e5\u2014\u2014\u8fb9\u7f18\u89e6\u53d1\u6216\u6c34\u5e73\u89e6\u53d1\u901a\u77e5\u3002\u5728\u6df1\u5165\u4e86\u89e3epoll\u7684\u672c\u8d28\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u770b\u770b\u5b83\u7684\u8bed\u6cd5\u3002</p>"},{"location":"cpp/epoll.html#the-syntax-of-epoll","title":"The syntax of epoll","text":"<p>\u4e0e<code>poll</code>\u4e0d\u540c\uff0cepoll\u672c\u8eab\u4e0d\u662f\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u3002\u5b83\u662f\u4e00\u79cd\u5185\u6838\u6570\u636e\u7ed3\u6784\uff0c\u5141\u8bb8\u8fdb\u7a0b\u5728\u591a\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e0a\u8fdb\u884cI/O\u590d\u7528\u3002</p> <p></p> <p>\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u901a\u8fc7\u4e09\u4e2a\u7cfb\u7edf\u8c03\u7528\u6765\u521b\u5efa\u3001\u4fee\u6539\u548c\u5220\u9664\uff1a</p> <ol> <li>epoll_create</li> </ol> <p>epoll\u5b9e\u4f8b\u662f\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528<code>epoll_create</code>\u521b\u5efa\u7684\uff0c\u5b83\u5c06\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u8fd4\u56de\u7ed9epoll\u5b9e\u4f8b\u3002<code>epoll_create</code>\u7684\u7b7e\u540d\u5982\u4e0b:</p> <pre><code>#include &lt;sys/epoll.h&gt;\nint epoll_create(int size);\n</code></pre> <p><code>size</code>\u53c2\u6570\u5411\u5185\u6838\u8868\u660e\u4e00\u4e2a\u8fdb\u7a0b\u5e0c\u671b\u76d1\u89c6\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u6700\u5927\u503c\uff0c\u8fd9\u6709\u52a9\u4e8e\u5185\u6838\u51b3\u5b9aepoll\u5b9e\u4f8b\u7684\u5927\u5c0f\uff1b\u4f46\u662f\u4eceLinux 2.6.8 \u5f00\u59cb\u8fd9\u4e2a\u503c\u88ab\u5ffd\u7565\u6389\uff0c\u56e0\u4e3aepoll\u6570\u636e\u7ed3\u6784\u4f1a\u968f\u7740\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u6dfb\u52a0\u6216\u5220\u9664\u800c\u52a8\u6001\u8c03\u6574\u5927\u5c0f\u3002\u4f46\u4e3a\u4e86\u5411\u524d\u517c\u5bb9<code>size</code>\u4ecd\u7136\u9700\u8981\u5927\u4e8e0\u3002</p> <p><code>epoll_create</code>\u8ba9\u5185\u6838\u4ea7\u751f\u4e00\u4e2aepoll \u5b9e\u4f8b\u5e76\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u8fd9\u4e2a\u7279\u6b8a\u7684\u63cf\u8ff0\u7b26\u5c31\u662fepoll\u5b9e\u4f8b\u7684\u53e5\u67c4\uff0c\u540e\u9762\u7684\u4e24\u4e2a\u63a5\u53e3\u90fd\u4ee5\u5b83\u4e3a\u4e2d\u5fc3(\u5373<code>epfd</code>\u5f62\u53c2)\u3002\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u5411epoll\u5b9e\u4f8b\u6dfb\u52a0\u3001\u5220\u9664\u6216\u4fee\u6539\u5b83\u5e0c\u671b\u76d1\u89c6I/O\u7684\u5176\u4ed6\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002</p> <p></p> <p>\u8fd8\u6709\u4e00\u4e2a\u7c7b\u4f3c\u7684\u7cfb\u7edf\u8c03\u7528<code>epoll_create1</code>\uff0c\u7b7e\u540d\u5982\u4e0b:</p> <pre><code>int epoll_create1(int flags);\n</code></pre> <p><code>flags</code>\u53c2\u6570\u53ef\u4ee5\u662f<code>0</code>\u6216<code>EPOLL_CLOEXEC</code></p> <ul> <li> <p>\u5f53\u8bbe\u7f6e\u4e3a0\u65f6\uff0c<code>epoll_create1</code>\u7684\u884c\u4e3a\u4e0e<code>epoll_create</code>\u76f8\u540c\u3002</p> </li> <li> <p>\u5f53\u8bbe\u7f6e\u4e86<code>EPOLL_CLOEXEC</code>\u6807\u5fd7\u65f6\uff0c\u7531\u5f53\u524d\u8fdb\u7a0b<code>fork</code>\u51fa\u7684\u4efb\u4f55\u5b50\u8fdb\u7a0b\u90fd\u5c06\u5728<code>execs</code>\u4e4b\u524d\u5173\u95edepoll\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u56e0\u6b64\u5b50\u8fdb\u7a0b\u5c06\u4e0d\u518d\u6709\u8bbf\u95eeepoll\u5b9e\u4f8b\u7684\u6743\u9650\u3002</p> </li> </ul> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a\u4e0eepoll\u5b9e\u4f8b\u5173\u8054\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u9700\u8981\u901a\u8fc7<code>close()</code>\u7cfb\u7edf\u8c03\u7528\u6765\u91ca\u653e\u3002\u591a\u4e2a\u8fdb\u7a0b\u53ef\u80fd\u6301\u6709\u540c\u4e00\u4e2aepoll\u5b9e\u4f8b\u7684\u63cf\u8ff0\u7b26\uff0c\u56e0\u4e3a\uff0c\u6bd4\u65b9\u8bf4\u8fdb\u7a0b\u8c03\u7528\u6ca1\u6709\u8bbe\u7f6e<code>EPOLL_CLOEXEC</code>\u7684<code>epoll_create1()</code>\uff0c<code>fork</code>\u5c06\u628a\u63cf\u8ff0\u7b26\u590d\u5236\u5230\u5b50\u8fdb\u7a0b\u4e2d\u3002\u5f53\u6240\u6709\u8fd9\u4e9b\u8fdb\u7a0b\u90fd\u5c06\u5b83\u4eec\u7684epoll\u63cf\u8ff0\u7b26\u653e\u5f03\u65f6(\u901a\u8fc7\u8c03\u7528close()\u6216\u9000\u51fa)\uff0c\u5185\u6838\u5c06\u9500\u6bc1epoll\u5b9e\u4f8b\u3002</p> <p>\u8c03\u7528<code>epoll_create</code>\u65f6\uff0c\u5185\u6838\u9664\u4e86\u5e2e\u6211\u4eec\u5728epoll\u6587\u4ef6\u7cfb\u7edf\u91cc\u5efa\u4e86\u4e2afile\u7ed3\u70b9\uff0c\u5728\u5185\u6838cache\u91cc\u5efa\u4e86\u4e2a\u7ea2\u9ed1\u6811\u7528\u4e8e\u5b58\u50a8\u4ee5\u540e<code>epoll_ctl</code>\u4f20\u6765\u7684<code>fd</code>\u5916\uff0c\u8fd8\u4f1a\u518d\u5efa\u7acb\u4e00\u4e2alist\u94fe\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u51c6\u5907\u5c31\u7eea\u7684\u4e8b\u4ef6.</p> <ol> <li>epoll_ctl</li> </ol> <p>\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528<code>epoll_ctl()</code>\u5411epoll\u5b9e\u4f8b\u6dfb\u52a0\u5b83\u60f3\u8981\u76d1\u89c6\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 / \u5220\u9664\u5b83\u4e0d\u518d\u60f3\u76d1\u89c6\u7684\u63cf\u8ff0\u7b26 / \u4fee\u6539\u76d1\u89c6\u6761\u4ef6(\u7c7b\u4f3c<code>select</code>\u5bf9\u5e94\u7684<code>FD_SET</code>\u548c<code>FD_CLR</code>)\u3002\u6ce8\u518c\u5230epoll\u5b9e\u4f8b\u7684\u6240\u6709\u6587\u4ef6\u63cf\u8ff0\u7b26\u7edf\u79f0\u4e3aepoll set\u6216interest list</p> <p></p> <p>\u5728\u4e0a\u56fe\u4e2d\uff0c\u8fdb\u7a0b483\u5411epoll\u5b9e\u4f8b\u6ce8\u518c\u4e86\u6587\u4ef6\u63cf\u8ff0\u7b26fd1\u3001fd2\u3001fd3\u3001fd4\u548cfd5\u3002\u8fd9\u662f\u8be5\u7279\u5b9aepoll\u5b9e\u4f8b\u7684epoll set\u6216\u79f0\u4f5cinterest list\u3002\u968f\u540e\uff0c\u5f53\u4efb\u4f55\u5df2\u6ce8\u518c\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u53d8\u4e3aready\u72b6\u6001\u65f6\uff0c\u5c31\u8ba4\u4e3a\u5b83\u4eec\u5728\u5c31\u7eea\u5217\u8868(ready list)\u4e2d\u2014\u2014ready list\u662finterest list\u7684\u5b50\u96c6\uff1a</p> <p></p> <p><code>epoll_ctl</code>\u7b7e\u540d\u5982\u4e0b:</p> <pre><code>#include &lt;sys/epoll.h&gt;\nint epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);\n</code></pre> <ul> <li> <p><code>epfd</code>\uff0c\u662f<code>epoll_create</code>\u8fd4\u56de\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5b83\u5728\u5185\u6838\u4e2d\u6807\u8bc6epoll\u5b9e\u4f8b</p> </li> <li> <p><code>fd</code>\uff0c\u662f\u6211\u4eec\u60f3\u8981\u6dfb\u52a0\u5230epoll set / interest list\u4e2d\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26</p> </li> <li> <p><code>op</code>\uff0c\u6307\u8981\u5bf9\u6587\u4ef6\u63cf\u8ff0\u7b26fd\u6267\u884c\u7684\u64cd\u4f5c\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u652f\u6301\u4e09\u79cd\u64cd\u4f5c\uff1a</p> <ul> <li>Register fd \uff0c<code>EPOLL_CTL_ADD</code>\u5411<code>interest list</code>\u6dfb\u52a0\u4e00\u4e2a\u9700\u8981\u76d1\u89c6\u7684\u63cf\u8ff0\u7b26</li> <li>Delete/ Deregister fd\uff0c<code>EPOLL_CTL_DEL</code>\u4ece<code>interest list</code>\u4e2d\u5220\u9664\u4e00\u4e2a\u63cf\u8ff0\u7b26\u3002\u5982\u679c\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u88ab\u6dfb\u52a0\u5230\u591a\u4e2aepoll\u5b9e\u4f8b\u4e2d\uff0c\u90a3\u4e48\u5173\u95ed\u5b83\u5c06\u4ece\u6dfb\u52a0\u5b83\u7684\u6240\u6709epoll\u5174\u8da3\u5217\u8868\u4e2d\u5220\u9664\u5b83\u3002</li> <li>Modify\uff0c<code>EPOLL_CTL_MOD</code>\u5bf9<code>interest list</code>\u4e2d\u4e00\u4e2a\u63cf\u8ff0\u7b26\u76d1\u542c\u4e8b\u4ef6\u8fdb\u884c\u4fee\u6539</li> </ul> <p></p> </li> <li> <p><code>event</code>\uff0c\u662f\u4e00\u4e2a\u6307\u5411<code>epoll_event</code>\u7ed3\u6784\u4f53\u7684\u6307\u9488\uff0c\u8be5\u7ed3\u6784\u4f53\u5b58\u50a8\u4e86\u6211\u4eec\u5b9e\u9645\u60f3\u8981\u76d1\u89c6fd\u7684\u4e8b\u4ef6\u3002</p> </li> </ul> <p></p> <p><code>epoll_event</code>\u7ed3\u6784\u5982\u4e0b\uff1a</p> <pre><code>typedef union epoll_data {\nvoid *ptr; /* \u6307\u5411\u7528\u6237\u81ea\u5b9a\u4e49\u6570\u636e */\nint fd; /* \u6ce8\u518c\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 */\nuint32_t u32; /* 32-bit integer */\nuint64_t u64; /* 64-bit integer */\n} epoll_data_t;\n\nstruct epoll_event {\nuint32_t events; /* \u63cf\u8ff0epoll\u4e8b\u4ef6 */\nepoll_data_t data; /* \u89c1\u4e0a\u9762\u7684\u7ed3\u6784\u4f53 */\n};\n</code></pre> <ul> <li><code>data</code>\u57df\u662f\u552f\u4e00\u80fd\u7ed9\u51fa\u63cf\u8ff0\u7b26\u4fe1\u606f\u7684\u5b57\u6bb5\uff0c\u6240\u4ee5\u5728\u8c03\u7528<code>epoll_ctl</code>\u52a0\u5165\u4e00\u4e2a\u9700\u8981\u68c0\u6d4b\u7684\u63cf\u8ff0\u7b26\u65f6\uff0c\u5fc5\u987b\u8981\u5728\u6b64\u57df\u5199\u5165\u63cf\u8ff0\u7b26\u76f8\u5173\u4fe1\u606f</li> <li><code>events</code>\u57df\u662f<code>bit mask</code>\uff0c\u63cf\u8ff0\u4e00\u7ec4<code>epoll</code>\u4e8b\u4ef6\uff0c\u5728<code>epoll_ctl</code>\u8c03\u7528\u4e2d\u89e3\u91ca\u4e3a\uff1a\u63cf\u8ff0\u7b26\u6240\u671f\u671b\u7684epoll\u4e8b\u4ef6\uff0c\u53ef\u591a\u9009\u3002\u9009\u9879\u5217\u5728\u679a\u4e3e<code>EPOLL_EVENTS</code>\u4e2d\uff0c\u5e38\u7528\u7684\u6709\uff1a<code>EPOLLIN</code>\u63cf\u8ff0\u7b26\u5904\u4e8e\u53ef\u8bfb\u72b6\u6001\uff0c<code>EPOLLOUT</code>\u63cf\u8ff0\u7b26\u5904\u4e8e\u53ef\u5199\u72b6\u6001\uff0c<code>EPOLLONESHOT</code>\u7b2c\u4e00\u6b21\u8fdb\u884c\u901a\u77e5\uff0c\u4e4b\u540e\u4e0d\u518d\u76d1\u6d4b\uff0c<code>EPOLLET</code>\u5c06epoll event\u901a\u77e5\u6a21\u5f0f\u8bbe\u7f6e\u6210edge triggered</li> </ul> <p>\u5728\u4f7f\u7528 epoll_ctl \u6ce8\u518c\u6bcf\u4e00\u4e2a<code>fd</code>\u7684\u65f6\u5019\uff0c\u5185\u6838\u4f1a\u505a\u5982\u4e0b\u4e09\u4ef6\u4e8b\u60c5\uff1a</p> <ol> <li>\u5206\u914d\u4e00\u4e2a\u7ea2\u9ed1\u6811\u8282\u70b9\u5bf9\u8c61 epitem\uff0c</li> <li>\u6dfb\u52a0\u7b49\u5f85\u4e8b\u4ef6\u5230<code>fd</code>\u7684\u7b49\u5f85\u961f\u5217\u4e2d\uff0c\u5e76\u7ed9\u5185\u6838\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u6ce8\u518c\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u544a\u8bc9\u5185\u6838\uff0c\u5982\u679c\u8fd9\u4e2a\u53e5\u67c4\u7684\u4e2d\u65ad\u5230\u4e86\uff0c\u5c31\u628a\u5b83\u653e\u5230<code>ready list</code>\u94fe\u8868\u91cc</li> <li> <p>\u5c06<code>epitem</code>\u63d2\u5165\u5230 epoll \u5bf9\u8c61\u7684\u7ea2\u9ed1\u6811\u91cc</p> </li> <li> <p>epoll_wait</p> </li> </ol> <p>\u7ebf\u7a0b\u901a\u8fc7\u8c03\u7528<code>epoll_wait</code>\u6765\u83b7\u77e5epoll\u5b9e\u4f8b\u7684interest list\u4e0a\u53d1\u751f\u7684\u4e8b\u4ef6\uff0c<code>epoll_wait</code>\u7cfb\u7edf\u8c03\u7528\u4f1a\u963b\u585e\uff0c\u76f4\u5230any of descriptors \u6ce8\u518c\u7684\u4e8b\u4ef6\u53d1\u751f(\u6216\u8ba1\u65f6\u5668\u8d85\u65f6)\u3002</p> <p><code>epoll_wait</code>\u7684\u7b7e\u540d\u5982\u4e0b:</p> <pre><code>#include &lt;sys/epoll.h&gt;\nint epoll_wait(int epfd, struct epoll_event *evlist, int maxevents, int timeout);\n</code></pre> <ul> <li><code>epfd</code>\uff0c\u662f<code>epoll_create</code>\u8fd4\u56de\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u6807\u8bc6epoll\u5b9e\u4f8b</li> <li><code>evlist</code>\u662f<code>epoll_event</code>\u7ed3\u6784\u7684\u6570\u7ec4\u3002<code>evlist</code>\u7531\u8c03\u7528\u8fdb\u7a0b\u5206\u914d\uff0c\u5f53<code>epoll_wait</code>\u8fd4\u56de\u65f6\uff0c\u8fd9\u4e2a\u6570\u7ec4\u5c06\u88ab\u4fee\u6539\uff0c\u4ee5\u8868\u793a\u5174\u8da3\u5217\u8868\u4e2d\u5904\u4e8e\u5c31\u7eea\u72b6\u6001\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u5b50\u96c6\u7684\u4fe1\u606f(\u8fd9\u79f0\u4e3a\u5c31\u7eea\u5217\u8868ready list)\u3002</li> <li><code>maxevents</code>\uff0c\u662f<code>evlist</code>\u7684\u957f\u5ea6</li> <li> <p><code>timeout</code>\uff0c\u6b64\u53c2\u6570\u7684\u884c\u4e3a\u4e0e<code>poll</code>\u6216<code>select</code>\u76f8\u540c\u3002\u8fd9\u4e2a\u503c\u6307\u5b9a\u4e86<code>epoll_wait</code>\u7cfb\u7edf\u8c03\u7528\u5c06\u963b\u585e\u591a\u957f\u65f6\u95f4:</p> <ul> <li> <p>\u8bbe\u7f6e\u4e3a0\u65f6\uff0c<code>epoll_wait</code>\u4e0d\u963b\u585e\uff0c\u5728\u68c0\u67e5<code>epfd</code>\u7684interest list\u4e2d\u54ea\u4e9b\u6587\u4ef6\u63cf\u8ff0\u7b26\u5904\u4e8e\u5c31\u7eea\u6001\u540e\u7acb\u5373\u8fd4\u56de</p> </li> <li> <p>\u8bbe\u7f6e\u4e3a-1\u65f6\uff0c<code>epoll_wait</code>\u5c06\u4e00\u76f4\u963b\u585e\uff0c\u76f4\u5230</p> </li> <li> <p><code>epfd</code>interest list\u4e2d\u6307\u5b9a\u76841\u4e2a\u6216\u591a\u4e2a\u63cf\u8ff0\u7b26\u5c31\u7eea\uff0c\u6216\u8005</p> </li> <li> <p>\u8c03\u7528\u88ab\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u65ad</p> </li> <li> <p>\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u6b63\u6570\u65f6\uff0c<code>epoll_wait</code>\u5c06\u963b\u585e,\u76f4\u5230</p> </li> <li> <p>\u5174\u8da3\u5217\u8868\u4e2d\u6307\u5b9a1\u4e2a\u6216\u591a\u4e2a\u63cf\u8ff0\u7b26epfd\u51c6\u5907\u597d\uff0c\u6216</p> </li> <li>\u8c03\u7528\u4e2d\u65ad\u4fe1\u53f7\u5904\u7406\u5668\uff0c\u6216</li> <li>\u8fbe\u5230\u6307\u5b9a\u7684\u8d85\u65f6\u7684\u65f6\u95f4(\u5355\u4f4d\uff1a\u6beb\u79d2)</li> <li> <p>\u8fd4\u56de\u503c\uff1a</p> </li> <li> <p>\u53d1\u751f\u9519\u8bef\u8fd4\u56de-1</p> </li> <li>\u5982\u679c\u8c03\u7528\u5728epoll set\u4e2d\u7684\u4efb\u4f55\u6587\u4ef6\u63cf\u8ff0\u7b26\u51c6\u5907\u5c31\u7eea\u4e4b\u524d\u8d85\u65f6\uff0c\u5219\u8fd4\u56de\u4ee3\u7801\u4e3a0</li> <li>\u5982\u679cepoll set\u4e2d\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u51c6\u5907\u597d\u4e86\uff0c\u90a3\u4e48\u8fd4\u56de\u7684\u4ee3\u7801\u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a<code>evlist</code>\u6570\u7ec4\u4e2d\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u603b\u6570\u3002\u7136\u540e\u68c0\u67e5<code>evlist</code>\u4ee5\u786e\u5b9a\u54ea\u4e9b\u4e8b\u4ef6\u53d1\u751f\u5728\u54ea\u4e9b\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e0a</li> </ul> </li> </ul> <p><code>epoll_wait</code>\u505a\u7684\u4e8b\u60c5\u4e0d\u590d\u6742\uff0c\u5f53\u5b83\u88ab\u8c03\u7528\u65f6\u5b83\u89c2\u5bdf<code>ready list</code>\u94fe\u8868\u91cc\u6709\u6ca1\u6709\u6570\u636e\u5373\u53ef\u3002\u6709\u6570\u636e\u5c31\u8fd4\u56de\uff0c\u6ca1\u6709\u6570\u636e\u5c31\u521b\u5efa\u4e00\u4e2a\u7b49\u5f85\u961f\u5217\u9879\uff0c\u5c06\u5176\u6dfb\u52a0\u5230 eventpoll \u7684\u7b49\u5f85\u961f\u5217\u4e0a\uff0c\u7136\u540e\u628a\u81ea\u5df1\u963b\u585e\u6389\u5c31\u5b8c\u4e8b\u3002</p> <p></p> <p>TODO:</p>"},{"location":"cpp/fork-safe.html","title":"Fork Safe","text":""},{"location":"cpp/fork-safe.html#_1","title":"\u95ee\u9898\u6240\u5728","text":"<p>fork\u548c\u591a\u7ebf\u7a0b\u4e00\u8d77\u4f7f\u7528\u6709\u65f6\u4f1a\u5f15\u8d77\u6b7b\u9501\u3002</p> <p><code>fork</code>\u7684\u884c\u4e3a\uff1a</p> <ul> <li> <p>\u628a\u7236\u8fdb\u7a0b\u6574\u4e2a\u865a\u62df\u5730\u5740\u7a7a\u95f4copy\u5230\u5b50\u8fdb\u7a0b\u4e2d(COW)\uff0c\u5305\u542b\u4e92\u65a5\u53d8\u91cf\u3001\u6761\u4ef6\u53d8\u91cf\u548c\u5176\u5b83\u7ebf\u7a0b\u5bf9\u8c61\u7684\u72b6\u6001\u3002</p> </li> <li> <p>\u5b50\u8fdb\u7a0b\u5728\u5355\u7ebf\u7a0b\u72b6\u6001\u4e0b\u88ab\u751f\u6210\u3002</p> <p>The child process is created with a single thread\u2014the one that called fork(). </p> </li> </ul> <p>\u4e0a\u8ff0\u4e24\u4e2a\u7279\u70b9\u5c31\u5f15\u8d77\u4e86<code>fork safe</code>\u95ee\u9898</p> <pre><code>// compile: g++ \u2010\u2010std=c++11 \u2010lpthread mutex_deadlock.cpp\n// execute: ./a.out\n#include &lt;pthread.h&gt;\n#include &lt;time.h&gt;\n#include &lt;unistd.h&gt;\nusing namespace std;\npthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;\nvoid* doit(void*) {\n    pthread_mutex_lock(&amp;mutex);\n    struct timespec ts = {20, 0};\n    nanosleep(&amp;ts, 0);\n    pthread_mutex_unlock(&amp;mutex);\n    return 0;\n}\nint main(void) {\n    pthread_t t;\n    pthread_create(&amp;t, nullptr, doit, nullptr);\n    if (fork() == 0) {\n        doit(nullptr);\n        return 0;\n    }\n    pthread_join(t, 0);\n    return 0;\n}\n</code></pre> <p>\u9996\u5148 <code>pthread_create()</code> \u521b\u5efa\u4e00\u4e2a\u5b50\u7ebf\u7a0b\u3002\u5728\u5b50\u7ebf\u7a0b\u91cc\uff0c<code>doit()</code> \u51fd\u6570\u5bf9\u5168\u5c40\u4e92\u65a5\u91cf\u52a0\u9501\uff0csleep 20 \u79d2\u540e\u91ca\u653e\u3002\u800c\u540e\uff0c\u4e0e\u5b50\u7ebf\u7a0b\u540c\u65f6\u8fdb\u884c\u7684\uff0c\u5728\u4e3b\u7ebf\u7a0b\u4e2d\uff0c\u6211\u4eec\u8c03\u7528 <code>fork()</code> \u51fd\u6570\uff0c\u521b\u5efa\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u3002\u5e76\u4e14\uff0c\u5728\u5b50\u8fdb\u7a0b\u91cc\uff0c\u6211\u4eec\u4e5f\u8c03\u7528 <code>doit()</code> \u51fd\u6570\uff0c\u5c1d\u8bd5\u83b7\u53d6\u4e92\u65a5\u91cf\u3002\u7ed3\u679c\u662f\u5b50\u8fdb\u7a0b\u65e0\u6cd5\u83b7\u5f97mutex\uff0c\u5f62\u6210\u6b7b\u9501\u3002</p> <p>\u8fd9\u662f\u56e0\u4e3a\u4e3b\u7ebf\u7a0b<code>fork</code>\u51fa\u5b50\u8fdb\u7a0b\u7684\u65f6\u5019\uff0c\u628a<code>mutex</code>\u4e5f\u4e00\u5e76\u590d\u5236(\u4e0a\u9501\u72b6\u6001)\uff0c\u4f46\u662f<code>fork</code>\u53ea\u590d\u5236\u4e3b\u7ebf\u7a0b\uff0c\u4e0d\u590d\u5236\u5b50\u7ebf\u7a0b\uff0c\u5f53\u4e3b\u8fdb\u7a0b\u7684\u5b50\u7ebf\u7a0b\u91ca\u653e\u9501\u7684\u65f6\u5019\uff0c\u5e76\u4e0d\u4f1a\u5bf9\u5b50\u8fdb\u7a0b\u7684mutex\u9020\u6210\u5f71\u54cd\uff0c\u5b50\u8fdb\u7a0b\u7684mutex\u4ecd\u7136\u5904\u4e8e\u4e0a\u9501\u72b6\u6001\uff0c\u4e14\u6ca1\u6709\u673a\u4f1a\u5f97\u5230\u91ca\u653e\uff0c\u4ece\u800c\u9020\u6210\u6b7b\u9501\u3002</p> <p>\u50cf\u8fd9\u91cc\u7684<code>doit</code>\u51fd\u6570\u90a3\u6837\u7684\uff0c\u5728\u591a\u7ebf\u7a0b\u91cc\u56e0\u4e3afork\u800c\u5f15\u8d77\u95ee\u9898\u7684\u51fd\u6570,\u6211\u4eec\u628a\u5b83\u53eb \u505a\u201dfork-unsafe\u51fd\u6570\u201d.\u53cd\u4e4b,\u4e0d\u80fd\u5f15\u8d77\u95ee\u9898\u7684\u51fd\u6570\u53eb\u505a\u201dfork-safe\u51fd\u6570\u201d.\u867d\u7136\u5728\u4e00\u4e9b\u5546\u7528\u7684UNIX\u91cc\uff0c\u6e90\u4e8eOS\u63d0\u4f9b\u7684\u51fd\u6570(\u7cfb\u7edf\u8c03\u7528),\u5728\u6587\u6863\u91cc\u6709<code>fork-safety</code>\u7684\u8bb0\u8f7d\uff0c\u4f46\u662f\u5728 Linux(<code>glibc</code>)\u91cc\u5f53\u7136\u4e0d\u4f1a\u88ab\u8bb0\u8f7d.\u5373\u4f7f\u5728POSIX\u91cc\u4e5f\u6ca1\u6709\u7279\u522b\u7684\u89c4\u5b9a\uff0c\u6240\u4ee5\u90a3\u4e9b\u51fd\u6570\u662ffork-safe\u7684\uff0c\u51e0\u4e4e\u4e0d\u80fd\u5224\u522b.\u4e0d\u660e\u767d\u7684\u8bdd\uff0c\u4f5c\u4e3aunsafe\u8003\u8651\u7684\u8bdd\u4f1a\u6bd4\u8f83\u597d\u4e00\u70b9\u5427.</p> <p><code>malloc</code>\u51fd\u6570\u5c31\u662f\u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u3002<code>malloc</code>\u662f<code>thread safe</code>\uff0c\u5176\u5206\u914d\u5185\u5b58\u7684\u65f6\u5019\u4f1a\u5148\u5c1d\u8bd5\u83b7\u5f97\u5e76\u52a0\u9501\u3002\u56e0\u6b64\u5982\u679c\u5b50\u7ebf\u7a0b\u4e2d\u8fdb\u884c<code>malloc</code>\u65f6\uff0c\u4e3b\u7ebf\u7a0b\u6070\u597d\u8fdb\u884c\u4e86<code>fork</code>\uff0c\u5219\u4f1a\u9020\u6210\u6b7b\u9501\u3002</p>"},{"location":"cpp/fork-safe.html#_2","title":"\u5e94\u5bf9\u65b9\u6cd5","text":"<p>\u5f53\u7136\u4e5f\u6709\u76f8\u5e94\u7684\u5e94\u5bf9\u63aa\u65bd\uff0c\u90a3\u5c31\u662f\u5728<code>fork</code>\u4e4b\u540e\u9a6c\u4e0a\u8c03\u7528<code>exec</code>\u51fd\u6570\u3002\u628a\u539f\u672c\u5b50\u8fdb\u7a0b\u5e94\u8be5\u505a\u7684\u4e8b\u60c5\u5199\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u7a0b\u5e8f\uff0c\u7f16\u8bd1\u6210\u53ef\u6267\u884c\u7a0b\u5e8f\u540e\u7531exec\u51fd\u6570\u6765\u8c03\u7528\u3002\u56e0\u4e3a<code>exec</code>\u65cf\u7684\u51fd\u6570\u4f1a\u6e05\u7a7a\u5185\u5b58\uff0c\u56e0\u6b64\u907f\u514d\u4e86\u4e0a\u8ff0\u95ee\u9898\u3002\u4f46\u662f?</p> <p>TODO:</p>"},{"location":"cpp/move.html","title":"Move","text":""},{"location":"cpp/move.html#lvalues-and-rvalues","title":"Lvalues and Rvalues","text":"<p>Ref:</p> <ul> <li>Move semantics in C++ and Rust: The case for destructive moves</li> <li>MS: How to write a move constructor and move assignment operator</li> </ul> <p>\u5728 C++ \u4e2d\uff0c\u6bcf\u4e2a\u8868\u8fbe\u5f0f\u4e0d\u4ec5\u6709\u4e00\u4e2atype\uff0c\u8fd8\u6709\u4e00\u4e2avalue category\u3002\u6ce8\u610f\u8fd9\u4e24\u8005\u662f\u4e0d\u540c\u7684\u6982\u5ff5\uff0c\u4e00\u4e2atype\u4e3a rvalue reference (T&amp;&amp;)\u7684\u503c\uff0c\u5b83\u7684value category\u53ef\u80fd\u662f\u5de6\u503c\u4e5f\u53ef\u80fd\u662f\u53f3\u503c\u3002 cpp\u4e2d\u6709\u4e09\u4e2a\u4e3b\u8981\u7684value category\u548c\u4e24\u4e2a\u6df7\u5408\u7c7b\u578bvalue category\u3002\u6bcf\u4e2a\u8868\u8fbe\u5f0f\u90fd\u6709\u4e00\u4e2a\u4e3b\u8981\u7684value category\uff0c\u5b83\u51b3\u5b9a\u4e86\u8bed\u8a00\u5c06\u5982\u4f55\u5904\u7406\u5b83\u4e0e\u5176\u4ed6\u8868\u8fbe\u5f0f\u7684\u5173\u7cfb\u3002</p> <ul> <li>lvalue: \u7b80\u5355\u5730\u8bf4\uff0c lvalue \u662f\u4e00\u4e2a\u53d8\u91cf\uff1b\u6709\u540d\u5b57\uff0c\u53ef\u4ee5\u53d6\u5185\u5b58\u5730\u5740</li> <li>xvalue: \u5c31\u50cf\u4e00\u4e2a lvalue\uff0c\u4f46\u662f\u6211\u4eec\u58f0\u660e\u8fd9\u4e2a\u53d8\u91cf\u62e5\u6709\u7684\u8d44\u6e90\u53ef\u4ee5\u8f6c\u79fb\u7ed9\u4e00\u4e2a\u65b0\u7684\u6240\u6709\u8005</li> <li>prvalue: \u6ca1\u6709\u540d\u79f0\u7684\u4e34\u65f6\u503c\uff0c\u65e0\u6cd5\u53d6\u5730\u5740</li> <li>glvalue (mixed) is either an lvalue or an xvalue.</li> <li>rvalue (mixed) is either an xvalue or a prvalue.</li> </ul> <pre><code>auto i = std::string{\"value categories\"};\n// `i` is an lvalue\n// `std::move(i)` is an xvalue\n// `static_cast&lt;std::string&amp;&amp;&gt;(i)` is an xvalue\n// `std::string{\"value categories\"}` is a prvalue (pure rvalue)\n</code></pre>"},{"location":"cpp/move.html#rvalue-reference","title":"Rvalue Reference","text":"<p>\u987e\u540d\u601d\u4e49\uff0crvalue reference \u662f\u6307\u5411rvalue\u7684\u5f15\u7528\u3002</p> <p>\u901a\u8fc7\u53f3\u503c\u5f15\u7528\uff0c\u6211\u4eec\u53ef\u4ee5\u533a\u5206\u5de6\u503c\u548c\u53f3\u503c\uff1a\u56e0\u4e3a\u53f3\u503c\u5f15\u7528\u53ea\u80fd\u7ed1\u5b9a\u53f3\u503c(rvalue)\uff0c\u56e0\u6b64\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u7684\u53c2\u6570\u662f\u53f3\u503c\u5f15\u7528\uff0c\u90a3\u4e48\u4f20\u8fdb\u5230\u8be5\u51fd\u6570\u7684\u53c2\u6570\u4e00\u5b9a\u662f\u53f3\u503c\uff1a</p> <pre><code>void foo(string&amp;&amp; ss){\nbar(std::move(ss));\n}\n</code></pre> <p>\u4f8b\u5982\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u7684<code>foo</code>\uff0c\u8fd9\u91cc\u6700\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff0c\u6211\u4eec\u80fd\u591f\u77e5\u9053<code>ss</code>\u662f\u4e00\u4e2a\u53f3\u503c\u5f15\u7528\uff0c\u56e0\u6b64\u4efb\u4f55\u80fd\u7ed1\u5b9a\u5230\u5b83\u7684\u4e1c\u897f\uff08\u5373\u4efb\u4f55\u80fd\u4f20\u8fdb<code>foo</code>\u8fd9\u4e2a\u51fd\u6570\u7684\u53c2\u6570\uff09\u90fd\u662f\u53f3\u503c\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u4ece<code>ss</code>\u4e2d\u7a83\u53d6\u8d44\u6e90\uff08\u4f46\u662f\u8fd9\u91cc\u6ce8\u610f\uff0c\u5177\u540d\u53f3\u503c\u5f15\u7528\u7684\u503c\u7c7b\u522b\u662f\u5de6\u503c\uff0c\u56e0\u6b64\u9700\u8981<code>std::move</code>\u5c06<code>ss</code>\u4f5c\u4e3a\u53f3\u503c\u5bf9\u5f85\uff0c\u540e\u9762\u4f1a\u518d\u6b21\u63d0\u5230\uff09</p> <p>\u6700\u5e38\u89c1\u7684\u662f move constructor\uff0c\u8fd9\u91cc\u7528 copy constructor \u4f5c\u4e3a\u5bf9\u6bd4\uff1a</p> <pre><code>struct MyData {\nstd::string data1;\nstd::string data2;\nMyData() noexcept = default;\n// this is (basically) what the compiler will generate for you\n// never write these by hand unless you're managing resources\n// copy constructor\nMyData(const MyData&amp; other)\n: data1{other.data1}\n, data2{other.data1}\n{}\n// copy assignment\nMyData&amp; operator=(const MyData&amp; other) {\ndata1 = other.data1;\ndata2 = other.data2;\nreturn *this;\n}\n// move constructor\nMyData(MyData&amp;&amp; other) noexcept\n: data1{std::move(other.data1)}\n, data2{std::move(other.data1)}\n{}\n// move assignment\nMyData&amp; operator=(MyData&amp;&amp; other) noexcept {\ndata1 = std::move(other.data1);\ndata2 = std::move(other.data2);\nreturn *this;\n}\n};\n</code></pre> <p>\u7ba1\u7406\u8d44\u6e90\u7684\u7c7b\uff0c\u5982 <code>std::vector&lt;T&gt;</code>\u3001<code>std::string</code>\uff0c\u901a\u5e38\u4f1a\u5728\u5b83\u4eec\u7684\u79fb\u52a8\u6784\u9020\u51fd\u6570\u4e2d\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\u4e0d\u5206\u914d\u65b0\u5185\u5b58\uff0c\u800c\u662f\u4ece\u6b63\u5728\u6784\u9020\u7684 rvalue \u4e2d\u83b7\u53d6\u5df2\u7ecf\u5206\u914d\u7684\u7f13\u51b2\u533a\uff0c\u5e76\u7559\u4e0b\u4e00\u4e9b\u6709\u6548\u7684\u4ef7\u503c\u6765\u4ee3\u66ff\u5b83\u3002move assignment \u901a\u5e38\u4f1a\u7b80\u5355\u5730\u5c06\u5206\u914d\u7684\u8d44\u6e90\u4e0e\u53f3\u503c\u4ea4\u6362\uff0c\u5728\u8d4b\u503c\u8c03\u7528\u540e\u5b83\u4eec\u5c06\u88ab\u79fb\u51fa\u7684\u53f3\u503c\u91ca\u653e\u3002</p> <pre><code>template &lt;typename T&gt;\nclass almost_vector {\nT* buffer = nullptr;\nT* data_end = nullptr;\nT* buffer_end = nullptr;\npublic:\nalmost_vector() noexcept = default;\nalmost_vector(const almost_vector&amp; other)\n{\n// allocate buffer, copy elements\n}\nalmost_vector&amp; operator=(const almost_vector&amp; other) {\n// allocate new buffer, copy elements\n// swap the buffers\n// deallocate the old buffer\n}\n// the move constructor will do something like this\nalmost_vector(almost_vector&amp;&amp; other) noexcept\n{\nstd::swap(buffer, other.buffer);\nstd::swap(data_end, other.data_end);\nstd::swap(buffer_end, other.buffer_end);\n}\n// move assignment will do something like this\nalmost_vector&amp; operator=(almost_vector&amp;&amp; other) noexcept {\nstd::swap(buffer, other.buffer);\nstd::swap(data_end, other.data_end);\nstd::swap(buffer_end, other.buffer_end);\nreturn *this;\n}\n};\n</code></pre> <p>\ud83d\udca1rvalue reference\u6709\u4e0d\u76f4\u89c2\u7684\u4e00\u9762\uff1a</p> <ul> <li><code>std::move(data)</code> \u4ec5\u4ec5\u53ea\u5c06data\u7684\u7c7b\u578b\u5f3a\u5236\u8f6c\u6362\u4e3a<code>T&amp;&amp;</code>\uff1b\u4e0d\u8981\u60f3\u8c61<code>std::move()</code>\u4f1a\u9500\u6bc1<code>data</code>\u6216\u8005\u4fee\u6539data\u7684\u5185\u5b58\u7b49\u7b49</li> <li> <p>\u5177\u540d\u53f3\u503c\u5f15\u7528\u662f\u5de6\u503c\uff1a<code>string&amp;&amp; s2 = std::move(s1)</code>\uff0c\u8fd9\u91cc<code>s2</code> \u7684 value category \u662f lvalue\uff1b\u5982\u679c\u6709\u5982\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>auto s1 = string{\"123\"};\nstring&amp;&amp; s2 = std::move(s1);\nauto s3 = s2; // \u8fd9\u91cc\u8c03\u7528\u7684\u662f copy constructor\n</code></pre> <p>\u5982\u4ee3\u7801\u4e2d\u6ce8\u91ca\u6240\u793a\uff0c\u7b2c\u4e09\u884c\u5c06\u4f1a\u8c03\u7528<code>std::string</code>\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u56e0\u4e3a\u8fd9\u91cc\u7684<code>s2</code>\u867d\u7136\u503c\u7c7b\u578b\u662f\u53f3\u503c\u5f15\u7528\uff0c\u4f46\u5b83\u7684\u503c\u7c7b\u522b\u662f\u5de6\u503c\uff0c\u6839\u636eMove constructors\u4e2d Note\u4e00\u8282\uff08\u5982\u4e0b\uff09\uff0c\u6b64\u65f6\u4f1a\u9009\u62e9copy constructor</p> <p>If both copy and move constructors are provided and no other constructors are viable, overload resolution selects the move constructor if the argument is an rvalue of the same type (an xvalue such as the result of std::move or a prvalue such as a nameless temporary (until C++17)), and selects the copy constructor if the argument is an lvalue (named object or a function/operator returning lvalue reference). - \u53f3\u503c\u5f15\u7528\u53ea\u80fd\u7ed1\u5b9a\u53f3\u503c\uff0c\u5de6\u503c\u5f15\u7528(non-const)\u53ea\u80fd\u7ed1\u5b9a\u5de6\u503c\uff0cconst lvalue reference\u65e2\u53ef\u4ee5\u7ed1\u5b9a\u5de6\u503c\uff0c\u53c8\u53ef\u4ee5\u7ed1\u5b9a\u53f3\u503c\uff1bc++ - Why is it possible to pass an rvalue by const lvalue reference? - Stack Overflow</p> <pre><code>string s{\"abc\"};\nstring&amp; s1 = std::move(s);  // error! std::move(s) is xvalue\nstring&amp; s2 = string{\"123\"}; // error! string{\"123\"} is prvalue\nstring&amp;&amp; s3 = s;    // error! s is lvalue\nconst string&amp; s4 = string{\"123\"};  // ok\nconst string&amp; s5 = s;              // ok\nconst string&amp; s6 = std::move(s);   // ok\n</code></pre> </li> </ul> <p>\u9664\u4e86lvalue reference\u548crvalue reference\u4e4b\u5916\uff0cC++ \u4e2d\u8fd8\u5b58\u5728\u7b2c\u4e09\u79cd\u5f15\u7528\uff1athe forwarding reference\u3002\u5728\u6a21\u677f\u51fd\u6570\u4e2d\uff0c<code>T&amp;&amp;</code> \u6210\u4e3a\u8f6c\u53d1\u5f15\u7528\u800c\u4e0d\u662f\u53f3\u503c\u5f15\u7528\uff0c\u53e6\u5916\uff0c<code>auto&amp;&amp;</code> \u59cb\u7ec8\u662f\u8f6c\u53d1\u5f15\u7528\u3002\u8f6c\u53d1\u5f15\u7528\u4fdd\u7559\u5b83\u4eec\u521d\u59cb\u5316\u65f6\u4f7f\u7528\u7684\u8868\u8fbe\u5f0f\u7684\u503c\u7c7b\u522b\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u4f20\u9012\u7ed9\u5176\u4ed6\u51fd\u6570\u65f6\u4fdd\u7559\u3002</p> <pre><code>std::string baz(std::string);\ntemplate &lt;typename T&gt;\nstruct Templated {\n// t is an rvalue reference\uff0c \u53ef\u4ee5\u60f3\u4e00\u4e0b\u4e3a\u4ec0\u4e48\ud83c\udf89\nvoid foo(T&amp;&amp; t) {}\n// u is a forwarding reference\ntemplate &lt;typename U&gt;\nvoid bar(U&amp;&amp; u) {\n// forward to another function\n// x is a forwarding reference\nauto&amp;&amp; x = baz(std::forward&lt;U&gt;(u));\n}\n};\n</code></pre> <p>\u66f4\u8be6\u7ec6\u7684\u5185\u5bb9\u89c1Perfect forwarding</p>"},{"location":"cpp/move.html#move_1","title":"Move \u7684\u8bbe\u8ba1","text":"<p>\u4e00\u4e2a\u6709\u8da3\u7684\u95ee\u9898\u662f\uff0cobject \u88ab move \u4e4b\u540e\uff0c\u5904\u4e8e\u4ec0\u4e48\u72b6\u6001\uff1f</p> <p>C++ \u6807\u51c6\u5e93\u9009\u62e9\u5c06\u79fb\u51fa\u7684\u53d8\u91cf\u4fdd\u6301\u5728\u6709\u6548\u4f46\u672a\u6307\u5b9a\u7684\u72b6\u6001(valid but unspecified state)\uff1b\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u91cd\u7528\u53d8\u91cf\uff0c\u6211\u4eec\u53ea\u662f\u4e0d\u80fd\u4f9d\u8d56\u5b83\u7684\u5185\u5bb9\u3002 </p> <p>\u79fb\u52a8\u7684\u53d8\u91cf\u5728 C++ \u4e2d\u79fb\u52a8\u540e\u4ecd\u7136\u53ef\u7528\u3002\u53d8\u91cf\u7684\u6790\u6784\u51fd\u6570\u5c06\u5728\u8fd9\u4e9b\u53d8\u91cf\u5230\u8fbe\u5176\u751f\u547d\u5468\u671f\u7ed3\u675f\u65f6\u8fd0\u884c\uff0c\u7528\u6237\u53ef\u4ee5\u4e3a\u5b83\u4eec\u8d4b\u503c\uff0c\u6216\u8c03\u7528\u5b83\u4eec\u7684\u4efb\u4f55\u6210\u5458\u51fd\u6570\u3002 </p> <p>\u5bf9\u4e8e\u7528\u6237\u58f0\u660e\u7684\u7c7b\u578b\uff0c\u552f\u4e00\u771f\u6b63\u7684\u8981\u6c42\u662f\u79fb\u51fa\u53d8\u91cf\u7684\u6790\u6784\u51fd\u6570\u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u4e0d\u4f1a\u5bf9\u7a0b\u5e8f\u7684\u5176\u4f59\u90e8\u5206\u9020\u6210\u4efb\u4f55\u95ee\u9898\u3002\u7c7b\u578b\u7684\u4efb\u4f55\u4e0d\u53d8\u91cf\u90fd\u53ef\u80fd\u88ab\u7834\u574f\uff0c\u5e76\u4e14\u5728\u5b83\u4eec\u4e0a\u8c03\u7528\u4efb\u4f55\u51fd\u6570\u90fd\u53ef\u80fd\u5bfc\u81f4\u672a\u5b9a\u4e49\u7684\u884c\u4e3a\uff0c\u6211\u4eec\u901a\u5e38\u4e0d\u505a\u8fd9\u4e9b\u4e8b\u60c5\u53ea\u662f\u7ea6\u5b9a\u4fd7\u6210\uff08\u548c\u65b9\u4fbf\uff09\u7684\u95ee\u9898\u3002</p> <pre><code>auto s    = \"123abc\"s;\nauto vec  = vector&lt;string&gt;{};\nvec.emplace_back(std::move(s));\n\n// \u5728move\u540e\uff0cs\u4ecd\u7136\u662f\u53ef\u7528\u7684\uff0c\u8fd9\u4e0erust\u975e\u5e38\u4e0d\u540c\n</code></pre> <p>\u5728Rust\u4e2d TODO:</p>"},{"location":"cpp/move.html#forwarding-reference","title":"Forwarding Reference","text":"<p>\u5982\u679c\u4e00\u4e2a\u7c7b\u578b\u5360\u4f4d\u7b26 P \u9700\u8981\u88ab\u7c7b\u578b\u63a8\u5bfc\uff0c\u90a3\u4e48<code>P&amp;&amp;</code> \u5c06\u6210\u4e3aC++ \u4e2d \u9664\u4e86 \u5de6\u503c\u5f15\u7528\u548c\u53f3\u503c\u5f15\u7528 \u4e4b\u5916\u7684\u53e6\u4e00\u79cd\u5f15\u7528\uff1a \u8f6c\u53d1\u5f15\u7528 forwarding reference</p> <p>\u4f8b\u5982\uff0c\u5728\u6a21\u677f\u51fd\u6570\u4e2d\uff0c<code>T&amp;&amp;</code> \u662f forwarding reference \u800c\u4e0d\u662f\u53f3\u503c\u5f15\u7528\uff1b \u7c7b\u4f3c\u5730\uff0c auto&amp;&amp; \u59cb\u7ec8\u662f\u4e00\u4e2a forwarding reference\u3002</p> <p>\u8f6c\u53d1\u5f15\u7528\u4fdd\u7559\u5b83\u4eec\u521d\u59cb\u5316\u65f6\u4f7f\u7528\u7684\u8868\u8fbe\u5f0f\u7684\u503c\u7c7b\u522b\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u4f20\u9012\u7ed9\u5176\u4ed6\u51fd\u6570\u65f6\u4fdd\u7559\uff0c\u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u88ab\u7ed1\u5b9a\u7684 value \u662f\u4e00\u4e2a \u53f3\u503c/\u53f3\u503c\u5f15\u7528\uff0c \u5219<code>T&amp;&amp;</code>\u6210\u4e3a\u4e00\u4e2a\u53f3\u503c\u5f15\u7528\uff0c\u5982\u679c\u88ab\u7ed1\u5b9a\u7684value\u662f\u4e00\u4e2a\u5de6\u503c/\u5de6\u503c\u5f15\u7528\uff0c\u5219<code>T&amp;&amp;</code> \u4f1a\u6210\u4e3a\u4e00\u4e2a\u5de6\u503c\u5f15\u7528\uff08\u52a0\u4e0aconst \u540c\u7406\uff09\u3002</p> <p>\u5f15\u7528\u6298\u53e0\u548c template argument deduction rules \u6784\u6210\u4e86\u8f6c\u53d1\u5f15\u7528\u7684\u8bed\u6cd5\u89c4\u5219\uff1a</p>"},{"location":"cpp/move.html#reference-collapsing","title":"\u5f15\u7528\u6298\u53e0(Reference collapsing)","text":"<p>\u5bf9\u53f3\u503c\u5f15\u7528\u7684\u53f3\u503c\u5f15\u7528\u6298\u53e0\u4e3a\u53f3\u503c\u5f15\u7528\uff0c\u6240\u6709\u5176\u4ed6\u7ec4\u5408\u5f62\u6210\u5de6\u503c\u5f15\u7528\uff1a</p> <pre><code>typedef int&amp;  lref;\ntypedef int&amp;&amp; rref;\nint n;\n\nlref&amp;  r1 = n; // type of r1 is int&amp;\nlref&amp;&amp; r2 = n; // type of r2 is int&amp;\nrref&amp;  r3 = n; // type of r3 is int&amp;\nrref&amp;&amp; r4 = 1; // type of r4 is int&amp;&amp;\n</code></pre> <p>\u56e0\u6b64\u5bf9\u4e8e\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>auto s          = \"123\"s;\nauto&amp; sr        = s;\nconst auto&amp; scr = s;\n\nauto&amp;&amp; r1 = s;               // string&amp;\nauto&amp;&amp; r2 = sr;              // string&amp;\nauto&amp;&amp; r3 = scr;             // const string&amp;\nauto&amp;&amp; r4 = \"123\"s;          // string&amp;&amp;\nauto&amp;&amp; r5 = std::move(s);    // string&amp;&amp;\n\n// T&amp;&amp; \u4e0e auto&amp;&amp; \u90fd\u662f \"\u8f6c\u53d1\u5f15\u7528\"\ntemplate&lt;typename T&gt;\nfoo(T&amp;&amp; arg){\nstatic_assert(std::same_as_v&lt;std::string, decltype(arg)&gt;);\n}\n// T&amp;&amp; \u4e0e auto&amp;&amp; \u540c\u7406\uff0c C++20 \u4e4b\u540e\u53ef\u4ee5\u66f4\u5e7f\u6cdb\u4f7f\u7528auto\u4ee3\u66ff\u6a21\u677f\u53c2\u6570\uff0c \u5373 \"bar\" \u4e0e \"foo\" \u7b49\u4ef7\nbar(auto&amp;&amp; arg){\nstatic_assert(std::same_as_v&lt;std::string, decltype(arg)&gt;);\n}\n</code></pre>"},{"location":"cpp/move.html#stdforawrd","title":"std::forawrd()","text":"<p>Forwarding Reference \u7684\u5e94\u7528\u573a\u666f\u4ec5\u5728\u6cdb\u578b\u7f16\u7a0b\u4e2d\uff1a</p> <p>\u5728\u6cdb\u578b\u7f16\u7a0b\u4e2d\u4e0e\u53c2\u6570\u5217\u8868\u7ed1\u5b9a\u7684\u53ef\u80fd\u662f\u5de6\u503c\u4e5f\u53ef\u80fd\u662f\u53f3\u503c\uff0c\u90a3\u4e48\u8fd9\u65f6\u5019\u6211\u4eec\u9700\u8981\u6709\u4e00\u79cd\u65b9\u5f0f\u80fd\u591f\u4fdd\u6301\u53c2\u6570\u7684\u503c\u8bed\u4e49\u8f6c\u53d1 \u7ed9\u5176\u4ed6\u7684\u51fd\u6570\u8c03\u7528\uff1a</p> <pre><code>class BigObj {\npublic:\nBigObj() = default;\nBigObj(unique_ptr&lt;int[]&gt; data, int len) : data_(std::move(data)), len_(len) {\ncout &lt;&lt; \"Create from raw\\n\";\n};\nBigObj(const BigObj&amp; rhs) {\ncout &lt;&lt; \"Copy constructor: const BigObj&amp;\\n\";\nlen_  = rhs.len_;\ndata_ = make_unique&lt;int[]&gt;(len_);\nmemcpy(data_.get(), rhs.data_.get(), len_);\n};\nBigObj(BigObj&amp;&amp; rhs) noexcept {\ncout &lt;&lt; \"Move constructor: BigObj&amp;&amp;\\n\";\nlen_ = rhs.len_;\ndata_.swap(rhs.data_);\n};\nBigObj&amp; operator=(const BigObj&amp; rhs) {\ncout &lt;&lt; \"Copy assignment: const BigObj&amp;\\n\";\nlen_  = rhs.len_;\ndata_ = make_unique&lt;int[]&gt;(len_);\nmemcpy(data_.get(), rhs.data_.get(), len_);\nreturn *this;\n};\nBigObj&amp; operator=(BigObj&amp;&amp; rhs) noexcept {\ncout &lt;&lt; \"Move assignment: BigObj&amp;&amp;\\n\";\nlen_ = rhs.len_;\ndata_.swap(rhs.data_);\nreturn *this;\n}\n\nprivate:\nunique_ptr&lt;int[]&gt; data_;\nint len_;\n};\n\ntemplate &lt;typename T, typename U&gt;\nconcept same_rcv = same_as&lt;remove_cvref_t&lt;T&gt;, U&gt;;\n\nclass A {\npublic:\ntemplate &lt;typename T, typename U, typename V&gt;\nrequires same_rcv&lt;T, BigObj&gt; &amp;&amp; same_as&lt;remove_cvref_t&lt;U&gt;, BigObj&gt; &amp;&amp;\nsame_as&lt;remove_cvref_t&lt;V&gt;, BigObj&gt;\nA(T&amp;&amp; v1, U&amp;&amp; v2, V&amp;&amp; v3) {\nv1_ = std::forward&lt;T&gt;(v1); // \u4f7f\u7528std::forward \u6839\u636e\u5165\u53c2\u7684value category \u8c03\u7528BigObj \u7684move or copy \u6784\u9020\nv2_ = std::forward&lt;U&gt;(v2); // \u4f7f\u7528std::forward \u6839\u636e\u5165\u53c2\u7684value category \u8c03\u7528BigObj \u7684move or copy \u6784\u9020\nv3_ = std::forward&lt;V&gt;(v3); // \u4f7f\u7528std::forward \u6839\u636e\u5165\u53c2\u7684value category \u8c03\u7528BigObj \u7684move or copy \u6784\u9020\n}\n\nprivate:\nBigObj v1_;\nBigObj v2_;\nBigObj v3_;\n};\n\nint main() {\nauto len    = 1024;\nauto buffer = make_unique_for_overwrite&lt;int[]&gt;(len);\n\nauto obj1    = BigObj(std::move(buffer), len);  // Create from raw\nauto obj2    = obj1;  // Copy constructor! Not copy assignment operator!\nauto obj3    = obj1;  // copy constructor too\nauto obj4    = obj1;  // copy constructor too\nBigObj&amp;&amp; tmp = std::move(obj4);\nauto obj5 = tmp;  // Copy constructor !!!!! (\u5177\u540d\u53f3\u503c\u5f15\u7528\u662f\u5de6\u503c)\n\nauto a = A(obj1, std::move(obj2), obj3); // [copy, move, copy] constructor\n}\n</code></pre>"},{"location":"cpp/profiler.html","title":"Profiler","text":"<p>\u6027\u80fd\u5206\u6790\u5de5\u5177\u7528\u4e8e\u5b9a\u4f4d\u7a0b\u5e8f\u6027\u80fd\u7684\u6d88\u8017\u70b9\uff0c\u65b9\u4fbf\u505a\u51fa\u7ec6\u81f4\u7684\u4f18\u5316\u3002 \u5e38\u89c1\u7684 profile \u5de5\u5177\u6709  Perf\u3001 gprof \u548c Valgrind \u7b49\u3002</p>"},{"location":"cpp/profiler.html#gprof","title":"gprof","text":"<p><code>gprof</code>\u662f\u4e00\u4e2a\u7528\u4e8eUnix\u7cfb\u7edf\u4e0b user-space code\u7684\u6027\u80fd\u5206\u6790\u5de5\u5177\u3002<code>gprof</code>\u9002\u5408\u4e8e\u67e5\u627e\u7528\u6237\u7ea7\u7a0b\u5e8f\u7684\u6027\u80fd\u74f6\u9888\uff0c\u5bf9\u4e8e\u5f88\u591a\u65f6\u95f4\u90fd\u5728\u5185\u6838\u6001\u6267\u884c\u7684\u7a0b\u5e8f\uff0c<code>gprof</code> \u4e0d\u9002\u5408\uff08syscalls, waiting for CPU or I/O waiting\u7b49\u4e0d\u4f1a\u88ab\u76d1\u63a7\u5230\uff09</p> <p>\u4f7f\u7528\u65b9\u6cd5\uff1a</p> <ol> <li>\u5728\u4f7f\u7528gcc(g++)\u7f16\u8bd1\u65f6\u52a0\u4e0a\u7f16\u8bd1\u9009\u9879<code>-pg</code>\u4f1a\u751f\u6210\u63d2\u6869\u4ee3\u7801\uff0c\u7528\u4e8e\u6536\u96c6\u51fd\u6570\u8c03\u7528\u6570\u636e\u3002</li> <li>\u5728\u94fe\u63a5\u65f6\u52a0\u4e0a\u94fe\u63a5\u9009\u9879<code>-pg</code>\u4f1a\u52a8\u6001\u94fe\u63a5\u5230<code>preofiler</code>\u5e93\uff0c\u5728\u4e8c\u8fdb\u5236\u8fd0\u884c\u65f6\u52a8\u6001\u91c7\u6837\u3002</li> <li>\u8fd0\u884c\u88ab\u63d2\u6869\u540e\u7684\u7a0b\u5e8f\uff0c\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4e2a<code>gmon.out</code>\u6587\u4ef6\uff0c\u4fdd\u5b58\u91c7\u6837\u6570\u636e\u4fe1\u606f\u3002</li> <li>\u4f7f\u7528\u5de5\u5177<code>gprof</code>(gcc toolchain\u4e2d\u7684\u4e00\u4e2a\u5de5\u5177)\u8fdb\u884c\u5206\u6790\uff0c\u4f1a\u751f\u6210\u4e00\u4e2a\u62a5\u544a\u7ed3\u679c\uff0c\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a</li> <li>the flat profile\uff1b\u5bf9\u4e8e\u6bcf\u4e2a\u51fd\u6570\uff0c\u7ed9\u51fa\u5176\u6267\u884c\u65f6\u95f4\u5360\u6bd4\uff0c\u5177\u4f53\u7684\u6267\u884c\u65f6\u95f4\uff0c\u88ab\u8c03\u7528\u6b21\u6570\u7b49\u4fe1\u606f\uff0c\u6392\u5e8f\u540e\u70ed\u70b9\u51fd\u6570\u5728\u6700\u4e0a\u65b9</li> <li>the call graph\uff1b\u5bf9\u4e8e\u6bcf\u4e2a\u51fd\u6570\uff0c\u663e\u793a\u51fa\u5176caller\u548ccallee</li> </ol>"},{"location":"cpp/profiler.html#cmake","title":"cmake\u96c6\u6210","text":"<p>\u5728\u9879\u76ee\u9876\u5c42cmake\u4e2d\u52a0\u5165\u5982\u4e0b\u4fe1\u606f\uff1a</p> <pre><code>if(USE_GPROF AND CMAKE_SYSTEM_NAME MATCHES \"Linux\" AND CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pg\")\nset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -pg\")\nset(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -pg\")\nmessage(STATUS \"gprof support added\")\nendif()\n</code></pre> <p>\u8fd9\u91cc\u4e0d\u4f7f\u7528\u66f4\u7ec6\u7c92\u5ea6\u7684<code>target_*</code>\u662f\u56e0\u4e3a\u5982\u679c\u4e00\u4e2a\u9879\u76ee\u7531<code>bin</code>\u548c<code>lib</code>\u4e24\u90e8\u5206\u7ec4\u6210\uff0c\u800c<code>bin</code>\u53c8\u4f9d\u8d56<code>lib</code>\uff0c\u4ec5\u5bf9<code>bin</code>\u63d2\u6869\uff0c\u800c\u4e0d\u5bf9<code>lib</code>\u63d2\u6869\uff0c\u4f1a\u5bfc\u81f4\u6700\u7ec8\u62a5\u544a\u7ed3\u679c\u4fe1\u606f\u6bd4\u8f83\u5c11\uff1b\u5f53\u7136\u5982\u679c\u4ec5\u5bf9\u67d0\u4e2a\u4e8c\u8fdb\u5236\u5355\u72ec\u5730profile\uff0c\u9700\u8981\u4f7f\u7528<code>target_*</code></p> <pre><code>if(USE_GPROF AND CMAKE_SYSTEM_NAME MATCHES \"Linux\" AND CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n    target_compile_options(${PROJECT_NAME} PRIVATE -pg)\n    target_link_options(${PROJECT_NAME} PRIVATE -pg)\n    target_compile_definitions(${PROJECT_NAME} PRIVATE USE_GPROF)\n    message(STATUS \"gprof support added\")\nendif()\n</code></pre> <p>\u5f53\u7136\u5982\u679c\u76f4\u63a5\u4f9d\u8d56\u5df2\u7ecf\u7f16\u8bd1\u597d\u7684\u5e93\u6587\u4ef6\uff0c\u65e0\u6cd5\u5bf9\u5e93\u8fdb\u884c\u63d2\u6869\uff08\u663e\u7136\u7684\uff09\uff1b</p> <p>build\u5f97\u5230\u53ef\u6267\u884c\u6587\u4ef6<code>bin-proj</code>\uff0c\u4f7f\u7528<code>gprof</code>\u5206\u6790\u91c7\u6837\u7ed3\u679c\u5f97\u5230\u6587\u5b57\u5206\u6790\u62a5\u544a\uff1a</p> <pre><code>gprof bin-proj gmon.out &gt; res\n</code></pre> <p></p> <p>\u5f97\u5230\u62a5\u544a\uff0c\u5176\u4e2d\u7684callgraph\u90e8\u5206\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p>"},{"location":"cpp/profiler.html#gperftools","title":"gperftools","text":"<p>gperftools\u662fgoogle\u5f00\u6e90\u7684profile\u5de5\u5177\u3002\u9002\u7528\u4e8eUnix\u5e73\u53f0\u4e0b\u7684\u7a0b\u5e8f\uff0c\u5728windows\u4e0a\u5de5\u4f5c\u5f88\u5dee\u3002</p> <p>\u4f7f\u7528\u65b9\u6cd5\uff1a</p> <ol> <li> <p>\u5b89\u88c5<code>google-perftools</code></p> </li> <li> <p>\u7a0b\u5e8f\u94fe\u63a5\u52a8\u6001\u5e93<code>-lprofiler</code>\uff08\u6216\u8005\u5728\u7b2c3\u6b65\u4e2d\u52a0\u4e0a\u73af\u5883\u53d8\u91cf<code>LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libprofiler.so</code>\uff09</p> </li> <li> <p>\u6267\u884c\u547d\u4ee4\uff1a</p> </li> </ol> <pre><code>CPUPROFILE=main.prof CPUPROFILE_FREQUENCY=1000 ./bin-proj\n</code></pre> <ol> <li>\u67e5\u770b\u5206\u6790\u7ed3\u679c\uff1a</li> </ol> <pre><code>google-pprof --svg bin-proj main.prof &gt; res.svg  # \u751f\u6210svg\u77e2\u91cf\u56fe\uff0c\u8fd8\u652f\u6301--pdf --text \u7b49\u683c\u5f0f\n</code></pre> <p>\u751f\u6210\u706b\u7130\u56fe(flame graph)</p> <p>\u4f9d\u8d56 brendangregg/FlameGraph: Stack trace visualizer (github.com)</p> <pre><code>google-pprof --collapsed bin-proj main.prof &gt; main.0.cbt    # \u4f7f\u7528 --collapsed \u8f93\u51fa\u751f\u6210flame graph\u6240\u9700\u8981\u7684\u4fe1\u606f\n~/download/FlameGraph/flamegraph.pl main.0.cbt &gt; main.flame.0.svg\n</code></pre>"},{"location":"cpp/profiler.html#cmake_1","title":"cmake\u96c6\u6210","text":"<p>cmake:gperftools\u6027\u80fd\u5206\u6790\u5de5\u5177find libprofiler \u811a\u672c\u66a8profiler\u7684\u9759\u6001\u8fde\u63a5\u95ee\u9898_10km\u7684\u535a\u5ba2-CSDN\u535a\u5ba2</p> <p>\u8239\u957f\u7684\u8d44\u6599\u5ba4 - gperftools\u4e00\u884c\u4e0d\u6539\uff0c\u591a\u94fe\u4e2a\u5e93\uff0c\u7a0b\u5e8f\u63d0\u901f40% (tiger2doudou.com)</p> <p>gperftools\u6ca1\u6709\u63d0\u4f9b\u5b98\u65b9\u7684\u7528\u4e8e\u67e5\u627eprofiler\u5e93\u7684cmake\u811a\u672c\uff0c\u6240\u4ee5\u5728\u57fa\u4e8ecmake\u7ba1\u7406\u7684\u9879\u76ee\u4e2d\u5982\u679c\u8981\u5728\u7cfb\u7edf\u67e5\u627elibprofiler\u5e93\u5c31\u5c31\u8981\u81ea\u5df1\u5199FindPROFILER.cmake\u811a\u672c\u3002</p> <p>\u5927\u4f53\u4e0a\u6765\u8bf4\uff0c\u9996\u5148\u901a\u8fc7<code>find_package</code>\uff08\u4f9d\u8d56\u7b2c\u4e09\u65b9\u811a\u672c\u6765\u5bfb\u627e\uff09\uff0c\u6216\u8005\u7b80\u5355\u7684\u81ea\u5df1\u5199\u4e00\u4e0b<code>find_library</code>\u7b49\uff0c\u786e\u8ba4\u4e00\u4e0b<code>libprofiler.so</code>\u7684\u5b58\u5728\u8def\u5f84\uff0c\u7136\u540e\u94fe\u63a5\u4e0a\u81ea\u5df1\u7684\u7a0b\u5e8f\u5373\u53ef\uff1b\u5982\u679c\u9700\u8981\u5bf9\u7279\u5b9a\u7684\u4ee3\u7801\u7247\u6bb5\u505aprofile\uff0c\u9700\u8981<code>google-perftools-dev</code>\uff08Ubuntu\u4e0a\u7684\u540d\u79f0\uff09\uff0c\u5728\u7a0b\u5e8f\u4e2d\u5f15\u5165<code>#include &lt;gperftools/profiler.h&gt;</code>\uff0c\u628a\u9700\u8981profile\u7684\u4ee3\u7801\u6bb5\u7528\u7279\u5b9a\u51fd\u6570\u5939\u8d77\u6765\uff0c\u66f4\u9ad8\u7ea7\u7684\u7528\u6cd5\u89c1\u5b98\u65b9\u6587\u6863Gperftools CPU Profiler\u3002</p> <p>\u5b98\u65b9\u6587\u6863\u63a8\u8350\u7684\u505a\u6cd5\u662f\u5728Dev\u8fc7\u7a0b\u4e2d\u59cb\u7ec8\u94fe\u63a5\u8be5\u5e93\uff0c\u65b9\u4fbf\u505aprofile\uff0c\u5728\u53d1\u5e03\u65f6\u53d6\u6d88\u94fe\u63a5\u5373\u53ef\u3002</p>"},{"location":"cpp/profiler.html#bonus","title":"bonus","text":"<p>\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0cgperftools\u4e0d\u4ec5\u5305\u542b\u4e86\u4e0a\u8ff0\u7684CPU profiler\uff0c\u8fd8\u5305\u542b\u4e86\u5927\u540d\u9f0e\u9f0e\u7684<code>tcmalloc</code>\uff0c\u4e00\u4e2aheap-profiler\uff0c\u4e00\u4e2aheap-checker\uff0c\u5177\u4f53\u6587\u6863\u53ef\u89c1Gperftools\u3002</p>"},{"location":"cpp/profiler.html#perf","title":"perf","text":"<p>Perf Wiki (kernel.org) Linux Perf \u6027\u80fd\u5206\u6790\u5de5\u5177\u53ca\u706b\u7130\u56fe\u6d45\u6790 - \u77e5\u4e4e (zhihu.com)</p> <p>Linux profiling with performance counters.\u5b83\u6db5\u76d6\u4e86\u4eceCPU\u5230\u8f6f\u4ef6\u5c42\u9762\u5404\u79cd\u65f6\u95f4\u7684\u76d1\u63a7\u8ffd\u8e2a\u80fd\u529b\uff0c\u975e\u5e38\u5f3a\u5927\u3002</p> <p>The userspace <code>perf</code> command present a simple to use interface with commands like:</p> <ul> <li><code>perf stat</code>: \u83b7\u53d6event\u8ba1\u6570</li> <li><code>perf record</code>: record events for later reporting</li> <li><code>perf report</code>: break down events by process, function, etc.</li> <li><code>perf annotate</code>: annotate assembly or source code with event counts</li> <li><code>perf top</code>: see live event count</li> <li><code>perf bench</code>: run different kernel microbenchmarks</li> </ul> <pre><code>perf list # \u67e5\u770bperf\u652f\u6301\u7684\u76d1\u63a7event\nperf report -i perf.data # \u67e5\u770btext\u5f62\u5f0f\u62a5\u544a\n</code></pre> <p>\u4f7f\u7528\u65b9\u6cd5</p> <pre><code># \u4e0b\u9762\u8fd9\u6761\u547d\u4ee4attach\u5230\u6307\u5b9apid\u7684\u8fdb\u7a0b\nperf record -F 500 -p $task_id -o perf.data -g sleep $time &amp;\nwait\n## \u53c2\u6570\n##record - Run a command and record its profile into perf.data\n##-F\uff0c--freq= \uff0cProfile at this frequency.\n##-p\uff0c --pid=\uff0cRecord events on existing process ID\n##-o\uff0c--output=\uff0cOutput file name.\n##-g\uff0c--call-graph\uff0cDo call-graph (stack chain/backtrace) recording.\n##sleep\uff0c\u91c7\u96c6\u65f6\u957f\uff0c\u5355\u4f4ds\n# \u6216\u8005\u76f4\u63a5\u8fd0\u884c\uff1a\nperf record -F 500 -g ./bin-proj\nperf report -i perf.data &gt; perf.report\n</code></pre> <p>\u751f\u6210\u706b\u7130\u56fe</p> <pre><code>perf script -i perf.data &gt; out.perf\n~/downloads/FlameGraph/stackcollapse-perf.pl out.perf &gt; out.floded\n~/downloads/FlameGraph/flamegraph.pl out.floded &gt; flame.bin.svg\n</code></pre>"},{"location":"cpp/ranges.html","title":"Ranges","text":"<p>C++20 \u5f15\u5165<code>ranges</code> library \u6765\u6e90\u4e8e <code>ranges-v3</code>\uff0c\u5b83\u662f\u7b97\u6cd5\u548c\u8fed\u4ee3\u5668\u5e93\u7684\u6269\u5c55\u548c\u6cdb\u5316\uff0c \u4f7f\u5b83\u4eec\u53ef\u7ec4\u5408\u4e14\u4e0d\u6613\u51fa\u9519\u3002</p> <p><code>ranges</code> \u5e93\u7684\u6838\u5fc3\u5728\u4e8e\u521b\u5efa\u548c\u64cd\u4f5crange views\uff0cviews\u662f\u4e00\u79cd\u8f7b\u91cf\u7ea7\u7684object(\u7c7b\u6bd4Rust\u4e2d\u7684slice)</p>"},{"location":"cpp/ranges.html#range-concepts","title":"Range concepts","text":"<p>\u9996\u5148\u4e86\u89e3<code>ranges</code>\u63d0\u4f9b\u7684\u51e0\u4e2a\u57fa\u7840\u7684concept:</p> <ol> <li> <p>range <pre><code>template&lt; class T &gt;\nconcept range = requires( T&amp; t ) {\nranges::begin(t);\nranges::end  (t);\n};\n</code></pre>     \u5176\u4e2d<code>ranges::begin()</code>Returns an iterator to the first element of the argument.</p> <p>\u800c<code>ranges::end()</code>Returns a sentinel indicating the end of a range.  </p> <p>Tutorial: C++20\u2019s Iterator Sentinels</p> <p>\u53ef\u4ee5\u770b\u5230\u5bf9\u4e8e\u7c7b\u578bT\uff0c\u5982\u679cexpression <code>ranges::begin(t);</code>\u548c<code>ranges::end(t)</code>\u6210\u7acb\uff0c\u90a3\u4e48T\u5c31\u662f\u4e00\u4e2arange\u3002\u5176\u542b\u4e49\u4e3a\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9bT\u7684\u4e00\u4e2a\u8fed\u4ee3\u5668\u548c\u4e00\u4e2asentinel\u5728\u8be5\u8303\u56f4\u5185\u8fdb\u884c\u8fed\u4ee3\u3002</p> </li> <li> <p>view <pre><code>template&lt;class T&gt;\nconcept view = ranges::range&lt;T&gt; &amp;&amp; std::movable&lt;T&gt; &amp;&amp; ranges::enable_view&lt;T&gt;;\n</code></pre></p> </li> </ol>"},{"location":"cpp/ranges.html#views","title":"Views","text":"<p>views\u662franges\u5e93\u7684\u6838\u5fc3\uff0cranges\u5e93\u529f\u80fd\u6709\u591a\u4e30\u5bcc\uff0c\u53d6\u51b3\u4e8e\u5176\u63d0\u4f9b\u591a\u5c11\u79cdviews\u3002\u5728<code>std::ranges</code>\u4e2d\u9884\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u7684views\u7c7b\u578b</p> <p>\u5728<code>std::ranges::views</code>\u4e2d\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u5de5\u5382\u65b9\u6cd5\u4ee5\u53caadaptor\u6765\u521b\u5efaviews / \u5c06range \u8f6c\u6362\u6210views</p> <ul> <li>\u5de5\u5382\u65b9\u6cd5<code>views::repeat</code>\uff0c<code>views::iota</code>\u7b49\u5bf9\u5e94\u8fd4\u56de<code>ranges::repeat_view</code>\uff0c<code>views::iota_view</code>\u7b49\u7c7b\u578b</li> </ul> <p>\u53e6\u5916\u8fd8\u6709\u4e00\u7cfb\u5217range adaptor object\uff0c\u4ed6\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ba1\u9053\u7b26\u53f7\u8fdb\u884c\u94fe\u63a5\u5f62\u6210\u94fe\u5f0f\u8c03\u7528\u3002\u5982<code>views::join</code>, <code>views::split</code>\u7b49\u3002\u4e0b\u9762\u4ee5<code>views::take</code>\u4e3a\u4f8b\uff1a</p> <ul> <li> <p><code>ranges::take_view</code> is a view consisting of the first N elements of another view</p> <p><code>views::take</code> is a range adaptor object. The expression views::take(e, f) results in a view that represents the first f elements from e. The result is not necessarily a take_view.</p> <pre><code>template&lt; ranges::viewable_range R, class DifferenceType &gt;\nrequires constexpr ranges::view auto take( R&amp;&amp; r, DifferenceType&amp;&amp; count );\n</code></pre> </li> </ul>"},{"location":"cpp/ranges.html#borrowed-range","title":"borrowed range","text":"<p>\u524d\u6587\u63d0\u5230</p> <p><code>ranges</code> \u5e93\u7684\u6838\u5fc3\u5728\u4e8e\u521b\u5efa\u548c\u64cd\u4f5crange views\uff0cviews\u662f\u4e00\u79cd\u8f7b\u91cf\u7ea7\u7684object(\u7c7b\u6bd4Rust\u4e2d\u7684slice)</p> <p>\u4e8b\u5b9e\u4e0a\uff0c\u80fd\u591f\u88abrange-ified algorithm\u64cd\u4f5c\u7684\u4e0d\u6b62\u662fviews\uff0c\u8fd8\u6709\u4e00\u79cd\u7c7b\u578b\u5373 borrowed range\u3002</p> <p>borrowed range specifies that a type is a <code>range</code> and iterators obtained from an expression of it can be safely returned without danger of dangling</p> <pre><code>template&lt;class R&gt;\nconcept borrowed_range = ranges::range&lt;R&gt; &amp;&amp; (std::is_lvalue_reference_v&lt;R&gt; || ranges::enable_borrowed_range&lt;std::remove_cvref_t&lt;R&gt;&gt;);\n</code></pre> <p>\u5176\u4e2d<code>ranges::enable_borrowed_range</code> \u9ed8\u8ba4\u4e3afalse\uff0c\u6807\u51c6\u5e93\u4e3a\u4e00\u4e9b\u7c7b\u578b\u505a\u4e86specialization\uff0c\u5982<code>std::string_view</code>,<code>std::span</code>, <code>std::ranges::subrange</code>\u7b49.</p> <p>\u56e0\u4e3a\u8fd9\u4e9b\u7c7b\u578b\u5e76\u6ca1\u6709\u5176\u6240\u9650\u5b9a\u8303\u56f4\u5185\u5143\u7d20\u7684ownership\uff0c\u56e0\u6b64\u5f53\u8fd9\u4e9b\u7c7b\u578b\u7684rvalue\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165algorithm\u7684\u65f6\u5019(\u5982<code>ranges::min_element()</code>)\uff0c\u4e0d\u4f1a\u8fd4\u56de<code>std::ranges::dangling</code></p>"},{"location":"cpp/signal.html","title":"Signal","text":"<p>Ref: \u672c\u6587\u53c2\u8003CSAPP8.5\u8282</p>"},{"location":"cpp/signal.html#signal_1","title":"\u4ec0\u4e48\u662f\u4fe1\u53f7(Signal)","text":"<p>\u5728CSAPP\u7b2c8\u7ae0\u5f02\u5e38\u63a7\u5236\u6d41(ECF)\u4e2d\uff0c\u9996\u5148\u4ecb\u7ecd\u4e86\u4f4e\u5c42\u5f02\u5e38\u673a\u5236\uff0c\u5982\u8f6f\u786c\u4ef6\u5408\u4f5c\u4e2d\u6d89\u53ca\u7684\u4e2d\u65ad\uff0c\u7136\u540e\u4ecb\u7ecd\u4e86\u4e0a\u4e0b\u6587\u5207\u6362\u8fd9\u79cd\u5f02\u5e38\u63a7\u5236\u6d41\u5f62\u5f0f\u3002\u4fe1\u53f7\u4e5f\u662f\u4e00\u79cd\u5f02\u5e38\u63a7\u5236\u6d41\u5f62\u5f0f\uff0c\u662f\u66f4\u9ad8\u5c42\u7ea7\u2014\u2014\u8f6f\u4ef6\u5c42\u9762\u7684\uff0c\u548c\u524d\u9762\u7684\u5f02\u5e38\u63a7\u5236\u6d41\u7c7b\u4f3c\uff0c\u4fe1\u53f7\u5141\u8bb8\u8fdb\u7a0b\u548c\u5185\u6838\u4e2d\u65ad\u5176\u5b83\u8fdb\u7a0b\u3002</p> <p>\u4e00\u4e2a\u4fe1\u53f7\u5c31\u662f\u4e00\u6761\u5c0f\u6d88\u606f\uff0c\u5b83\u901a\u77e5\u8fdb\u7a0b\u7cfb\u7edf\u4e2d\u53d1\u751f\u4e86\u4e00\u4e2a\u67d0\u79cd\u7c7b\u578b\u7684\u4e8b\u4ef6\u3002\u6bd4\u5982\uff0c\u4e0b\u56fe\u5c55\u793a\u4e86Linux\u7cfb\u7edf\u4e0a\u652f\u6301\u768430\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u4fe1\u53f7\u3002</p> <p></p> <p>\u6bcf\u79cd\u4fe1\u53f7\u7c7b\u578b\u90fd\u5bf9\u5e94\u4e8e\u67d0\u79cd\u7cfb\u7edf\u4e8b\u4ef6\u3002\u4f4e\u5c42\u7684\u786c\u4ef6\u5f02\u5e38\u662f\u7531\u5185\u6838\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u5904\u7406\u7684\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u5bf9\u7528\u6237\u8fdb\u7a0b\u800c\u8a00\u662f\u4e0d\u53ef\u89c1\u7684\u3002\u4fe1\u53f7\u63d0\u4f9b\u4e86\u4e00\u79cd\u673a\u5236\uff0c\u901a\u77e5\u7528\u6237\u8fdb\u7a0b\u53d1\u751f\u4e86\u8fd9\u4e9b\u5f02\u5e38\u3002\u6bd4\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u8bd5\u56fe\u9664\u4ee50\uff0c\u90a3\u4e48\u5185\u6838\u5c31\u53d1\u9001\u7ed9\u5b83\u4e00\u4e2a<code>SIGFPE</code>\u4fe1\u53f7(\u53f7\u78018)\u3002\u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u6267\u884c\u4e00\u6761\u975e\u6cd5\u6307\u4ee4\uff0c\u90a3\u4e48\u5185\u6838\u5c31\u53d1\u9001\u7ed9\u5b83\u4e00\u4e2a<code>SIGILL</code>\u4fe1\u53f7(\u53f7\u78014)\u3002\u5982\u679c\u8fdb\u7a0b\u8fdb\u884c\u975e\u6cd5\u5185\u5b58\u5f15\u7528\uff0c\u5185\u6838\u5c31\u53d1\u9001\u7ed9\u5b83\u4e00\u4e2a<code>SIGSEGV</code>\u4fe1\u53f7(\u53f7\u780111)\u3002\u5176\u4ed6\u4fe1\u53f7\u5bf9\u5e94\u4e8e\u5185\u6838\u6216\u8005\u5176\u4ed6\u7528\u6237\u8fdb\u7a0b\u4e2d\u8f83\u9ad8\u5c42\u7684\u8f6f\u4ef6\u4e8b\u4ef6\u3002\u6bd4\u5982\uff0c\u5982\u679c\u5f53\u8fdb\u7a0b\u5728\u524d\u53f0\u8fd0\u884c\u65f6\uff0c\u4f60\u952e\u5165Ctrl+C(\u4e5f\u5c31\u662f\u540c\u65f6\u6309\u4e0bCtrl\u952e\u548cC\u952e)\uff0c\u90a3\u4e48\u5185\u6838\u5c31\u4f1a\u53d1\u9001\u4e00\u4e2a <code>SIGINT</code>\u4fe1\u53f7(\u53f7\u78012)\u7ed9\u8fd9\u4e2a\u524d\u53f0\u8fdb\u7a0b\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u8fdb\u7a0b\u3002\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7\u5411\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2a<code>SIGKILL</code>\u4fe1\u53f7(\u53f7\u78019)\u5f3a\u5236\u7ec8\u6b62\u5b83\u3002\u5f53\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u7ec8\u6b62\u6216\u8005\u505c\u6b62\u65f6\uff0c\u5185\u6838\u4f1a\u53d1\u9001\u4e00\u4e2a<code>SIGCHLD</code>\u4fe1\u53f7(\u53f7\u780117)\u7ed9\u7236\u8fdb\u7a0b\u3002</p>"},{"location":"cpp/signal.html#_1","title":"\u4fe1\u53f7\u7684\u4f20\u9001","text":"<p>\u4f20\u9001\u4e00\u4e2a\u4fe1\u53f7\u5230\u76ee\u7684\u8fdb\u7a0b\u662f\u7531\u4e24\u4e2a\u4e0d\u540c\u6b65\u9aa4\u7ec4\u6210\u7684:</p> <ul> <li>\u53d1\u9001\u4fe1\u53f7\u3002\u5185\u6838\u901a\u8fc7\u66f4\u65b0\u76ee\u7684\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u4e2d\u7684\u67d0\u4e2a\u72b6\u6001\uff0c\u53d1\u9001(\u9012\u9001)\u4e00\u4e2a\u4fe1\u53f7\u7ed9\u76ee\u7684\u8fdb\u7a0b\u3002\u53d1\u9001\u4fe1\u53f7\u53ef\u4ee5\u6709\u5982\u4e0b\u4e24\u79cd\u539f\u56e0:</li> <li>\u5185\u6838\u68c0\u6d4b\u5230\u4e00\u4e2a\u7cfb\u7edf\u4e8b\u4ef6\uff0c\u6bd4\u5982\u9664\u96f6\u9519\u8bef\u6216\u8005\u5b50\u8fdb\u7a0b\u7ec8\u6b62\u3002</li> <li>\u4e00\u4e2a\u8fdb\u7a0b\u8c03\u7528\u4e86<code>kill</code>\u51fd\u6570(\u5728\u4e0b\u4e00\u8282\u4e2d\u8ba8\u8bba)\uff0c\u663e\u5f0f\u5730\u8981\u6c42\u5185\u6838\u53d1\u9001\u4e00\u4e2a\u4fe1\u53f7\u7ed9\u76ee\u7684\u8fdb\u7a0b\u3002\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u53d1\u9001\u4fe1\u53f7\u7ed9\u5b83\u81ea\u5df1\u3002</li> <li>\u63a5\u6536\u4fe1\u53f7\u3002\u5f53\u76ee\u7684\u8fdb\u7a0b\u88ab\u5185\u6838\u5f3a\u8feb\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5bf9\u4fe1\u53f7\u7684\u53d1\u9001\u505a\u51fa\u53cd\u5e94\u65f6\uff0c\u5b83\u5c31\u63a5\u6536\u4e86\u4fe1\u53f7\u3002\u8fdb\u7a0b\u53ef\u4ee5\u5ffd\u7565\u8fd9\u4e2a\u4fe1\u53f7\uff0c\u7ec8\u6b62\u6216\u8005\u901a\u8fc7\u6267\u884c\u4e00\u4e2a\u79f0\u4e3a\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f(signal handler)\u7684\u7528\u6237\u5c42\u51fd\u6570\u6355\u83b7\u8fd9\u4e2a\u4fe1\u53f7\u3002\u4e0b\u56fe\u7ed9\u51fa\u4e86\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u6355\u83b7\u4fe1\u53f7\u7684\u57fa\u672c\u601d\u60f3\u3002</li> </ul> <p></p> <p>\u4fe1\u53f7\u5b9e\u9645\u4e0a\u6709\u4e09\u79cd\u53ef\u80fd\u7684\u72b6\u6001\uff1a</p> <ul> <li>\u4fe1\u53f7\u9012\u8fbe(Delivery)\uff1a\u5b9e\u9645\u6267\u884c\u4fe1\u53f7\u7684\u5904\u7406\u52a8\u4f5c</li> <li>\u4fe1\u53f7\u672a\u51b3(Pending)\uff1a\u4fe1\u53f7\u4ece\u4ea7\u751f\u5230\u9012\u8fbe\u4e4b\u95f4\u7684\u72b6\u6001</li> <li>\u4fe1\u53f7\u963b\u585e(Block)\uff1a\u8fdb\u7a0b\u53ef\u4ee5\u9009\u62e9\u963b\u585e\u67d0\u4e2a\u4fe1\u53f7\uff0c\u88ab\u963b\u585e\u7684\u4fe1\u53f7\u4ea7\u751f\u65f6\u5c06\u4fdd\u6301\u5728Pending\u72b6\u6001\uff0c\u76f4\u5230\u8fdb\u7a0b\u89e3\u9664\u5bf9\u6b64\u4fe1\u53f7\u7684\u963b\u585e\uff0c\u624d\u6267\u884c\u9012\u8fbe\u7684\u52a8\u4f5c</li> </ul> <p>\u6ce8\u610f\uff1a\u963b\u585e\u548c\u5ffd\u7565\u662f\u4e0d\u540c\u7684\uff0c\u53ea\u8981\u4fe1\u53f7\u88ab\u963b\u585e\u5c31\u4e0d\u4f1a\u9012\u8fbe\uff0c\u800c\u5ffd\u7565\u662f\u5728\u62b5\u8fbe\u4e4b\u540e\u53ef\u9009\u7684\u4e00\u79cd\u5904\u7406\u52a8\u4f5c</p> <p>\u4fe1\u53f7\u5728\u5185\u6838\u4e2d\u7684\u8868\u793a\u53ef\u4ee5\u6a21\u62df\u6210\u4e0b\u56fe(\u56fe\u6e90\u5982\u6c34\u5370)\uff1a</p> <p></p> <p>\u6bcf\u4e2a\u4fe1\u53f7\u90fd\u6709\u4e24\u4e2a\u6807\u5fd7\u4f4d\u5206\u522b\u8868\u793a\u963b\u585e\uff08block\uff09\u548c\u672a\u51b3\uff08pending\uff09\uff0c\u8fd8\u6709\u4e00\u4e2a\u51fd\u6570\u6307\u9488\u7528\u6765\u8868\u793a\u5904\u7406\u52a8\u4f5c\u3002\u4fe1\u53f7\u4ea7\u751f\u65f6\uff0c\u5185\u6838\u5728PCB\u4e2d\u8bbe\u7f6e\u8be5\u4fe1\u53f7\u7684\u672a\u51b3\u72b6\u6001\uff0c\u76f4\u5230\u4fe1\u53f7\u9012\u8fbe\u624d\u6e05\u9664\u8be5\u6807\u5fd7\u3002</p> <p>\u6211\u4eec\u5bf9\u4e0a\u8ff0\u56fe\u7684\u5404\u79cd\u72b6\u6001\u4f5c\u4ee5\u5206\u6790\uff1a</p> <ol> <li><code>SIGHUP</code>\u4fe1\u53f7\u672a\u963b\u585e\u4e5f\u672a\u4ea7\u751f\u8fc7\uff08\u672a\u51b3\uff09\uff0c\u5f53\u5b83\u9012\u8fbe\u65f6\u6267\u884c\u9ed8\u8ba4\u5904\u7406\u52a8\u4f5c\u3002</li> <li><code>SIGINT</code>\u4fe1\u53f7\u4ea7\u751f\u4e86\uff0c\u4f46\u662f\u6b63\u5728\u88ab\u963b\u585e\uff08block\uff09\uff0c\u6240\u4ee5\u6682\u65f6\u4e0d\u80fd\u88ab\u9012\u8fbe\u3002\u867d\u7136\u5b83\u7684\u5904\u7406\u52a8\u4f5c\u662f\u5ffd\u7565\uff0c\u4f46\u662f\u5728\u6ca1\u6709\u89e3\u9664\u963b\u585e\u4e4b\u524d\u4e0d\u80fd\u5ffd\u7565\u8fd9\u4e2a\u4fe1\u53f7\uff0c\u56e0\u4e3a\u8fdb\u7a0b\u4ecd\u6709\u673a\u4f1a\u6539\u53d8\u5904\u7406\u52a8\u4f5c\u4e4b\u540e\u518d\u89e3\u9664\u963b\u585e\u3002</li> <li><code>SIGQUIT</code>\u4fe1\u53f7\u672a\u4ea7\u751f\u8fc7\uff0c\u4e14\u4e00\u65e6\u4ea7\u751f\u5c31\u963b\u585e\uff0c\u5b83\u7684\u5904\u7406\u52a8\u4f5c\u662f\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570<code>sighandler</code>\u3002</li> </ol> <p>\u5e38\u89c4\u4fe1\u53f7\u5728\u9012\u8fbe\u4e4b\u524d\u4ea7\u751f\u591a\u6b21\u53ea\u8bb0\u4e00\u6b21\uff0c\u800c\u5b9e\u65f6\u4fe1\u53f7\u5728\u9012\u8fbe\u4e4b\u524d\u4ea7\u751f\u591a\u6b21\u53ef\u4f9d\u6b21\u653e\u5728\u4e00\u4e2a\u961f\u5217\u91cc\u9762\u3002</p> <p>\u4e0a\u56fe\u4e2d\uff0c\u6bcf\u4e2a\u4fe1\u53f7\u53ea\u6709\u4e00\u4e2a\u6bd4\u7279\u4f4d\u7684\u672a\u51b3\u72b6\u6001\uff0c0\u548c1\u4e24\u79cd\uff0c\u4e0d\u8bb0\u5f55\u8be5\u4fe1\u53f7\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u963b\u585e\u6807\u5fd7\u4e0e\u5176\u7c7b\u4f3c\u3002\u56e0\u6b64\u672a\u51b3\u548c\u963b\u585e\u6807\u5fd7\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u6570\u636e\u7c7b\u578b <code>sigset_t</code> \u4fe1\u53f7\u96c6\u6765\u5b58\u50a8\uff0c\u8fd9\u4e2a\u7c7b\u578b\u53ef\u4ee5\u8868\u793a\u6bcf\u4e2a\u4fe1\u53f7\u7684\u6709\u6548\u548c\u65e0\u6548\u72b6\u6001\u3002</p> <p>\u4e0a\u9762\u8bf4\u5230\u2014\u2014\u201c\u5f53\u76ee\u7684\u8fdb\u7a0b\u88ab\u5185\u6838\u5f3a\u8feb\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5bf9\u4fe1\u53f7\u7684\u53d1\u9001\u505a\u51fa\u53cd\u5e94\u65f6\uff0c\u5b83\u5c31\u63a5\u6536\u4e86\u4fe1\u53f7\u201d\uff0c\u8fd9\u4e2a\u63a5\u6536\u4fe1\u53f7\u7684\u8fc7\u7a0b\u7a76\u7adf\u53d1\u751f\u5728\u4f55\u65f6\uff1f</p> <p>\u5f53\u5185\u6838\u628a\u8fdb\u7a0bp\u4ece\u5185\u6838\u6a21\u5f0f\u5207\u6362\u5230\u7528\u6237\u6a21\u5f0f\u65f6(\u4f8b\u5982\uff0c\u4ece\u7cfb\u7edf\u8c03\u7528\u8fd4\u56de\u6216\u662f\u5b8c\u6210\u4e86\u4e00\u6b21\u4e0a\u4e0b\u6587\u5207\u6362)\uff0c\u5b83\u4f1a\u68c0\u67e5\u8fdb\u7a0bp\u7684\u672a\u88ab\u963b\u585e\u7684\u5f85\u5904\u7406\u4fe1\u53f7\u7684\u96c6\u5408(pending &amp;~blocked)\u3002\u5982\u679c\u8fd9\u4e2a\u96c6\u5408\u4e3a\u7a7a(\u901a\u5e38\u60c5\u51b5\u4e0b)\uff0c\u90a3\u4e48\u5185\u6838\u5c06\u63a7\u5236\u4f20\u9012\u5230p\u7684\u903b\u8f91\u63a7\u5236\u6d41\u4e2d\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u3002\u7136\u800c\uff0c\u5982\u679c\u96c6\u5408\u662f\u975e\u7a7a\u7684\uff0c\u90a3\u4e48\u5185\u6838\u9009\u62e9\u96c6\u5408\u4e2d\u7684\u67d0\u4e2a\u4fe1\u53f7k(\u901a\u5e38\u662f\u6700\u5c0f\u7684k)\uff0c\u5e76\u4e14\u5f3a\u5236p\u63a5\u6536\u4fe1\u53f7h\u3002\u6536\u5230\u8fd9\u4e2a\u4fe1\u53f7\u4f1a\u89e6\u53d1\u8fdb\u7a0b\u91c7\u53d6\u67d0\u79cd\u884c\u4e3a\u3002\u4e00\u65e6\u8fdb\u7a0b\u5b8c\u6210\u4e86\u8fd9\u4e2a\u884c\u4e3a\uff0c\u90a3\u4e48\u63a7\u5236\u5c31\u4f20\u9012\u56dep\u7684\u903b\u8f91\u63a7\u5236\u6d41\u4e2d\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u3002\u6bcf\u4e2a\u4fe1\u53f7\u7c7b\u578b\u90fd\u6709\u4e00\u4e2a\u9884\u5b9a\u4e49\u7684\u9ed8\u8ba4\u884c\u4e3a\uff0c\u662f\u4e0b\u9762\u4e2d\u7684\u4e00\u79cd:</p> <ul> <li>\u8fdb\u7a0b\u7ec8\u6b62</li> <li>\u8fdb\u7a0b\u7ec8\u6b62\u5e76\u8f6c\u50a8\u5185\u5b58</li> <li>\u8fdb\u7a0b\u505c\u6b62(\u6302\u8d77)\u76f4\u5230\u88ab<code>SIGCONT</code>\u4fe1\u53f7\u91cd\u542f</li> <li>\u8fdb\u7a0b\u5ffd\u7565\u8be5\u4fe1\u53f7</li> </ul> <p>\u4f8b\u5982\u8fdb\u7a0b\u63a5\u6536\u5230<code>SIGCHILD</code>\u7684\u9ed8\u8ba4\u884c\u4e3a\u5c31\u662f\u5ffd\u7565\u8be5\u4fe1\u53f7\uff0c<code>SIGKILL</code>\u7684\u9ed8\u8ba4\u884c\u4e3a\u662f\u7ec8\u6b62\u8fdb\u7a0b\uff0c\u4e14\u8be5\u9ed8\u8ba4\u884c\u4e3a\u65e0\u6cd5\u88ab\u66f4\u6539\uff0c\u53e6\u4e00\u4e2a\u4e0d\u80fd\u88ab\u66f4\u6539\u7684\u662f<code>SIGSTOP</code>\uff0c\u5176\u9ed8\u8ba4\u884c\u4e3a\u5c31\u662f\u4e0a\u8ff0\u7b2c\u4e09\u70b9\u3002</p> <p><code>signal</code>\u51fd\u6570\u53ef\u7528\u6765\u6539\u53d8\u4fe1\u53f7\u548c\u5176\u5bf9\u5e94\u5904\u7406\u884c\u4e3a\u7684\u5173\u7cfb\uff1a\u8be5\u51fd\u6570\u7684\u529f\u80fd\u662f\u4e3a\u4e00\u4e2a\u4fe1\u53f7<code>signum</code>\u6307\u5b9a\u56de\u8c03<code>handler</code></p> <pre><code>#include &lt;signal.h&gt;\ntypedef void (*sighandler_t)(int);\nsighandler_t signal(int signum, sighandler_t handler);\n</code></pre> <p>\u4e00\u4e2a\u793a\u4f8b\u7a0b\u5e8f\u5982\u4e0b\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;signal.h&gt;\nvoid handler(int sig) {\nprintf(\"Bye.\\\\n\");\nexit(0);\n}\nint main() {\nsignal(SIGINT, handler);\nwhile (1) {\nsleep(1);\n}\nreturn 0;\n}\n</code></pre> <p>\u5176\u4e2d<code>SIGINT</code> \u4fe1\u53f7\u4ee3\u8868\u7531<code>InterruptKey</code>\u4ea7\u751f\uff0c\u901a\u5e38\u662fCTRL +C \u6216\u8005\u662fDELETE</p> <p>\u4f46\u662fLinux manual \u4e2d\u63cf\u8ff0\u8fd9\u4e2a\u51fd\u6570\u56e0\u4e3a\u4f8b\u662f\u539f\u56e0\u548cUnix\u7248\u672c\u4e0d\u540c\u4f1a\u6709\u4e0d\u540c\u7684\u8868\u73b0\uff0c\u4e0d\u63a8\u8350\u4f7f\u7528\uff0c\u63a8\u8350\u4f7f\u7528 <code>sigaction</code> \u4ee3\u66ff\u4e4b</p>"},{"location":"cpp/signal.html#_2","title":"\u4fe1\u53f7\u7684\u5904\u7406","text":"<p>\u53c2\u8003\uff1a\u907f\u514d\u5728 Linux \u4e0a\u4f7f\u7528 signals</p>"},{"location":"cpp/signal.html#_3","title":"\u5b89\u5168\u7684\u4fe1\u53f7\u5904\u7406","text":"<p>\u4e00\u4e2a\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u5f15\u8d77\u6b7b\u9501\u7684\u7b80\u5355\u4f8b\u5b50\uff1a\u5728\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u4f7f\u7528<code>printf()</code>\u51fd\u6570\uff0c\u89e3\u91ca\u5982\u4e0b\uff1a</p> <p>\u5728 <code>printf()</code> \u5185\u90e8\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\u9700\u8981\u5148\u83b7\u5f97\u8f93\u51fa\u7aef\uff08\u4f8b\u5982 <code>stdout</code> \uff09\u7684\u9501\uff0c\u7136\u540e\u5bf9\u8f93\u51fa\u7aef\u8fdb\u884c\u4fee\u6539\uff0c\u6700\u540e\u91ca\u653e\u8f93\u51fa\u7aef\u7684\u9501\u3002\u5982\u679c\u5728\u4e3b\u7a0b\u5e8f\u548c\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u5747\u8c03\u7528\u4e86 <code>printf()</code> \uff0c\u90a3\u4e48\u5c31\u6709\u53ef\u80fd\u53d1\u751f\u4e0b\u8ff0\u8fd9\u79cd\u60c5\u51b5\uff1a</p> <p>\u8fdb\u7a0b\uff08\u4e3b\u7a0b\u5e8f\uff09 A \u4e2d\u8c03\u7528\u4e86 <code>printf()</code> \u51fd\u6570\uff0c\u5728 <code>printf()</code> \u5185\u90e8\u6b63\u597d\u6267\u884c\u5230\u4e34\u754c\u533a\u4ee3\u7801\uff08\u5373\u5df2\u7ecf\u83b7\u5f97\u8f93\u51fa\u7aef\u7684\u9501\uff0c\u4f46\u5c1a\u672a\u91ca\u653e\u8be5\u9501\uff09\u65f6\uff0c\u5185\u6838\u7684\u8fdb\u7a0b\u8c03\u5ea6\u7a0b\u5e8f\u4e2d\u65ad\u4e86\u8fdb\u7a0b A \u7684\u6307\u4ee4\u6d41\uff0c\u5e76\u8fdb\u884c\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u5c06\u63a7\u5236\u4f20\u9012\u7ed9\u8fdb\u7a0b B \u3002\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u8fdb\u7a0b\u8c03\u5ea6\u7a0b\u5e8f\u518d\u6b21\u8fdb\u884c\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u51c6\u5907\u5c06\u63a7\u5236\u4f20\u9012\u7ed9\u8fdb\u7a0b A \u3002\u5728\u5c06\u63a7\u5236\u4f20\u9012\u7ed9\u8fdb\u7a0b A \u4e4b\u524d\uff0c\u5185\u6838\u4f1a\u5148\u68c0\u67e5\u8fdb\u7a0b A \u7684\u672a\u88ab\u963b\u585e\u7684\u5f85\u5904\u7406\u4fe1\u53f7\u7684\u96c6\u5408\u3002\u6b64\u65f6\uff0c\u5185\u6838\u53d1\u73b0\u6709\u4e00\u4e2a\u4fe1\u53f7 k \u672a\u88ab\u5904\u7406\uff0c\u5e76\u4e14\u8fdb\u7a0b A \u5df2\u7ecf\u901a\u8fc7 signal \u51fd\u6570\u5c06\u63a5\u6536\u5230\u4fe1\u53f7 k \u7684\u884c\u4e3a\u6307\u5b9a\u4e3a\u8c03\u7528\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f K \u3002\u56e0\u6b64\uff0c\u63a7\u5236\u4f20\u9012\u5230\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f K \u4e2d\u3002\u5728\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f K \u4e2d\u4e5f\u8c03\u7528\u4e86 <code>printf()</code> \uff0c\u5b83\u8981\u6c42\u83b7\u5f97\u8f93\u51fa\u7aef\u7684\u9501\uff0c\u4f46\u662f\u8f93\u51fa\u7aef\u7684\u9501\u5df2\u7ecf\u88ab\u8fdb\u7a0b A \u8c03\u7528\u7684 <code>printf()</code> \u83b7\u5f97\u4e86\uff0c\u5c1a\u672a\u91ca\u653e\u3002\u6b64\u65f6\u6b64\u523b\uff0c\u8fdb\u7a0b A \u5728\u7b49\u5f85\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f K \u7684\u6267\u884c\u7ed3\u675f\uff1a\u53ea\u6709\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f K \u6267\u884c\u5b8c\uff0c\u63a7\u5236\u624d\u4f1a\u4f20\u9012\u7ed9\u8fdb\u7a0b A \uff0c\u8fdb\u7a0b A \u624d\u80fd\u5728\u540e\u7eed\u7684\u6307\u4ee4\u6d41\u4e2d\u91ca\u653e\u8f93\u51fa\u7aef\u7684\u9501\uff1b\u4e0e\u6b64\u540c\u65f6\uff0c\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f K \u5374\u963b\u585e\u5728\u7b49\u5f85\u83b7\u53d6\u8f93\u51fa\u7aef\u7684\u9501\uff0c\u6307\u4ee4\u6d41\u65e0\u6cd5\u524d\u8fdb\u3002\u7531\u6b64\uff0c\u4ea7\u751f\u4e86\u6b7b\u9501\u3002</p> <p>\u7c7b\u4f3c\u5730\uff0c\u5982\u540cfork\u548c\u591a\u7ebf\u7a0b\u6df7\u7528\u90a3\u6837\uff0c\u5982\u679c\u5728\u4e3b\u7a0b\u5e8f\u548c\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u540c\u65f6\u4f7f\u7528<code>malloc</code>\u4e4b\u7c7b\u7684\u51fd\u6570\u4e5f\u53ef\u80fd\u4f1a\u9020\u6210\u6b7b\u9501\u3002\u672c\u8d28\u5728\u4e8e\u4e24\u4e2a\u7a0b\u5e8f\u5bf9\u5168\u5c40\u6570\u636e\u7ed3\u6784\u7684\u8bbf\u95ee(\u6bd4\u5982\uff0c\u9501)\u51b2\u7a81\uff0c\u9020\u6210\u6b7b\u9501\u3002</p>"},{"location":"cpp/signal.html#_4","title":"\u6b63\u786e\u7684\u4fe1\u53f7\u5904\u7406","text":"<p>\u4fe1\u53f7\u7684\u4e00\u4e2a\u4e0e\u76f4\u89c9\u4e0d\u7b26\u7684\u65b9\u9762\u662f\u672a\u5904\u7406\u7684\u4fe1\u53f7\u662f\u4e0d\u6392\u961f\u7684\u3002\u56e0\u4e3apending\u4f4d\u5411\u91cf\u4e2d\u6bcf\u79cd\u7c7b\u578b\u7684\u4fe1\u53f7\u53ea\u5bf9\u5e94\u6709\u4e00\u4f4d\uff0c\u6240\u4ee5\u6bcf\u79cd\u7c7b\u578b\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\u672a\u5904\u7406\u7684\u4fe1\u53f7\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4e24\u4e2a\u7c7b\u578bk\u7684\u4fe1\u53f7\u53d1\u9001\u7ed9\u4e00\u4e2a\u76ee\u7684\u8fdb\u7a0b\uff0c\u800c\u56e0\u4e3a\u76ee\u7684\u8fdb\u7a0b\u5f53\u524d\u6b63\u5728\u6267\u884c\u4fe1\u53f7k\u7684\u5904\u7406\u7a0b\u5e8f\uff0c\u6240\u4ee5\u4fe1\u53f7k\u88ab\u963b\u585e\u4e86\uff0c\u90a3\u4e48\u7b2c\u4e8c\u4e2a\u4fe1\u53f7\u5c31\u7b80\u5355\u5730\u88ab\u4e22\u5f03\u4e86;\u5b83\u4e0d\u4f1a\u6392\u961f\u3002\u5173\u952e\u601d\u60f3\u662f\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u672a\u5904\u7406\u7684\u4fe1\u53f7\u5c31\u8868\u660e\u81f3\u5c11\u6709\u4e00\u4e2a\u4fe1\u53f7\u5230\u8fbe\u4e86\u3002</p> <p>\u8981\u4e86\u89e3\u8fd9\u6837\u4f1a\u5982\u4f55\u5f71\u54cd\u6b63\u786e\u6027\uff0c\u6765\u770b\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff1a</p> <pre><code>static volatile int running_processes = 0;\nvoid handler(int sig) {\nif (waitpid(-1, NULL, WNOHANG) &gt; 0) {\nrunning_processes -= 1;\n}\n}\nint main() {\nsignal(SIGCHLD, handler);\nconst int num_processes = 10;\nfor (int i = 0; i &lt; num_processes; i++) {\nif (fork() == 0) {\nsleep(1);\nexit(0);\n}\nrunning_processes += 1;\nprintf(\"%d running processes\\n\", running_processes);\n}\nwhile(running_processes &gt; 0) {\npause();\n}\nprintf(\"All processes exited! %d running processes\\n\", running_processes);\nreturn 0;\n}\n</code></pre> <p>\u8fd9\u4e2a\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u4e00\u76f4\u963b\u585e\uff0c\u56e0\u4e3a\u591a\u4e2a\u5b50\u8fdb\u7a0b\u53d1\u9001\u7ed9\u7236\u8fdb\u7a0b<code>SIGCHILD</code>\u4fe1\u53f7\uff0c\u5982\u679c\u53d1\u9001\u4fe1\u53f7\u65f6\uff0c<code>handler</code>\u6b63\u5728\u5de5\u4f5c\uff0c\u5219\u8be5\u4fe1\u53f7\u4f1a\u4e22\u5931\u3002</p> <p>\u4e00\u4e2a\u89e3\u51b3\u7684\u65b9\u6cd5\u5c31\u662f\u628a\u7b2c\u4e09\u884c\u7684<code>if</code>\u6362\u6210<code>while</code></p>"},{"location":"cpp/signal.html#_5","title":"\u53ef\u79fb\u690d\u7684\u4fe1\u53f7\u5904\u7406","text":""},{"location":"cpp/toolchain.html","title":"Toolchains","text":""},{"location":"cpp/toolchain.html#llvmclang","title":"\u5b89\u88c5llvm\u548cclang","text":"<p>\u9996\u5148\u4ecellvm\u5b98\u7f51\u627e\u5230\u5bf9\u5e94\u7248\u672c\u7684\u6e90\u7801\u4e0b\u8f7d: llvm download</p> <p>\u7136\u540e\u8fdb\u884c\u6309\u7167 get-started \u7684\u6559\u7a0b\u8fdb\u884c\u7f16\u8bd1\uff0c</p>"},{"location":"cpp/toolchain.html#windows","title":"Windows","text":"<p>windows\u7f16\u8bd1\u53c2\u8003\u5176\u4e2d\u7684Using Ninja alongside Visual Studio\u90e8\u5206\uff1a</p> <ol> <li>\u6253\u5f00developer command prompt with the appropriate environment</li> <li><code>mkdir build</code></li> <li><code>cd build</code></li> <li><code>set CC=cl</code></li> <li><code>set CXX=cl</code></li> <li><code>cmake -GNinja -DLLVM_ENABLE_PROJECTS=\"clang;lldb;clang-tools-extra\" -DCMAKE_INSTALL_PREFIX=\"D:/install\" -DLLVM_TARGETS_TO_BUILD=X86 -DCMAKE_BUILD_TYPE=Release ..\\llvm</code></li> <li><code>ninja</code> // this will build clang</li> <li><code>ninja install</code> // this will install clang</li> </ol> <p>\u8fd9\u91cc\u8bbe\u7f6e<code>LLVM_ENABLE_PROJECTS</code>\u6307\u5b9a\u54ea\u4e9bsubproject\u88abbuild\uff0c<code>extra</code>\u4e2d\u5305\u542b<code>clang-format</code>\u7b49\u5de5\u5177</p> <p>\u6ce8\u610f\u8fd9\u91cc\u5728win11\u4e2d\u6587\u7248\u4e0a\u7f16\u8bd1<code>clangd</code>\u7684\u65f6\u5019\u4f1a\u51fa\u73b0\u6587\u4ef6\u7f16\u7801\u5bfc\u81f4\u7684\u9519\u8bef\uff0c\u89e3\u51b3\u65b9\u6cd5\uff1a</p> <p></p>"},{"location":"cpp/toolchain.html#linux","title":"Linux","text":"<p>\u5728Debian\u7cfb\u7684\u5b89\u88c5\u53c2\u8003llvm-apt-repo</p>"},{"location":"cpp/toolchain.html#linux_1","title":"Linux \u7ba1\u7406\u591a\u7248\u672c\u5de5\u5177\u94fe","text":"<p>!! TODO</p> <p>sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 10 \\     --slave /usr/bin/g++ g++ /usr/bin/g++-9 \\</p> <p>sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 20 \\     --slave /usr/bin/g++ g++ /usr/bin/g++-12 \\</p>"},{"location":"crypto/algo-fft%26ntt.html","title":"Algorithm-fft&amp;ntt","text":"<p>\u4e3b\u8981\u5173\u6ce8 FFT\u5728\u591a\u9879\u5f0f\u8fd0\u7b97\u4e2d\u7684\u5e94\u7528</p> <p>\u4e24\u4e2a\u591a\u9879\u5f0f\u76f8\u4e58\u4f20\u7edf\u7b97\u6cd5\u590d\u6742\u5ea6\\(O(n^2)\\)\uff1b</p> <p>FFT\u628a\u591a\u9879\u5f0f\u7cfb\u6570\u8868\u793a\u6cd5\\(\\Longrightarrow\\)\u70b9\u503c\u8868\u793a\u6cd5\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u590d\u6742\u5ea6\u4e3a\\(O(n\\log n)\\)\uff1b</p> <p>\u4e24\u7ec4\u70b9\u503c\u76f8\u4e58\u590d\u6742\u5ea6\\(O(n)\\)\uff1b</p>"},{"location":"crypto/algo-fft%26ntt.html#_1","title":"\u7b97\u6cd5\u5b9e\u73b0","text":"<p>FFT\u7684\u9012\u5f52\u8fc7\u7a0b\uff1a</p> <ul> <li>\u9012\u5f52\u5c55\u5f00\uff1a\u6309\u7167\u5947\u3001\u5076\u5e42\u6b21\u5c42\u5c42\u9012\u5f52\u5212\u5206\u591a\u9879\u5f0f\uff0c\u76f4\u81f3\u9879\u6570\u4e3a1\uff08\u6b64\u65f6\\(m\\)\u9879\u591a\u9879\u5f0f\u88ab\u5206\u5272\u4e3a\\(m\\)\u4e2a\\(1\\)\u6b21\u591a\u9879\u5f0f\uff0c\u6bcf\u4e00\u9879\u5bf9\u5e94\u4e00\u4e2a\u70b9\u503c\uff09</li> <li>\u5212\u5206\u65f6\uff1a\\(P(x) = P_e(x^2) + x\\cdot P_o(x^2)\\)</li> <li>\u9012\u5f52\u56de\u6536\uff1a\u5bf9\u4e8e\\(m\\)\u9879\u7684\u591a\u9879\u5f0f\uff0c\u6839\u636e\u4e0b\u4e00\u5c42\u5df2\u7ecf\u8ba1\u7b97\u51fa\u7684\uff0c\u4e24\u4e2a\\(m/2\\)\u9879\u7684\u591a\u9879\u5f0f\u5bf9\u5e94\u7684\u70b9\u503c\uff0c\u8ba1\u7b97\u51fa\\(m\\)\u9879\u591a\u9879\u5f0f\u5bf9\u5e94\u7684\\(m\\)\u4e2a\u70b9\u503c</li> <li>\u6062\u590d\u8ba1\u7b97\uff1a\\(P(x) = P_e(x^2) + x\\cdot P_o(x^2)~~\u3001~~P(-x) = P_e(x^2) - x\\cdot P_o(x^2)\\)</li> </ul> <p>FFT\u5229\u7528\u4e86\u5355\u4f4d\u6839\u7684\u6027\u8d28\uff1a</p> <p></p> <p>\u5355\u4f4d\u6839\uff1a\\(z^n = 1\\)\uff0c\u65b9\u7a0b\u7684\u590d\u6570\u6839\\(z\\)\u4e3an\u6b21\u5355\u4f4d\u6839\u3002\u5355\u4f4d\u7684 n\u6b21\u6839\u6709n\u4e2a\uff1a\\(e^{\\frac{2\\pi ki}{n}},k=0,1,2,3\\cdots n-1\\)</p> <p>\u5355\u4f4d\u7684n\u6b21\u6839\u4ee5\u4e58\u6cd5\u6784\u6210n\u9636\u5faa\u73af\u7fa4\u3002</p> <p>\u4e00\u4e2a\u4f8b\u5b50\u4f5c\u4e3a\u8bf4\u660e\uff1a</p> <p></p> <p>\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u4f7f\u7528FFT\u7b97\u6cd5\u6c427\u9636\u591a\u9879\u5f0f\\(P(x)\\)\u5728\\(\\omega_1,\\omega_2\\cdots,\\omega_8\\)8\u4e2a\u70b9(8\u4e2a8\u6b21\u5355\u4f4d\u6839)\u7684\u503c\uff1a</p> <ul> <li>\u6c42\\(P(x)\\)\u5728\\(\\omega^8_1,\\omega^8_2\\cdots,\\omega^8_8\\)8\u4e2a\u70b9\u7684\u503c\\(\\Longrightarrow\\)\u53ea\u9700\u8981\u5206\u522b\u8ba1\u7b97\\(P_e(x^2),P_o(x^2)\\)\u5728\\(\\omega^8_1,\\omega^8_2\\cdots,\\omega^8_8\\)8\u4e2a\u70b9\u7684\u503c\uff0c</li> </ul> <p>\u4f46\u7531\u4e8e\u5355\u4f4d\u6839\u7684\u6027\u8d28\uff0c8\u4e2a8\u6b21\u5355\u4f4d\u6839\\(\\omega^8_1,\\omega^8_2\\cdots,\\omega^8_8\\)\u7684\u5e73\u65b9\u6070\u597d\u4e3a4\u4e2a4\u6b21\u5355\u4f4d\u6839\\(\\omega^4_1,\\omega^4_2,\\omega^4_3,\\omega^4_4\\)\uff1b</p> <p>\u56e0\u6b64\u4e8b\u5b9e\u4e0a\u8ba1\u7b97\\(P_e(x^2),P_o(x^2)\\)\u5728\\(\\omega^8_1,\\omega^8_2\\cdots,\\omega^8_8\\)8\u4e2a\u70b9\u7684\u503c\\(\\Longrightarrow\\)\u8ba1\u7b97\\(P_e(x),P_o(x)\\)\u5728\\(\\omega^4_1,\\omega^4_2,\\omega^4_3,\\omega^4_4\\)4\u4e2a\u70b9(4\u4e2a4\u6b21\u5355\u4f4d\u6839)\u7684\u503c</p> <p>\u9012\u5f52\uff1b\u5bf9\u4e8e7\u9636\u591a\u9879\u5f0f\uff0c\u5982\u4e0a\u5212\u52063\u6b21\u4e4b\u540e\u53d8\u4e3a0\u9636\u591a\u9879\u5f0f\uff0c\u53738\u4e2a\u7cfb\u6570\uff1b\u56e0\u4e3a\u6bcf\u6b21\u90fd\u6309\u5947\u5076\u5212\u5206\uff0c\u6700\u540e\u6392\u5217\u89c4\u5f8b\u5982\u4e0b\uff1a</p> <ul> <li> <p>04261537\u7684\u4e8c\u8fdb\u5236\u6570\u5206\u522b\u662f000, 100, 010, 110, 001, 101, 011, 111\uff0c\u6bcf\u4e2a\u6570\u5012\u7f6e\u4e00\u4e0b\u5f97\u5230000, 001, 010, 011, 100, 101, 110, 111\uff0c\u6b63\u597d\u5c31\u662f01234567\uff1b\u5bf9\u4e8e\u5176\u4ed62\u7684\u5e42\u4e5f\u662f\u6210\u7acb\u7684</p> </li> <li> <p>\u7136\u540e\u5c31\u662f\u4ece\\(P_e(x^2),P_o(x^2)\\)\u6c42\\(P(x)\\)\u7684\u8fc7\u7a0b: \u4ee5\u6700\u4e0a\u5c42\u4e3a\u4f8b\uff0c\u8981\u6839\u636e\\(P_e(x),P_o(x)\\)\u5728\\(\\omega^4_1,\\omega^4_2,\\omega^4_3,\\omega^4_4\\)\u7684\u503c\u6c42\u51fa\\(P(x)\\)\u5728\\(\\omega^8_1,\\omega^8_2\\cdots,\\omega^8_8\\)\u7684\u503c</p> </li> </ul> <p></p> <p>\u53ea\u9700\u8981\u6839\u636e\\(P(x) = P_e(x^2) + x\\cdot P_o(x^2)~~\u3001~~P(-x) = P_e(x^2) - x\\cdot P_o(x^2)\\)\uff0c\u5373\u53ea\u9700\u524d4\u4e2a8\u6b21\u5355\u4f4d\u6839\\(\\omega^8_1,\\omega^8_2,\\omega^8_3,\\omega^8_4\\)\u5373\u53ef\u6c42\u51fa8\u4e2a\u503c</p> \\[ \\begin{align*} P(\\omega^8_1) &amp;=P_e((\\omega^8_1)^2) + \\omega^8_1\\cdot P_o((\\omega^8_1)^2) = P_e(\\omega^4_1) + \\omega^8_1\\cdot P_o(\\omega^4_1)\\\\ P(\\omega^8_5)=P(-\\omega^8_1)  &amp;= P_e((\\omega^8_1)^2) - \\omega^8_1\\cdot P_o((\\omega^8_1)^2) = P_e(\\omega^4_1) - \\omega^8_1\\cdot P_o(\\omega^4_1)\\\\ P(\\omega^8_2) &amp;=P_e((\\omega^8_2)^2) + \\omega^8_2\\cdot P_o((\\omega^8_2)^2) = P_e(\\omega^4_2) + \\omega^8_2\\cdot P_o(\\omega^4_2)\\\\ P(\\omega^8_6)=P(-\\omega^8_2) &amp;= P_e((\\omega^8_2)^2) - \\omega^8_2\\cdot P_o((\\omega^8_2)^2) = P_e(\\omega^4_2) - \\omega^8_2\\cdot P_o(\\omega^4_2)\\\\ P(\\omega^8_3) &amp;=P_e((\\omega^8_3)^2) + \\omega^8_3\\cdot P_o((\\omega^8_3)^2) = P_e(\\omega^4_3) + \\omega^8_3\\cdot P_o(\\omega^4_3)\\\\ P(\\omega^8_7)=P(-\\omega^8_3)  &amp;= P_e((\\omega^8_3)^2) - \\omega^8_3\\cdot P_o((\\omega^8_3)^2) = P_e(\\omega^4_3) - \\omega^8_3\\cdot P_o(\\omega^4_3)\\\\ P(\\omega^8_4) &amp;=P_e((\\omega^8_4)^2) + \\omega^8_4\\cdot P_o((\\omega^8_4)^2) = P_e(\\omega^4_4) + \\omega^8_4\\cdot P_o(\\omega^4_4)\\\\ P(\\omega^8_8)=P(-\\omega^8_4) &amp;= P_e((\\omega^8_4)^2) - \\omega^8_4\\cdot P_o((\\omega^8_4)^2) = P_e(\\omega^4_4) - \\omega^8_4\\cdot P_o(\\omega^4_4) \\end{align*} \\] <p>\u4ee5FFT\u7684\u53d8\u79cd<code>ntt</code>\u4ee3\u7801\u4e3a\u4f8b\uff1a</p> <pre><code>pub fn ntt_memoized(poly: &amp;mut [u64], poly_len: usize, modulus: u64, flag: bool) {\nntt_prelude(poly, poly_len); // \u8fed\u4ee3\u7b97\u6cd5\u9996\u5148\u53d8\u6362\u7cfb\u6570\u4f4d\u7f6e\uff0c\u6309\u539f\u6765\u7cfb\u6570\u4e3a\u6b62\u76842\u8fdb\u5236\u53cd\u8f6c\u5b58\u50a8\nlet mut x: u64;\nlet mut y: u64;\nlet mut layer_len = 1;\n// lookup_ntt \u9009\u53d6\u4e00\u7cfb\u5217\u5355\u4f4d\u6839: 1\u4e2a2\u6b21\u5355\u4f4d\u6839 + 2\u4e2a4\u6b21\u5355\u4f4d\u6839 + 4\u4e2a8\u6b21\u5355\u4f4d\u6839+...\n// \u5bf9\u4e8e poly_len \u957f\u591a\u9879\u5f0f\uff0cpoly_len = 2^n; \u5171\u9009\u53d61+2+4+... = 2^n-1\u4e2a\u5355\u4f4d\u6839\nlet ntt_cache = &amp;lookup_ntt(modulus, poly_len); let mut acc = 0; // index for wn\nlet wn = if flag {\n&amp;ntt_cache.roots;\n} else {\n&amp;ntt_cache.roots_inv;\n};\nwhile layer_len &lt; poly_len { // layer_len := 1,2,4...n/2\nfor start in (0..poly_len).step_by(layer_len * 2) {\nfor i in 0..layer_len { // layer_len = k \uff1a\u7531p_e(x)\u7684k\u4e2a\u70b9\u3001\u503c\uff0cp_o(x)\u7684k\u4e2a\u70b9\u3001\u503c\u8ba1\u7b97p(x)\u76842k\u4e2a\u70b9\u503c\n// p_e(x) ==&gt; poly[start..start + layer_len]\n// p_o(x) ==&gt; poly[start + layer_len..start + 2 x layer_len]\nx = poly[start + i]; y = wn[acc + i] * poly[start + i + layer_len] % modulus;\npoly[start + i] = (x + y) % modulus;\npoly[start + i + layer_len] = (modulus + x - y) % modulus;\n}\n}\nacc += layer_len;\nlayer_len &lt;&lt;= 1;\n}\nif flag == false {\nlet len_inv = qpow(poly_len as u64, modulus - 2, modulus); // \u6c42len\u9006\u5143\nfor i in 0..poly_len {\npoly[i] = poly[i] * len_inv % modulus;\n}\n}\n}\n</code></pre>"},{"location":"crypto/algo-reduction.html","title":"Algorithm-reduction","text":""},{"location":"crypto/algo-reduction.html#montgomery-reduction","title":"Montgomery Reduction","text":"<p>\u5728\u6a21\u8fd0\u7b97\u8ba1\u7b97\u4e2d\uff0c\u8499\u54e5\u9a6c\u5229\u6a21\u4e58\uff0c\u662f\u4e00\u79cd\u8fdb\u884c\u5feb\u901f\u6a21\u4e58\u7684\u65b9\u6cd5\u3002\u5b83\u662f\u7531\u7f8e\u56fd\u6570\u5b66\u5bb6Peter L. Montgomery\u57281985\u5e74\u63d0\u51fa\u7684\u3002\u8be5\u7b97\u6cd5\u9996\u5148\u628a\u6574\u6570\u8868\u793a\u6210\u7279\u6b8a\u7684\u5f62\u5f0f\uff0c\u79f0\u4f5cMontgomery form\u3002\u5728Montgomery form\u4e0b\u8fdb\u884c\u4e58\u6cd5\u8fd0\u7b97\uff0c\u53ef\u4ee5\u907f\u514d\u4f20\u7edf\u6a21\u4e58\u4e2d\u7684\u5f00\u9500\u6700\u5927\u7684\u9664\u6cd5\u64cd\u4f5c(\u53d8\u4e3a\u9ad8\u6548\u7684\u53f3\u79fb\u4f4d\u8fd0\u7b97)\uff0c\u5bf9\u4e8e\u8ba1\u7b97\u673a\u800c\u8a00\u53ef\u4ee5\u63d0\u5347\u7b97\u6cd5\u901f\u5ea6\u3002</p> <p>\u5f53\u7136\uff0c\u628a\u4e58\u6570\u8f6c\u6362\u6210Montgomery form\u6709\u76f8\u5e94\u7684\u5f00\u9500\uff0c\u56e0\u6b64\u5728\u8ba1\u7b97\u5355\u6b21\u6a21\u4e58\u7684\u65f6\u5019\uff0c\u8499\u54e5\u9a6c\u5229\u4e58\u6cd5\u8981\u6162\u4e8e\u4f20\u7edf\u65b9\u6cd5\u548c\u540e\u9762\u63d0\u5230\u7684<code>Barrett reduction</code>\u7b97\u6cd5\u3002\u4f46\u662f\u5728\u8fdb\u884c\u5927\u91cf\u6a21\u4e58\u8ba1\u7b97\u7684\u65f6\u5019\uff0c\u6bd4\u5982\u6a21\u5e42\u8fd0\u7b97\uff0c\u8f6c\u6210 Montgomery form \u548c\u4ece Montgomery form \u8f6c\u56de normal form \u4e24\u4e2a\u8fc7\u7a0b\u7684\u5f00\u9500\u53d8\u5f97\u5fae\u4e0d\u8db3\u9053\uff0c\u8499\u54e5\u9a6c\u5229\u4e58\u6cd5\u8981\u5feb\u4e8e\u5176\u5b83\u65b9\u6cd5\u3002RSA\u548cDH\u534f\u8bae\u8fd9\u79cd\u9700\u8981\u5927\u91cf\u5927\u6570\u6a21\u8fd0\u7b97\u7684\u7b97\u6cd5\u4f7f\u7528\u8be5\u65b9\u6cd5\u6548\u679c\u5f88\u597d\u3002</p> <p>\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a</p> <ul> <li>\\(1234\\mod 97\\)\u4e00\u822c\u5f88\u96be\u4e00\u773c\u7ed9\u51fa\u7ed3\u679c\uff0c\u4f20\u7edf\u8ba1\u7b97\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4\uff1a</li> <li>\u8ba1\u7b97\\(q = \\lfloor1234/97\\rfloor\\)\uff0c\u8fd9\u4e00\u6b65\u9aa4\u6b63\u662f\u6211\u4eec\u8981\u89e3\u51b3\u6389\u7684\u8017\u65f6\u64cd\u4f5c</li> <li>\u8ba1\u7b97\\(r = 1234-q\\times 97\\)</li> <li>\\(1234\\mod 100\\)\u5219\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u7ed9\u51fa\u7ed3\u679c34\u3002\u56e0\u4e3a\u6b64\u65f6\u8ba1\u7b97\u9664\u6cd5\u4e0d\u518d\u662f\u4e00\u4e2a\u8017\u65f6\u64cd\u4f5c\uff0c\u800c\u53d8\u6210\u4e86\u9ad8\u6548\u7684\u79fb\u4f4d\u64cd\u4f5c</li> </ul> <p>\u8499\u54e5\u9a6c\u5229\u4e58\u6cd5\u5c31\u662f\u505a\u5230\u5bf9\u4e8e\u4efb\u610f\u6b63\u6574\u6570\\(N\\)\uff0c\u53ef\u4ee5\u9009\u53d6\\(R&gt;N\\)(\u5176\u4e2d\\(\\gcd(R,N) = 1\\))\uff0c\u901a\u8fc7\u8499\u54e5\u9a6c\u5229\u4e58\u6cd5\u628a\\(\\mod N\\)\u7684\u8fd0\u7b97\u53d8\u6210\\(\\mod R\\)\u7684\u8fd0\u7b97\u3002\u9009\u53d6\u6070\u5f53\u7684\\(R\\)(\u901a\u5e38\u53d6\\(b^k\\)\u5176\u4e2d\\(k\\)\u4e3a\u6a21\u6570\u4ee5\\(b\\)\u4e3abase\u7684\u5bbd\u5ea6)\uff0cnaive\u6a21\u8fd0\u7b97\u4e2d \"\u5148\u505a\u9664\u6cd5\uff0c\u518d\u505a\u51cf\u6cd5\" \u6b65\u9aa4\u4e2d\u7684\u9664\u6cd5\u53ef\u4ee5\u53d8\u6210\u79fb\u4f4d\u8fd0\u7b97\uff0c\u4ece\u800c\u63d0\u9ad8\u6a21\u8fd0\u7b97\u7684\u6548\u7387\u3002</p> <p>\u6574\u6570\u7684\u8499\u54e5\u9a6c\u5229\u5f62\u5f0f: \u5f53\u628a\\(\\mod N\\)\u8f6c\u5316\u4e3a\\(\\mod R\\)\u65f6\uff0c\\(a\\mod N\\)\u9996\u5148\u9700\u8981\u8f6c\u5316\u4e3a\\(aR\\mod N\\)\uff0c\\(aR\\)\u79f0\u4e3a\u6574\u6570\\(a\\)\u7684Montgomery form</p> <ul> <li> <p>\u52a0\u6cd5\uff1a\\(aR+bR = (a+b)R\\pmod{N}\\)</p> </li> <li> <p>\u4e58\u6cd5\uff1a\\(aR\\times bR = (abR)R\\pmod{N}\\)</p> <p>\u4f46\u6211\u4eec\u5e0c\u671b\u5f97\u5230\u7684\u662f \\(abR\\pmod{N}\\)\uff1b\u56e0\u6b64\u4e0a\u8ff0\u7ed3\u679c\u9700\u8981\u9664\u53bb\u4e00\u4e2aR\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u8ba1\u7b97\u5176\u9006\u5143\u5f97\u5230(\u8981\u6c42\\(\\gcd(R,N) = 1\\))</p> <p>\u5373\uff0c\u7ed3\u679c\u9700\u8981\u4e58\u4e0a\\(R\\)\u6a21\\(N\\)\u7684\u9006\u5143\\(R'\\)\uff0c\u5373\\(aR\\times bR \\times R' = (ab)R\\pmod N\\)</p> </li> </ul> <p>\u5f53\u7136\u5982\u679c\u6309\u7167\u8fd9\u79cd\u5f62\u5f0f\u76f4\u63a5\u8ba1\u7b97\u54ea\u80af\u5b9a\u6bd4\u666e\u901a\u4e58\u6cd5\u6162\u5f88\u591a\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u8981\u8ba1\u7b97\\(7\\times 15\\mod 17\\)\uff0c\u9009\u53d6\\(R=100\\)\uff0c\u5219\u6211\u4eec\u9996\u5148\u8ba1\u7b97\\(7\\times 100\\pmod {17} = 3,~~15\\times 100\\pmod{17} = 4\\)\uff0c\u7136\u540e\u8ba1\u7b97\\(3\\times 4 = 12\\)\uff0c\u518d\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u8ba1\u7b97\u51fa\\(100\\)\u6a2117\u7684\u9006\u5143\uff1a\\(8\u22c5100 \u2212 47\u22c517 = 1\\)\uff0c\u6545\\(R' = 8\\)\uff0c\u4e8e\u662f\\(12\\times 8= 96\\)\uff0c\u518d\u7b97\\(96\\mod 17 = 11\\)\uff0c\u8fd8\u4e0d\u5982\u76f4\u63a5\u8ba1\u7b97\u3002\u771f\u6b63\u7684\u8ba1\u7b97\u65b9\u6cd5\u7528\u5230\u4e0b\u9762\u7684<code>REDC</code>\u7b97\u6cd5\uff0c\u662f\u6574\u4e2a\u8499\u54e5\u9a6c\u5229\u4e58\u6cd5\u7684\u6838\u5fc3\uff1a</p> <p>\u8499\u54e5\u9a6c\u5229\u7ea6\u5316\uff1a</p> <p></p> <p>\u5373\u8f93\u5165\\((T,R,N,N')\\)\uff0c\u8f93\u51fa\\(TR^{-1}\\mod N\\)</p> <p>\u7b97\u6cd5\u4e2d\\(T+mN\\)\u4e00\u5b9a\u53ef\u4ee5\u88ab\\(R\\)\u6574\u9664\uff0c\u8fd9\u4e00\u70b9\u5bb9\u6613\u9a8c\u8bc1\u3002\u4e14\u6709\\(m\\in [0, R \u2212 1]\\)\uff0c\u6545\\(T+mN=(RN \u2212 1) + (R \u2212 1)N&lt;2RN\\)\uff0c\u6545\\(t&lt;2N\\)\uff0c\u6240\u4ee5\u6700\u540e\u5982\u679c\\(t\\geq N\\)\uff0c \u5219\u53ea\u9700\u8981\u505a\u4e00\u6b21\u51cf\u6cd5</p> <p>\u6ce8\u610f\u7b97\u6cd5\u4e2d\u7684\\(\\mod R\\)\u90fd\u662f\u79fb\u4f4d\u8fd0\u7b97\uff0c\u5176\u4ed6\u7684\u90fd\u662f\u4e58\u6cd5\u548c\u52a0\u6cd5\u51cf\u6cd5</p> <p>\u6709\u4e86\u8fd9\u4e2a\u7b97\u6cd5\u4e4b\u540e\u6211\u4eec\u91cd\u590d\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u8ba1\u7b97\\(7\\times 15\\mod 17\\)\uff0c\u9996\u5148\u4ecd\u7136\u662f\u8ba1\u7b97\\(7\\times 100\\pmod {17} = 3,~~15\\times 100\\pmod{17} = 4\\)\uff0c\u7136\u540e\u8ba1\u7b97\\(3\\times 4 = 12\\)\uff0c\u6b64\u65f6\u4e0d\u9700\u8981\u8ba1\u7b97\\(R'\\)\uff0c\u800c\u662f\u8c03\u7528<code>REDC(12,100,17,47)</code>(\\(N'\\)\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97)\uff1a</p> <ul> <li>The first step sets m to \\(12 \u22c5 47 \\mod 100 = 64\\)</li> <li>The second step sets t to \\((12 + 64 \u22c5 17) / 100\\)\uff0c\u6ce8\u610f\u8fd9\u91cc12+64\u00b717 = 1100\uff0c\u53ef\u4ee5\u88ab100\u6574\u9664</li> </ul> <p>\u5f97\u5230\u7ed3\u679c\u4e3a11\uff0c\u5c0f\u4e8e\u6a21\u657017\uff0c\u56e0\u6b6411\u5c31\u662f\u6700\u7ec8\u7ed3\u679c</p>"},{"location":"crypto/algo-reduction.html#barrett-reduction","title":"Barrett reduction","text":"<p>Barrett reduction - Wikipedia</p>"},{"location":"crypto/algo-reduction.html#single-word-barrett-reduction","title":"Single-word Barrett reduction","text":"<p>\u4e3a\u4e86\u8ba1\u7b97\\(c = a \\pmod n\\)\uff0c\u6700\u539f\u59cb\u7684<code>reduce</code>\uff1a</p> <pre><code>func reduce(a uint) uint {\nq := a / n  // Division implicitly returns the floor of the result.\nreturn a - q * n\n}\n</code></pre> <p>\u5176\u4e2d\u9664\u6cd5\u6bd4\u8f83\u6162\uff0cBarret reduction\u8003\u8651\u7528\\(q = m/2^k\\)\u6765\u8fd1\u4f3c\\(1/n\\)\uff0c\u8fd9\u6837\u9664\u4ee5\\(n\\)\u5c31\u53d8\u6210\u4e86\u4e58\u4ee5\\(m\\)\u518d\u9664\u4ee5\\(2^k\\)\u3002\u56e0\u6b64\u5bf9\u4e8e\u4e00\u4e2a\u56fa\u5b9a\u7684\u6a21\u6570\\(n\\)\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684k\uff0c\u5e76\u9884\u8ba1\u7b97\u51fam\uff0c\u8fd9\u6837\u4e4b\u540e\u6bcf\u6b21\u8ba1\u7b97\\(a\\mod n,~b\\mod n,~c\\mod n~ \\cdots\\)\u65f6\uff0cBarret reduction\u5c06\u5176\u8f6c\u5316\u4e3a\u4e00\u6b21\u4e58\u6cd5\u548c\u4e00\u6b21\u79fb\u4f4d\u8fd0\u7b97\uff0c\u907f\u514d\u4e86\u9664\u6cd5\u3002</p> <p>\u8fd9\u91cc\u53ef\u4ee5\u770b\u5230\uff0c\u7b97\u6cd5\u8981\u6c42\u6211\u4eec\u9009\u53d6\u5408\u9002\u7684\\(k\\)\u5e76\u8ba1\u7b97\u51fa\u5408\u9002\u7684\\(m\\)\uff0c\u4fdd\u8bc1\\(m/2^k\\)\u80fd\u591f\u8fd1\u4f3c\\(1/n\\) <pre><code>func reduce(a uint) uint {\nq := (a * m) &gt;&gt; k\nreturn a - q * n\n}\n</code></pre></p> <p>\u4e3a\u4e86\u9009\u53d6\u5408\u9002\u7684m\uff0c\u5982\u679c\u5bf9\u4e8e\u7ed9\u5b9ak\uff0c\u56e0\u4e3a\\(q = m/2^k = 1/n\\)\uff0c\u90a3\u4e48\u6709\\(m=2^k/n\\)\u3002\u540c\u65f6\u4e3a\u4e86\u4fdd\u8bc1m\u662f\u6574\u6570\u5e76\u4e14\u9632\u6b62\u7b97\u51fa\u7684\\(\\frac{a\\cdot m}{2^k}\\)\u8fc7\u5927\uff0c\u901a\u5e38\u53d6\\(m = \\lfloor\\frac{2^k}{n}\\rfloor\\)</p> <p>\u90a3\u4e48k\u9009\u4ec0\u4e48\u7cbe\u5ea6\u5408\u9002\u5462\uff1f\u7b54\u6848\u662f\u901a\u5e38\u53d6\\(k\\geq \\lceil 2\\log_2 n \\rceil\\)(\u5982\u679c\u6a21\u6570n\u662f1024 bits\uff0c\u90a3\u4e48\u53d6k = 20)\u3002\u4e8b\u5b9e\u4e0ak\u7684\u9009\u53d6\u9650\u5236\u7b97\u6cd5\u80fd\u591f\u8ba1\u7b97\u7684a\u7684\u53d6\u503c\u8303\u56f4\uff1a</p> <p>\u7528\\(m/2^k\\)\u8fd1\u4f3c\\(1/n\\)\u7684\u8bef\u5dee\u8bb0\u4f5c\\(e\\)\uff0c\u5219\\(e = \\frac{1}{n}-\\frac{m}{2^k}\\)\uff0c\u56e0\u6b64\u8ba1\u7b97\u51fa\u7684\\(q = a \\cdot \\frac{m}{2^k}\\)\u7684\u8bef\u5dee\u4e3a\\(a\\cdot e\\)\uff0c\u5982\u679c\u8981\u4fdd\u8bc1\u7ed3\u679c\u662f\u6709\u6548\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u4fdd\u8bc1\\(ae&lt;1\\)\uff0c\u5219\u6709\\(a&lt;1/e\\)\u3002</p>"},{"location":"crypto/algo-rsa.html","title":"Algorithm-rsa","text":""},{"location":"crypto/algo-rsa.html#rsa","title":"RSA\u52a0\u5bc6","text":"<ol> <li> <p>\u968f\u673a\u9009\u62e9\u5927\u7d20\u6570\\(p\u3001q\\)</p> </li> <li> <p>\u8ba1\u7b97\\(n = p\\cdot q~~,~~\\varphi(n) = (p-1)(q-1)\\)  \u5176\u4e2d\\(\\varphi()\\)\u4e3a\u6b27\u62c9\u51fd\u6570\uff0c\\(\\varphi(n) = \\varphi(p)\\varphi(q)\\)</p> </li> <li> <p>\u9009\u62e9\\(e:gcd(e,(\\varphi(n))) = 1\\)</p> </li> <li> <p>\u786e\u5b9a\\(d:ed\\equiv 1 \\pmod {\\varphi(n)}\\)  \u5176\u4e2d \\(\\varphi(n) = (p-1)(q-1)\\)</p> </li> <li> <p>\u52a0\u5bc6\uff1a\\(c = m^e\\pmod{n}\\)</p> </li> </ol> <p>\u89e3\u5bc6\uff1a\\(m = c^d\\pmod{n}\\)</p> <ul> <li> <p>\u5176\u4e2d\\((n,e)\\)\u4f5c\u4e3a\u516c\u94a5\u516c\u5f00\uff0c\\((n,d)\\)\u4f5c\u4e3a\u79c1\u94a5\u4fdd\u5bc6</p> </li> <li> <p>\u654c\u624b\u5982\u679c\u60f3\u8981\u76f4\u63a5\u89e3\u5bc6\uff0c\u5219\u9700\u8981\u77e5\u9053d\uff0c\u8ba1\u7b97d\u5219\u9700\u8981\u8ba1\u7b97\\(\\varphi(n)\\)\uff0c\u800c\u7531\\(n\\rightarrow\\varphi(n)\\)\u76ee\u524d\u6ca1\u6709\u76f4\u63a5\u89e3\u6cd5\u30101\u3011\uff0c\u53ea\u80fd\u5206\u89e3\\(n\\)\u6c42\u51fa\\(pq\\)\uff0c\u56e0\u6b64RSA\u7684\u5b89\u5168\u6027\u4f9d\u8d56\u4e8e\u56e0\u5b50\u5206\u89e3\u7684\u56f0\u96be\u6027</p> </li> </ul> <p>\u30101\u3011\uff1a\\(\\varphi(n) = (p-1)(q-1) = pq-(p+q)+1\\Longrightarrow p+q = n-\\varphi(n)+1\\)\uff0c\u5982\u679c\u77e5\u9053\\(\\varphi(n)\\)\uff0c\u5219\u53ef\u4ee5\u5f88\u8f7b\u6613\u5730\u5206\u89e3n\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u8ba1\u7b97\\(\\varphi(n)\\)\u5e76\u4e0d\u6bd4\u5206\u89e3\\(n\\)\u5bb9\u6613</p>"},{"location":"crypto/algo-rsa.html#rsa_1","title":"RSA\u89e3\u5bc6\u8fc7\u7a0b\u7684\u6b63\u786e\u6027\u8bc1\u660e","text":"<p>\\(c = m^e\\pmod{n}\\quad m = c^d\\pmod{n}\\quad\\Longrightarrow m^{ed}\\equiv m\\pmod{n}\\)</p> <p>\u8bc1\u660e\uff1a\u56e0\u4e3a\\(ed\\equiv 1 \\pmod {\\varphi(n)}\\Longrightarrow \u5373\u8bc1m^{k\\varphi(n)+1}\\equiv m\\pmod{n}\\)</p> <p>\u8fd9\u91cc\u4e0d\u80fd\u76f4\u63a5\u5199\u6b27\u62c9\u5b9a\u7406\uff0c\u56e0\u4e3a\u6b27\u62c9\u5b9a\u7406\\(m^{\\varphi(n)}\\equiv1\\pmod{n}\\)\u8981\u6c42\\(m\\in n^*\\)</p> <p>\u5206\u60c5\u51b5\uff1a</p> <ul> <li> <p>\\(p\\mid m\\)  \u5219\u6709 \\(m^{\\varphi(n)+1}\\equiv m \\pmod p\\)</p> </li> <li> <p>\\(p\\nmid m\\) \u5219\u6709 \\(m^{p-1}\\equiv 1 \\pmod p \\Longrightarrow m^{k(p-1)(q-1)+1}\\equiv m\\pmod p\\)</p> </li> </ul> <p>\u56e0\u6b64\u65e0\u8bba\\(p|m\\) or \\(p\\nmid m\\)\uff0c\u5747\u6709\\(m^{k\\varphi(n)+1}\\equiv m\\pmod{p}\\)\uff0c\u540c\u7406\u53ef\u4ee5\u8bc1\u660e\\(m^{k\\varphi(n)+1}\\equiv m\\pmod{q}\\)</p> <p>\u800c\\(pq\\)\u4e92\u7d20\uff0c\u56e0\u6b64\u6839\u636e\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u6709\\(m^{k\\varphi(n)+1}\\equiv1\\pmod{n}\\)</p>"},{"location":"crypto/algo-rsa.html#rsa_2","title":"RSA\u4e2d\u51e0\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6","text":"<p>\u6a21\\(n\\)\u8fd0\u7b97\uff0c\u51762\u8fdb\u5236\u957f\u5ea6\u4e3a\\(k\\)\uff1a</p> \u8fd0\u7b97 \u65f6\u95f4\u590d\u6742\u5ea6 \u7b97\u6cd5 \u52a0\u6cd5 \\(O(k)\\) \u51cf\u6cd5 \\(O(k)\\) \u4e58\u6cd5 \\(O(k^2)\\) \u6c42\u9006 \\(O(k^3)\\) \u6a21\u5e42(\u6307\u6570\u4e3ac) \\(O(\\log c \\times k^2)\\) \u5e73\u65b9\u4e58\u7b97\u6cd5"},{"location":"crypto/algo-rsa.html#_1","title":"\u89e3\u5bc6\u7b97\u6cd5\u7684\u52a0\u901f\uff1a","text":"<p>\u56e0\u4e3a\u89e3\u5bc6\u65b9\u77e5\u9053p\u7684\u5206\u89e3m\u3001n\u6240\u4ee5\u53ef\u4ee5\u628a\\(m = {c}^d\\pmod n\\)\u6362\u6210\u4e24\u4e2a\u65b9\u7a0b\uff1a</p> \\[\\begin{align*} m_1 &amp;= c_1^{d_1}\\pmod p\\\\ m_2 &amp;= c_2^{d_2}\\pmod q\\\\ \\end{align*}\\] <p>\u5176\u4e2d</p> <ul> <li> <p>\\(c_1 = c \\pmod p,c_2 = c\\pmod q\\)</p> </li> <li> <p>\\(d_1 = d\\pmod {p-1},d_2 = d\\pmod {q-1}\\)</p> </li> </ul> <p>\u7136\u540e\u7528CRT\u9006\u56de\u53bb\u5373\u53ef\uff0c\u80fd\u591f\u63d0\u9ad84-8\u500d</p>"},{"location":"crypto/algo-rsa.html#rsa_3","title":"RSA\u5b89\u5168\u6027\u5206\u6790","text":""},{"location":"crypto/algo-rsa.html#drightarrown","title":"\u5047\u8bbe\u5b58\u5728\u8ba1\u7b97d\u7684\u7b97\u6cd5\\(\\rightarrow\\)\u6784\u9020\u5206\u89e3n\u7684\u7b97\u6cd5","text":"<p>Las Vegas\u7b97\u6cd5</p> <ul> <li>\u57fa\u672c\u601d\u60f3\uff1a\u5229\u75281\u6a21n\u7684\u975e\u5e73\u51e1\u5e73\u65b9\u6839</li> </ul> <p>\\(x^2 \\equiv1\\pmod{n}\\)\u5373\\(n|(x-1)(x+1)\\Longrightarrow pq|(x-1)(x+1)\\)\u4e14\u6709\\(n\\nmid x-1 \\quad,\\quad n\\nmid x+1\\) </p> <p>\u56e0\u4e3a\u5982\u679c\\(n\\mid x-1\\rightarrow x\\equiv1\\pmod{n}\\)\uff0cx\u662f\u5e73\u51e1\u5e73\u65b9\u6839\u3002\\(n\\mid x+1\\)\u540c\u7406</p> <p>\u82e5\u8981\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u5219\u53ea\u6709\u60c5\u51b5</p> <ol> <li>\\(p|x-1,q|x+1\\)</li> <li>\\(p|x+1,q|x-1\\)</li> </ol> <p>\u5373\u6709\\(\\gcd(x+1,n) = p(\u6216q)\u6216\u8005\\gcd(x-1,n) = q(\u6216p)\\)</p> <p>\u5c31\u6210\u529f\u5206\u89e3\u4e86n\uff0c\u4e0b\u9762\u8003\u8651\u5982\u4f55\u6c42\u89e3\u975e\u5e73\u51e1\u5e73\u65b9\u6839</p> <ul> <li>\u6c42\u89e3\u975e\u5e73\u51e1\u5e73\u65b9\u6839\uff08\u9700\u8981\\(e\uff0cd\\)\uff09\uff1a</li> </ul> <p>\u56e0\u4e3a\\(ed\\equiv1\\pmod{\\varphi(n)}\\)\uff0c\u6240\u4ee5\\(ed-1 = k\\varphi(n)\\)</p> <p>\u8868\u793a\u6210\\(ed-1 = 2^s\\cdot r\\)\uff0c\u968f\u673a\u9009\u62e9\\(w\\in\\{1,2,3\\cdots n\\}\\)\u5982\u679c\\(\\gcd(w,n) \\neq 1\\)\uff0c\u5219\u5206\u89e3\u6210\u529f\u00b7\u00b7\u00b7\uff08\u6982\u7387\u5f88\u4f4e\uff09</p> <p>\u5426\u5219\u7684\u8bdd\uff0c\\(w\\in n^*\\)\uff0c\u8ba1\u7b97\\(w^{2^ir}\\)\uff0c\u5982\u679c\\(w^{2^ir} = 1\\pmod{n}\\)\uff0c\u4e14\\(w^{2^{i-1}r}\\neq{-1}\\pmod{n}\\)\uff0c\u5219 \\(w^{2^{i-1}r}\\)\u5373\u4e3a\u4e00\u4e2a\u975e\u5e73\u51e1\u89e3</p> <p>\u5176\u4e2d\\(i\\in\\{0,1,2\\cdots s\\}\\)\uff0c\u5982\u679c\u904d\u53860-s\u5747\u672a\u627e\u5230\uff0c\u5219\u53e6\u9009\u4e00\u4e2aw\u8ba1\u7b97\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u6210\u529f\u7684\u6982\u7387\u5927\u4e8e\\(\\frac{1}{2}\\)</p> <p>\u4e0a\u8ff0\u653b\u51fb\u544a\u8bc9\u6211\u4eec\uff1a\u4e00\u65e6\u89e3\u5bc6\u6307\u6570\u6cc4\u9732\uff0c\u5fc5\u987b\u8981\u66f4\u6362\u6a21n\uff0c\u4e0d\u80fd\u4ec5\u66f4\u6362d\uff0c\u5426\u5219\u654c\u624b\u53ef\u4ee5\u5206\u89e3n</p>"},{"location":"crypto/algo-rsa.html#_2","title":"\u540c\u6a21\u653b\u51fb","text":"<p>\u653b\u51fb\u573a\u666f\uff1a\u4e00\u7ec4\u7528\u6237\uff08A\u3001B\uff09\u5171\u4eab\u6a21n\uff0c\u4f7f\u7528\u4e0d\u540c\u7684\u52a0\u5bc6\u6307\u6570e\u548c\u89e3\u5bc6\u6307\u6570d\uff0cC\u5411A\u3001B\u53d1\u9001\u6d88\u606f\uff0c\u654c\u624b\u53ef\u4ee5\u4e0d\u77e5\u9053\u89e3\u5bc6\u6307\u6570\u83b7\u53d6\u660e\u6587</p> <p>\u8bbe\\(m\\)\u662f\u6d88\u606f\uff0c\u5171\u540c\u7684\u6a21\u6570\u662f\\(n\\)\uff0c\u4e24\u4e2a\u5bc6\u6587\u5206\u522b\u4e3a</p> <ul> <li>\\(C_1 = m^{e_1}\\pmod{n}\\)</li> <li>\\(C_2 = m^{e_2}\\pmod{n}\\)</li> </ul> <p>\u5982\u679c\\(e_1,e_2\\)\u4e92\u7d20\uff0c\u53ef\u4ee5\u6839\u636e\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u8ba1\u7b97\u51fa\\(r,s\u6ee1\u8db3re_1+se_2 = 1\\)\uff0c\u5219\\(C_1^rC_2^s = m^{e_1r}m^{e_2s} = m\\)</p> <p>\u5373\u654c\u624b\u4e0d\u7528\u83b7\u5f97\u89e3\u5bc6\u6307\u6570\uff0c\u4e5f\u53ef\u4ee5\u6062\u590d\u660e\u6587</p> <p>\u4e0a\u8ff0\u653b\u51fb\u544a\u8bc9\u6211\u4eec\uff1a\u4e0d\u80fd\u5728\u4e00\u7ec4\u7528\u6237\u4e4b\u95f4\u5171\u4eab\u6a21n</p>"},{"location":"crypto/algo-rsa.html#_3","title":"\u9009\u62e9\u5bc6\u6587\u653b\u51fb","text":"<p>\u5229\u7528\u4e86RSA\u52a0\u5bc6\u540c\u6001\u7684\u6027\u8d28\uff0c\u5373\\(Enc(m_1)Enc(m_2) = Enc(m_1m_2)\\)</p> <p>\u8bbe\u516c\u94a5\u4e3a\\((n,e)\\)\u5bf9\u4e8e\u654c\u624b\u60f3\u8981\u7834\u8bd1\u7684\u6d88\u606f\\(C^*\\)\uff0c\u5176\u8ba1\u7b97\\(C' =C^*\\cdot x^e\\pmod{n}\\)</p> <p>\u8be2\u95ee\u83b7\u5f97\\(C'\\)\u5bf9\u5e94\u7684\u660e\u6587\\(m'\\)\uff0c\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\\(m' = m^*\\cdot x\\pmod{n}\\)</p> <p>\\(m'/x\\)\u5373\u4e3a\\(m^*\\)</p>"},{"location":"crypto/algo-rsa.html#rsa-oaep","title":"\u514b\u670d\u540c\u6001\u653b\u51fb\u7684RSA OAEP\u6a21\u5f0f","text":"<p>TODO: </p>"},{"location":"crypto/algo-rsa.html#_4","title":"\u5176\u5b83\u95ee\u9898","text":"<ul> <li>\u5b89\u5168\u9690\u60a3\uff1a\u4e0d\u540c\u7684\u6a21\u5171\u4eab\u7d20\u56e0\u5b50</li> <li>\u53c2\u6570\u8bbe\u7f6e\uff1ap\u3001q\u5b89\u5168\u7d20\u6570\uff0c\u4e0d\u80fd\u592a\u63a5\u8fd1\uff08\u592a\u63a5\u8fd1\u53ef\u4ee5\u76f4\u63a5\u5f00\u65b9\u7a77\u641c\uff0c\u6709\u592a\u5c0f\u7684\u56e0\u5b50\u53c8\u4f1a\u5bb9\u6613\u88ab\u5206\u89e3\uff09\uff0c\u4e00\u822c\u76f8\u5dee\u51e0\u4f4d</li> <li>\u52a0\u5bc6\u89e3\u5bc6\u6307\u6570\u4e0d\u80fd\u8bbe\u7f6e\u592a\u5c0f</li> </ul>"},{"location":"crypto/algo-rsa.html#_5","title":"\u7d20\u6027\u68c0\u6d4b\u4e0e\u56e0\u5b50\u5206\u89e3","text":""},{"location":"crypto/algo-rsa.html#_6","title":"\u7d20\u6027\u68c0\u6d4b","text":""},{"location":"crypto/algo-rsa.html#solovay-strassen","title":"Solovay-Strassen\u7b97\u6cd5","text":"<ul> <li>\u9519\u8bef\u6982\u7387\u81f3\u591a\u4e3a\\(1/2\\)</li> </ul>"},{"location":"crypto/algo-rsa.html#miller-rabin","title":"Miller-Rabin\u7b97\u6cd5","text":"<ul> <li>\u9519\u8bef\u6982\u7387\u81f3\u591a\u4e3a\\(1/4\\)</li> <li>\u901a\u8fc7\u7684\u7d20\u6570\u53ef\u80fd\u662f\u5f3a\u4f2a\u7d20\u6570</li> </ul> <p>\u56e0\u5b50\u5206\u89e3\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\uff1a</p> \u7b97\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6 \u5907\u6ce8 Pollard p-1\u7b97\u6cd5 \\(O(B~\\log B(\\log n)^2+(\\log n)^3)\\) ( B\u6b21\u6a21\u5e42 + 1\u6b21GCD) \u544a\u8bc9\u6211\u4eec\u8981\u9009\u5b89\u5168\u7d20\u6570\uff0cp-1\u5e94\u8be5\u6709\u8db3\u591f\u5927\u7684\u7d20\u56e0\u5b50 Pollard \\(\\rho\\)\u7b97\u6cd5 \\(1.17\\sqrt{p}\\) Dixon\u968f\u673a\u5e73\u65b9\u7b97\u6cd5 \\(O(e^{1+o(1)\\sqrt{\\ln n \\ln \\ln n}})\\)"},{"location":"crypto/algo-rsa.html#pollard-p-1","title":"Pollard p-1\u7b97\u6cd5","text":"<p>\u5047\u5b9a\\(p\\)\u662f\\(n\\)\u7684\u4e00\u4e2a\u7d20\u56e0\u5b50\uff0c\u4e14\\(p-1\\)\u7684\u6bcf\u4e00\u4e2a\u7d20\u6570\u5e42\u6b21\\(q\\)\u6709\\(q\\leqslant B\\)\uff0c\u5219\u6709\\((p-1)|B!\\)</p> <p>\u4ee4\\(a\\equiv2^{B!}\\pmod{n}\\)\uff0c\u56e0\\((p-1)|B!\\)\uff0c\u6545\u6709\\(a\\equiv 2^{p-1}\\pmod{p}\\Longrightarrow a\\equiv1\\pmod{p}\\)</p> <p>\u6545\u6709\\(p|a-1\\)\uff0c\u6c42\\(\\gcd(a-1,n)\\)\u5373\u53ef\u5f97\u5230\u7d20\u56e0\u5b50\\(p\\)</p> <p></p>"},{"location":"crypto/algo-rsa.html#pollard-rho","title":"Pollard \\(\\rho\\)\u7b97\u6cd5","text":"<p>\u5bfb\u627e\u4e24\u4e2a\u5143\u7d20\\(x_1,x_2\\)\u6ee1\u8db3\\(x_1\\neq x_2\\pmod{n},x_1=x_2\\pmod{p}\\Longrightarrow p|x_1-x_2\\)</p> <p>\u6c42\\(\\gcd(x_1-x_2,p)\\)\u5373\u53ef\u5206\u89e3</p>"},{"location":"crypto/algo-rsa.html#dixon","title":"Dixon\u968f\u673a\u5e73\u65b9\u7b97\u6cd5","text":"<p>\\(x\\neq \\pm y\\pmod{n}\\)</p> <p>\\(x^2\\equiv y^2\\pmod{n}\\)</p> <p>\\(x^2-y^2\\equiv0\\pmod{n}\\Longrightarrow n|(x+y)(x-y)\\)</p> <p>\u5047\u8bbe \\(n\\)\u5206\u89e3\u6210\\(pq\\)\uff0c\u5219\u56e0\u4e3a\\(n\\nmid x\\pm y\\)\uff0c\u6545\u53ea\u6709\\(p|(x+y),q|(x-y)\\)\u6216\\(p|(x-y),q|(x+y)\\)\u4e24\u79cd\u60c5\u51b5</p> <p>\u6c42\\(\\gcd(x+y,n)\\)\u5373\u53ef\u5f97\u5230\u4e00\u4e2a\u56e0\u5b50</p>"},{"location":"crypto/algo-rsa.html#eigamal","title":"EIGamal\u52a0\u5bc6","text":"<p>\u5728\u5faa\u73af\u7fa4\\(Z_p^*\\)\u4e0a\uff0c\u5faa\u73af\u7fa4\u7684\u9636\u4e3a\\(p-1\\)</p> <p>\u52a0\u5bc6\uff1a</p> <ul> <li>\u9009\u62e9\u968f\u673a\u5143\u7d20k</li> <li>\u8ba1\u7b97\\(c_1 = g^k\\pmod p,c_2 = y^k\\cdot m\\pmod p\\)</li> <li>\u8f93\u51fa\\((c_1,c_2)\\)</li> </ul> <p>\\(y^k\\)\u88ab\u89c6\u4e3a\u4e00\u4e2a\u5747\u5300\u968f\u673a\u5143\u7d20\uff0c\u4f7f\u7528\u4e86\u5747\u5300\u968f\u673a\u5143\u7d20\u9690\u85cf\u660e\u6587m</p> <p>\u89e3\u5bc6\uff1a</p> <ul> <li>\u56e0\u4e3a\\(y^k = (g^x)^k = (c_1)^x\\)</li> <li>\u6240\u4ee5\\(m = c_2/(c_1)^x \\pmod p\\)</li> </ul>"},{"location":"crypto/algo-rsa.html#_7","title":"\u79bb\u6563\u5bf9\u6570\u95ee\u9898","text":"<p>\u5bf9\u4e8e\\(a^\\alpha = \\beta\\pmod n\\)</p> <p>\u5df2\u77e5\\(\\alpha,\\beta\\)\u6c42\u89e3\\(a\\)</p> <p>\u6c42\u89e3\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u65b9\u6cd5\uff1a</p> \u65b9\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6 \u5907\u6ce8 Shanks\uff08BSGS\uff09 \\(O(\\sqrt{n})\\) \u544a\u8bc9\u6211\u4eec\u5faa\u73af\u7fa4\u7684\u9636\u5e94\u8be5\u8db3\u591f\u5927\u4fdd\u8bc1\u4e0d\u5bb9\u6613\u88ab\u5206\u89e3 Pohlig-Hellman \u544a\u8bc9\u6211\u4eec\u7fa4\u7684\u9636\u5e94\u8be5\u6709\u8db3\u591f\u5927\u7684\u7d20\u56e0\u5b50 Pollard-\\(\\rho\\) \\(O(\\sqrt{n})\\) \u544a\u8bc9\u6211\u4eec\u5faa\u73af\u7fa4\u7684\u9636\u5e94\u8be5\u8db3\u591f\u5927\u4fdd\u8bc1\u4e0d\u5bb9\u6613\u88ab\u5206\u89e3 \u6307\u6570\u8ba1\u7b97\u7b97\u6cd5 \\(O(e^{(1/2+o(1))\\sqrt{\\ln{p\\ln \\ln p}}})\\)\uff08\u5728\u7ebf\u9636\u6bb5\uff09 \u53ea\u9488\u5bf9\\(z_p^*\\)\u4e0a\u7684\u79bb\u6563\u5bf9\u6570\u95ee\u9898"},{"location":"crypto/ecdsa-pk-recovery.html","title":"ECDSA Public Key Recovery","text":"<p>\u692d\u5706\u66f2\u7ebf\u75286\u5143\u7ec4\u8868\u793a\uff1a\\(T=(p,a,b,G,n,h)\\)\uff1b\u5176\u4e2d\u7d20\u6570\\(p\\)\u4e3a\\(\\mathbb{F}_p\\)\u7684\u9636\uff0c\\(a,b\\)\u4e3a\u66f2\u7ebf\u7684\u7cfb\u6570\uff0c\\(G\\)\u4e3a\u751f\u6210\u5143\uff0c\\(n\\)\u4e3a\u9636\uff0c\\(h\\)\u4e3aco-factor</p>"},{"location":"crypto/ecdsa-pk-recovery.html#ecdsa","title":"ECDSA","text":"<ul> <li>\u5bc6\u94a5\u5bf9\uff1a\\((Q,d)\\)\uff0c\u5176\u4e2d\\(Q = d\\cdot G\\)</li> <li>\u7b7e\u540d\uff1a</li> <li>\u9009\u62e9\\(k\\in [1,n-1]\\)</li> <li>\u8ba1\u7b97\\(P = (x,y)=k\\cdot G\\)\uff0c\\(r=x\\mod n\\)\uff0c\u82e5\\(r=0\\)\uff0c\u56de\u5230\u7b2c1\u6b65</li> <li>\u8ba1\u7b97\u6d88\u606f\u6458\u8981\\(e=H(m)\\)</li> <li>\u8ba1\u7b97\\(s=k^{-1}(e+dr)\\mod n\\)\uff0c\u82e5\\(s=0\\)\uff0c\u56de\u5230\u7b2c\u4e00\u6b65</li> <li>\u8f93\u51fa\\((r,s)\\)\uff1b\u6ce8\u610f\u5230\u6709\uff1a\\(k=s^{-1}(e+dr)\\)\uff0c\u56e0\u6b64\\(k\\cdot G = s^{-1}(e+dr)\\cdot G=s^{-1}(e\\cdot G+r\\cdot Q)\\)</li> <li>\u9a8c\u7b7e\uff1a</li> <li>\u68c0\u9a8c\\(r,s\\)\u662f\u5426\u5904\u4e8e\\([1,n-1]\\)</li> <li>\u8ba1\u7b97\u6d88\u606f\u6458\u8981\\(e=H(m)\\)</li> <li>\u8ba1\u7b97\\(w=s^{-1}\\mod n\\)</li> <li>\u8ba1\u7b97\\(u_1 = es^{-1},u_2 = rs^{-1}\\)</li> <li>\u8ba1\u7b97\\(X(x_1,y_1)=u_1G+u_2Q\\)\uff1b\u5408\u6cd5\u6027\uff1a\\(s^{-1}(eG+rdG)=s^{-1}(e+dr)G=kG=P\\)</li> <li>\u82e5\\(X=0\\)\uff0c\u62d2\u7edd\uff1b\u5426\u5219\u8ba1\u7b97\\(v = x_1\\)\uff0c\u82e5\\(v=r\\)\uff0c\u63a5\u53d7</li> </ul>"},{"location":"crypto/ecdsa-pk-recovery.html#public-key-recovery","title":"Public Key Recovery","text":"<p>\u8f93\u5165\uff1a\u692d\u5706\u66f2\u7ebf\\(T\\)\uff08\u516d\u5143\u7ec4\u8868\u793a\uff09\uff1b\u6d88\u606f\\(m\\)\uff1b\u5bf9\u4e8e\u6d88\u606f\\(m\\)\u7684ECDSA\u7b7e\u540d\\((r,s)\\)</p> <p>\u8f93\u51fa\uff1a\u53ef\u4ee5\u5bf9\u4e8e\u6d88\u606f\\(m\\)\u548c\u7b7e\u540d\\((r,s)\\)\uff0c\u6b63\u786e\u9a8c\u7b7e\u7684\u516c\u94a5\\(Q\\)\uff08\u66f2\u7ebf\u4e0a\u7684\u70b9\uff09</p> \\[ \\begin{align*} Q &amp;= r^{-1}(sP-eG)\\\\ &amp;=r^{-1}(k^{-1}(e+dr)kG-eG)\\\\ &amp;=r^{-1}((e+dr)G-eG)\\\\ &amp;=dG \\end{align*} \\] <p>\u56e0\u6b64\u5728\u5df2\u77e5\u7b7e\u540d\\((r,s)\\)\u4ee5\u53ca\\(e=h(m)\\)\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u77e5\u9053\\(P=kG\\)\uff0c\u5c31\u53ef\u4ee5\u6062\u590d\u7b7e\u540d\u516c\u94a5\u3002\u4f46\u662f\u6211\u4eec\u4e0d\u77e5\u9053\\(P\\)\uff0c\u6211\u4eec\u53ea\u77e5\u9053\\(r=x\\mod n\\)\uff0c\u5176\u4e2d\\(x\\in [1,p]\\)\u4e3a\\(P\\)\u7684\u6a2a\u5750\u6807\u3002\u4e00\u822c\u6765\u8bf4\\(n\\)\u662f\u5c0f\u4e8e\\(p\\)\u4e0d\u592a\u591a\u7684\u6570\uff0c\u56e0\u6b64\u4e00\u4e2a\\(r\\)\u53ef\u80fd\u5bf9\u5e94\u4e24\u4e2a\\(x\\)\uff1a</p> <ul> <li>\u5982\u679c\\(r&lt;p-n\\)\uff0c\u5219\\(x=r\\) \u6216 \\(x=r+n\\)</li> <li>\u5982\u679c\\(r&gt;p-n\\)\uff0c\u5219\\(x=r\\)</li> </ul> <p>But note that the case of two possible X coordinates for a single \\(r\\) is very rare; indeed, this will happen randomly with probably about \\(2^{\u2212128}\\), i.e. never in practice (although you might be able to force it with specially crafted data). </p> <p>\u4e0d\u8fc7\u6211\u4eec\u5728\u786e\u5b9a\u4e86\\(P\\)\u7684\u6a2a\u5750\u6807\\(x\\)\u540e\uff0c\u4e00\u4e2a\u6a2a\u5750\u6807\\(x\\)\u5bf9\u5e94\u4e24\u4e2a\u66f2\u7ebf\u4e0a\u7684\u70b9\\(P_1\\)\u548c\\(P_2\\)\uff0c\u4e24\u8005\u7eb5\u5750\u6807\u4e92\u4e3a\u76f8\u53cd\u6570\uff0c\u800c\\(P_1\\)\u548c\\(P_2\\)\u90fd\u80fd\u9a8c\u7b7e(\u5982\u4e0b\u6240\u793a)\u3002\u56e0\u6b64\u5bf9\u4e8e\u4e00\u4e2a\u7b7e\u540d\uff0c\u7406\u8bba\u4e0a\u81f3\u591a\u67094\u4e2a\u53ef\u80fd\u6b63\u786e\u9a8c\u7b7e\u7684\u516c\u94a5\\(Q'\\)</p> \\[ \\begin{align*} X &amp;= u_1G+u_2Q'&amp;\\\\ &amp;=s^{-1}eG+rs^{-1}Q'\\\\ &amp;=s^{-1}eG+rs^{-1}r^{-1}(sP'-eG)\\\\ &amp;=P'=(x,y') \\end{align*} \\] <p>\u7b7e\u540d\u65b9\u9644\u52a0\u4e00\u4e9b\u989d\u5916\u8f85\u52a9\u4fe1\u606f\u53ef\u4ee5\u4f7f\u9a8c\u8bc1\u65b9\u5b8c\u6210\u552f\u4e00\u7684\u516c\u94a5\u6062\u590d\uff0c\u8282\u7701\u4f20\u8f93\u516c\u94a5\u7684\u5e26\u5bbd\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\uff0c\u65e0\u6548\u7684\u7b7e\u540d\u6216\u6765\u81ea\u4e0d\u540c\u6d88\u606f\u7684\u7b7e\u540d\u5c06\u5bfc\u81f4\u6062\u590d\u51fa\u4e00\u4e2a\u4e0d\u6b63\u786e\u7684\u516c\u94a5\uff1b\u53ea\u6709\u5728\u7b7e\u540d\u8005\u7684\u516c\u94a5(\u6216\u5176\u6563\u5217)\u4e8b\u5148\u5df2\u77e5\u7684\u60c5\u51b5\u4e0b\uff0c\u6062\u590d\u7b97\u6cd5\u624d\u80fd\u7528\u4e8e\u68c0\u67e5\u7b7e\u540d\u7684\u6709\u6548\u6027\u3002</p> <p>[\u53c2\u8003\u8d44\u6599]</p> <ul> <li>Recovery public key from secp256k1 signature and message - Cryptography Stack Exchange</li> <li>Elliptic Curve Digital Signature Algorithm - Wikipedia</li> </ul>"},{"location":"crypto/seal-ckks.html","title":"SEAL-CKKS","text":"<p>\u8fd9\u7bc7\u6587\u7ae0\u662f\u9605\u8bfbSEAL\u5e93\u7684\u8bb0\u5f55\uff0c\u9996\u5148\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u4ecb\u7ecdSEAL\u5e93CKKS\u65b9\u6848\u7684\u8c03\u7528\uff0c\u7136\u540e\u901a\u8fc7\u6e90\u7801\u5206\u6790SEAL\u5e93\u4e2dCKKS\u65b9\u6848\u7684\u5b9e\u73b0\u3002\u672c\u7bc7\u5185\u5bb9\u57fa\u4e8e<code>SEAL 4.0</code></p>"},{"location":"crypto/seal-ckks.html#example","title":"example","text":"<p>\u9996\u5148\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u611f\u53d7\u4e00\u4e0bSEAL\u5e93\u4e2d\u7684CKKS\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u4e24\u4e2a\u6d6e\u70b9\u5411\u91cf\u505a\u70b9\u79ef\u8fd0\u7b97\u5982\u4f55\u4f7f\u7528CKKS\u65b9\u6848\u3002</p> <pre><code>#include \"seal/seal.h\"\nusing namespace std;\nusing namespace seal;\n\n/* parms setting */\nEncryptionParameters parms(scheme_type::ckks);\nuint32_t poly_modulus_degree = 8192;\nparms.set_poly_modulus_degree(poly_modulus_degree);\nparms.set_coeff_modulus(CoeffModulus::Create(poly_modulus_degree, { 25, 21, 21, 21, 21, 21, 25 }));\ndouble scale = pow(2.0, 21);\nauto context = SEALContext(parms);\nKeyGenerator keygen(context);\nPublicKey public_key;\nSecretKey secret_key;\nRelinKeys relin_keys;\nkeygen.create_public_key(public_key);\nsecret_key = keygen.secret_key();\nkeygen.create_relin_keys(relin_keys);\n\nEncryptor encryptor(context, public_key);\nEvaluator evaluator(context);\nDecryptor decryptor(context, secret_key);\n\nCKKSEncoder encoder(context);\nuint32_t slot_count = encoder.slot_count();\ncout &lt;&lt; \"Number of slots: \" &lt;&lt; slot_count &lt;&lt; endl;\n</code></pre>"},{"location":"crypto/seal-ckks.html#encryptionparameters","title":"EncryptionParameters","text":"<p>\u4e0a\u8ff0\u793a\u4f8b\u4ee3\u7801\u7684\u524d\u51e0\u884c\uff1a</p> <pre><code>/* parms setting */\nEncryptionParameters parms(scheme_type::ckks);\nuint32_t poly_modulus_degree = 8192;\nparms.set_poly_modulus_degree(poly_modulus_degree);\nparms.set_coeff_modulus(CoeffModulus::Create(poly_modulus_degree, { 25, 21, 21, 21, 21, 21, 25 }));\ndouble scale = pow(2.0, 21);\nauto context = SEALContext(parms);\n</code></pre> <p>\u4ece\u540d\u5b57\u80fd\u63a8\u6d4b\u51fa\uff0c\u8fd9\u51e0\u884c\u4ee3\u7801\u662f\u5728\u8bbe\u7f6e\u52a0\u5bc6\u76f8\u5173\u53c2\u6570\uff0c\u6d89\u53ca\u5230\u7684\u7b2c\u4e00\u4e2a\u7ed3\u6784\u5c31\u662f\uff1a<code>EncryptionParameters</code>\uff0c\u63a5\u4e0b\u6765\u8ffd\u8e2a\u4e00\u4e0b\u8fd9\u4e2a\u7ed3\u6784\uff0c\u5728\u6587\u4ef6<code>src/encryptionparams.h</code>\u4e2d\uff1a</p> <pre><code>class EncryptionParameters {\nfriend struct std::hash&lt;EncryptionParameters&gt;;\nprivate:\n// \u6307\u5411\u5185\u5b58\u6c60\u7684\u6307\u9488\nMemoryPoolHandle pool_ = MemoryManager::GetPool();\n// \u540c\u6001\u65b9\u6848\u7c7b\u578b,\u622a\u81f3\u5230SEAL4.0,\u6709BFV,CKKS,BGV\u4e09\u79cd\u65b9\u6848\nscheme_type scheme_;\n// \u591a\u9879\u5f0fdegree\nstd::size_t poly_modulus_degree_ = 0;\n// \u591a\u9879\u5f0f\u6a21\u6570,\u7531\u82e5\u5e72\u7d20\u6570\u7ec4\u6210\nstd::vector&lt;Modulus&gt; coeff_modulus_{};\n// \u968f\u673a\u6570\u751f\u6210\u5668\nstd::shared_ptr&lt;UniformRandomGeneratorFactory&gt; random_generator_{ nullptr };\n// \u660e\u6587\u6a21\u6570,\u5728CKKS\u65b9\u6848\u4e2d\u6ca1\u7528\nModulus plain_modulus_{};\n// \u4e00\u4e2a\u6807\u7b7e\nparms_id_type parms_id_ = parms_id_zero;\n};\n</code></pre> <p>\u53bb\u9664\u6389\u6210\u5458\u65b9\u6cd5\uff0c\u53ea\u770b\u6570\u636e\u7c7b\u578b\uff0c\u7c7b\u578b<code>EncryptionParameters</code>\u5982\u4e0a\u6240\u793a\uff1a</p> <p>\u5176\u4e2d\u5bf9\u4e8eCKKS\u65b9\u6848\u800c\u8a00\uff0c\u9700\u8981\u7528\u6237\u4f20\u5165\u53c2\u6570\u8bbe\u7f6e\u7684\u662f\u591a\u9879\u5f0fidegree\u548c\u591a\u9879\u5f0f\u6a21\u6570\u3002\u5176\u4e2d\u6bd4\u8f83\u6709\u610f\u601d\u7684\u662f<code>parms_id_type</code>\u8fd9\u4e00\u7c7b\u578b\uff0c\u7ecf\u8fc7\u67e5\u770b\u53ef\u77e5\u8fd9\u4e2a\u7c7b\u578b\u662f<code>std::array&lt;uint64_t,4&gt;</code>\uff0c\u6839\u636e\u5b98\u65b9\u6587\u6863\u89e3\u91ca\uff0c</p> <p>EncryptionParameters\u7c7b\u59cb\u7ec8\u7ef4\u62a4\u5f53\u524d\u6240\u8bbe\u7f6e\u7684\u52a0\u5bc6\u53c2\u6570\u7684256\u4f4dhash\u503c\uff0c\u79f0\u4e3aparms_id\u3002\u8fd9\u4e2a\u6563\u5217\u4f5c\u4e3a\u52a0\u5bc6\u53c2\u6570\u7684\u552f\u4e00\u6807\u8bc6\u7b26\uff0c\u5e76\u88ab\u4e3a\u8fd9\u4e9b\u52a0\u5bc6\u53c2\u6570\u521b\u5efa\u7684\u6240\u6709\u5176\u4ed6\u5bf9\u8c61\u4f7f\u7528\u3002parms_id\u4e0d\u80fd\u7531\u7528\u6237\u76f4\u63a5\u4fee\u6539\uff0c\u800c\u662f\u5728\u5185\u90e8\u7528\u4e8e\u9884\u8ba1\u7b97\u4ee5\u53ca\u8f93\u5165\u6709\u6548\u6027\u68c0\u67e5\u3002\u5728mod_switch\u4e2d\uff0c\u7528\u6237\u53ef\u4ee5\u4f7f\u7528parms_id\u6765\u8ddf\u8e2a\u52a0\u5bc6\u53c2\u6570\u94fe\u3002parms_id\u4e0d\u66b4\u9732\u5728EncryptionParameters\u7684\u516c\u5171API\u4e2d\uff0c\u4f46\u4e00\u65e6SEALContext\u88ab\u521b\u5efa(\u8bf4\u660e\u901a\u8fc7\u4e86\u53c2\u6570\u5408\u6cd5\u6027\u6821\u9a8c)\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7SEALContext::ContextData\u7c7b\u8bbf\u95ee\u3002</p> <p>\u5728\u8be5\u6587\u4ef6\u4e2d\u7684<code>void EncryptionParameters::compute_parms_id()</code>\u5b9a\u4e49\u4e86\u8fd9\u4e2a\u6563\u5217\u503c\u7684\u8ba1\u7b97\u65b9\u6cd5\uff0c\u5177\u4f53\u5c31\u662f\u628a\u8fd9\u4e2a\u7c7b\u4e2d\u7684\u52a0\u5bc6\u53c2\u6570\u653e\u5230buffer\u91cc\uff0c\u8c03\u7528\u4e00\u6b21SEAL\u4e2d<code>HashFunction</code>\u6a21\u5757\u4e2d\u7684<code>hash</code>\u65b9\u6cd5(\u5728\u6587\u4ef6<code>src/util/hash.h</code>\u4e2d\u5b9e\u73b0)\uff0c\u5728SEAL4.0\u4e2d\u4e3a<code>blake2b</code>\u7b97\u6cd5\u3002</p> <p>\u4e3a\u4e86\u8fdb\u4e00\u6b65\u4e86\u89e3<code>parms_id_type</code>\uff0c\u9700\u8981\u6d89\u53ca\u5230\u53e6\u5916\u4e00\u4e2a\u5b58\u50a8\u52a0\u5bc6\u53c2\u6570\u7684\u7c7b\u578b<code>SEALContext</code>\uff0c\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u8be5\u7c7b\u578b\u5b9e\u4f8b\u901a\u8fc7\uff1a</p> <pre><code>auto context = SEALContext(parms);\n</code></pre> <p>\u88ab\u521b\u5efa\u3002\u63a5\u4e0b\u6765\u5728\u6587\u4ef6<code>src/context.h</code>\u4e2d\u770b\u4e00\u4e0b<code>SEALContext</code>\u7c7b\u578b\u3002\u6839\u636e\u5b98\u65b9\u6587\u6863\u6240\u8ff0\uff0c<code>SEALContext</code>\u7c7b\u578b\u5b58\u50a8\u4e86\u4e00\u7cfb\u5217\u9884\u8ba1\u7b97\u7684\u7ed3\u679c</p>"},{"location":"crypto/seal-ckks.html#poly","title":"poly\u8fd0\u7b97","text":"<p><code>SEAL</code>\u5e93\u4e0e<code>INTEL_HEXL(Intel Homomorphic Encryption Acceleration Library)</code>\u6df1\u5ea6\u7ed3\u5408\uff0c\u540e\u8005\u4e3aSEAL\u4e2d\u7684\u6574\u6570\u8fd0\u7b97\u63d0\u4f9b\u4e86\u52a0\u901f\uff0c\u5728<code>SEAL</code>\u6e90\u7801\u4e2d\u6709\u5927\u91cf<code>SEAL_USE_INTEL_HEXL</code>\u7684\u5b8f\uff0c\u6682\u65f6\u5148\u4e0d\u8003\u8651\u8fd9\u4e00\u52a0\u901f\u63aa\u65bd\u3002</p> <p>\u591a\u9879\u5f0f\u8fd0\u7b97\u5728\u6e90\u7801<code>src/utils/polyarithsmallmod.h</code>\u4e2d\u58f0\u660e\u3002</p> <p>\u4ee5\u591a\u9879\u5f0f\u52a0\u6cd5\u4e3a\u4f8b\uff0c\u770b\u4e00\u4e0b<code>add_poly_coeffmod</code>\uff0c\u5373\u591a\u9879\u5f0f\u52a0\u6cd5\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff0c\u56e0\u4e3a\u8fd9\u662f\u7b2c\u4e00\u4e2a\u4f8b\u5b50\uff0c\u7275\u6d89\u5f88\u591a\u65b0\u6982\u5ff5\uff0c\u90fd\u8981\u4e00\u4e00\u8ffd\u6eaf\uff0c\u6240\u4ee5\u8fd9\u4e2a\u4f8b\u5b50\u8981\u957f\u4e00\u4e9b\uff0c\u540e\u9762\u5c31\u6ca1\u6709\u8fd9\u4e48\u957f\u4e86\u3002</p> <p>\u5728\u6392\u9664\u6389<code>SEAL_USE_INTEL_HEXL</code>\u548c\u7528\u6765debug\u7684<code>SEAL_DEBUG</code>\u5b8f\u540e\uff0c<code>add_poly_coeffmod</code>\u4ee3\u7801\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>void add_poly_coeffmod(\nConstCoeffIter operand1, ConstCoeffIter operand2, std::size_t coeff_count, const Modulus &amp;modulus,\nCoeffIter result) {\nconst uint64_t modulus_value = modulus.value();\nSEAL_ITERATE(iter(operand1, operand2, result), coeff_count, [&amp;](auto I) {\nstd::uint64_t sum = get&lt;0&gt;(I) + get&lt;1&gt;(I);\nget&lt;2&gt;(I) = SEAL_COND_SELECT(sum &gt;= modulus_value, sum - modulus_value, sum);\n});\n}\n</code></pre> <ul> <li> <p>\u53c2\u6570\u4e2d\u4e24\u4e2a\u64cd\u4f5c\u6570<code>operand</code>\u7c7b\u578b<code>ConstCoeffIter</code>\u662f<code>PtrIter&lt;const std::uint64_t *&gt;</code>\u7684\u522b\u540d(\u5176\u4e2d<code>PtrIter</code>\u53ea\u662f\u4e00\u4e2a\u5bf9\u88f8\u6307\u9488\u7684\u5305\u88c5\uff0c\u65b9\u4fbf\u4e0e<code>SEAL</code>\u4e2d\u5b9a\u4e49\u7684\u64cd\u4f5c\u51fd\u6570\u9002\u914d)\uff0c\u8bf4\u767d\u4e86\u5934\u4e24\u4e2a\u53c2\u6570\u5c31\u662f\u4e24\u4e2a<code>uint64_t</code>\u7c7b\u578b\u7684\u6570\u7ec4\uff0c\u5b58\u7684\u662f\u4e24\u4e2a\u591a\u9879\u5f0f\u7684\u7cfb\u6570</p> </li> <li> <p>\u53c2\u6570<code>coeff_count</code>\u6307\u660e\u591a\u9879\u5f0f\u957f\u5ea6</p> </li> <li> <p>\u53c2\u6570<code>modulus</code>\u7c7b\u578b\u662f<code>const Modulus &amp;</code>\u3002\u8ffd\u6eaf\u4e00\u4e0b\u7c7b\u578b<code>Modulus</code>\uff0c\u58f0\u660e\u5728<code>src/modulus.h</code>\u4e2d\uff0c\u5b58\u50a8\u4e00\u4e2a\u81f3\u591a61\u6bd4\u7279\u7684unsigned\u6574\u578b\uff0c\u5728CKKS\u65b9\u6848\u4e2d\u7528\u4e8e\u8868\u793a\u591a\u9879\u5f0f\u7cfb\u6570\u7684\u6a21\u6570(\u5177\u4f53\u6765\u8bf4\u662f\u6bcf\u4e00\u4e2asingle RNS polynomial component\u7684\u6a21\u6570\uff0c\u8fd9\u4e2a\u5728\u4e0b\u6587\u63d0\u5230)\u3002</p> </li> </ul> <p>\u8fd9\u4e2aclass\u529f\u80fd\u9664\u4e86\u4e00\u4e9b\u5bf9\u63a5\u6587\u4ef6\u7684\u8bfb(<code>load</code>)\u5199(<code>save</code>)\u64cd\u4f5c\u4ee5\u53ca\u5c01\u88c5\u4e86\u4e00\u4e9b\u5982<code>is_prime</code>\u7b49\u65b9\u4fbf\u4f7f\u7528\u7684\u65b9\u6cd5\u4e4b\u5916\uff0c\u4e3b\u8981\u662f\u7528\u4e8e\u6267\u884c\u53d6\u6a21(reduction)\u8fd0\u7b97\uff0c\u901a\u8fc7\u6210\u5458\u65b9\u6cd5<code>std::uint64_t reduce(std::uint64_t value) const;</code>\u6267\u884c\uff0c\u4f7f\u7528\u7684\u662fBarrett reduction\u7b97\u6cd5\uff0c\u8fd9\u4e2areduction\u7b97\u6cd5\u9700\u8981\u4fdd\u5b58\u4e00\u4e9b\u9884\u8ba1\u7b97\u7684\u91cf\uff0c\u5173\u4e8e\u8fd9\u4e2a\u7b97\u6cd5\u672c\u8eab\uff0c\u89c1Barrett reduction</p> <pre><code>class Modulus{\nprivate:\nstd::uint64_t value_ = 0;\n// The first two components of the Barrett ratio are the floor of 2^128/value,\n// and the third component is the remainder.\nstd::array&lt;std::uint64_t, 3&gt; const_ratio_{ { 0, 0, 0 } };\n// the size (in 64-bit words) of the value of the current Modulus\nstd::size_t uint64_count_ = 0;\n// the significant bit count of the value of the current Modulus\nint bit_count_ = 0;\nbool is_prime_ = false;\n};\n</code></pre> <p>\u6240\u6709\u7684\u6570\u636e\u6210\u5458\u5982\u4e0a\u6240\u793a\uff0c<code>Modulus</code>\u65b9\u6cd5<code>reduce</code>\u662f\u76f4\u63a5\u8c03\u7528<code>src/utils/uintarithsmallmod.h/barrett_reduce_64()</code></p> <ul> <li>\u53c2\u6570<code>result</code>\u5b58\u653e\u7ed3\u679c\u591a\u9879\u5f0f\u7cfb\u6570</li> </ul> <p>\u63a5\u4e0b\u6765\u770b\u51fd\u6570\u4f53\uff1a</p> <ul> <li>\u5176\u4e2d<code>SEAL_ITERATE</code>\u53ef\u4ee5\u770b\u6210\u662f<code>std::for_each_n</code>(\"C++14 does not have std::for_each_n so we use a custom implementation\")</li> <li>\u5176\u4e2d<code>SEAL_COND_SELECT</code>\u5c31\u662f\u4e00\u4e2a\u4e09\u5143\u8868\u8fbe\u5f0f\uff0c\u56e0\u4e3a\u6574\u4e2aSEAL\u4e2d\u6a21\u6570\u7684\u9009\u62e9\u572863\u6bd4\u7279\u53ca\u4ee5\u4e0b\uff0c\u56e0\u6b64\u6a21\u52a0\u8fd0\u7b97\u4e0d\u4f1a\u6709\u6ea2\u51fa\u7684\u98ce\u9669\uff0c\u53ef\u4ee5\u76f4\u63a5\u76f8\u52a0\u7136\u540e\u505a\u4e00\u6b21\u6761\u4ef6\u5224\u65ad\uff0c\u770b\u662f\u5426\u8981\u51cf\u53bb\u6a21\u6570\u5373\u53ef</li> </ul> <p>\u4e0d\u8fc7\u5230\u6b64\u4e3a\u6b62\u5e76\u6ca1\u6709\u7ed3\u675f\uff0cSEAL\u7684poly\u8fd0\u7b97\u4e2d\u7684\u591a\u9879\u5f0f\u52a0\u6cd5<code>add_poly_coeffmod</code>\u9664\u4e86\u4e0a\u8ff0\u5b9a\u4e49\u4e4b\u5916\u8fd8\u6709\u53e6\u59162\u4e2a\u91cd\u8f7d\uff1a</p> <pre><code>void add_poly_coeffmod(ConstRNSIter operand1, ConstRNSIter operand2, std::size_t coeff_modulus_size, ConstModulusIter modulus,RNSIter result);\nvoid add_poly_coeffmod(ConstPolyIter operand1, ConstPolyIter operand2, std::size_t size, ConstModulusIter modulus, PolyIter result);\n</code></pre> <p>\u4ec0\u4e48\u662f<code>RNSIter</code>\u548c<code>PolyIter</code>\uff1f\u8fd9\u8981\u8bf4\u5230SEAL\u7684CKKS\u65b9\u6848\u5c5e\u4e8eRns CKKS\uff0c\u662fCKKS\u5b9e\u73b0\u65b9\u5f0f\u4e00\u79cd\u3002\u6cdb\u6cdb\u5730\u8bf4\uff0c\u5c31\u662fCKKS\u4e2d\u6709\u4e00\u4e2a\u6a21\u6570\u94fe\u5730\u6982\u5ff5\uff0c\u591a\u9879\u5f0f\u7cfb\u6570\u6a21\u6570\u7531\u82e5\u5e72\u4e2a\u7d20\u6570\u76f8\u4e58\u5f97\u5230\uff0c\u6bd4\u65b9\u8bf44\u4e2a40\u6bd4\u7279\u7684\u7d20\u6570(\u4e0b\u9762\u4ee5\u6b64\u4e3a\u4f8b)\uff0c\u90a3\u4e48\u8fd9\u4e48\u4e00\u4e2a160\u6bd4\u7279\u7684\u6570\uff0c\u5728\u8fd0\u7b97\u7684\u65f6\u5019\u5982\u4f55\u8fd0\u7b97\u5462\uff1f\u662f\u4f7f\u7528\u7c7b\u4f3cRSA\u90a3\u6837\u7684\u5927\u6570\u8fd0\u7b97\u5417\uff1f\u5e76\u4e0d\u662f\uff0cRns CKKS\u65b9\u6848\u7ed9\u51fa\u7684\u89e3\u51b3\u65b9\u5f0f\u662f\u57fa\u4e8e\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406(CRT)\uff0c\u628a\u4e00\u4e2a\u6a21\u6570\u4e3a\u6bd4\u65b9\u8bf4160\u6bd4\u7279\u7684\u591a\u9879\u5f0f\u5229\u7528CRT\u62c6\u62104\u4e2a\u6a21\u6570\u572840\u6bd4\u7279\u7684\u591a\u9879\u5f0f(RNS polynomial component)\uff0c\u5728\u8ba1\u7b97\u591a\u9879\u5f0f\u52a0\u6cd5\u548c\u4e58\u6cd5\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u5404\u4e2asignle RNS polynomial component \u8ba1\u7b97\u52a0\u6cd5\u548c\u4e58\u6cd5\uff0c\u6700\u540e\u9700\u8981\u7ed3\u679c\u7684\u65f6\u5019\u7528CRT\u9006\u56de\u53bb\u5c31\u53ef\u4ee5\u4e86\u3002</p> <p>\u4e0b\u9762\u8fd9\u5f20\u56fe\u8bf4\u660e\u4e86\u4ed6\u4eec\u7684\u5173\u7cfb\uff0c\u4e00\u4e2aRNSIter\u5176\u5b9e\u5c31\u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a2\u7ea7\u6307\u9488\uff0cdereference\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u591a\u9879\u5f0f\u7cfb\u6570\u6570\u7ec4(u64*)</p> <p></p> <p>\u5230\u6b64\u4e3a\u6b62\u6211\u4eec\u8bf4\u5b8c\u4e86\u591a\u9879\u5f0f\u73af\u4e0a\u7684\u52a0\u6cd5\u8fd0\u7b97\uff0c\u540c\u6837\u7684\uff0cSEAL\u5728<code>src/utils/polyarithsmallmod.h</code>\u4e2d\u8fd8\u5b9e\u73b0\u4e86:</p> <ul> <li><code>modulo_poly_coeffs</code>\uff0c\u5bf9\u591a\u9879\u5f0f\u7cfb\u6570\u8c03\u7528<code>barrett_reduce_64()</code></li> <li><code>negate_poly_coeffmod</code>\uff0c\u5373\u628a\u591a\u9879\u5f0f\u7cfb\u6570\u6c42<code>negative</code></li> <li><code>sub_poly_coeffmod</code>\uff0c\u51cf\u6cd5</li> <li><code>add_poly_scalar_coeffmod</code>\u3001<code>sub_poly_scalar_coeffmod</code>\u4e3a\u6bcf\u4e2a\u7cfb\u6570\u52a0\u4e0a/\u51cf\u53bb\u4e00\u4e2ascalar</li> <li><code>multiply_poly_scalar_coeffmod</code>\uff0c\u5373\u591a\u9879\u5f0f\u4e58\u4e00\u4e2a\u6807\u91cf\uff0c\u8fd9\u91cc\u5e95\u5c42\u7528\u7684\u662f<code>barrett_reduce_128()</code>\u4f18\u5316reduction</li> <li><code>dyadic_product_coeffmod</code>\uff0c==\u4e0d\u77e5\u9053\u5565\u610f\u601d==</li> <li><code>poly_infty_norm_coeffmod</code>\uff0c\u628a\u7cfb\u6570\u8f6c\u5230<code>[-modulus,modulus)</code>\u4e4b\u95f4\uff0c\u5e76\u8fd4\u56de\u7edd\u5bf9\u503c\u6700\u5927\u503c</li> <li><code>negacyclic_shift_poly_coeffmod</code>\u3001<code>negacyclic_multiply_poly_mono_coeffmod</code>\uff0c==\u4e0d\u77e5\u9053\u5565\u610f\u601d==</li> </ul> <p>\u4ee5\u4e0a\u8fd9\u4e9b\u57fa\u672c\u8fd0\u7b97\u90fd\u4e0e\u52a0\u6cd5\u7c7b\u4f3c\uff0c\u67093\u79cd\u91cd\u8f7d:Coeff,RNS,Poly(\u6709\u7684\u6709\u66f4\u591a\u7c7b\u578b\u91cd\u8f7d)</p>"},{"location":"crypto/seal-ckks.html#_1","title":"\u6d89\u53ca\u7684\u7b97\u6cd5","text":""},{"location":"crypto/seal-ckks.html#barrett-reduction","title":"Barrett reduction","text":"\\[ c = a\\mod n \\] <p>naive\u7684\u7b97\u6cd5\u9700\u8981\u4f7f\u7528\u9664\u6cd5\uff0cP.D. Barrett\u57281986\u5e74\u63d0\u51fa\u8be5\u7b97\u6cd5\uff0c\u4f7f\u53d6\u6a21\u7b97\u6cd5\u4e2d\u7528\u4e58\u6cd5\u4ee3\u66ff\u9664\u6cd5</p>"},{"location":"crypto/seal-ckks.html#general-idea","title":"General idea","text":"<p>\u4ee4\\(s = \\frac{1}{n}\\)\uff0c\u5219\u6709\uff1a\\(a\\mod n = a-\\lfloor as\\rfloor n\\)</p> <p>\u6bd4\u65b9\u8bf4a\u7b49\u4e8e3.5\u4e2an\uff0c\u90a3\u4e48a\u6a21n\u76f8\u5f53\u4e8ea\u51cf\u53bb3n</p> <p>\u7136\u800c\uff0c\u9664\u6cd5\u64cd\u4f5c\u5728\u8ba1\u7b97\u673a\u4e2d\u76f8\u6bd4\u4e58\u6cd5\u6602\u8d35\u5f88\u591a\uff0cBarrett\u5bf9\u4e0a\u8ff0\u7ecf\u5178\u7684\u53d6\u6a21\u64cd\u4f5c\u505a\u4e86\u6539\u8fdb\uff1a\u7528\\(m/2^k\\)\u53bb\u8fd1\u4f3c\\(1/n\\)\uff0c\u56e0\u4e3a\u9664\u4ee52\u7684\u5e42\u6b21\u5728\u8ba1\u7b97\u673a\u4e2d\u662f\u4f4d\u79fb\u64cd\u4f5c\uff0c\u6bd4\u4f20\u7edf\u7684\u9664\u6cd5cheap</p>"},{"location":"crypto/seal-ckks.html#procedure","title":"procedure","text":"<p>\u9996\u5148\u6211\u4eec\u5047\u8bbe\u7ed9\u5b9a\\(2^k\\)\uff0c\u8981\u8ba1\u7b97\u4e00\u4e2a\u5408\u9002\u7684\\(m\\)\u53bb\u8fd1\u4f3c\\(1/n\\)\uff0c\u5219\u6709\\(\\frac{m}{2^k} = \\frac{1}{n}\\Longleftrightarrow m=\\frac{2^k}{n}\\)\uff0c\u5e7f\u6cdb\u7684\u505a\u6cd5\u662f\u53d6\\(m=\\lfloor 2^k/n\\rfloor\\)\uff0c\u56e0\u4e3a\u56db\u820d\u4e94\u5165\u53ef\u80fd\u4f1a\u6709underflow\u7684\u98ce\u9669</p> <p>\u8fd9\u6837\u4e00\u6765\uff0creduction\u7b97\u6cd5\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>func reduce(a uint) uint {\nq := (a * m) &gt;&gt; k // \"&gt;&gt; k\" denotes bitshift by k.\nreturn a - q * n\n}\n</code></pre> <p>\u4f46\u662f\u7531\u4e8e\\(m=\\lfloor 2^k/n\\rfloor\\)\uff0c\u56e0\u6b64\u5b9e\u9645\u4e0a\\(\\frac{m}{2^k}\\leq\\frac{1}{n}\\)\uff0c\u56e0\u6b64\u7b97\u6cd5\u8f93\u51fa\u5b9e\u9645\u4e0a\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u5728\\([0,n)\\)\uff0c\u800c\u662f\u53ea\u80fd\u4fdd\u8bc1\u5728\\([0,2n)\\)\uff0c\u8fd9\u4e00\u70b9\u53ef\u4ee5\u901a\u8fc7\u6570\u5b66\u8bc1\u660e\uff0c\u8fd9\u91cc\u7565\u53bb\u3002\u56e0\u6b64\u7b97\u6cd5\u8981\u505a\u4ee5\u4e0b\u4fee\u6b63\uff1a</p> <pre><code>func reduce(a uint) uint {\nq := (a * m) &gt;&gt; k\na -= q * n\nif n &lt;= a {\na -= n\n}\nreturn a\n}\n</code></pre> <p>\u4e0b\u9762\u7ed9\u51fa\u7b97\u6cd5\u63cf\u8ff0\uff1a</p> <p>Precomputation:</p> <ol> <li>Assume the modulus \\(n\\in N\\) is such that \\(n\u22653\\) and \\(n\\) is not a power of \\(2\\).(modulo-power-of-2 is trivial.)</li> <li>Choose \\(k\\in N\\) such that \\(2k&gt;n\\). (The smallest choice is \\(k=\u2308log_2 n\u2309\\))</li> <li>Calculate \\(r = \\lfloor \\frac{2^{2k}}{n}\\rfloor\\)(This is the precomputed factor.)</li> </ol> <p>Reduction:</p> <ol> <li>We are given  \\(x\\in N\\), such that \\(0\u2264x&lt;n^2\\), as the number that needs to be reduced modulo \\(n\\).</li> <li>Calculate \\(t = x-\\lfloor \\frac{xr}{2^{2k}}\\rfloor n\\)</li> <li>return \\(t\\geq n ~~?~~ t-n : t\\)</li> </ol> <p>\u770bSEAL\u4e2d <code>barrett reduction</code>\u7684\u5b9e\u73b0(\u5728\u6587\u4ef6<code>src/utils/uintarithsmallmod.h</code>\u58f0\u660e):</p> <pre><code>/*Returns input mod modulus. This is not standard Barrett reduction.\n    Correctness: modulus must be at most 63-bit.*/\nuint64_t barrett_reduce_64(uint64_t input, const Modulus &amp;modulus){\n// Reduces input using base 2^64 Barrett reduction\n// floor(2^64 / mod) == floor( floor(2^128 / mod) )\nunsigned long long tmp[2];\nconst uint64_t *const_ratio = modulus.const_ratio().data();\n// \u8fd9\u4e00\u6b65\u5c31\u770b\u6210 tmp[1] = input * const_ratio[1]; \u5373\u53ef, \u5373 q = a x m\nmultiply_uint64_hw64(input, const_ratio[1], tmp + 1);\n// Barrett subtraction, \u5373 a = a- q*n\ntmp[0] = input - tmp[1] * modulus.value();\n// One more subtraction is enough, \u5373 a &lt; n ? a: a-n\nreturn SEAL_COND_SELECT(tmp[0] &gt;= modulus.value(), tmp[0] - modulus.value(), tmp[0]);\n}\n</code></pre>"},{"location":"mlc/dlc-survey.html","title":"The Deep Learning Compiler: A Comprehensive Survey","text":""},{"location":"mlc/dlc-survey.html#_1","title":"\u6458\u8981","text":"<p>\u5728\u4e0d\u540c\u7684 DL \u786c\u4ef6\u4e0a\u90e8\u7f72\u5404\u79cd\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u7684\u56f0\u96be\u63a8\u52a8\u4e86\u793e\u533a\u5bf9 DLC \u7684\u7814\u7a76\u548c\u5f00\u53d1\u3002 \u5de5\u4e1a\u754c\u548c\u5b66\u672f\u754c\u5df2\u7ecf\u63d0\u51fa\u4e86\u51e0\u79cd DLC \uff0c\u4f8b\u5982 Tensorflow XLA \u548c TVM\u3002DLC \u5c06\u4e0d\u540c DL \u6846\u67b6\u4e2d\u63cf\u8ff0\u7684 DL \u6a21\u578b\u4f5c\u4e3a\u8f93\u5165\uff0c\u4e3a\u4e0d\u540c\u7684 DL \u786c\u4ef6\u751f\u6210\u4f18\u5316\u4ee3\u7801\u4f5c\u4e3a\u8f93\u51fa\u3002 \u7136\u800c\uff0c\u73b0\u6709\u7684\u8c03\u67e5\u90fd\u6ca1\u6709\u5168\u9762\u5206\u6790 DLC \u7684\u72ec\u7279\u8bbe\u8ba1\u67b6\u6784\u3002 \u672c\u6587\u901a\u8fc7\u8be6\u7ec6\u5256\u6790 DLC \u666e\u904d\u91c7\u7528\u7684\u8bbe\u8ba1\uff0c\u5bf9\u73b0\u6709\u7684 DLC \u8fdb\u884c\u4e86\u5168\u9762\u8c03\u67e5\uff0c\u91cd\u70b9\u662f\u9762\u5411 DL \u7684\u591a\u7ea7 IR \u548c\u524d\u7aef/\u540e\u7aef\u4f18\u5316\u3002 \u6587\u7ae0\u5bf9\u591a\u7ea7 IR \u7684\u8bbe\u8ba1\u8fdb\u884c\u4e86\u8be6\u7ec6\u5206\u6790\uff0c\u5e76\u8bf4\u660e\u4e86\u5e38\u7528\u7684\u4f18\u5316\u6280\u672f\u3002 \u6700\u540e\uff0c\u5f3a\u8c03\u4e86\u4e00\u4e9b\u89c1\u89e3\u4f5c\u4e3a DLC \u7684\u6f5c\u5728\u7814\u7a76\u65b9\u5411\u3002 \u8fd9\u662f\u7b2c\u4e00\u7bc7\u4e13\u6ce8\u4e8e DLC \u8bbe\u8ba1\u67b6\u6784\u7684\u8c03\u67e5\u8bba\u6587\uff0c\u4f5c\u8005\u5e0c\u671b\u5b83\u80fd\u4e3a\u672a\u6765\u5bf9 DLC \u7684\u7814\u7a76\u94fa\u5e73\u9053\u8def\u3002</p>"},{"location":"mlc/dlc-survey.html#1-intro","title":"1. Intro","text":"<p>\u968f\u7740CNN\u3001RNN\u3001GAN\u7b49\u591a\u79cd\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u7684\u51fa\u73b0\uff0c\u7b80\u5316\u5404\u79cd DL \u6a21\u578b\u7684\u7f16\u7a0b\u4ee5\u5b9e\u73b0\u5b83\u4eec\u7684\u843d\u5730\u81f3\u5173\u91cd\u8981\u3002</p> <p>\u968f\u7740\u5de5\u4e1a\u754c\u548c\u5b66\u672f\u754c\u7684\u4e0d\u65ad\u52aa\u529b\uff0c\u5df2\u7ecf\u63d0\u51fa\u4e86\u51e0\u79cd\u6d41\u884c\u7684 DL \u6846\u67b6\uff0c\u4f8b\u5982 TensorFlow\u3001PyTorch\u3001MXNet\u7b49\uff0c \u4ee5\u7b80\u5316\u5404\u79cd DL \u6a21\u578b\u7684\u5b9e\u73b0\u3002 \u5c3d\u7ba1\u4e0a\u8ff0 DL \u6846\u67b6\u6839\u636e\u5176\u8bbe\u8ba1\u7684\u6743\u8861\u5b58\u5728\u4f18\u52bf\u548c\u52a3\u52bf\uff0c\u4f46\u5728\u8de8\u73b0\u6709 DL \u6a21\u578b\u652f\u6301\u65b0\u5174 DL \u6a21\u578b\u65f6\uff0c\u4e92\u64cd\u4f5c\u6027\u5bf9\u4e8e\u51cf\u5c11\u5197\u4f59\u5de5\u7a0b\u5de5\u4f5c\u53d8\u5f97\u5f88\u91cd\u8981\u3002 \u4e3a\u4e86\u63d0\u4f9b\u4e92\u64cd\u4f5c\u6027\uff0c\u5df2\u7ecf\u63d0\u51fa\u4e86 ONNX [66]\uff0c\u5b83\u5b9a\u4e49\u4e86\u8868\u793a DL \u6a21\u578b\u7684\u7edf\u4e00\u683c\u5f0f\uff0c\u4ee5\u4fc3\u8fdb\u4e0d\u540c DL \u6846\u67b6\u4e4b\u95f4\u7684\u6a21\u578b\u8f6c\u6362\u3002</p> <p>\u540c\u65f6\uff0c\u77e9\u9635\u4e58\u6cd5\u7b49\u72ec\u7279\u7684\u8ba1\u7b97\u7279\u6027\u6fc0\u53d1\u4e86\u82af\u7247\u67b6\u6784\u5e08\u8bbe\u8ba1\u5b9a\u5236\u5316\u6df1\u5ea6\u5b66\u4e60\u52a0\u901f\u5668\u4ee5\u63d0\u9ad8\u6548\u7387\u7684\u70ed\u60c5\u3002 \u4e92\u8054\u7f51\u5de8\u5934\uff08\u4f8b\u5982 Google TPU[44]\u3001\u6d77\u601d NPU [56]\u3001Apple Bonic [49]\uff09\u3001\u5904\u7406\u5668\u4f9b\u5e94\u5546\uff08\u4f8b\u5982 NVIDIA Turing [72]\u3001Intel NNP [41]\uff09\u3001\u670d\u52a1\u63d0\u4f9b\u5546\uff08\u4f8b\u5982 Amazon Inferentia [ 8]\u3001Alibaba Hanguang [7]\uff09\uff0c\u751a\u81f3\u521d\u521b\u516c\u53f8\uff08\u4f8b\u5982 Cambricon [57]\u3001Graphcore [43]\uff09\u6b63\u5728\u6295\u5165\u5927\u91cf\u4eba\u529b\u548c\u8d44\u91d1\u5f00\u53d1 DL \u82af\u7247\uff0c\u4ee5\u63d0\u9ad8 DL \u6a21\u578b\u7684\u6027\u80fd\u3002 \u901a\u5e38\uff0cDL \u786c\u4ef6\u53ef\u5206\u4e3a\u4ee5\u4e0b\u51e0\u7c7b\uff1a1\uff09\u5177\u6709\u8f6f\u786c\u4ef6\u534f\u540c\u8bbe\u8ba1\u7684\u901a\u7528\u786c\u4ef6\uff0c2\uff09\u5b8c\u5168\u4e3a DL \u6a21\u578b\u5b9a\u5236\u7684\u4e13\u7528\u786c\u4ef6\uff0c\u4ee5\u53ca 3\uff09\u53d7\u751f\u7269\u8111\u79d1\u5b66\u542f\u53d1\u7684\u795e\u7ecf\u5f62\u6001\u786c\u4ef6\u3002 \u4f8b\u5982\uff0c\u901a\u7528\u786c\u4ef6\uff08\u4f8b\u5982 CPU\u3001GPU\uff09\u6dfb\u52a0\u4e86\u7279\u6b8a\u7684\u786c\u4ef6\u7ec4\u4ef6\uff0c\u4f8b\u5982 AVX512 \u77e2\u91cf\u5355\u5143\u548c\u5f20\u91cf\u6838\u5fc3\u6765\u52a0\u901f DL \u6a21\u578b\u3002 \u800c\u5bf9\u4e8e Google TPU \u7b49\u4e13\u7528\u786c\u4ef6\uff0c\u4e13\u7528\u96c6\u6210\u7535\u8def\uff08\u4f8b\u5982\u77e9\u9635\u4e58\u6cd5\u5f15\u64ce\u548c\u9ad8\u5e26\u5bbd\u5185\u5b58\uff09\u7684\u8bbe\u8ba1\u65e8\u5728\u5c06\u6027\u80fd\u548c\u80fd\u6548\u63d0\u5347\u5230\u6781\u81f4\u3002 \u5728\u53ef\u9884\u89c1\u7684\u672a\u6765\uff0cDL \u786c\u4ef6\u7684\u8bbe\u8ba1\u5c06\u66f4\u52a0\u591a\u6837\u5316\u3002</p> <p>\u4e3a\u4e86\u62e5\u62b1\u786c\u4ef6\u591a\u6837\u6027\uff0c\u5c06\u8ba1\u7b97\u6709\u6548\u5730\u6620\u5c04\u5230 DL \u786c\u4ef6\u975e\u5e38\u91cd\u8981\u3002 \u5728\u901a\u7528\u786c\u4ef6\u4e0a\uff0c\u9ad8\u5ea6\u4f18\u5316\u7684\u7ebf\u6027\u4ee3\u6570\u5e93\uff0c\u5982\u57fa\u672c\u7ebf\u6027\u4ee3\u6570\u5b50\u7a0b\u5e8f (BLAS) \u5e93\uff08\u4f8b\u5982\uff0cMKL \u548c cuBLAS\uff09\u4f5c\u4e3a DL \u6a21\u578b\u9ad8\u6548\u8ba1\u7b97\u7684\u57fa\u7840\u3002 \u4ee5\u5377\u79ef\u8fd0\u7b97\u4e3a\u4f8b\uff0cDL\u6846\u67b6\u5c06\u5377\u79ef\u8f6c\u6362\u4e3a\u77e9\u9635\u4e58\u6cd5\uff0c\u7136\u540e\u8c03\u7528BLAS\u5e93\u4e2d\u7684GEMM\u51fd\u6570\u3002 \u6b64\u5916\uff0c\u786c\u4ef6\u4f9b\u5e94\u5546\u8fd8\u53d1\u5e03\u4e86\u4e13\u95e8\u4e3a DL \u8ba1\u7b97\u91cf\u8eab\u5b9a\u5236\u7684\u4f18\u5316\u5e93\uff08\u4f8b\u5982 MKL-DNN \u548c cuDNN\uff09\uff0c\u5305\u62ec\u524d\u5411\u548c\u53cd\u5411\u5377\u79ef\u3001\u6c60\u5316\u3001\u5f52\u4e00\u5316\u548c\u6fc0\u6d3b\u3002 \u8fd8\u5f00\u53d1\u4e86\u66f4\u9ad8\u7ea7\u7684\u5de5\u5177\u4ee5\u8fdb\u4e00\u6b65\u52a0\u901f DL \u64cd\u4f5c\u3002 \u4f8b\u5982\uff0cTensorRT [73] \u901a\u8fc7\u5927\u91cf\u9ad8\u5ea6\u4f18\u5316\u7684 GPU \u5185\u6838\u652f\u6301\u56fe\u4f18\u5316\uff08\u4f8b\u5982\uff0c\u5c42\u878d\u5408\uff09\u548c\u4f4e\u4f4d\u91cf\u5316\u3002 \u5728\u4e13\u7528\u7684 DL \u786c\u4ef6\u4e0a\uff0c\u4e5f\u63d0\u4f9b\u4e86\u7c7b\u4f3c\u7684\u5e93 [43\u300157]\u3002 \u7136\u800c\uff0c\u4f9d\u8d56\u52a0\u901f\u5e93\u7684\u7f3a\u70b9\u662f\u5b83\u4eec\u901a\u5e38\u843d\u540e\u4e8e DL \u6a21\u578b\u7684\u5feb\u901f\u53d1\u5c55\uff0c\u56e0\u6b64\u65e0\u6cd5\u6709\u6548\u5730\u5229\u7528 DL \u82af\u7247\u3002</p> <p>\u4e3a\u4e86\u89e3\u51b3 DL \u5e93\u548c\u5de5\u5177\u7684\u7f3a\u70b9\uff0c\u5e76\u51cf\u8f7b\u5728\u6bcf\u4e2a DL \u786c\u4ef6\u4e0a\u624b\u52a8\u4f18\u5316 DL \u6a21\u578b\u7684\u8d1f\u62c5\uff0c\u5de5\u4e1a\u754c\u548c\u5b66\u672f\u754c\u63d0\u51fa\u4e86\u51e0\u79cd\u6d41\u884c\u7684 DLC \uff0c\u4f8b\u5982 TVM\u3001Tensor Comprehension\u3001Glow\u3001nGraph \u548c XLA\u3002 DLC \u5c06 DL \u6846\u67b6\u4e2d\u63cf\u8ff0\u7684\u6a21\u578b\u5b9a\u4e49\u4f5c\u4e3a\u8f93\u5165\uff0c\u5e76\u5728\u5404\u79cd DL \u786c\u4ef6\u4e0a\u751f\u6210\u9ad8\u6548\u7684\u4ee3\u7801\u5b9e\u73b0\u4f5c\u4e3a\u8f93\u51fa\u3002 \u6a21\u578b\u5b9a\u4e49\u548c\u5177\u4f53\u4ee3\u7801\u5b9e\u73b0\u4e4b\u95f4\u7684\u8f6c\u6362\u9488\u5bf9\u6a21\u578b\u89c4\u8303\u548c\u786c\u4ef6\u67b6\u6784\u8fdb\u884c\u4e86\u9ad8\u5ea6\u4f18\u5316\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u5b83\u4eec\u7ed3\u5408\u4e86\u9762\u5411 DL \u7684\u4f18\u5316\uff0c\u4f8b\u5982\u5c42\u548c\u8fd0\u7b97\u7b26\u878d\u5408\uff0c\u4ece\u800c\u5b9e\u73b0\u9ad8\u6548\u7684\u4ee3\u7801\u751f\u6210\u3002 \u6b64\u5916\uff0c\u73b0\u6709\u7684 DLC \u8fd8\u5229\u7528\u4e86\u6765\u81ea\u901a\u7528\u7f16\u8bd1\u5668\uff08\u4f8b\u5982 LLVM [51]\uff09\u7684\u6210\u719f\u5de5\u5177\u94fe\uff0c\u8fd9\u63d0\u4f9b\u4e86\u8de8\u4e0d\u540c\u786c\u4ef6\u67b6\u6784\u7684\u66f4\u597d\u7684\u53ef\u79fb\u690d\u6027\u3002 \u4e0e\u4f20\u7edf\u7f16\u8bd1\u5668\u7c7b\u4f3c\uff0cDLC \u4e5f\u91c7\u7528\u5206\u5c42\u8bbe\u8ba1\uff0c\u5305\u62ec\u524d\u7aef\u3001\u4e2d\u95f4\u8868\u793a (IR) \u548c\u540e\u7aef\u3002 \u7136\u800c\uff0cDLC \u7684\u72ec\u7279\u4e4b\u5904\u5728\u4e8e\u591a\u7ea7 IR \u7684\u8bbe\u8ba1\u548c DL \u8ba1\u7b97\u7279\u6709\u7684\u4f18\u5316\u3002</p> <p>\u672c\u6587\u901a\u8fc7\u5c06\u7f16\u8bd1\u5668\u8bbe\u8ba1\u5206\u89e3\u4e3a \u524d\u7aef\u3001\u591a\u7ea7 IR \u548c \u540e\u7aef\uff0c\u5bf9\u73b0\u6709 DLC \u8fdb\u884c\u4e86\u5168\u9762\u8c03\u67e5\uff0c\u7279\u522b\u5f3a\u8c03\u4e86 IR \u8bbe\u8ba1\u548c\u4f18\u5316\u65b9\u6cd5\u3002\u8d21\u732e\uff1a</p> <ol> <li>\u5256\u6790\u4e86\u73b0\u6709 DLC \u666e\u904d\u91c7\u7528\u7684\u8bbe\u8ba1\u67b6\u6784\uff0c\u5e76\u8be6\u7ec6\u5206\u6790\u4e86\u5173\u952e\u8bbe\u8ba1\u7ec4\u4ef6\uff0c\u5982 \u591a\u7ea7 IR\u3001 \u524d\u7aef\u4f18\u5316 \u548c \u540e\u7aef\u4f18\u5316</li> <li>\u4ece\u5404\u65b9\u9762\u5bf9\u73b0\u6709 DLC \u8fdb\u884c\u5206\u7c7b\u3002\u5206\u7c7b\u7684\u76ee\u6807\u662f\u4e3a\u4ece\u4e1a\u8005\u8003\u8651\u5176\u9700\u6c42\u7684 DLC \u9009\u62e9\u63d0\u4f9b\u6307\u5357\uff0c\u5e76\u4e3a\u7814\u7a76\u4eba\u5458\u63d0\u4f9b DLC \u7684\u5168\u9762\u603b\u7ed3\u3002</li> <li>\u63d0\u4f9b\u4e86 DLC \u5728 CNN \u4e0a\u7684\u5b9a\u91cf\u6027\u80fd\u6bd4\u8f83\uff0c\u5305\u62ec\u5b8c\u6574\u6a21\u578b\u548c\u8f7b\u91cf\u7ea7\u6a21\u578b\u3002\u6bd4\u8f83\u4e86\u7aef\u5230\u7aef\u548c\u6bcf\u5c42\uff08\u5377\u79ef\u5c42\u2014\u2014\u4e3b\u5bfc\u63a8\u7406\u65f6\u95f4\uff09\u6027\u80fd\u4ee5\u663e\u793a\u4f18\u5316\u3002 \u8bc4\u4f30\u811a\u672c\u548c\u7ed3\u679c\u5df2\u5f00\u6e90\u4f9b\u53c2\u8003\u3002</li> <li>\u5bf9 DLC \u672a\u6765\u53d1\u5c55\u7684\u51e0\u4e2a\u89c1\u89e3 7. CONCLUSION AND FUTURE DIRECTIONS\u3002</li> </ol> <p>\u6587\u7ae0 \u7b2c 2 \u8282\u4ecb\u7ecd\u4e86 DLC \u7684\u80cc\u666f\uff0c\u5305\u62ec DL \u6846\u67b6\u3001DL \u786c\u4ef6\u4ee5\u53ca\u786c\u4ef6 (FPGA) \u7279\u5b9a\u7684 DL \u4ee3\u7801\u751f\u6210\u5668\u3002 \u7b2c 3 \u8282\u63cf\u8ff0\u4e86 DLC \u7684\u901a\u7528\u8bbe\u8ba1\u67b6\u6784\u3002 \u7b2c 4 \u8282\u8ba8\u8bba DLC \u7684\u5173\u952e\u7ec4\u4ef6\uff0c\u5305\u62ec\u591a\u7ea7 IR\u3001\u524d\u7aef\u4f18\u5316\u548c\u540e\u7aef\u4f18\u5316\u3002 \u7b2c 5 \u8282\u4ecb\u7ecd\u4e86\u7efc\u5408\u5206\u7c7b\u3002 \u7b2c 6 \u8282\u63d0\u4f9b\u4e86\u5b9a\u91cf\u6027\u80fd\u6bd4\u8f83\u3002 \u7b2c 7 \u8282\u5f3a\u8c03\u4e86 DLC \u7814\u7a76\u7684\u672a\u6765\u65b9\u5411\u3002</p>"},{"location":"mlc/dlc-survey.html#7","title":"7. \u603b\u7ed3\u4e0e\u5c55\u671b","text":"<p>\u8bba\u6587\u9488\u5bf9\u8bbe\u8ba1\u539f\u5219\u5bf9\u73b0\u6709\u7684 DLC \u8fdb\u884c\u4e86\u5168\u9762\u5206\u6790\u3002 \u9996\u5148\u6df1\u5165\u7814\u7a76\u73b0\u6709 DLC \u91c7\u7528\u7684\u901a\u7528\u67b6\u6784\uff0c\u5305\u62ec \u591a\u7ea7 IR\u3001 \u524d\u7aef \u548c \u540e\u7aef\u3002 \u8be6\u7ec6\u4ecb\u7ecd\u4e86\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u8bbe\u8ba1\u7406\u5ff5\u548c\u53c2\u8003\u5b9e\u73b0\uff0c\u91cd\u70b9\u4ecb\u7ecd\u4e86\u7279\u5b9a\u4e8e DLC \u7684\u72ec\u7279 IR \u548c\u4f18\u5316\u3002 \u603b\u7ed3\u672c\u6b21\u8c03\u67e5\u7684\u7ed3\u679c\uff0c\u5e76\u5f3a\u8c03\u4e86 DLC \u7684\u672a\u6765\u53d1\u5c55\u65b9\u5411\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <ol> <li> <p>Dynamic shape and pre/post processing</p> <p>\u52a8\u6001\u6a21\u578b\u5728 DL \u9886\u57df\u8d8a\u6765\u8d8a\u6d41\u884c\uff0c\u5176\u8f93\u5165\u5f62\u72b6\u751a\u81f3\u6a21\u578b\u672c\u8eab\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u90fd\u53ef\u80fd\u53d1\u751f\u53d8\u5316\u3002 \u7279\u522b\u662f\u5728 NLP \u9886\u57df\uff0c\u6a21\u578b\u53ef\u80fd\u63a5\u53d7\u5404\u79cd\u5f62\u72b6\u7684\u8f93\u5165\uff0c\u8fd9\u5bf9 DLC \u6765\u8bf4\u662f\u4e00\u4e2a\u6311\u6218\uff0c\u56e0\u4e3a\u6570\u636e\u7684\u5f62\u72b6\u5728\u8fd0\u884c\u65f6\u662f\u672a\u77e5\u7684\u3002 \u73b0\u6709\u7684 DLC \u9700\u8981\u66f4\u591a\u7684\u7814\u7a76\u5de5\u4f5c\u624d\u80fd\u6709\u6548\u5730\u652f\u6301\u65b0\u5174\u52a8\u6001\u6a21\u578b\u7684\u52a8\u6001\u5f62\u72b6\u3002 \u6b64\u5916\uff0c\u968f\u7740\u672a\u6765\u7684\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u53d8\u5f97\u8d8a\u6765\u8d8a\u590d\u6742\uff0c\u5b83\u4eec\u7684\u6574\u4e2a\u63a7\u5236\u6d41\u7a0b\u53ef\u80fd\u4e0d\u53ef\u907f\u514d\u5730\u5305\u62ec\u590d\u6742\u7684\u9884\u5904\u7406/\u540e\u5904\u7406\u8fc7\u7a0b\u3002 \u76ee\u524d\uff0c\u5927\u591a\u6570 DLC \u4f7f\u7528 Python \u4f5c\u4e3a\u5176\u7f16\u7a0b\u8bed\u8a00\uff0c\u5f53\u7531 Python \u89e3\u91ca\u5668\u6267\u884c\u65f6\uff0c\u9884\u5904\u7406/\u540e\u5904\u7406\u53ef\u80fd\u6210\u4e3a\u6027\u80fd\u74f6\u9888\u3002 \u73b0\u6709\u7684 DLC \u5c1a\u672a\u8003\u8651\u8fd9\u79cd\u6f5c\u5728\u7684\u6027\u80fd\u74f6\u9888\u3002 \u652f\u6301 DLC \u4e2d\u7684\u6574\u4e2a\u63a7\u5236\u6d41\u53ef\u4ee5\u8868\u8fbe\u548c\u4f18\u5316\u9884\u5904\u7406/\u540e\u5904\u7406\u4ee5\u53ca DL \u6a21\u578b\uff0c\u8fd9\u4e3a\u6a21\u578b\u90e8\u7f72\u4e2d\u7684\u6027\u80fd\u52a0\u901f\u5f00\u8f9f\u4e86\u65b0\u7684\u673a\u4f1a\u3002</p> </li> <li> <p>Advanced auto-tuning</p> <p>\u73b0\u6709\u7684\u81ea\u52a8\u8c03\u6574\u6280\u672f\u4fa7\u91cd\u4e8eindividual operators\u7684\u4f18\u5316\u3002 \u4f46\u662f\uff0c\u5c40\u90e8\u6700\u4f18\u7684\u7ec4\u5408\u4e0d\u4f1a\u5bfc\u81f4\u5168\u5c40\u6700\u4f18\u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u5c06\u5e94\u7528\u4e8e\u4e0d\u540c\u6570\u636e\u5e03\u5c40\u7684\u4e24\u4e2a\u76f8\u90bb\u8fd0\u7b97\u7b26\u4e00\u8d77\u8c03\u6574\uff0c\u800c\u65e0\u9700\u5728\u5176\u95f4\u5f15\u5165\u989d\u5916\u7684\u5185\u5b58\u8f6c\u6362\u3002 \u6b64\u5916\uff0c\u968f\u7740\u8fb9\u7f18\u8ba1\u7b97\u7684\u5174\u8d77\uff0c\u6267\u884c\u65f6\u95f4\u4e0d\u4ec5\u662f\u6df1\u5ea6\u5b66\u4e60\u7f16\u8bd1\u5668\u7684\u4f18\u5316\u76ee\u6807\u3002 \u81ea\u52a8\u8c03\u6574\u4e2d\u8fd8\u5e94\u8003\u8651\u65b0\u7684\u4f18\u5316\u76ee\u6807\uff0c\u4f8b\u5982\u5185\u5b58\u5360\u7528\u548c\u80fd\u8017\u3002 \u7279\u522b\u662f\uff0c\u5bf9\u4e8e\u57fa\u4e8e ML \u7684\u81ea\u52a8\u8c03\u6574\u6280\u672f\uff0c\u6709\u51e0\u4e2a\u65b9\u5411\u503c\u5f97\u8fdb\u4e00\u6b65\u63a2\u7d22\u3002 \u9996\u5148\uff0cML \u6280\u672f\u53ef\u4ee5\u5e94\u7528\u4e8e\u81ea\u52a8\u8c03\u6574\u7684\u5176\u4ed6\u9636\u6bb5\uff0c\u800c\u4e0d\u662f\u6210\u672c\u6a21\u578b\u3002 \u4f8b\u5982\uff0c\u5728\u9009\u62e9\u7f16\u8bd1\u5668\u9009\u9879\u548c\u4f18\u5316\u8ba1\u5212\u9636\u6bb5\uff0c\u53ef\u4ee5\u4f7f\u7528 ML \u6280\u672f\u76f4\u63a5\u9884\u6d4b\u53ef\u80fd\u6027\u5e76\u5f00\u53d1\u7b97\u6cd5\u6765\u786e\u5b9a\u6700\u7ec8\u914d\u7f6e\u3002 \u5176\u6b21\uff0c\u53ef\u4ee5\u57fa\u4e8e\u9886\u57df\u77e5\u8bc6\u6539\u8fdb\u57fa\u4e8e ML \u7684\u81ea\u52a8\u8c03\u6574\u6280\u672f\u3002 \u4f8b\u5982\uff0c\u5728\u81ea\u52a8\u8c03\u6574\u6280\u672f\u4e2d\u7ed3\u5408\u7279\u5f81\u5de5\u7a0b\uff08\u9009\u62e9\u7279\u5f81\u6765\u8868\u793a\u7a0b\u5e8f\uff09[99] \u53ef\u80fd\u662f\u83b7\u5f97\u66f4\u597d\u8c03\u6574\u7ed3\u679c\u7684\u6f5c\u5728\u65b9\u5411\u3002</p> </li> <li> <p>Polyhedral model</p> <p>\u5728 DLC \u7684\u8bbe\u8ba1\u4e2d\u7ed3\u5408\u591a\u9762\u4f53\u6a21\u578b\u548c\u81ea\u52a8\u8c03\u6574\u6280\u672f\u4ee5\u63d0\u9ad8\u6548\u7387\u662f\u4e00\u4e2a\u5f88\u6709\u524d\u9014\u7684\u7814\u7a76\u65b9\u5411\u3002 \u4e00\u65b9\u9762\uff0c\u53ef\u4ee5\u5e94\u7528\u81ea\u52a8\u8c03\u6574\u901a\u8fc7\u91cd\u7528\u4ee5\u524d\u7684\u914d\u7f6e\u6765\u6700\u5c0f\u5316\u591a\u9762\u4f53 JIT \u7f16\u8bd1\u7684\u5f00\u9500\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u591a\u9762\u4f53\u6a21\u578b\u53ef\u4ee5\u7528\u6765\u8fdb\u884c\u81ea\u52a8\u8c03\u5ea6\uff0c\u51cf\u5c11\u81ea\u52a8\u8c03\u6574\u7684\u641c\u7d22\u7a7a\u95f4\u3002</p> <p>\u5728 DLC \u4e2d\u5e94\u7528\u591a\u9762\u4f53\u6a21\u578b\u7684\u53e6\u4e00\u4e2a\u6311\u6218\u662f\u652f\u6301\u7a00\u758f\u5f20\u91cf\u3002 \u901a\u5e38\uff0cCSF [84] \u7b49\u7a00\u758f\u5f20\u91cf\u7684\u683c\u5f0f\u7528\u4e0d\u518d\u7ebf\u6027\u7684\u7d22\u5f15\u6570\u7ec4\uff08\u4f8b\u5982 a[b[i]]\uff09\u8868\u793a\u5faa\u73af\u7d22\u5f15\u3002 \u8fd9\u79cd\u95f4\u63a5\u7d22\u5f15\u5bfb\u5740\u5bfc\u81f4\u975e\u4eff\u5c04\u4e0b\u6807\u8868\u8fbe\u5f0f\u548c\u5faa\u73af\u8fb9\u754c\uff0c\u8fd9\u7981\u6b62\u4e86\u591a\u9762\u4f53\u6a21\u578b\u7684\u5faa\u73af\u4f18\u5316 [14, 90]\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u591a\u9762\u4f53\u793e\u533a\u5728\u652f\u6301\u7a00\u758f\u5f20\u91cf\u65b9\u9762\u53d6\u5f97\u4e86\u8fdb\u5c55 [94\u300195]\uff0c\u5e76\u4e14\u96c6\u6210\u591a\u9762\u4f53\u6a21\u578b\u7684\u6700\u65b0\u8fdb\u5c55\u53ef\u4ee5\u589e\u52a0 DLC \u7684\u6027\u80fd\u673a\u4f1a\u3002</p> </li> <li> <p>Subgraph partitioning</p> <p>\u652f\u6301\u5b50\u56fe\u5212\u5206\u7684 DLC \u53ef\u4ee5\u5c06\u8ba1\u7b97\u56fe\u5212\u5206\u4e3a\u591a\u4e2a\u5b50\u56fe\uff0c\u5b50\u56fe\u53ef\u4ee5\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u8fdb\u884c\u5904\u7406\u3002 \u5b50\u56fe\u5212\u5206\u4e3a DLC \u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u7814\u7a76\u673a\u4f1a\u3002 \u9996\u5148\uff0c\u5b83\u5f00\u8f9f\u4e86\u96c6\u6210\u56fe\u5f62\u5e93\u4ee5\u8fdb\u884c\u4f18\u5316\u7684\u53ef\u80fd\u6027\u3002 \u4ee5 nGraph \u548c DNNL \u4e3a\u4f8b\uff0cDNNL \u662f\u4e00\u4e2a DL \u5e93\uff0c\u5229\u7528\u5927\u91cf\u9ad8\u5ea6\u4f18\u5316\u7684\u5185\u6838\u8fdb\u884c\u56fe\u5f62\u4f18\u5316\u3002 DNNL \u4e0e nGraph \u7684\u96c6\u6210\u4f7f DNNL \u80fd\u591f\u52a0\u901f nGraph \u751f\u6210\u7684\u5b50\u56fe\u7684\u6267\u884c\u3002 \u5176\u6b21\uff0c\u5b83\u5f00\u8f9f\u4e86\u5f02\u6784\u548c\u5e76\u884c\u6267\u884c\u7684\u53ef\u80fd\u6027\u3002 \u4e00\u65e6\u8ba1\u7b97\u56fe\u88ab\u5212\u5206\u4e3a\u5b50\u56fe\uff0c\u4e0d\u540c\u5b50\u56fe\u7684\u6267\u884c\u53ef\u4ee5\u540c\u65f6\u5206\u914d\u7ed9\u5f02\u6784\u786c\u4ef6\u76ee\u6807\u3002 \u4ee5\u8fb9\u7f18\u8bbe\u5907\u4e3a\u4f8b\uff0c\u5b83\u7684\u8ba1\u7b97\u5355\u5143\u53ef\u80fd\u5305\u62ecARM CPU\u3001Mail GPU\u3001DSP\uff0c\u53ef\u80fd\u8fd8\u6709NPU\u3002 \u4ece\u6709\u6548\u5229\u7528\u6240\u6709\u8ba1\u7b97\u5355\u5143\u7684 DLC \u751f\u6210\u5b50\u56fe\u53ef\u4ee5\u663e\u7740\u52a0\u5feb DL \u4efb\u52a1\u3002</p> </li> <li> <p>Quantization</p> <p>DL \u6846\u67b6\u4e2d\u5e94\u7528\u7684\u4f20\u7edf\u91cf\u5316\u7b56\u7565\u57fa\u4e8e\u4e00\u7ec4\u56fa\u5b9a\u7684\u65b9\u6848\u548c\u6570\u636e\u7c7b\u578b\uff0c\u51e0\u4e4e\u6ca1\u6709\u9488\u5bf9\u5728\u4e0d\u540c\u786c\u4ef6\u4e0a\u8fd0\u884c\u7684\u4ee3\u7801\u8fdb\u884c\u5b9a\u5236\u3002 \u7136\u800c\uff0c\u5728 DLC \u4e2d\u652f\u6301\u91cf\u5316\u53ef\u4ee5\u5728\u7f16\u8bd1\u671f\u95f4\u5229\u7528\u4f18\u5316\u673a\u4f1a\u6765\u5bfc\u51fa\u66f4\u6709\u6548\u7684\u91cf\u5316\u7b56\u7565\u3002 \u4f8b\u5982\uff0cRelay [78] \u63d0\u4f9b\u4e86\u4e00\u79cd\u91cf\u5316\u91cd\u5199\u6d41\u7a0b\uff0c\u53ef\u4ee5\u4e3a\u5404\u79cd\u65b9\u6848\u81ea\u52a8\u751f\u6210\u91cf\u5316\u4ee3\u7801\u3002 \u4e3a\u4e86\u652f\u6301\u91cf\u5316\uff0cDLC \u9700\u8981\u89e3\u51b3\u51e0\u4e2a\u6311\u6218\u3002 \u7b2c\u4e00\u4e2a\u6311\u6218\u662f\u5982\u4f55\u5728\u4e0d\u8fdb\u884c\u5927\u91cf\u5de5\u7a0b\u5de5\u4f5c\u7684\u60c5\u51b5\u4e0b\u5b9e\u65bd\u65b0\u7684\u91cf\u5316\u8fd0\u7b97\u7b26\u3002 AWS\u7684\u5c1d\u8bd5\u6307\u51fa\u4e86\u4e00\u4e2a\u53ef\u80fd\u7684\u65b9\u5411\uff0c\u5373\u5229\u7528dialect\u7684\u6982\u5ff5\uff0c\u5728\u57fa\u672c\u7b97\u5b50\u7684\u57fa\u7840\u4e0a\u5b9e\u73b0\u65b0\u7684\u7b97\u5b50\uff0c\u4f7f\u56fe\u7ea7\u548c\u7b97\u5b50\u7ea7\u7684\u4f18\u5316\u53ef\u4ee5\u590d\u7528\u3002 \u7b2c\u4e8c\u4e2a\u6311\u6218\u662f\u7f16\u8bd1\u671f\u95f4\u91cf\u5316\u548c\u5176\u4ed6\u4f18\u5316\u4e4b\u95f4\u7684\u4ea4\u4e92\u3002 \u4f8b\u5982\uff0c\u786e\u5b9a\u91cf\u5316\u7684\u9002\u5f53\u9636\u6bb5\u5e76\u4e0e\u7b97\u5b50\u878d\u5408\u7b49\u4f18\u5316\u5408\u4f5c\u9700\u8981\u672a\u6765\u7684\u7814\u7a76\u8c03\u67e5\u3002</p> </li> <li> <p>Unified optimizations</p> <p>\u5c3d\u7ba1\u73b0\u6709\u7684 DLC \u5728\u8ba1\u7b97\u56fe\u4f18\u5316\u548c\u786c\u4ef6\u7279\u5b9a\u4f18\u5316\u65b9\u9762\u91c7\u7528\u7c7b\u4f3c\u7684\u8bbe\u8ba1\uff0c\u4f46\u6bcf\u4e2a\u7f16\u8bd1\u5668\u5728\u67d0\u4e9b\u65b9\u9762\u90fd\u6709\u81ea\u5df1\u7684\u4f18\u52bf\u3002 \u7f3a\u5c11\u5171\u4eab\u6700\u5148\u8fdb\u7684\u4f18\u5316\u4ee5\u53ca\u8de8\u73b0\u6709\u7f16\u8bd1\u5668\u652f\u6301\u65b0\u5174\u786c\u4ef6\u76ee\u6807\u7684\u65b9\u6cd5\u3002 \u6211\u4eec\u63d0\u5021\u7edf\u4e00\u73b0\u6709 DLC \u7684\u4f18\u5316\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u91cd\u7528\u6bcf\u4e2a DLC \u91c7\u7528\u7684\u6700\u4f73\u5b9e\u8df5\u3002 \u6b64\u5916\uff0c\u7edf\u4e00 DLC \u7684\u4f18\u5316\u53ef\u4ee5\u79ef\u7d2f\u5f3a\u5927\u7684\u529b\u91cf\u6765\u5f71\u54cd\u901a\u7528\u548c\u4e13\u7528 DL \u52a0\u901f\u5668\u7684\u8bbe\u8ba1\uff0c\u5e76\u4e3a DLC \u548c\u786c\u4ef6\u7684\u9ad8\u6548\u534f\u540c\u8bbe\u8ba1\u63d0\u4f9b\u73af\u5883\u3002</p> <p>\u76ee\u524d\uff0c\u8c37\u6b4c MLIR \u662f\u671d\u8fd9\u4e2a\u65b9\u5411\u8fc8\u51fa\u7684\u4e00\u9879\u6709\u524d\u9014\u7684\u4e3e\u63aa\u3002 \u5b83\u63d0\u4f9b\u4e86\u591a\u7ea7 IR \u7684\u57fa\u7840\u8bbe\u65bd\uff0c\u5e76\u5305\u542b IR \u89c4\u8303\u548c\u5de5\u5177\u5305\u4ee5\u5728\u6bcf\u4e2a\u7ea7\u522b\u6267\u884c\u8de8 IR \u7684\u8f6c\u6362\u3002 \u5b83\u8fd8\u63d0\u4f9b\u4e86\u7075\u6d3b\u7684\u65b9\u8a00(dialect)\uff0c\u56e0\u6b64\u6bcf\u4e2a DLC \u90fd\u53ef\u4ee5\u4e3a\u9ad8\u7ea7\u548c\u4f4e\u7ea7 IR \u6784\u5efa\u5176\u5b9a\u5236\u7684\u65b9\u8a00\u3002 \u901a\u8fc7\u8de8\u65b9\u8a00\u7684\u8f6c\u6362\uff0c\u4e00\u4e2a DLC \u7684\u4f18\u5316\u53ef\u4ee5\u88ab\u53e6\u4e00\u4e2a\u7f16\u8bd1\u5668\u91cd\u7528\u3002 \u7136\u800c\uff0c\u65b9\u8a00\u7684\u8f6c\u53d8\u9700\u8981\u8fdb\u4e00\u6b65\u7684\u7814\u7a76\u52aa\u529b\uff0c\u4ee5\u51cf\u5c11\u5bf9\u7cbe\u81f4\u8bbe\u8ba1\u7684\u4f9d\u8d56\u3002</p> </li> <li> <p>Differentiable programming</p> <p>\u53ef\u5fae\u7f16\u7a0b\u662f\u4e00\u79cd\u7f16\u7a0b\u8303\u5f0f\uff0c\u5176\u4e2d\u7a0b\u5e8f\u662f\u5b8c\u5168\u53ef\u5fae\u7684\u3002 \u7528\u53ef\u5fae\u5206\u7f16\u7a0b\u8303\u5f0f\u7f16\u5199\u7684\u7b97\u6cd5\u53ef\u4ee5\u81ea\u52a8\u5fae\u5206\uff0c\u8fd9\u5bf9 DL \u793e\u533a\u5f88\u6709\u5438\u5f15\u529b\u3002 \u8bb8\u591a\u7f16\u8bd1\u5668\u9879\u76ee\u90fd\u91c7\u7528\u4e86\u53ef\u5fae\u5206\u7f16\u7a0b\uff0c\u4f8b\u5982 Myia [89]\u3001Flux [40] \u548c Julia [13]\u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u73b0\u6709\u7684 DLC \u51e0\u4e4e\u4e0d\u652f\u6301\u5dee\u5206\u7f16\u7a0b\u3002</p> <p>\u652f\u6301\u53ef\u5fae\u7f16\u7a0b\u5bf9\u4e8e\u73b0\u6709\u7684 DLC \u6765\u8bf4\u662f\u76f8\u5f53\u5177\u6709\u6311\u6218\u6027\u7684\u3002 \u56f0\u96be\u4e0d\u4ec5\u6765\u81ea\u6570\u636e\u7ed3\u6784\uff0c\u8fd8\u6765\u81ea\u8bed\u8a00\u8bed\u4e49\u3002 \u4f8b\u5982\uff0c\u8981\u5b9e\u73b0\u4ece Julia \u5230 XLA HLO IR \u7684\u8f6c\u6362\uff0c\u6311\u6218\u4e4b\u4e00 [24] \u662f Julia \u4f7f\u7528\u7684\u547d\u4ee4\u5f0f\u8bed\u8a00\u4e0e XLA \u4f7f\u7528\u7684\u7b26\u53f7\u8bed\u8a00\u4e4b\u95f4\u7684\u63a7\u5236\u6d41\u4e0d\u540c\u3002 \u4e3a\u4e86\u9ad8\u6548\u5730\u4f7f\u7528 HLO IR\uff0c\u7f16\u8bd1\u5668\u8fd8\u9700\u8981\u4e3a Julia \u63d0\u4f9b\u64cd\u4f5c\u62bd\u8c61\uff0c\u4ee5\u652f\u6301 XLA \u7684\u7279\u5b9a\u8bed\u4e49\uff0c\u4f8b\u5982 MapReduce \u548c\u5e7f\u64ad\u3002 \u6b64\u5916\uff0cJulia \u548c XLA \u4e4b\u95f4\u8bed\u4e49\u5dee\u5f02\u7684\u533a\u5206\uff0c\u4e5f\u9700\u8981\u8fdb\u884c\u91cd\u5927\u66f4\u6539</p> </li> <li> <p>Privacy protection</p> <p>\u5728\u8fb9\u7f18-\u4e91\u7cfb\u7edf\u4e2d\uff0cDL \u6a21\u578b\u901a\u5e38\u88ab\u5206\u6210\u4e24\u90e8\u5206\uff0c\u5206\u522b\u8fd0\u884c\u5728\u8fb9\u7f18\u8bbe\u5907\u548c\u4e91\u670d\u52a1\u4e0a\uff0c\u8fd9\u6837\u53ef\u4ee5\u63d0\u4f9b\u66f4\u597d\u7684\u54cd\u5e94\u5ef6\u8fdf\u5e76\u6d88\u8017\u66f4\u5c11\u7684\u901a\u4fe1\u5e26\u5bbd\u3002 \u7136\u800c\uff0c\u8fb9\u7f18\u4e91\u7cfb\u7edf\u7684\u7f3a\u70b9\u4e4b\u4e00\u662f\u7528\u6237\u9690\u79c1\u53d8\u5f97\u8106\u5f31\u3002 \u539f\u56e0\u662f\u653b\u51fb\u8005\u53ef\u4ee5\u62e6\u622a\u4ece\u8fb9\u7f18\u8bbe\u5907\u53d1\u9001\u5230\u4e91\u7aef\u7684\u4e2d\u95f4\u7ed3\u679c\uff0c\u7136\u540e\u4f7f\u7528\u4e2d\u95f4\u7ed3\u679c\u8bad\u7ec3\u53e6\u4e00\u4e2a\u6a21\u578b\uff0c\u8be5\u6a21\u578b\u53ef\u4ee5\u63ed\u793a\u504f\u79bb\u539f\u59cb\u7528\u6237\u4efb\u52a1\u7684\u9690\u79c1\u4fe1\u606f\u3002</p> <p>\u4e3a\u4e86\u4fdd\u62a4\u8fb9\u7f18\u4e91\u7cfb\u7edf\u4e2d\u7684\u9690\u79c1\uff0c\u73b0\u6709\u65b9\u6cd5 [27\u300167\u300174] \u5efa\u8bae\u5728\u4e2d\u95f4\u7ed3\u679c\u4e2d\u6dfb\u52a0\u5177\u6709\u7279\u6b8a\u7edf\u8ba1\u7279\u6027\u7684\u566a\u58f0\uff0c\u8fd9\u53ef\u4ee5\u964d\u4f4e\u653b\u51fb\u8005\u4efb\u52a1\u7684\u51c6\u786e\u6027\uff0c\u800c\u4e0d\u4f1a\u4e25\u91cd\u964d\u4f4e\u7528\u6237\u4efb\u52a1\u7684\u51c6\u786e\u6027\u3002 \u7136\u800c\uff0c\u56f0\u96be\u5728\u4e8e\u786e\u5b9a\u5e94\u8be5\u63d2\u5165\u566a\u58f0\u7684\u5c42\uff0c\u8fd9\u5bf9\u4e8e\u786e\u5b9a\u6700\u4f73\u5c42\u662f\u76f8\u5f53\u8d39\u529b\u7684\u3002 \u4e0a\u8ff0\u56f0\u96be\u4e3a DLC \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u673a\u4f1a\u6765\u652f\u6301\u9690\u79c1\u4fdd\u62a4\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4fdd\u7559\u4e86 DL \u6a21\u578b\u7684\u4e30\u5bcc\u4fe1\u606f\uff0c\u53ef\u4ee5\u81ea\u52a8\u5f15\u5bfc\u566a\u58f0\u63d2\u5165\u8de8\u5c42\u3002</p> </li> <li> <p>Training support</p> <p>\u901a\u5e38\uff0c\u5f53\u524d\u7684 DLC \u5bf9\u6a21\u578b\u8bad\u7ec3\u7684\u652f\u6301\u8981\u5c11\u5f97\u591a\u3002 \u5982\u88681\u6240\u793a\uff0cnGraph\u53ea\u652f\u6301\u5728Intel NNP-T\u52a0\u901f\u5668\u4e0a\u8bad\u7ec3\uff0cTC\u53ea\u652f\u6301\u5355\u6838\u81ea\u52a8\u5fae\u5206\uff0cGlow\u6709\u6709\u9650\u6a21\u578b\u7684\u5b9e\u9a8c\u6027\u8bad\u7ec3\u652f\u6301\uff0cTVM\u7684\u8bad\u7ec3\u652f\u6301\u6b63\u5728\u5f00\u53d1\u4e2d\uff0cXLA \u4f9d\u8d56 \u5173\u4e8e TensorFlow \u7684\u8bad\u7ec3\u652f\u6301\u3002 \u603b\u800c\u8a00\u4e4b\uff0c\u5f53\u524d\u7684 DLC \u4e3b\u8981\u4e13\u6ce8\u4e8e\u5f25\u5408\u5c06 DL \u6a21\u578b\u6709\u6548\u90e8\u7f72\u5230\u4e0d\u540c\u786c\u4ef6\u4e0a\u7684\u5dee\u8ddd\uff0c\u56e0\u6b64\u4ed6\u4eec\u9009\u62e9\u63a8\u7406\u4f5c\u4e3a\u4ed6\u4eec\u7684\u4e3b\u8981\u4f18\u5316\u76ee\u6807\u3002 \u7136\u800c\uff0c\u6269\u5c55 DLC \u7684\u80fd\u529b\u4ee5\u652f\u6301\u6a21\u578b\u8bad\u7ec3\u5c06\u5f00\u8f9f\u5927\u91cf\u7684\u7814\u7a76\u673a\u4f1a\uff0c\u4f8b\u5982\u68af\u5ea6\u7b97\u5b50\u7684\u4f18\u5316\u548c\u9ad8\u9636\u81ea\u52a8\u5fae\u5206\u3002</p> </li> </ol>"},{"location":"mlc/dlc-survey.html#3-common-design-architecture-of-dl-compilers","title":"3. COMMON DESIGN ARCHITECTURE OF DL COMPILERS","text":"<p>DLC \u5e38\u89c1\u8bbe\u8ba1\u67b6\u6784\u4e3b\u8981\u5305\u542b\u4e24\u90e8\u5206\uff1a\u524d\u7aef \u548c \u540e\u7aef\uff0c\u5982\u56fe 2 \u6240\u793a\u3002\u4e2d\u95f4\u8868\u793a (IR) \u5728\u524d\u7aef\u548c\u540e\u7aef\u4e4b\u95f4\u3002 \u4e00\u822c\u6765\u8bf4\uff0cIR \u662f\u5bf9\u7a0b\u5e8f\u7684\u62bd\u8c61\uff0c\u7528\u4e8e\u7a0b\u5e8f\u7684\u4f18\u5316\u3002 \u5177\u4f53\u6765\u8bf4\uff0cDL \u6a21\u578b\u5728 DLC \u4e2d\u88ab\u7ffb\u8bd1\u6210\u591a\u7ea7 IR\uff0c\u5176\u4e2d\u9ad8\u7ea7 IR \u4f4d\u4e8e\u524d\u7aef\uff0c\u4f4e\u7ea7 IR \u4f4d\u4e8e\u540e\u7aef\u3002 \u57fa\u4e8e\u9ad8\u7ea7 IR\uff0cDLC \u524d\u7aef\u8d1f\u8d23\u786c\u4ef6\u65e0\u5173\u7684\u8f6c\u6362\u548c\u4f18\u5316\u3002 \u57fa\u4e8e\u4f4e\u7ea7 IR\uff0cDLC \u540e\u7aef\u8d1f\u8d23\u7279\u5b9a\u4e8e\u786c\u4ef6\u7684\u4f18\u5316\u3001\u4ee3\u7801\u751f\u6210\u548c\u7f16\u8bd1\u3002 \u8fd9\u7bc7\u6587\u7ae0\u4fa7\u91cd\u4e8e DLC \u7684\u8bbe\u8ba1\u539f\u5219\u3002 \u5bf9\u4e8e DLC \u7684\u529f\u80fd\u548c\u5b9e\u9a8c\u6bd4\u8f83\uff0c\u8bfb\u8005\u53ef\u4ee5\u53c2\u8003[55, 102]\u3002</p> <ol> <li> <p>The high-level IR</p> <p>high-level IR \u4e5f\u79f0\u4e3a\u56fe IR\uff0c\u8868\u793a\u8ba1\u7b97\u548c\u63a7\u5236\u6d41\uff0c\u4e14\u4e0e\u786c\u4ef6\u65e0\u5173\u3002 \u9ad8\u7ea7 IR \u7684\u8bbe\u8ba1\u6311\u6218\u662f\u8ba1\u7b97\u548c\u63a7\u5236\u6d41\u7684\u62bd\u8c61\u80fd\u529b\uff0c\u53ef\u4ee5\u6355\u83b7\u548c\u8868\u8fbe\u5404\u79cd DL \u6a21\u578b\u3002 \u9ad8\u7ea7 IR \u7684\u76ee\u6807\u662f\u5efa\u7acb\u63a7\u5236\u6d41\u548c\u7b97\u5b50\u4e0e\u6570\u636e\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u5e76\u4e3a\u56fe\u7ea7\u4f18\u5316\u63d0\u4f9b\u63a5\u53e3\u3002 \u5b83\u8fd8\u5305\u542b\u7528\u4e8e\u7f16\u8bd1\u7684\u4e30\u5bcc\u8bed\u4e49\u4fe1\u606f\uff0c\u5e76\u4e3a\u81ea\u5b9a\u4e49\u7b97\u5b50\u63d0\u4f9b\u53ef\u6269\u5c55\u6027\u3002 high-level IR \u8be6\u7ec6\u8ba8\u8bba\u57284.1 \u8282\u3002</p> </li> <li> <p>The low-level IR</p> <p>low-level IR \u9488\u5bf9\u4e0d\u540c\u786c\u4ef6\u76ee\u6807\u7684\u786c\u4ef6\u7279\u5b9a\u4f18\u5316\u548c\u4ee3\u7801\u751f\u6210\u800c\u8bbe\u8ba1\u3002 \u56e0\u6b64\uff0c\u4f4e\u7ea7 IR \u5e94\u8be5\u8db3\u591f\u7ec6\u7c92\u5ea6\u4ee5\u53cd\u6620\u786c\u4ef6\u7279\u6027\u5e76\u8868\u793a\u7279\u5b9a\u4e8e\u786c\u4ef6\u7684\u4f18\u5316\u3002 \u5b83\u8fd8\u5e94\u8be5\u5141\u8bb8\u5728\u7f16\u8bd1\u5668\u540e\u7aef\u4f7f\u7528\u6210\u719f\u7684\u7b2c\u4e09\u65b9\u5de5\u5177\u94fe\uff0c\u4f8b\u5982 Halide [77]\u3001 polyhedral model [31] \u548c LLVM [51]\u3002 low-level IR \u8be6\u7ec6\u8ba8\u8bba\u57284.2 \u8282\u3002</p> </li> <li> <p>The fronted</p> <p>Fronted \u4ece\u73b0\u6709\u7684 DL \u6846\u67b6\u4e2d\u83b7\u53d6 DL \u6a21\u578b\u4f5c\u4e3a\u8f93\u5165\uff0c\u7136\u540e\u5c06\u6a21\u578b\u8f6c\u6362\u4e3a\u8ba1\u7b97\u56fe\u8868\u793a\uff08\u4f8b\u5982\uff0c\u56fe IR\uff09\u3002 \u524d\u7aef\u9700\u8981\u5b9e\u73b0\u5404\u79cd\u683c\u5f0f\u8f6c\u6362\u4ee5\u652f\u6301\u4e0d\u540c\u6846\u67b6\u4e2d\u7684\u4e0d\u540c\u683c\u5f0f\u3002 \u8ba1\u7b97\u56fe\u4f18\u5316\u7ed3\u5408\u4e86\u901a\u7528\u7f16\u8bd1\u5668\u548c DL \u7279\u5b9a\u4f18\u5316\u7684\u4f18\u5316\u6280\u672f\uff0c\u51cf\u5c11\u4e86\u5197\u4f59\u5e76\u63d0\u9ad8\u4e86\u56fe IR \u7684\u6548\u7387\u3002 \u8fd9\u79cd\u4f18\u5316\u53ef\u4ee5\u5206\u4e3a\u8282\u70b9\u7ea7\uff08\u4f8b\u5982\uff0cnop \u6d88\u9664\u548c\u96f6\u7ef4\u5f20\u91cf\u6d88\u9664\uff09\u3001\u5757\u7ea7\uff08\u4f8b\u5982\uff0c\u4ee3\u6570\u7b80\u5316\u3001\u8fd0\u7b97\u7b26\u878d\u5408\u548c\u8fd0\u7b97\u7b26\u4e0b\u6c89\uff09\u548c\u6570\u636e\u6d41\u7ea7\uff08\u4f8b\u5982\uff0cCSE\u3001DCE\u3001 \u9759\u6001\u5185\u5b58\u89c4\u5212\u548c\u5e03\u5c40\u8f6c\u6362\uff09\u3002 \u5728\u524d\u7aef\u4e4b\u540e\uff0c\u751f\u6210\u4f18\u5316\u7684\u8ba1\u7b97\u56fe\u5e76\u4f20\u9012\u7ed9\u540e\u7aef\u3002 fronted \u8be6\u7ec6\u8ba8\u8bba\u57284.3 \u8282\u3002</p> </li> <li> <p>The backend</p> <p>\u540e\u7aef\u5c06\u9ad8\u7ea7 IR \u8f6c\u6362\u4e3a\u4f4e\u7ea7 IR \u5e76\u6267\u884c\u786c\u4ef6\u4f18\u5316\u3002 \u4e00\u65b9\u9762\uff0c\u5b83\u53ef\u4ee5\u76f4\u63a5\u5c06\u9ad8\u7ea7 IR \u8f6c\u6362\u4e3a\u7b2c\u4e09\u65b9\u5de5\u5177\u94fe\uff0c\u5982 LLVM IR\uff0c\u4ee5\u5229\u7528\u73b0\u6709\u57fa\u7840\u8bbe\u65bd\u8fdb\u884c\u901a\u7528\u4f18\u5316\u548c\u4ee3\u7801\u751f\u6210\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5b83\u53ef\u4ee5\u5229\u7528 DL \u6a21\u578b\u548c\u786c\u4ef6\u7279\u6027\u7684\u5148\u9a8c\u77e5\u8bc6\uff0c\u901a\u8fc7\u5b9a\u5236\u7684\u7f16\u8bd1\u8fc7\u7a0b\u66f4\u9ad8\u6548\u5730\u751f\u6210\u4ee3\u7801\u3002 \u901a\u5e38\u5e94\u7528\u7684\u7279\u5b9a\u4e8e\u786c\u4ef6\u7684\u4f18\u5316\u5305\u62ec\u786c\u4ef6\u6307\u4ee4\u6620\u5c04\u3001\u5185\u5b58\u5206\u914d\u548c\u83b7\u53d6\u3001\u5185\u5b58\u5ef6\u8fdf\u9690\u85cf\u3001\u5e76\u884c\u5316\u4ee5\u53ca\u9762\u5411\u5faa\u73af\u7684\u4f18\u5316\u3002 \u4e3a\u4e86\u786e\u5b9a\u5927\u578b\u4f18\u5316\u7a7a\u95f4\u4e2d\u7684\u6700\u4f73\u53c2\u6570\u8bbe\u7f6e\uff0c\u73b0\u6709\u7684 DLC \u5e7f\u6cdb\u91c7\u7528\u4e86\u4e24\u79cd\u65b9\u6cd5\uff0c\u4f8b\u5982\u81ea\u52a8\u8c03\u5ea6\uff08\u4f8b\u5982\uff0c\u591a\u9762\u4f53\u6a21\u578b\uff09\u548c\u81ea\u52a8\u8c03\u6574\uff08\u4f8b\u5982\uff0cAutoTVM\uff09\u3002 \u4f18\u5316\u7684\u4f4e\u7ea7 IR \u4f7f\u7528 JIT \u6216 AOT \u7f16\u8bd1\uff0c\u4e3a\u4e0d\u540c\u7684\u786c\u4ef6\u76ee\u6807\u751f\u6210\u4ee3\u7801\u3002 backend \u8be6\u7ec6\u8ba8\u8bba\u57284.4 \u8282\u3002</p> </li> </ol>"},{"location":"mlc/dlc-survey.html#4-key-components-of-dl-compilers","title":"4. KEY COMPONENTS OF DL COMPILERS","text":""},{"location":"mlc/dlc-survey.html#41-high-level-ir","title":"4.1. High-level IR","text":"<p>\u4f20\u7edfcompiler\u4e2d\u91c7\u7528\u7684 IR \u53ef\u80fd\u4f1a\u9650\u5236 DL \u6a21\u578b\u4e2d\u4f7f\u7528\u7684\u590d\u6742\u8ba1\u7b97\u7684\u8868\u8fbe\uff0c\u56e0\u6b64\u73b0\u6709\u7684 DLC \u4f1a\u8bbe\u8ba1\u7279\u6b8a\u7684\u9ad8\u7ea7 IR\uff08\u79f0\u4e3a\u56fe IR\uff09\u6765\u5b9e\u73b0\u9ad8\u6548\u7684\u4ee3\u7801\u4f18\u5316\u3002 \u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3 DLC \u4e2d\u4f7f\u7528\u7684\u56fe IR\uff0c\u6211\u4eec\u63cf\u8ff0\u56fe IR \u7684\u8868\u793a\u548c\u5b9e\u73b0\u5982\u4e0b\u3002</p>"},{"location":"mlc/dlc-survey.html#411-ir","title":"4.1.1. \u56feIR\u7684\u8868\u793a","text":"<p>graph IR \u7684\u8868\u793a\u65b9\u5f0f\u4f1a\u5f71\u54cd IR \u5bf9\u4e8e\u8ba1\u7b97\u7684\u8868\u73b0\u80fd\u529b\uff0c\u4ee5\u53ca DLC \u5206\u6790 graph IR \u7684\u65b9\u5f0f\u3002</p> <ul> <li> <p>DAG-based IR</p> <p>\u57fa\u4e8e DAG \u7684 IR \u662fcompiler \u6784\u5efa\u8ba1\u7b97\u56fe\u7684\u6700\u4f20\u7edf\u65b9\u6cd5\u4e4b\u4e00\uff0c\u8282\u70b9\u548c\u8fb9\u7ec4\u7ec7\u4e3a\u6709\u5411\u65e0\u73af\u56fe (DAG)\u3002 \u5728 DL compiler\u4e2d\uff0cDAG \u7684\u8282\u70b9\u4ee3\u8868\u7b97\u5b50\u539f\u8bed \uff08\u5377\u79ef\u3001\u6c60\u5316\u7b49\uff09\uff0c\u8fb9\u4ee3\u8868\u5f20\u91cf\u3002 \u5e76\u4e14\u8be5\u56fe\u662f\u975e\u5faa\u73af\u7684\uff0c\u8fd9\u4e0e\u901a\u7528 compiler \u7684\u6570\u636e\u4f9d\u8d56\u56fe(DDG) \u4e0d\u540c\u3002</p> <p>\u65e0\u73af\u610f\u5473\u7740\u56fe\u4e2d\u6ca1\u6709\u4e00\u6761\u8def\u5f84\u4ece\u540c\u4e00\u8282\u70b9\u5f00\u59cb\u548c\u7ed3\u675f\uff0c\u5e76\u4e14\u6cbf\u9014\u53ea\u8bbf\u95ee\u6bcf\u4e2a\u8282\u70b9\u4e00\u6b21\u3002</p> <p>\u9996\u5148\uff0c\u5b83\u786e\u4fdd\u7531\u56fe\u8868\u793a\u7684\u8ba1\u7b97\u53ef\u4ee5\u6309\u7167\u660e\u786e\u5b9a\u4e49\u7684\u987a\u5e8f\u6267\u884c\uff0c\u5e76\u4e14\u5728\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u4e4b\u524d\u6240\u6709\u8f93\u5165\u90fd\u53ef\u7528\u3002 \u8fd9\u4f7f\u5f97\u5bf9\u56fe\u6267\u884c\u62d3\u6251\u6392\u5e8f\u6210\u4e3a\u53ef\u80fd\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u7684\u64cd\u4f5c\u3002</p> <p>\u5176\u6b21\uff0c\u5b83\u5141\u8bb8\u6e05\u695a\u5730\u8868\u793a\u64cd\u4f5c\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u3002 DAG \u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u7ec4\u4ee3\u8868\u5176\u8f93\u5165\u7684\u4f20\u5165\u8fb9\u548c\u4e00\u7ec4\u4ee3\u8868\u5176\u8f93\u51fa\u7684\u4f20\u51fa\u8fb9\u3002 \u975e\u5faa\u73af\u5c5e\u6027\u53ef\u786e\u4fdd\u4e0d\u5b58\u5728\u5faa\u73af\u6216\u5faa\u73af\u4f9d\u8d56\u6027\uff0c\u4ece\u800c\u6613\u4e8e\u7406\u89e3\u6570\u636e\u5982\u4f55\u6d41\u7ecf\u56fe\u5f62\u3002</p> <p>\u6700\u540e\uff0c\u975e\u5faa\u73af\u5c5e\u6027\u7b80\u5316\u4e86\u56fe\u7684\u5206\u6790\u548c\u4f18\u5316\u3002 \u4f8b\u5982\uff0c\u5f53\u56fe\u662f\u975e\u5faa\u73af\u7684\u65f6\uff0c\u8bb8\u591a\u56fe\u7b97\u6cd5\u548c\u4f18\u5316\u66f4\u5bb9\u6613\u5b9e\u73b0\u548c\u5e94\u7528\uff0c\u56e0\u4e3a\u65e0\u9700\u62c5\u5fc3\u4f1a\u4f7f\u8ba1\u7b97\u590d\u6742\u5316\u7684\u5faa\u73af\u6216\u5faa\u73af\u3002</p> <p>\u603b\u7684\u6765\u8bf4\uff0cDAG \u7684\u975e\u5faa\u73af\u5c5e\u6027\u662f\u5b83\u4eec\u5728\u8868\u793a\u8ba1\u7b97\u56fe\u65b9\u9762\u6709\u7528\u7684\u4e00\u4e2a\u91cd\u8981\u65b9\u9762\uff0c\u5e76\u4f7f\u5b83\u4eec\u975e\u5e38\u9002\u5408\u8bb8\u591a\u673a\u5668\u5b66\u4e60\u548c\u5176\u4ed6\u8ba1\u7b97\u5e94\u7528\u7a0b\u5e8f\u3002 </p> <p>\u501f\u52a9 DAG \u8ba1\u7b97\u56fe\uff0cDLC \u53ef\u4ee5\u5206\u6790\u5404\u79cd\u7b97\u5b50\u4e4b\u95f4\u7684\u5173\u7cfb\u548c\u4f9d\u8d56\u5173\u7cfb\uff0c\u5e76\u4f7f\u7528\u5b83\u4eec\u6765\u6307\u5bfc\u4f18\u5316\u3002 DDG\u4e0a\u5df2\u7ecf\u6709\u5f88\u591a\u4f18\u5316\uff0c\u6bd4\u5982\u516c\u5171\u5b50\u8868\u8fbe\u5f0f\u6d88\u9664\uff08CSE\uff09\u548c\u6b7b\u4ee3\u7801\u6d88\u9664\uff08DCE\uff09\u3002 \u901a\u8fc7\u5c06 DL \u7684\u9886\u57df\u77e5\u8bc6\u4e0e\u8fd9\u4e9b\u7b97\u6cd5\u76f8\u7ed3\u5408\uff0c\u53ef\u4ee5\u5c06\u8fdb\u4e00\u6b65\u7684\u4f18\u5316\u5e94\u7528\u4e8e DAG \u8ba1\u7b97\u56fe\u3002 \u57fa\u4e8eDAG\u7684IR\u975e\u5e38\u7b80\u5355\uff0c\u56e0\u6b64\u4fbf\u4e8e\u7f16\u7a0b\u548c\u7f16\u8bd1\uff0c\u4f46\u5b58\u5728\u8ba1\u7b97\u8303\u56f4\u5b9a\u4e49\u7f3a\u5931\u5bfc\u81f4\u7684\u8bed\u4e49\u6b67\u4e49\u7b49\u4e0d\u8db3\u3002</p> </li> <li> <p>Let-binding-based IR</p> <p>Let-binding \u662f\u4e00\u79cd\u89e3\u51b3\u8bed\u4e49\u6b67\u4e49\u7684\u65b9\u6cd5\uff0c\u5b83\u901a\u8fc7\u4e3a\u8bb8\u591a\u9ad8\u7ea7\u7f16\u7a0b\u8bed\u8a00\uff08\u5982 Javascript\u3001F#\u3001Rust\u7b49\uff09\u4f7f\u7528\u7684\u8303\u56f4\u53d7\u9650\u7684\u67d0\u4e9b\u51fd\u6570\u63d0\u4f9b let \u8868\u8fbe\u5f0f\u6765\u89e3\u51b3\u8bed\u4e49\u6b67\u4e49\u3002 \u5f53\u4f7f\u7528 let \u5173\u952e\u5b57\u5b9a\u4e49\u8868\u8fbe\u5f0f\u65f6\uff0c\u4f1a\u751f\u6210\u4e00\u4e2a let \u8282\u70b9\uff0c\u7136\u540e\u5b83\u6307\u5411\u8868\u8fbe\u5f0f\u4e2d\u7684\u8fd0\u7b97\u7b26\u548c\u53d8\u91cf\uff0c\u800c\u4e0d\u662f\u50cf DAG \u90a3\u6837\u53ea\u662f\u5efa\u7acb\u53d8\u91cf\u4e4b\u95f4\u7684\u8ba1\u7b97\u5173\u7cfb\u3002 </p> <p>\u5728\u57fa\u4e8e DAG \u7684\u7f16\u8bd1\u5668\u4e2d\uff0c\u5f53\u9700\u8981\u83b7\u53d6\u67d0\u4e2a\u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u503c\u65f6\uff0c\u5b83\u9996\u5148\u8bbf\u95ee\u76f8\u5e94\u7684\u8282\u70b9\u5e76\u641c\u7d22\u76f8\u5173\u8282\u70b9\uff0c\u4e5f\u79f0\u4e3a\u9012\u5f52\u4e0b\u964d\u6280\u672f\u3002 \u76f8\u53cd\uff0c\u57fa\u4e8e let-binding \u7684\u7f16\u8bd1\u5668\u8ba1\u7b97\u51fa let \u8868\u8fbe\u5f0f\u4e2d\u53d8\u91cf\u7684\u6240\u6709\u7ed3\u679c\u5e76\u6784\u5efa\u53d8\u91cf map \u3002 \u5f53\u9700\u8981\u4e00\u4e2a\u7279\u5b9a\u7684\u7ed3\u679c\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u67e5\u627e\u8fd9\u4e2a map \u6765\u51b3\u5b9a\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u3002 \u5728 DLC \u4e2d\uff0cTVM \u7684 Relay IR \u91c7\u7528\u4e86\u57fa\u4e8e DAG \u7684 IR \u548c let-binding-based IR \u4ee5\u83b7\u5f97\u4e24\u8005\u7684\u597d\u5904\u3002</p> </li> <li> <p>Representing Tensor Computation</p> <p>\u4e0d\u540c\u7684\u56fe IR \u6709\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u8868\u793a\u5bf9\u5f20\u91cf\u7684\u8ba1\u7b97\u3002 \u5404\u79cd DL \u6846\u67b6\u7684\u7b97\u5b50\u6839\u636e\u6b64\u7c7b\u7279\u5b9a\u8868\u793a\u88ab\u8f6c\u6362\u4e3a\u56fe IR\u3002 \u5e76\u4e14\u5b9a\u5236\u7684\u7b97\u5b50\u4e5f\u9700\u8981\u4ee5\u8fd9\u79cd\u8868\u793a\u5f62\u5f0f\u8fdb\u884c\u7f16\u7a0b\u3002 </p> <p>\u5f20\u91cf\u8ba1\u7b97\u7684\u8868\u793a\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u4e09\u7c7b:</p> <ol> <li> <p>Function-based:  \u57fa\u4e8e\u51fd\u6570\u7684\u8868\u793a\u53ea\u662f\u63d0\u4f9b\u4e86\u5c01\u88c5\u7684\u7b97\u5b50\uff0cGlow\u3001nGraph \u548c XLA \u90fd\u91c7\u7528\u4e86\u8fd9\u79cd\u65b9\u6cd5\u3002 \u4ee5High Level Optimizer\uff08HLO\uff0cXLA\u7684IR\uff09\u4e3a\u4f8b\uff0c\u5b83\u7531 symbolic programming \u4e2d\u7684\u4e00\u7ec4\u51fd\u6570\u7ec4\u6210\uff0c\u800c\u4e14\u5927\u90e8\u5206\u90fd\u6ca1\u6709\u526f\u4f5c\u7528\u3002 \u6307\u4ee4\u5206\u4e3a\u4e09\u4e2a\u5c42\u6b21\uff0c\u5305\u62ec <code>HloModule</code> \uff08\u6574\u4e2a\u7a0b\u5e8f\uff09\u3001 <code>HloComputaion</code> \uff08\u4e00\u4e2a\u51fd\u6570\uff09\u548c <code>HloInstruction</code> \uff08\u64cd\u4f5c\uff09\u3002 XLA\u4f7f\u7528 HLO IR \u540c\u65f6\u8868\u793a graph IR \u548c operation IR\uff0c\u4f7f\u5f97HLO\u7684\u64cd\u4f5c\u4ece\u6570\u636e\u6d41\u5c42\u9762\u5ef6\u4f38\u5230\u7b97\u5b50\u5c42\u9762\u3002</p> </li> <li> <p>Lambda expression:  lambda \u8868\u8fbe\u5f0f\u662f\u4e00\u79cd\u7d22\u5f15\u516c\u5f0f\u8868\u8fbe\u5f0f(an index formula expression)\uff0c\u901a\u8fc7\u53d8\u91cf\u7ed1\u5b9a\u548c\u66ff\u6362\u6765\u63cf\u8ff0\u8ba1\u7b97\u3002 \u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\uff0c\u7a0b\u5e8f\u5458\u53ef\u4ee5\u5728\u4e0d\u5b9e\u73b0\u65b0\u51fd\u6570\u7684\u60c5\u51b5\u4e0b\u5feb\u901f\u5b9a\u4e49\u8ba1\u7b97\u3002 TVM \u8868\u793a\u4f7f\u7528\u57fa\u4e8e lambda \u8868\u8fbe\u5f0f\u7684 tensor expression \u8fdb\u884c\u5f20\u91cf\u8ba1\u7b97\u3002 \u5728 TVM \u4e2d\uff0c\u5f20\u91cf\u8868\u8fbe\u5f0f\u4e2d\u7684\u8ba1\u7b97\u7b97\u5b50\u7531\u8f93\u51fa\u5f20\u91cf\u7684\u5f62\u72b6\u548c\u8ba1\u7b97\u89c4\u5219\u7684 lambda \u8868\u8fbe\u5f0f\u5b9a\u4e49\u3002</p> </li> <li> <p>Einstein notation:  \u7231\u56e0\u65af\u5766\u7b26\u53f7\uff0c\u4e5f\u79f0\u4e3a\u6c42\u548c\u7ea6\u5b9a\uff0c\u662f\u4e00\u79cd\u8868\u8fbe\u6c42\u548c\u7684\u7b26\u53f7\u3002 \u5b83\u7684\u7f16\u7a0b\u7b80\u5355\u6027\u4f18\u4e8e lambda \u8868\u8fbe\u5f0f\u3002 \u4ee5TC\u4e3a\u4f8b\uff0c\u4e34\u65f6\u53d8\u91cf\u7684\u7d22\u5f15\u4e0d\u9700\u8981\u5b9a\u4e49\u3002 IR \u53ef\u4ee5\u6839\u636e\u7231\u56e0\u65af\u5766\u7b26\u53f7\uff0c\u901a\u8fc7\u672a\u5b9a\u4e49\u53d8\u91cf\u7684\u51fa\u73b0\u6765\u8ba1\u7b97\u51fa\u5b9e\u9645\u8868\u8fbe\u5f0f\u3002 \u5728\u7231\u56e0\u65af\u5766\u7b26\u53f7\u4e2d\uff0c\u8fd0\u7b97\u7b26\u9700\u8981\u7ed3\u5408\u548c\u4ea4\u6362\u3002 \u8fd9\u79cd\u9650\u5236\u4fdd\u8bc1\u5f52\u7ea6\u8fd0\u7b97\u7b26\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u6267\u884c\uff0c\u4ece\u800c\u6709\u53ef\u80fd\u8fdb\u4e00\u6b65\u5e76\u884c\u5316\u3002</p> </li> </ol> </li> </ul>"},{"location":"mlc/dlc-survey.html#412-ir","title":"4.1.2. \u56feIR\u7684\u5b9e\u73b0","text":"<p>\u56fe IR \u5728 DLC \u4e2d\u7684\u5b9e\u73b0\u5b8c\u6210\u4e86\u6570\u636e\u548c\u64cd\u4f5c\u7684\u7ba1\u7406\u3002</p> <ul> <li> <p>Data representation: </p> <p>DLC \u4e2d\u7684\u6570\u636e\uff08\u4f8b\u5982\uff0c\u8f93\u5165\u3001\u6743\u91cd\u548c\u4e2d\u95f4\u6570\u636e\uff09\u901a\u5e38\u4ee5\u5f20\u91cf\u7684\u5f62\u5f0f\u7ec4\u7ec7\uff0c\u4e5f\u79f0\u4e3a\u591a\u7ef4\u6570\u7ec4\u3002 DLC \u53ef\u4ee5\u76f4\u63a5\u7528\u5185\u5b58\u6307\u9488\u8868\u793a\u5f20\u91cf\u6570\u636e\uff0c\u6216\u8005\u4ee5\u66f4\u7075\u6d3b\u7684\u65b9\u5f0f\u7528\u5360\u4f4d\u7b26\u8868\u793a\u3002 \u5360\u4f4d\u7b26\u5305\u542b\u5f20\u91cf\u6bcf\u4e2a\u7ef4\u5ea6\u7684\u5927\u5c0f\u3002 \u6216\u8005\uff0c\u5f20\u91cf\u7684\u7ef4\u5ea6\u5927\u5c0f\u53ef\u4ee5\u6807\u8bb0\u4e3a\u672a\u77e5\u3002 \u4e3a\u4e86\u4f18\u5316\uff0cDLC \u9700\u8981\u6570\u636e\u5e03\u5c40\u4fe1\u606f\u3002 \u6b64\u5916\uff0c\u5e94\u6839\u636e\u5360\u4f4d\u7b26\u63a8\u65ad\u8fed\u4ee3\u5668\u7684\u8fb9\u754c\u3002</p> <ol> <li> <p>Placeholder:     \u5360\u4f4d\u7b26\u5e7f\u6cdb\u7528\u4e8e\u7b26\u53f7\u7f16\u7a0b\uff08\u4f8b\u5982\uff0cLisp\u3001Tensorflow\uff09\u3002 \u5360\u4f4d\u7b26\u53ea\u662f\u4e00\u4e2a\u5177\u6709\u660e\u786e\u5f62\u72b6\u4fe1\u606f\uff08\u4f8b\u5982\uff0c\u6bcf\u4e2a\u7ef4\u5ea6\u7684\u5927\u5c0f\uff09\u7684\u53d8\u91cf\uff0c\u5b83\u5c06\u5728\u8ba1\u7b97\u7684\u540e\u671f\u9636\u6bb5\u7528\u503c\u586b\u5145\u3002 \u5b83\u5141\u8bb8\u7a0b\u5e8f\u5458\u5728\u4e0d\u8003\u8651\u786e\u5207\u6570\u636e\u5143\u7d20\u7684\u60c5\u51b5\u4e0b\u63cf\u8ff0\u64cd\u4f5c\u548c\u6784\u5efa\u8ba1\u7b97\u56fe\uff0c\u8fd9\u6709\u52a9\u4e8e\u5c06\u8ba1\u7b97\u5b9a\u4e49\u4e0e DLC \u4e2d\u7684\u786e\u5207\u6267\u884c\u5206\u5f00\u3002 \u6b64\u5916\uff0c\u5728\u4e0d\u6539\u53d8\u8ba1\u7b97\u5b9a\u4e49\u7684\u60c5\u51b5\u4e0b\uff0c\u7a0b\u5e8f\u5458\u53ef\u4ee5\u4f7f\u7528\u5360\u4f4d\u7b26\u65b9\u4fbf\u5730\u6539\u53d8\u8f93\u5165/\u8f93\u51fa\u7684\u5f62\u72b6\u548c\u5176\u4ed6\u76f8\u5e94\u7684\u4e2d\u95f4\u6570\u636e\u3002</p> </li> <li> <p>Unknown (Dynamic) shape representation:  \u58f0\u660e\u5360\u4f4d\u7b26\u65f6\u901a\u5e38\u652f\u6301\u672a\u77e5\u7ef4\u5ea6\u5927\u5c0f\u3002 \u4f8b\u5982\uff0cTVM \u4f7f\u7528 Any \u6765\u8868\u793a\u672a\u77e5\u7ef4\u5ea6\uff08\u4f8b\u5982\uff0c<code>Tensor \u27e8(Any, 3), fp32\u27e9</code>\uff09\uff1b XLA \u4f7f\u7528 None \u6765\u5b9e\u73b0\u76f8\u540c\u7684\u76ee\u7684\uff08\u4f8b\u5982\uff0c<code>tf.placeholder (\"float\", [None, 3])</code>\uff09\uff1b nGraph \u4f7f\u7528\u5176 <code>PartialShape</code> \u7c7b\u3002 \u672a\u77e5\u5f62\u72b6\u8868\u793a\u662f\u652f\u6301\u52a8\u6001\u6a21\u578b\u6240\u5fc5\u9700\u7684\u3002 \u7136\u800c\uff0c\u4e3a\u4e86\u5b8c\u5168\u652f\u6301\u52a8\u6001\u6a21\u578b\uff0c\u5e94\u8be5\u653e\u5bbd\u7ed1\u5b9a\u63a8\u7406\u548c\u7ef4\u5ea6\u68c0\u67e5\u3002 \u6b64\u5916\uff0c\u5e94\u8be5\u5b9e\u65bd\u989d\u5916\u7684\u673a\u5236\u6765\u4fdd\u8bc1\u5185\u5b58\u6709\u6548\u6027\u3002</p> </li> <li> <p>Data layout:  \u6570\u636e\u5e03\u5c40\u63cf\u8ff0\u4e86\u5f20\u91cf\u5728\u5185\u5b58\u4e2d\u7684\u7ec4\u7ec7\u65b9\u5f0f\uff0c\u901a\u5e38\u662f\u903b\u8f91\u7d22\u5f15\u5230\u5185\u5b58\u7d22\u5f15\u7684\u6620\u5c04\u3002 \u6570\u636e\u5e03\u5c40\u901a\u5e38\u5305\u62ec\u7ef4\u5ea6\u5e8f\u5217\uff08\u4f8b\u5982\uff0cNCHW \u548c NHWC\uff09\u3001\u5e73\u94fa\u3001\u586b\u5145\u3001\u6b65\u5e45\u7b49\u3002TVM \u548c Glow \u5c06\u6570\u636e\u5e03\u5c40\u8868\u793a\u4e3a\u7b97\u5b50\u53c2\u6570\uff0c\u5e76\u4e14\u9700\u8981\u6b64\u7c7b\u4fe1\u606f\u8fdb\u884c\u8ba1\u7b97\u548c\u4f18\u5316\u3002 \u7136\u800c\uff0c\u5c06\u6570\u636e\u5e03\u5c40\u4fe1\u606f\u4e0e \u7b97\u5b50 \u800c\u4e0d\u662f\u5f20\u91cf\u76f8\u7ed3\u5408\u53ef\u4ee5\u5b9e\u73b0\u67d0\u4e9b \u7b97\u5b50 \u7684\u76f4\u89c2\u5b9e\u73b0\u5e76\u51cf\u5c11\u7f16\u8bd1\u5f00\u9500\u3002 XLA \u5c06\u6570\u636e\u5e03\u5c40\u8868\u793a\u4e3a\u4e0e\u5176\u540e\u7aef\u786c\u4ef6\u76f8\u5173\u7684\u7ea6\u675f\u3002 Relay \u548c MLIR \u5c06\u628a\u6570\u636e\u5e03\u5c40\u4fe1\u606f\u6dfb\u52a0\u5230\u4ed6\u4eec\u7684\u5f20\u91cf\u7c7b\u578b\u7cfb\u7edf\u4e2d\u3002</p> </li> <li> <p>Bound inference:  \u5728 DLC \u4e2d\u7f16\u8bd1 DL \u6a21\u578b\u65f6\uff0c\u5e94\u7528\u8fb9\u754c\u63a8\u7406\u6765\u786e\u5b9a\u8fed\u4ee3\u5668\u7684\u8fb9\u754c\u3002 \u5c3d\u7ba1 DLC \u4e2d\u7684\u5f20\u91cf\u8868\u793a\u53ef\u4ee5\u65b9\u4fbf\u5730\u63cf\u8ff0\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u4f46\u5b83\u66b4\u9732\u4e86\u63a8\u65ad\u8fed\u4ee3\u5668\u8fb9\u754c\u7684\u7279\u6b8a\u6311\u6218\u3002 \u6839\u636e\u8ba1\u7b97\u56fe\u548c\u5df2\u77e5\u7684\u5360\u4f4d\u7b26\uff0c\u8fb9\u754c\u63a8\u7406\u901a\u5e38\u4ee5\u9012\u5f52\u6216\u8fed\u4ee3\u7684\u65b9\u5f0f\u6267\u884c\u3002 \u4f8b\u5982\uff0c\u5728 TVM \u4e2d\uff0c\u8fed\u4ee3\u5668\u5f62\u6210\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u8d85\u56fe\uff0c\u5176\u4e2d\u56fe\u7684\u6bcf\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6bcf\u4e2a\u8d85\u8fb9\u8868\u793a\u4e24\u4e2a\u6216\u591a\u4e2a\u8fed\u4ee3\u5668\u4e4b\u95f4\u7684\u5173\u7cfb\uff08\u4f8b\u5982\uff0csplit, fuse or rebase\uff09\u3002 \u4e00\u65e6\u6839\u636e\u5360\u4f4d\u7b26\u7684\u5f62\u72b6\u786e\u5b9a\u4e86\u6839\u8fed\u4ee3\u5668\u7684\u8fb9\u754c\uff0c\u5c31\u53ef\u4ee5\u6839\u636e\u5173\u7cfb\u9012\u5f52\u5730\u63a8\u65ad\u51fa\u5176\u4ed6\u8fed\u4ee3\u5668\u3002</p> </li> </ol> </li> <li> <p>\u7b97\u5b50\u652f\u6301</p> <p>DLC \u652f\u6301\u7684\u7b97\u5b50\u8d1f\u8d23\u8868\u793a DL \u5de5\u4f5c\u8d1f\u8f7d\uff0c\u5b83\u4eec\u662f\u8ba1\u7b97\u56fe\u7684\u8282\u70b9\u3002 \u7b97\u5b50\u901a\u5e38\u5305\u62ec\u4ee3\u6570\u7b97\u5b50\uff08\u4f8b\u5982 +\u3001\u00d7\u3001exp \u548c topK\uff09\u3001\u795e\u7ecf\u7f51\u7edc\u7b97\u5b50\uff08\u4f8b\u5982 \u5377\u79ef \u548c \u6c60\u5316 \uff09\u3001\u5f20\u91cf\u7b97\u5b50\uff08\u4f8b\u5982 reshape\u3001resize \u548c copy\uff09\u3001\u5e7f\u64ad\u548c\u7ea6\u7b80\u7b97\u5b50\uff08\u4f8b\u5982 min \u548c argmin\uff09\uff0c\u4ee5\u53ca\u63a7\u5236\u6d41\u7b97\u5b50\uff08\u4f8b\u5982\uff0c\u6761\u4ef6\u548c\u5faa\u73af\uff09\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u9009\u62e9\u4e09\u4e2a\u5728\u4e0d\u540c DLC \u4e2d\u7ecf\u5e38\u4f7f\u7528\u7684\u4ee3\u8868\u6027\u7b97\u5b50\u8fdb\u884c\u8bf4\u660e\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u8ba8\u8bba\u4e86\u5b9a\u5236\u7b97\u5b50\u7684\u60c5\u51b5</p> <ol> <li> <p>Broadcast:  \u5e7f\u64ad \u7b97\u5b50\u53ef\u4ee5\u590d\u5236\u6570\u636e\u5e76\u751f\u6210\u5177\u6709\u517c\u5bb9\u5f62\u72b6\u7684\u65b0\u6570\u636e\u3002 \u5982\u679c\u6ca1\u6709\u5e7f\u64ad\u7b97\u5b50\uff0c\u8f93\u5165\u5f20\u91cf\u7684\u5f62\u72b6\u4f1a\u53d7\u5230\u66f4\u591a\u9650\u5236\u3002 \u4f8b\u5982\uff0c\u5bf9\u4e8e\u52a0\u6cd5\u7b97\u5b50\uff0c\u8f93\u5165\u5f20\u91cf\u5e94\u5177\u6709\u76f8\u540c\u7684\u5f62\u72b6\u3002 XLA \u548c Relay \u7b49\u4e00\u4e9b\u7f16\u8bd1\u5668\u901a\u8fc7\u63d0\u4f9b\u5e7f\u64ad\u7b97\u5b50\u653e\u5bbd\u4e86\u6b64\u7c7b\u9650\u5236\u3002 \u4f8b\u5982\uff0cXLA \u5141\u8bb8\u5728\u77e9\u9635\u548c\u5411\u91cf\u4e0a\u8fdb\u884c\u9010\u5143\u7d20\u52a0\u6cd5\uff0c\u65b9\u6cd5\u662f\u590d\u5236\u5b83\u76f4\u5230\u5176\u5f62\u72b6\u4e0e\u77e9\u9635\u5339\u914d\u3002</p> </li> <li> <p>Control flow:  \u8868\u793a\u590d\u6742\u548c\u7075\u6d3b\u7684\u6a21\u578b\u65f6\u9700\u8981\u63a7\u5236\u6d41\u3002 RNN \u548c\u5f3a\u5316\u5b66\u4e60 (RL) \u7b49\u6a21\u578b\u4f9d\u8d56\u4e8e\u5faa\u73af\u5173\u7cfb\u548c\u6570\u636e\u4f9d\u8d56\u6761\u4ef6\u6267\u884c\uff0c\u8fd9\u9700\u8981\u63a7\u5236\u6d41\u3002 \u5982\u679c\u4e0d\u652f\u6301 DLC \u7684 \u56feIR \u4e2d\u7684\u63a7\u5236\u6d41\uff0c\u8fd9\u4e9b\u6a21\u578b\u5fc5\u987b\u4f9d\u8d56\u5bbf\u4e3b\u8bed\u8a00\u7684\u63a7\u5236\u6d41\u652f\u6301\uff08\u4f8b\u5982\uff0cPython \u4e2d\u7684 if \u548c while\uff09\u6216\u9759\u6001\u5c55\u5f00\uff0c\u8fd9\u4f1a\u964d\u4f4e\u8ba1\u7b97\u6548\u7387\u3002 Relay \u6ce8\u610f\u5230\u4efb\u610f\u63a7\u5236\u6d41\u53ef\u4ee5\u901a\u8fc7\u9012\u5f52\u548c\u6a21\u5f0f\u6765\u5b9e\u73b0\uff0c\u51fd\u6570\u5f0f\u7f16\u7a0b\u5df2\u7ecf\u8bc1\u660e\u4e86\u8fd9\u4e00\u70b9\u3002 \u56e0\u6b64\uff0c\u5b83\u63d0\u4f9b\u4e86 if \u8fd0\u7b97\u7b26\u548c\u9012\u5f52\u51fd\u6570\u6765\u5b9e\u73b0\u63a7\u5236\u6d41\u3002 \u76f8\u53cd\uff0cXLA represents control flow by special HLO operators such as while and conditional.</p> </li> <li> <p>Derivative:  operatorOp \u7684\u5bfc\u6570\u7b97\u5b50\u4ee5 Op \u7684\u8f93\u51fa\u68af\u5ea6\u548c\u8f93\u5165\u6570\u636e\u4e3a\u8f93\u5165\uff0c\u8ba1\u7b97 Op \u7684\u68af\u5ea6\u3002 \u5c3d\u7ba1\u4e00\u4e9b DLC \uff08\u4f8b\u5982 TVM \u548c TC\uff09\u652f\u6301\u81ea\u52a8\u5fae\u5206\uff0c\u4f46\u5728\u5e94\u7528\u94fe\u5f0f\u6cd5\u5219\u65f6\uff0c\u5b83\u4eec\u9700\u8981\u9ad8\u7ea7 IR \u4e2d\u6240\u6709\u8fd0\u7b97\u7b26\u7684\u5bfc\u6570\u3002 TVM \u6b63\u81f4\u529b\u4e8e\u63d0\u4f9b\u4ee3\u6570\u8fd0\u7b97\u7b26\u548c\u795e\u7ecf\u7f51\u7edc\u7b97\u5b50\u7684\u5bfc\u6570\u8fd0\u7b97\u7b26\u3002 \u7a0b\u5e8f\u5458\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u5bfc\u6570\u8fd0\u7b97\u7b26\u6765\u6784\u5efa\u81ea\u5b9a\u4e49\u8fd0\u7b97\u7b26\u7684\u5bfc\u6570\u3002 \u76f8\u53cd\uff0cPlaidML \u53ef\u4ee5\u81ea\u52a8\u751f\u6210\u884d\u751f\u7b97\u5b50\uff0c\u751a\u81f3\u662f\u81ea\u5b9a\u4e49\u7b97\u5b50\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u65e0\u6cd5\u652f\u6301\u5bfc\u6570\u8fd0\u7b97\u7b26\u7684 DLC \u65e0\u6cd5\u63d0\u4f9b\u6a21\u578b\u8bad\u7ec3\u7684\u80fd\u529b\u3002</p> </li> <li> <p>Customized operators:  \u5b83\u5141\u8bb8\u7a0b\u5e8f\u5458\u4e3a\u7279\u5b9a\u76ee\u7684\u5b9a\u4e49\u4ed6\u4eec\u7684\u7b97\u5b50\u3002 \u652f\u6301\u81ea\u5b9a\u4e49\u7b97\u5b50\u53ef\u63d0\u9ad8 DLC \u7684\u53ef\u6269\u5c55\u6027\u3002 \u4f8b\u5982\uff0c\u5728 <code>Glow</code> \u4e2d\u5b9a\u4e49\u65b0\u7684\u7b97\u5b50\u65f6\uff0c\u7a0b\u5e8f\u5458\u9700\u8981\u5b9e\u73b0\u903b\u8f91\u548c\u8282\u70b9\u5c01\u88c5\u3002 \u6b64\u5916\uff0c\u5982\u679c\u9700\u8981\uff0c\u8fd8\u9700\u8981\u989d\u5916\u7684\u5de5\u4f5c\uff0c\u4f8b\u5982 lowering \u6b65\u9aa4\u3001 operation IR generation \u548c \u6307\u4ee4\u751f\u6210\u3002 \u7136\u800c\uff0c\u9664\u4e86\u63cf\u8ff0\u8ba1\u7b97\u5b9e\u73b0\u4e4b\u5916\uff0cTVM \u548c TC \u9700\u8981\u8f83\u5c11\u7684\u7f16\u7a0b\u5de5\u4f5c\u3002 \u5177\u4f53\u6765\u8bf4\uff0cTVM \u7684\u7528\u6237\u53ea\u9700\u63cf\u8ff0\u8ba1\u7b97\u548c\u8c03\u5ea6\uff0c\u5e76\u58f0\u660e\u8f93\u5165/\u8f93\u51fa\u5f20\u91cf\u7684\u5f62\u72b6\u3002 \u800c\u4e14\uff0c\u81ea\u5b9a\u4e49\u7684\u7b97\u5b50\u901a\u8fc7\u94a9\u5b50\u7684\u65b9\u5f0f\u96c6\u6210\u4e86Python\u51fd\u6570\uff0c\u8fdb\u4e00\u6b65\u51cf\u8f7b\u4e86\u7a0b\u5e8f\u5458\u7684\u8d1f\u62c5\u3002</p> </li> </ol> </li> </ul>"},{"location":"mlc/dlc-survey.html#413-discussion","title":"4.1.3. Discussion","text":"<p>\u51e0\u4e4e\u6240\u6709 DLC \u90fd\u6709\u5176\u72ec\u7279\u7684 High-level IR\u3002 \u4f46\u5b83\u4eec\u6709\u76f8\u4f3c\u7684\u8bbe\u8ba1\u7406\u5ff5\uff0c\u4f8b\u5982\u4f7f\u7528 DAG \u548c let-binding \u6765\u6784\u5efa\u8ba1\u7b97\u56fe\u3002 \u6b64\u5916\uff0c\u5b83\u4eec\u901a\u5e38\u4e3a\u7a0b\u5e8f\u5458\u63d0\u4f9b\u65b9\u4fbf\u7684\u65b9\u5f0f\u6765\u8868\u793a\u5f20\u91cf\u8ba1\u7b97\u3002 High-level IR \u4e2d\u8bbe\u8ba1\u7684\u6570\u636e\u548c\u7b97\u5b50\u5177\u6709\u8db3\u591f\u7684\u7075\u6d3b\u6027\u548c\u53ef\u6269\u5c55\u6027\uff0c\u8db3\u4ee5\u652f\u6301\u5404\u79cd DL \u6a21\u578b\u3002 \u66f4\u91cd\u8981\u7684\u662f\uff0cHigh-level IR \u662f\u72ec\u7acb\u4e8e\u786c\u4ef6\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u5e94\u7528\u4e8e\u4e0d\u540c\u7684\u786c\u4ef6\u540e\u7aef\u3002</p>"},{"location":"mlc/dlc-survey.html#42-low-level-ir","title":"4.2. Low-level IR","text":""},{"location":"mlc/dlc-survey.html#421-low-level","title":"4.2.1 Low-Level \u7684\u5b9e\u73b0","text":"<p>Low-level IR \u4ee5\u6bd4 high-level IR \u66f4\u7ec6\u7c92\u5ea6\u7684\u8868\u793a\u5f62\u5f0f\u63cf\u8ff0\u4e86 DL \u6a21\u578b\u7684\u8ba1\u7b97\uff0c\u5b83\u901a\u8fc7\u63d0\u4f9b\u63a5\u53e3\u6765\u8c03\u6574\u8ba1\u7b97\u548c\u5185\u5b58\u8bbf\u95ee\u6765\u5b9e\u73b0\u76ee\u6807\u76f8\u5173\u7684\u4f18\u5316\u3002 \u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4f4e\u7ea7 IR \u7684\u5e38\u89c1\u5b9e\u73b0\u5206\u4e3a\u4e09\u7c7b\uff1a\u57fa\u4e8e Halide-based IR\u3001 \u57fa\u4e8e\u591a\u9762\u4f53\u7684 IR \u548c\u5176\u4ed6\u72ec\u7279\u7684 IR\u3002</p> <ul> <li> <p>Halide-based IR: </p> <p>Halide \u9996\u6b21\u88ab\u63d0\u51fa\u7528\u4e8e\u5e76\u884c\u5316\u56fe\u50cf\u5904\u7406\uff0c\u5e76\u88ab\u8bc1\u660e\u5728 DLC\uff08\u4f8b\u5982 TVM\uff09\u4e2d\u5177\u6709\u53ef\u6269\u5c55\u6027\u548c\u9ad8\u6548\u6027\u3002 Halide \u7684\u57fa\u672c\u7406\u5ff5\u662f\u8ba1\u7b97\u548c\u8c03\u5ea6\u7684\u5206\u79bb\u3002 \u91c7\u7528 Halide \u7684\u7f16\u8bd1\u5668\u4e0d\u662f\u76f4\u63a5\u7ed9\u51fa\u7279\u5b9a\u7684\u65b9\u6848\uff0c\u800c\u662f\u5c1d\u8bd5\u5404\u79cd\u53ef\u80fd\u7684\u65b9\u6848\u5e76\u9009\u62e9\u6700\u4f73\u65b9\u6848\u3002 Halide \u4e2d\u5185\u5b58\u5f15\u7528\u548c\u5faa\u73af\u5d4c\u5957\u7684\u8fb9\u754care restricted to bounded boxes aligned to the axes\u3002 \u56e0\u6b64\uff0cHalide \u65e0\u6cd5\u7528\u590d\u6742\u7684\u6a21\u5f0f\uff08\u4f8b\u5982\uff0c\u975e\u77e9\u5f62\uff09\u8868\u8fbe\u8ba1\u7b97\u3002 \u5e78\u8fd0\u7684\u662f\uff0cDL \u4e2d\u7684\u8ba1\u7b97\u975e\u5e38\u6709\u89c4\u5f8b\uff0c\u53ef\u4ee5\u7528 Halide \u5b8c\u7f8e\u8868\u8fbe\u3002 \u6b64\u5916\uff0cHalide \u53ef\u4ee5\u8f7b\u677e\u5730\u53c2\u6570\u5316\u8fd9\u4e9b\u8fb9\u754c\u5e76\u5c06\u5b83\u4eec\u66b4\u9732\u7ed9\u8c03\u6574\u673a\u5236\u3002 Halide \u7684\u539f\u59cb IR \u5728\u5e94\u7528\u4e8e DLC \u7684\u540e\u7aef\u65f6\u9700\u8981\u8fdb\u884c\u4fee\u6539\u3002 \u4f8b\u5982\uff0cHalide \u7684\u8f93\u5165\u5f62\u72b6\u662f\u65e0\u9650\u7684\uff0c\u800c DLC \u9700\u8981\u77e5\u9053\u6570\u636e\u7684\u786e\u5207\u5f62\u72b6\u624d\u80fd\u6309\u987a\u5e8f\u5c06\u7b97\u5b50\u6620\u5c04\u5230\u786c\u4ef6\u6307\u4ee4\u3002 \u4e00\u4e9b\u7f16\u8bd1\u5668\uff0c\u4f8b\u5982 TC\uff0c\u9700\u8981\u56fa\u5b9a\u5927\u5c0f\u7684\u6570\u636e\uff0c\u4ee5\u786e\u4fdd\u5f20\u91cf\u6570\u636e\u5177\u6709\u66f4\u597d\u7684\u65f6\u95f4\u5c40\u90e8\u6027\u3002</p> <p>TVM\u901a\u8fc7\u4ee5\u4e0b\u52aa\u529b\u5c06 Halide IR \u6539\u8fdb\u4e3a\u4e00\u4e2a\u72ec\u7acb\u7684\u7b26\u53f7IR\u3002 \u5b83\u6d88\u9664\u4e86\u5bf9 LLVM \u7684\u4f9d\u8d56\uff0c\u91cd\u6784\u4e86\u9879\u76ee\u6a21\u5757\u7684\u7ed3\u6784\u548c Halide \u7684 IR \u8bbe\u8ba1\uff0c\u8ffd\u6c42\u66f4\u597d\u7684\u7ec4\u7ec7\u4ee5\u53ca\u56fe\u5f62 IR \u548c\u524d\u7aef\u8bed\u8a00\uff08\u5982 Python\uff09\u7684\u53ef\u8bbf\u95ee\u6027\u3002 \u590d\u7528\u6027\u4e5f\u5f97\u5230\u4e86\u63d0\u5347\uff0c\u5b9e\u73b0\u4e86\u8fd0\u884c\u65f6\u8c03\u5ea6\u673a\u5236\uff0c\u65b9\u4fbf\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7b97\u5b50\u3002 TVM \u5c06\u53d8\u91cf\u5b9a\u4e49\u4ece\u5b57\u7b26\u4e32\u5339\u914d\u7b80\u5316\u4e3a\u6307\u9488\u5339\u914d\uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u53d8\u91cf\u90fd\u6709\u4e00\u4e2a\u5355\u4e00\u7684\u5b9a\u4e49\u4f4d\u7f6e\uff08static single-assignment\uff0cSSA\uff09\u3002</p> </li> <li> <p>Polyhedral-based IR: </p> <p>\u591a\u9762\u4f53\u6a21\u578b\u662f DLC \u91c7\u7528\u7684\u4e00\u9879\u91cd\u8981\u6280\u672f\u3002 \u5b83\u4f7f\u7528\u7ebf\u6027\u89c4\u5212\u3001\u4eff\u5c04\u53d8\u6362\u548c\u5176\u4ed6\u6570\u5b66\u65b9\u6cd5\u6765\u4f18\u5316\u5177\u6709\u8fb9\u754c\u548c\u5206\u652f\u9759\u6001\u63a7\u5236\u6d41\u7684\u57fa\u4e8e\u5faa\u73af\u7684\u4ee3\u7801\u3002 \u4e0eHalide\u4e0d\u540c\u7684\u662f\uff0c\u5185\u5b58\u5f15\u7528\u548c\u5faa\u73af\u5d4c\u5957\u7684\u8fb9\u754c\u53ef\u4ee5\u662f\u591a\u9762\u4f53\u6a21\u578b\u4e2d\u4efb\u610f\u5f62\u72b6\u7684\u591a\u9762\u4f53\u3002 \u8fd9\u79cd\u7075\u6d3b\u6027\u4f7f\u5f97\u591a\u9762\u4f53\u6a21\u578b\u5e7f\u6cdb\u7528\u4e8e\u901a\u7528\u7f16\u8bd1\u5668\u3002 \u7136\u800c\uff0c\u8fd9\u79cd\u7075\u6d3b\u6027\u4e5f\u963b\u788d\u4e86\u4e0e\u8c03\u6574\u673a\u5236\u7684\u96c6\u6210\u3002 \u5c3d\u7ba1\u5982\u6b64\uff0c\u7531\u4e8e\u80fd\u591f\u5904\u7406\u6df1\u5ea6\u5d4c\u5957\u5faa\u73af\uff0c\u8bb8\u591a DLC\uff0c\u4f8b\u5982 TC \u548c PlaidML\uff08\u4f5c\u4e3a nGraph \u7684\u540e\u7aef\uff09\uff0c\u90fd\u91c7\u7528\u591a\u9762\u4f53\u6a21\u578b\u4f5c\u4e3a\u5176\u4f4e\u7ea7 IR\u3002 \u57fa\u4e8e\u591a\u9762\u4f53\u7684 IR \u53ef\u4ee5\u8f7b\u677e\u5e94\u7528\u5404\u79cd\u591a\u9762\u4f53\u53d8\u6362\uff08\u4f8b\u5982\uff0cfusion, tiling, sinking, and mapping\uff09\uff0c\u5305\u62ec\u4e0e\u8bbe\u5907\u76f8\u5173\u548c\u4e0e\u8bbe\u5907\u65e0\u5173\u7684\u4f18\u5316\u3002 \u57fa\u4e8e\u591a\u9762\u4f53\u7684\u7f16\u8bd1\u5668\u501f\u7528\u4e86\u8bb8\u591a\u5de5\u5177\u94fe\uff0c\u4f8b\u5982 isl\u3001Omega\u3001PIP\u3001Polylib \u548c PPL\u3002</p> <p>TC\u5728 Low-level IR \u65b9\u9762\u6709\u5176\u72ec\u7279\u7684\u8bbe\u8ba1\uff0c\u5b83\u7ed3\u5408\u4e86 Halide \u548c Polyhedral \u6a21\u578b\u3002 \u5b83\u7528 Halide-based IR \u6765\u8868\u793a\u8ba1\u7b97\uff0c\u7528 Polyhedral-based IR \u6765\u8868\u793a\u5faa\u73af\u7ed3\u6784\u3002 TC\u901a\u8fc7\u62bd\u8c61\u5b9e\u4f8b\u5448\u73b0\u8be6\u7ec6\u8868\u8fbe\u5f0f\uff0c\u5e76\u5f15\u5165\u5177\u4f53\u7684\u8282\u70b9\u7c7b\u578b\u3002 \u7b80\u800c\u8a00\u4e4b\uff0cTC\u4f7f\u7528 <code>domain</code> \u8282\u70b9\u6765\u6307\u5b9a\u7d22\u5f15\u53d8\u91cf\u7684\u8303\u56f4\uff0c\u5e76\u4f7f\u7528 <code>context</code> \u8282\u70b9\u6765\u63cf\u8ff0\u4e0e\u786c\u4ef6\u76f8\u5173\u7684\u65b0\u8fed\u4ee3\u53d8\u91cf\u3002 \u5b83\u4f7f\u7528 <code>band</code> \u8282\u70b9\u6765\u786e\u5b9a\u8fed\u4ee3\u987a\u5e8f\u3002 \u8fc7\u6ee4\u5668\u8282\u70b9\u8868\u793a\u4e0e\u8bed\u53e5\u5b9e\u4f8b\u7ec4\u5408\u7684\u8fed\u4ee3\u5668\u3002 <code>Set</code> \u548c <code>sequence</code> \u662f\u6307\u5b9a\u8fc7\u6ee4\u5668\u6267\u884c\u7c7b\u578b\uff08\u5e76\u884c\u548c\u4e32\u884c\u6267\u884c\uff09\u7684\u5173\u952e\u5b57\u3002 \u6b64\u5916\uff0cTC\u4f7f extension nodes \u6765\u63cf\u8ff0\u4ee3\u7801\u751f\u6210\u7684\u5176\u4ed6\u5fc5\u8981\u6307\u4ee4\uff0c\u4f8b\u5982\u5185\u5b58\u79fb\u52a8\u3002</p> <p>PlaidML \u4f7f\u7528 Polyhedral-based IR\uff08\u79f0\u4e3a Stripe\uff09\u6765\u8868\u793a\u5f20\u91cf\u8fd0\u7b97\u3002 \u5b83\u901a\u8fc7\u5c06\u5e76\u884c\u591a\u9762\u4f53\u5757\u7684\u5d4c\u5957\u6269\u5c55\u5230\u591a\u4e2a\u7ea7\u522b\u6765\u521b\u5efa\u53ef\u5e76\u884c\u4ee3\u7801\u7684\u5c42\u6b21\u7ed3\u6784\u3002 \u6b64\u5916\uff0c\u5b83\u5141\u8bb8\u5c06\u5d4c\u5957\u7684\u591a\u9762\u4f53\u5206\u914d\u7ed9\u5d4c\u5957\u7684\u5185\u5b58\u5355\u5143\uff0c\u63d0\u4f9b\u4e86\u4e00\u79cd\u5c06\u8ba1\u7b97\u4e0e\u5185\u5b58\u5c42\u6b21\u7ed3\u6784\u76f8\u5339\u914d\u7684\u65b9\u6cd5\u3002 \u5728 Stripe \u4e2d\uff0c\u786c\u4ef6\u914d\u7f6e\u72ec\u7acb\u4e8e\u5185\u6838\u4ee3\u7801\u3002 Stripe \u4e2d\u7684\u6807\u7b7e\uff08\u5728\u5176\u4ed6\u7f16\u8bd1\u5668\u4e2d\u79f0\u4e3a\u4f20\u9012\uff09\u4e0d\u4f1a\u66f4\u6539\u5185\u6838\u7ed3\u6784\uff0c\u4f46\u4f1a\u4e3a\u4f18\u5316\u4f20\u9012\u63d0\u4f9b\u6709\u5173\u786c\u4ef6\u76ee\u6807\u7684\u9644\u52a0\u4fe1\u606f\u3002 Stripe \u5c06 DL \u7b97\u5b50\u62c6\u5206\u4e3a\u9002\u5408\u672c\u5730\u786c\u4ef6\u8d44\u6e90\u7684\u5757\u3002</p> </li> <li> <p>Other unique IR: </p> <p>\u6709 DLC \u5728\u4e0d\u4f7f\u7528 Halide \u548c\u591a\u9762\u4f53\u6a21\u578b\u7684\u60c5\u51b5\u4e0b\u5b9e\u73b0\u5b9a\u5236\u7684\u4f4e\u7ea7 IR\u3002 \u5728\u5b9a\u5236\u7684\u4f4e\u7ea7 IR \u4e0a\uff0c\u4ed6\u4eec\u5e94\u7528\u7279\u5b9a\u4e8e\u786c\u4ef6\u7684\u4f18\u5316\u5e76\u964d\u4f4e\u5230 LLVM IR\u3002</p> <p>Glow \u4e2d\u7684 low-level IR \u662f\u4e00\u79cd instruction-based expression \uff0c\u5b83\u5bf9\u5730\u5740\u5f15\u7528\u7684\u5f20\u91cf\u8fdb\u884c\u64cd\u4f5c\u3002 Glow \u4f4e\u7ea7 IR \u4e2d\u6709\u4e24\u79cd\u57fa\u4e8e\u6307\u4ee4\u7684\u51fd\u6570\uff1a <code>declare</code> \u548c <code>program</code> \u3002 \u7b2c\u4e00\u4e2a\u58f0\u660e\u5728\u7a0b\u5e8f\u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u4e2d\u5b58\u5728\u7684\u5e38\u91cf\u5185\u5b58\u533a\u57df\u7684\u6570\u91cf\uff08\u4f8b\u5982\uff0c\u8f93\u5165\u3001\u6743\u91cd\u3001\u504f\u5dee\uff09\u3002 \u7b2c\u4e8c\u4e2a\u662f\u672c\u5730\u5206\u914d\u533a\u57df\u7684\u5217\u8868\uff0c\u5305\u62ec\u51fd\u6570\uff08\u4f8b\u5982 conv \u548c pool\uff09\u548c\u4e34\u65f6\u53d8\u91cf\u3002 \u6307\u4ee4\u53ef\u4ee5\u5728\u5168\u5c40\u5185\u5b58\u533a\u57df\u6216\u672c\u5730\u5206\u914d\u7684\u533a\u57df\u4e0a\u8fd0\u884c\u3002 \u6b64\u5916\uff0c\u6bcf\u4e2a\u64cd\u4f5c\u6570\u90fd\u7528\u9650\u5b9a\u7b26\u4e4b\u4e00\u8fdb\u884c\u6ce8\u91ca\uff1a <code>@in</code> \u8868\u793a\u64cd\u4f5c\u6570\u4ece\u7f13\u51b2\u533a\u8bfb\u53d6\uff1b <code>@out</code> \u8868\u793a\u64cd\u4f5c\u6570\u5199\u5165\u7f13\u51b2\u533a\uff1b <code>@inout</code> \u8868\u793a\u64cd\u4f5c\u6570\u8bfb\u5199\u7f13\u51b2\u533a\u3002\u8fd9\u4e9b\u6307\u4ee4\u548c\u64cd\u4f5c\u6570\u9650\u5b9a\u7b26\u5e2e\u52a9 Glow \u786e\u5b9a\u4f55\u65f6\u53ef\u4ee5\u6267\u884c\u67d0\u4e9b\u5185\u5b58\u4f18\u5316\u3002</p> <p>MLIR \u6df1\u53d7 LLVM \u7684\u5f71\u54cd\uff0c\u5b83\u662f\u4e00\u4e2a\u6bd4 LLVM \u66f4\u7eaf\u7cb9\u7684\u7f16\u8bd1\u5668\u57fa\u7840\u8bbe\u65bd\u3002 MLIR \u91cd\u7528\u4e86 LLVM \u4e2d\u7684\u8bb8\u591a\u601d\u60f3\u548c\u63a5\u53e3\uff0c\u5e76\u4e14\u4ecb\u4e8e\u6a21\u578b\u8868\u793a\u548c\u4ee3\u7801\u751f\u6210\u4e4b\u95f4\u3002 MLIR \u5177\u6709\u7075\u6d3b\u7684\u7c7b\u578b\u7cfb\u7edf\u5e76\u5141\u8bb8\u591a\u4e2a\u62bd\u8c61\u7ea7\u522b\uff0c\u5b83\u5f15\u5165\u65b9\u8a00(dialects) \u6765\u8868\u793a\u8fd9\u4e9b\u591a\u4e2a\u62bd\u8c61\u7ea7\u522b\u3002 \u6bcf\u4e2a\u65b9\u8a00\u90fd\u5305\u542b\u4e00\u7ec4\u5b9a\u4e49\u597d\u7684\u4e0d\u53ef\u53d8\u64cd\u4f5c\u3002 MLIR \u76ee\u524d\u7684\u65b9\u8a00\u5305\u62ec TensorFlow IR\u3001XLA HLO IR\u3001experimental polyhedral IR\u3001LLVM IR \u548c TensorFlow Lite\u3002 \u8fd8\u652f\u6301\u65b9\u8a00\u4e4b\u95f4\u7684\u7075\u6d3b\u8f6c\u6362\u3002 \u6b64\u5916\uff0cMLIR \u53ef\u4ee5\u521b\u5efa\u65b0\u7684\u65b9\u8a00\u4ee5\u8fde\u63a5\u5230\u65b0\u7684\u4f4e\u7ea7\u7f16\u8bd1\u5668\uff0c\u8fd9\u4e3a\u786c\u4ef6\u5f00\u53d1\u4eba\u5458\u548c\u7f16\u8bd1\u5668\u7814\u7a76\u4eba\u5458\u94fa\u5e73\u4e86\u9053\u8def\u3002</p> <p>XLA \u7684 HLO IR \u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f both high-level IR and low-level IR\uff0c\u56e0\u4e3a HLO \u7684\u7c92\u5ea6\u8db3\u591f\u7ec6\uff0c\u53ef\u4ee5\u8868\u793a\u786c\u4ef6\u7279\u5b9a\u7684\u4fe1\u606f\u3002 \u6b64\u5916\uff0cHLO \u652f\u6301\u7279\u5b9a\u4e8e\u786c\u4ef6\u7684\u4f18\u5316\uff0c\u53ef\u7528\u4e8e emit LLVM IR\u3002</p> </li> </ul>"},{"location":"mlc/dlc-survey.html#422-low-level-ir","title":"4.2.2. Low-Level IR \u7684\u4ee3\u7801\u751f\u6210","text":"<p>\u5927\u591a\u6570 DLC \u91c7\u7528\u7684 low-level IR \u6700\u7ec8\u53ef\u4ee5\u964d\u4e3aLLVM IR\uff0c\u5e76\u53d7\u76ca\u4e8eLLVM\u6210\u719f\u7684\u4f18\u5316\u5668\u548c\u4ee3\u7801\u751f\u6210\u5668\u3002 \u6b64\u5916\uff0cLLVM \u53ef\u4ee5\u4ece\u5934\u5f00\u59cb\u4e3a\u4e13\u7528\u52a0\u901f\u5668\u663e\u5f0f\u8bbe\u8ba1\u81ea\u5b9a\u4e49\u6307\u4ee4\u96c6\u3002 \u7136\u800c\uff0c\u4f20\u7edf\u7684\u7f16\u8bd1\u5668\u5728\u76f4\u63a5\u4f20\u9012\u7ed9 LLVM IR \u65f6\u53ef\u80fd\u4f1a\u751f\u6210\u7cdf\u7cd5\u7684\u4ee3\u7801\u3002 \u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0cDLC \u91c7\u7528\u4e86\u4e24\u79cd\u65b9\u6cd5\u6765\u5b9e\u73b0\u786c\u4ef6\u76f8\u5173\u4f18\u5316\uff1a</p> <ol> <li>\u5728 LLVM \u7684\u4e0a\u5c42 IR \u4e2d\u6267\u884c\u76ee\u6807\u7279\u5b9a\u7684\u5faa\u73af\u8f6c\u6362\uff08\u4f8b\u5982\uff0cHalide-based IR and polyhedral-based IR\uff09</li> <li>\u63d0\u4f9b\u6709\u5173\u4f18\u5316\u8fc7\u7a0b\u7684\u786c\u4ef6\u76ee\u6807\u7684\u9644\u52a0\u4fe1\u606f</li> </ol> <p>\u5927\u591a\u6570 DLC \u4e24\u79cd\u65b9\u6cd5\u90fd\u4f1a\u4f7f\u7528\uff0c\u4f46\u4fa7\u91cd\u70b9\u4e0d\u540c\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u66f4\u559c\u6b22\u524d\u7aef\u7528\u6237\u7684 DLC\uff08\u4f8b\u5982 TC\u3001TVM\u3001XLA \u548c nGraph\uff09\u53ef\u80fd\u4f1a\u5173\u6ce8 1\uff09\uff0c\u800c\u66f4\u503e\u5411\u4e8e\u540e\u7aef\u5f00\u53d1\u4eba\u5458\u7684 DLC\uff08\u4f8b\u5982 Glow\u3001PlaidML \u548c MLIR\uff09\u53ef\u80fd\u4f1a \u4e13\u6ce8\u4e8e 2)\u3002</p> <p>DLC \u4e2d\u7684\u7f16\u8bd1\u65b9\u6848\u4e3b\u8981\u53ef\u5206\u4e3a\u4e24\u7c7b\uff1a\u5373\u65f6\uff08JIT\uff09\u548c\u63d0\u524d\uff08AOT\uff09\u3002 \u5bf9\u4e8e JIT \u7f16\u8bd1\u5668\uff0c\u5b83\u53ef\u4ee5\u52a8\u6001\u751f\u6210\u53ef\u6267\u884c\u4ee3\u7801\uff0c\u5e76\u4e14\u53ef\u4ee5\u5229\u7528\u66f4\u597d\u7684\u8fd0\u884c\u65f6\u4fe1\u606f\u6765\u4f18\u5316\u4ee3\u7801\u3002 AOT \u7f16\u8bd1\u5668\u9996\u5148\u751f\u6210\u6240\u6709\u53ef\u6267\u884c\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u7136\u540e\u6267\u884c\u5b83\u4eec\u3002 \u56e0\u6b64\uff0c\u5b83\u4eec\u5728\u9759\u6001\u5206\u6790\u65b9\u9762\u6bd4 JIT \u7f16\u8bd1\u5177\u6709\u66f4\u5927\u7684\u8303\u56f4\u3002 \u6b64\u5916\uff0cAOT \u65b9\u6cd5\u53ef\u4ee5\u5e94\u7528\u4e8e\u5d4c\u5165\u5f0f\u5e73\u53f0\u7684\u4ea4\u53c9\u7f16\u8bd1\u5668\uff08\u4f8b\u5982\uff0cC-GOOD\uff09\uff0c\u5e76\u652f\u6301\u5728\u8fdc\u7a0b\u673a\u5668\uff08TVM RPC\uff09\u548c\u5b9a\u5236\u52a0\u901f\u5668\u4e0a\u6267\u884c\u3002</p>"},{"location":"mlc/dlc-survey.html#423-discussion","title":"4.2.3. Discussion","text":"<p>\u5728 DLC \u4e2d\uff0clow-level IR \u662f DL \u6a21\u578b\u7684\u7ec6\u7c92\u5ea6\u8868\u793a\uff0c\u5b83\u53cd\u6620\u4e86 DL \u6a21\u578b\u5728\u4e0d\u540c\u786c\u4ef6\u4e0a\u7684\u8be6\u7ec6\u5b9e\u73b0\u3002 low-level IR \u5305\u62ec Halide-based IRs \u3001polyhedral-based IRs \u548c other unique IRs\u3002 \u5c3d\u7ba1\u5b83\u4eec\u5728\u8bbe\u8ba1\u4e0a\u6709\u6240\u4e0d\u540c\uff0c\u4f46\u5b83\u4eec\u5229\u7528\u6210\u719f\u7684\u7f16\u8bd1\u5668\u5de5\u5177\u94fe\u548c\u57fa\u7840\u8bbe\u65bd\u6765\u63d0\u4f9b\u9488\u5bf9\u7279\u5b9a\u786c\u4ef6\u7684\u4f18\u5316\u548c\u4ee3\u7801\u751f\u6210\u7684\u5b9a\u5236\u63a5\u53e3\u3002 low-level IR \u7684\u8bbe\u8ba1\u4e5f\u4f1a\u5f71\u54cd\u65b0\u7684 DL \u52a0\u901f\u5668\uff08\u4f8b\u5982 TVM HalideIR \u548c Inferentia\uff0c\u4ee5\u53ca XLA HLO \u548c TPU\uff09\u7684\u8bbe\u8ba1\u3002</p>"},{"location":"mlc/dlc-survey.html#43-frontend-optimizations","title":"4.3. Frontend Optimizations","text":"<p>\u6784\u5efa\u8ba1\u7b97\u56fe\u540e\uff0c\u524d\u7aef\u5e94\u7528\u56fe\u7ea7\u4f18\u5316\u3002 \u8bb8\u591a\u4f18\u5316\u66f4\u5bb9\u6613\u5728\u56fe\u7ea7\u522b\u8bc6\u522b\u548c\u6267\u884c\uff0c\u56e0\u4e3a\u56fe\u63d0\u4f9b\u4e86\u8ba1\u7b97\u7684\u5168\u5c40\u89c6\u56fe\u3002 \u8fd9\u4e9b\u4f18\u5316\u4ec5\u9002\u7528\u4e8e\u8ba1\u7b97\u56fe\uff0c\u800c\u4e0d\u9002\u7528\u4e8e\u540e\u7aef\u7684\u5b9e\u73b0\u3002 \u56e0\u6b64\u5b83\u4eec\u662f\u72ec\u7acb\u4e8e\u786c\u4ef6\u7684\uff0c\u53ef\u4ee5\u5e94\u7528\u4e8e\u5404\u79cd\u540e\u7aef\u76ee\u6807\u3002</p> <p>\u524d\u7aef\u4f18\u5316\u901a\u5e38\u7531 passes \u5b9a\u4e49\uff0c\u53ef\u4ee5\u901a\u8fc7\u904d\u5386\u8ba1\u7b97\u56fe\u7684\u8282\u70b9\u5e76\u6267\u884c\u56fe\u53d8\u6362\u6765\u5e94\u7528\u3002 \u524d\u7aef\u63d0\u4f9bmethods to</p> <ol> <li>\u4ece\u8ba1\u7b97\u56fe\u4e2d\u6355\u83b7\u7279\u5b9a\u7279\u5f81 </li> <li>\u91cd\u5199\u56fe\u4ee5\u8fdb\u884c\u4f18\u5316 </li> </ol> <p>\u9664\u4e86\u9884\u5b9a\u4e49\u7684pass\uff0c\u5f00\u53d1\u4eba\u5458\u8fd8\u53ef\u4ee5\u5728\u524d\u7aef\u5b9a\u4e49\u81ea\u5b9a\u4e49pass\u3002 \u4e00\u65e6 DL \u6a21\u578b\u88ab\u5bfc\u5165\u5e76\u8f6c\u6362\u4e3a\u8ba1\u7b97\u56fe\uff0c\u5927\u591a\u6570 DLC \u5c31\u53ef\u4ee5\u786e\u5b9a\u6bcf\u4e2a\u64cd\u4f5c\u7684\u8f93\u5165\u5f20\u91cf\u548c\u8f93\u51fa\u5f20\u91cf\u7684\u5f62\u72b6\u3002 \u6b64\u529f\u80fd\u5141\u8bb8 DLC \u6839\u636e\u5f62\u72b6\u4fe1\u606f\u6267\u884c\u4f18\u5316\u3002 \u56fe3 \u663e\u793a\u4e86\u4f7f\u7528 Tensorflow XLA \u8fdb\u884c\u8ba1\u7b97\u56fe\u4f18\u5316\u7684\u793a\u4f8b\u3002 \u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u524d\u7aef\u4f18\u5316\u5206\u4e3a\u4e09\u7c7b\uff1a 1\uff09\u8282\u70b9\u7ea7\u4f18\u5316\uff0c2\uff09\u5757\u7ea7\uff08\u7aa5\u5b54\uff0c\u5c40\u90e8\uff09\u4f18\u5316\uff0c\u4ee5\u53ca 3\uff09\u6570\u636e\u6d41\u7ea7\uff08\u5168\u5c40\uff09\u4f18\u5316</p>"},{"location":"mlc/dlc-survey.html#431-node-level-optimizations","title":"4.3.1. Node-level optimizations","text":"<p>\u8ba1\u7b97\u56fe\u7684 node \u8db3\u591f\u7c97\u7cd9\uff0c\u53ef\u4ee5\u5728\u5355\u4e2a\u8282\u70b9\u5185\u8fdb\u884c\u4f18\u5316\u3002 Node-level optimizations \u5305\u62ec\u6d88\u9664\u4e0d\u5fc5\u8981\u7684\u548c\u7528\u5176\u4ed6\u6210\u672c\u8f83\u4f4e\u7684\u8282\u70b9\u66ff\u6362\u8282\u70b9\u3002 </p> <p>\u5728\u901a\u7528\u7f16\u8bd1\u5668\u4e2d\uff0cNop Elimination \u53bb\u9664\u4e86\u5360\u7528\u7a7a\u95f4\u5c0f\u4f46\u4e0d\u6307\u5b9a\u4efb\u4f55\u64cd\u4f5c\u7684\u7a7a\u64cd\u4f5c\u6307\u4ee4\u3002 \u5728 DLC \u4e2d\uff0cNop Elimination \u8d1f\u8d23\u6d88\u9664\u7f3a\u5c11\u8db3\u591f\u8f93\u5165\u7684\u64cd\u4f5c\u3002 \u4f8b\u5982\u53ef\u4ee5\u5254\u9664\u53ea\u6709\u4e00\u4e2a\u8f93\u5165\u5f20\u91cf\u7684 <code>sum</code> node \uff0c\u53ef\u4ee5\u5254\u9664\u586b\u5145\u5bbd\u5ea6\u4e3a\u96f6\u7684 <code>padding</code> node \u3002 </p> <p>\u96f6\u7ef4\u5f20\u91cf\u6d88\u9664\u8d1f\u8d23\u5220\u9664\u8f93\u5165\u4e3a\u96f6\u7ef4\u5f20\u91cf\u7684\u5197\u4f59\u64cd\u4f5c\u3002 \u5047\u8bbeA\u662f\u96f6\u7ef4\u5f20\u91cf\uff0cB\u662f\u5e38\u6570\u5f20\u91cf\uff0c\u90a3\u4e48A\u548cB\u7684\u6c42\u548c\u8fd0\u7b97\u8282\u70b9\u53ef\u4ee5\u7528\u5df2\u7ecf\u5b58\u5728\u7684\u5e38\u6570\u8282\u70b9B\u4ee3\u66ff\u800c\u4e0d\u5f71\u54cd\u6b63\u786e\u6027\u3002 \u5047\u8bbeC\u4e3a3\u7ef4\u5f20\u91cf\uff0c\u4f46\u4e00\u7ef4\u7684\u5f62\u72b6\u4e3a\u96f6\uff0c\u5982{0,2,3}\uff0c\u56e0\u6b64\uff0cC\u5b9e\u9645\u4e0a\u6ca1\u6709\u4efb\u4f55\u5143\u7d20\uff0c<code>argmin</code>/<code>argmax</code>\u64cd\u4f5c\u8282\u70b9\u53ef\u4ee5\u53bb\u6389\u3002</p>"},{"location":"mlc/dlc-survey.html#432-block-level-optimizations","title":"4.3.2. Block-level optimizations","text":"<ul> <li> <p>Algebraic simplification</p> <p>\u4ee3\u6570\u7b80\u5316\u4f18\u5316\u5305\u62ec 1) \u4ee3\u6570\u8bc6\u522b(algebraic identification)\uff0c2) strength reduction\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u66f4\u4fbf\u5b9c\u7684\u7b97\u5b50\u66ff\u6362\u66f4\u6602\u8d35\u7684\u7b97\u5b50\uff1b 3) \u5e38\u91cf\u6298\u53e0\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u4eec\u7684\u503c\u66ff\u6362\u5e38\u91cf\u8868\u8fbe\u5f0f\u3002 \u8fd9\u79cd\u4f18\u5316\u8003\u8651\u4e00\u7cfb\u5217\u8282\u70b9\uff0c\u7136\u540e\u5229\u7528\u4e0d\u540c\u7c7b\u578b\u8282\u70b9\u7684\u4ea4\u6362\u6027\u3001\u7ed3\u5408\u6027\u548c\u5206\u5e03\u6027\u6765\u7b80\u5316\u8ba1\u7b97\u3002</p> <p>\u9664\u4e86\u5178\u578b\u7684\u7b97\u5b50\uff08+\u3001\u00d7 \u7b49\uff09\u4e4b\u5916\uff0c\u4ee3\u6570\u7b80\u5316\u8fd8\u53ef\u4ee5\u5e94\u7528\u4e8e DL \u7279\u5b9a\u7b97\u5b50\uff08\u4f8b\u5982\uff0creshape, transpose, and pooling\uff09\u3002 \u7b97\u5b50\u53ef\u4ee5\u91cd\u65b0\u6392\u5e8f\uff0c\u6709\u65f6\u751a\u81f3\u53ef\u4ee5\u5220\u9664\uff0c\u8fd9\u51cf\u5c11\u4e86\u5197\u4f59\u5e76\u63d0\u9ad8\u4e86\u6548\u7387\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u8bf4\u660e\u53ef\u4ee5\u5e94\u7528\u4ee3\u6570\u7b80\u5316\u7684\u5e38\u89c1\u60c5\u51b5\uff1a</p> <ol> <li>\u8ba1\u7b97\u987a\u5e8f\u7684\u4f18\u5316\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f18\u5316\u6839\u636e\u7279\u5b9a\u7279\u5f81\u67e5\u627e\u548c\u5220\u9664 <code>reshape</code>/<code>transpose</code> \u64cd\u4f5c\u3002 \u4ee5\u77e9\u9635\u4e58\u6cd5 (GEMM) \u4e3a\u4f8b\uff0c\u6709\u4e24\u4e2a\u77e9\u9635 \\(A\\) \u548c \\(B\\)\uff0c\u5c06\u4e24\u4e2a\u77e9\u9635\u8f6c\u7f6e\uff0c\u5206\u522b\u4ea7\u751f \\(A^T\\) \u548c \\(B^T\\)\uff0c\u7136\u540e\u5c06 \\(A^T\\) \u548c \\(B^T\\) \u76f8\u4e58\u3002 \u7136\u800c\uff0c\u4e00\u79cd\u66f4\u6709\u6548\u7684 GEMM \u5b9e\u73b0\u65b9\u5f0f\u662f\u4ea4\u6362 \\(A\\) \u548c \\(B\\) \u7684\u987a\u5e8f\uff0c\u76f8\u4e58\uff0c\u7136\u540e\u8f6c\u7f6e GEMM \u7684\u8f93\u51fa\uff0c\u8fd9\u5c06\u4e24\u4e2a\u8f6c\u7f6e\u51cf\u5c11\u4e3a\u4e00\u4e2a\uff1b </li> <li>\u8282\u70b9\u7ec4\u5408\u4f18\u5316\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f18\u5316\u5c06\u591a\u4e2a\u8fde\u7eed\u8f6c\u7f6e\u8282\u70b9\u5408\u5e76\u4e3a\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u5728\u8f6c\u7f6e\u8282\u70b9\u5b9e\u9645\u4e0d\u79fb\u52a8\u6570\u636e\u65f6\u5c06\u8f6c\u7f6e\u8282\u70b9\u4f18\u5316\u4e3a <code>reshape</code> \u8282\u70b9\uff1b </li> <li>ReduceMean \u8282\u70b9\u7684\u4f18\u5316\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c reduce \u7b97\u5b50\u7684\u8f93\u5165\u662f 4D \u4e14\u6700\u540e\u4e24\u4e2a\u7ef4\u5ea6\u8981\u51cf\u5c11\uff0c\u5219\u4f18\u5316\u5c06 ReduceMean \u66ff\u6362\u4e3a AvgPool \u8282\u70b9\uff08\u4f8b\u5982\uff0c\u5728 Glow \u4e2d\uff09\u3002</li> </ol> </li> <li> <p>Operator fusion</p> <p>\u7b97\u5b50\u878d\u5408\u662f DLC \u4e0d\u53ef\u6216\u7f3a\u7684\u4f18\u5316\u3002 \u5b83\u53ef\u4ee5\u66f4\u597d\u5730\u5171\u4eab\u8ba1\u7b97\uff0c\u6d88\u9664\u4e2d\u95f4\u5206\u914d\uff0c\u901a\u8fc7\u7ec4\u5408\u5faa\u73af\u5d4c\u5957\u4fc3\u8fdb\u8fdb\u4e00\u6b65\u4f18\u5316\uff0c\u5e76\u51cf\u5c11\u542f\u52a8\u548c\u540c\u6b65\u5f00\u9500\u3002 </p> <p>\u5728 TVM \u4e2d\uff0c\u7b97\u5b50\u88ab\u5206\u4e3a\u56db\u7c7b\uff1ainjective(\u5355\u5c04), reduction(\u89c4\u7ea6), complex-out-fusible(\u590d\u6742\u53ef\u878d), and opaque(\u4e0d\u900f\u660e)\u3002 \u5b9a\u4e49\u4e86\u7b97\u5b50\u540e\uff0c\u5c31\u786e\u5b9a\u4e86\u5b83\u4eec\u5bf9\u5e94\u7684\u7c7b\u522b\u3002 \u9488\u5bf9\u4ee5\u4e0a\u7c7b\u522b\uff0cTVM\u8bbe\u8ba1\u4e86\u8de8\u8fd0\u8425\u5546\u7684\u878d\u5408\u89c4\u5219\u3002 </p> <p>\u5728 TC \u4e2d\uff0c\u57fa\u4e8e\u81ea\u52a8\u591a\u9762\u4f53\u53d8\u6362\u4ee5\u4e0d\u540c\u65b9\u5f0f\u6267\u884c\u878d\u5408\u3002 </p> <p>\u7136\u800c\uff0c\u5982\u4f55\u8bc6\u522b\u548c\u878d\u5408\u66f4\u590d\u6742\u7684\u56fe\u6a21\u5f0f\uff0c\u4f8b\u5982\u5177\u6709\u591a\u4e2a\u5e7f\u64ad\u548c\u51cf\u5c11\u8282\u70b9\u7684\u5757\uff0c\u4ecd\u7136\u662f\u4e00\u4e2a\u95ee\u9898\u3002 \u6700\u8fd1\u7684\u5de5\u4f5c[61,62]\u8bd5\u56fe\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5e76\u63d0\u51fa\u4e00\u4e2a\u6846\u67b6\u6765\u63a2\u7d22\u548c\u4f18\u5316\u6fc0\u8fdb\u7684\u878d\u5408\u8ba1\u5212\u3002 \u5b83\u4e0d\u4ec5\u652f\u6301 element-wise \u548c reduction \u8282\u70b9\uff0c\u8fd8\u652f\u6301\u5176\u4ed6\u5177\u6709\u590d\u6742\u4f9d\u8d56\u5173\u7cfb\u7684\u8ba1\u7b97/\u5185\u5b58\u5bc6\u96c6\u578b\u8282\u70b9\u3002</p> </li> <li> <p>Operator sinking</p> <p>\u8fd9\u79cd\u4f18\u5316\u5c06\u8f6c\u7f6e\u7b49\u64cd\u4f5c\u4e0b\u6c89\u5230 batch normalization\u3001ReLU\u3001sigmoid \u548cchannel shuffle \u7b49\u64cd\u4f5c\u4e4b\u4e0b\u3002 \u901a\u8fc7\u8fd9\u79cd\u4f18\u5316\uff0c\u8bb8\u591a\u76f8\u4f3c\u7684\u64cd\u4f5c\u5f7c\u6b64\u9760\u8fd1\uff0c\u4e3a\u4ee3\u6570\u7b80\u5316\u521b\u9020\u66f4\u591a\u673a\u4f1a\u3002</p> </li> </ul>"},{"location":"mlc/dlc-survey.html#433-dataflow-level-optimizations","title":"4.3.3. Dataflow-level optimizations","text":"<ul> <li> <p>Common sub-expression elimination (CSE)</p> <p>\u5982\u679c E \u7684\u503c\u662f\u5148\u524d\u8ba1\u7b97\u7684\uff0c\u5e76\u4e14 E \u7684\u503c\u81ea\u4e0a\u6b21\u8ba1\u7b97\u4ee5\u6765\u6ca1\u6709\u6539\u53d8\uff0c\u5219\u8868\u8fbe\u5f0f E \u662f\u4e00\u4e2a\u516c\u5171\u5b50\u8868\u8fbe\u5f0f\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cE\u7684\u503c\u88ab\u8ba1\u7b97\u4e00\u6b21\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528\u5df2\u7ecf\u8ba1\u7b97\u51fa\u7684E\u7684\u503c\u6765\u907f\u514d\u5728\u5176\u4ed6\u5730\u65b9\u91cd\u65b0\u8ba1\u7b97\u3002 DLC \u5728\u6574\u4e2a\u8ba1\u7b97\u56fe\u4e2d\u641c\u7d22\u516c\u5171\u5b50\u8868\u8fbe\u5f0f\uff0c\u5e76\u5c06\u4ee5\u4e0b\u516c\u5171\u5b50\u8868\u8fbe\u5f0f\u66ff\u6362\u4e3a\u5148\u524d\u8ba1\u7b97\u7684\u7ed3\u679c\u3002</p> </li> <li> <p>Dead Code elimination</p> <p>\u5982\u679c\u4e0d\u4f7f\u7528\u5176\u8ba1\u7b97\u7ed3\u679c\u6216\u526f\u4f5c\u7528\uff0c\u5219\u4e00\u7ec4\u4ee3\u7801\u662f\u6b7b\u7684\u3002 \u5e76\u4e14 DCE \u4f18\u5316\u5220\u9664\u4e86\u6b7b\u4ee3\u7801\u3002 \u6b7b\u4ee3\u7801\u901a\u5e38\u4e0d\u662f\u7a0b\u5e8f\u5458\u9020\u6210\u7684\uff0c\u800c\u662f\u7531\u5176\u4ed6\u56fe\u4f18\u5316\u9020\u6210\u7684\u3002 \u56e0\u6b64\uff0c\u5728\u5176\u4ed6\u56fe\u5f62\u4f18\u5316\u4e4b\u540e\u5e94\u7528 DCE \u548c CSE\u3002 \u5176\u4ed6\u4f18\u5316\uff0c\u4f8b\u5982\u6b7b\u5b58\u50a8\u6d88\u9664 (DSE)\uff0c\u5c06\u5b58\u50a8\u5220\u9664\u5230\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u4f7f\u7528\u7684\u5f20\u91cf\u4e2d\uff0c\u4e5f\u5c5e\u4e8e DCE\u3002</p> </li> <li> <p>Static memory planning</p> <p>\u6267\u884c\u9759\u6001\u5185\u5b58\u89c4\u5212\u4f18\u5316\u4ee5\u5c3d\u53ef\u80fd\u591a\u5730\u91cd\u7528\u5185\u5b58\u7f13\u51b2\u533a\u3002 \u901a\u5e38\uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a\u5c31\u5730\u5185\u5b58\u5171\u4eab\u548c\u6807\u51c6\u5185\u5b58\u5171\u4eab\u3002 \u5c31\u5730\u5185\u5b58\u5171\u4eab\u5bf9\u4e8e\u4e00\u4e2a\u64cd\u4f5c\u7684\u8f93\u5165\u548c\u8f93\u51fa\u4f7f\u7528\u76f8\u540c\u7684\u5185\u5b58\uff0c\u5e76\u4e14\u5728\u8ba1\u7b97\u4e4b\u524d\u53ea\u5206\u914d\u4e00\u4efd\u5185\u5b58\u3002 \u6807\u51c6\u5185\u5b58\u5171\u4eab\u91cd\u7528\u4e4b\u524d\u64cd\u4f5c\u7684\u5185\u5b58\u800c\u4e0d\u91cd\u53e0\u3002 \u9759\u6001\u5185\u5b58\u89c4\u5212\u662f\u79bb\u7ebf\u5b8c\u6210\u7684\uff0c\u8fd9\u5141\u8bb8\u5e94\u7528\u66f4\u590d\u6742\u7684\u89c4\u5212\u7b97\u6cd5\u3002 \u6700\u8fd1\u7684\u4e00\u9879\u5de5\u4f5c [4] \u9996\u5148\u8bbe\u8ba1\u5e76\u6267\u884c\u5185\u5b58\u611f\u77e5\u8c03\u5ea6\uff0c\u4ee5\u6700\u5c0f\u5316\u8fb9\u7f18\u8bbe\u5907\u4e0a\u7684\u5cf0\u503c\u6fc0\u6d3b\u5185\u5b58\u5360\u7528\uff0c\u8fd9\u4e3a\u5185\u5b58\u53d7\u9650\u8bbe\u5907\u4e0a\u7684\u5185\u5b58\u89c4\u5212\u63d0\u51fa\u4e86\u65b0\u7684\u7814\u7a76\u65b9\u5411\u3002</p> </li> <li> <p>Layout transformation</p> <p>\u5e03\u5c40\u8f6c\u6362\u8bd5\u56fe\u627e\u5230\u6700\u4f73\u6570\u636e\u5e03\u5c40\u6765\u5b58\u50a8\u8ba1\u7b97\u56fe\u4e2d\u7684\u5f20\u91cf\uff0c\u7136\u540e\u5c06\u5e03\u5c40\u8f6c\u6362\u8282\u70b9\u63d2\u5165\u5230\u8ba1\u7b97\u56fe\u4e2d\u3002 \u8bf7\u6ce8\u610f\uff0c\u6b64\u5904\u5e76\u672a\u6267\u884c\u5b9e\u9645\u8f6c\u6362\uff0c\u800c\u662f\u5728\u7f16\u8bd1\u5668\u540e\u7aef\u8bc4\u4f30\u8ba1\u7b97\u56fe\u65f6\u6267\u884c\u3002</p> <p>\u4e8b\u5b9e\u4e0a\uff0c\u540c\u4e00\u4e2a\u64cd\u4f5c\u5728\u4e0d\u540c\u6570\u636e\u5e03\u5c40\u4e0b\u7684\u8868\u73b0\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u5728\u4e0d\u540c\u7684\u786c\u4ef6\u4e0a\u6700\u597d\u7684\u5e03\u5c40\u4e5f\u662f\u4e0d\u4e00\u6837\u7684\u3002 \u4f8b\u5982\uff0cNCHW \u683c\u5f0f\u5728 GPU \u4e0a\u7684\u64cd\u4f5c\u901a\u5e38\u8fd0\u884c\u5f97\u66f4\u5feb\uff0c\u56e0\u6b64\u5728 GPU\uff08\u4f8b\u5982 TensorFlow\uff09\u4e0a\u8f6c\u6362\u4e3a NCHW \u683c\u5f0f\u662f\u9ad8\u6548\u7684\u3002 \u4e00\u4e9b DLC \u4f9d\u9760\u7279\u5b9a\u4e8e\u786c\u4ef6\u7684\u5e93\u6765\u5b9e\u73b0\u66f4\u9ad8\u7684\u6027\u80fd\uff0c\u5e76\u4e14\u8fd9\u4e9b\u5e93\u53ef\u80fd\u9700\u8981\u7279\u5b9a\u7684\u5e03\u5c40\u3002 \u6b64\u5916\uff0c\u4e00\u4e9b DL \u52a0\u901f\u5668\u66f4\u559c\u6b22\u66f4\u590d\u6742\u7684\u5e03\u5c40\uff08\u4f8b\u5982\uff0ctile\uff09\u3002 \u6b64\u5916\uff0c\u8fb9\u7f18\u8bbe\u5907\u901a\u5e38\u914d\u5907\u5f02\u6784\u8ba1\u7b97\u5355\u5143\uff0c\u4e0d\u540c\u7684\u5355\u5143\u53ef\u80fd\u9700\u8981\u4e0d\u540c\u7684\u6570\u636e\u5e03\u5c40\u4ee5\u66f4\u597d\u5730\u5229\u7528\uff0c\u56e0\u6b64\u5e03\u5c40\u8f6c\u6362\u9700\u8981\u614e\u91cd\u8003\u8651\u3002 \u56e0\u6b64\uff0c\u7f16\u8bd1\u5668\u9700\u8981\u63d0\u4f9b\u4e00\u79cd\u8de8\u5404\u79cd\u786c\u4ef6\u6267\u884c\u5e03\u5c40\u8f6c\u6362\u7684\u65b9\u6cd5\u3002</p> <p>\u4e0d\u4ec5\u5f20\u91cf\u7684\u6570\u636e\u5e03\u5c40\u5bf9\u6700\u7ec8\u6027\u80fd\u6709\u91cd\u8981\u5f71\u54cd\uff0c\u800c\u4e14\u8f6c\u6362\u64cd\u4f5c\u4e5f\u6709\u5f88\u5927\u7684\u5f00\u9500\u3002 \u56e0\u4e3a\u5b83\u4eec\u4e5f\u6d88\u8017\u5185\u5b58\u548c\u8ba1\u7b97\u8d44\u6e90\u3002</p> <p>\u6700\u8fd1\u4e00\u9879 based on TVM targeting on CPUs \u7684\u5de5\u4f5c [58] \u5c06\u8ba1\u7b97\u56fe\u4e2d\u6240\u6709\u5377\u79ef\u64cd\u4f5c\u7684\u5e03\u5c40\u66f4\u6539\u4e3a NCHW[x]c \u9996\u5148\uff0c\u5176\u4e2d c \u8868\u793a\u901a\u9053 C \u7684\u62c6\u5206\u5b50\u7ef4\u5ea6\uff0cx \u8868\u793a\u901a\u9053 C \u7684\u62c6\u5206\u5927\u5c0f \u5b50\u7ef4\u5ea6\u3002 \u7136\u540e\uff0c\u5728\u7279\u5b9a\u4e8e\u786c\u4ef6\u7684\u4f18\u5316\u671f\u95f4\uff0c\u5728\u63d0\u4f9b\u786c\u4ef6\u8be6\u7ec6\u4fe1\u606f\uff08\u4f8b\u5982\u7f13\u5b58\u884c\u5927\u5c0f\u3001\u77e2\u91cf\u5316\u5355\u5143\u5927\u5c0f\u548c\u5185\u5b58\u8bbf\u95ee\u6a21\u5f0f\uff09\u65f6\uff0c\u901a\u8fc7\u81ea\u52a8\u8c03\u6574\u5168\u5c40\u63a2\u7d22\u6240\u6709 x \u53c2\u6570\u3002</p> </li> </ul>"},{"location":"mlc/dlc-survey.html#434-discussion","title":"4.3.4. Discussion","text":"<p>\u524d\u7aef\u662f DLC \u4e2d\u6700\u91cd\u8981\u7684\u7ec4\u4ef6\u4e4b\u4e00\uff0c\u8d1f\u8d23\u4ece DL \u6a21\u578b\u5230\u9ad8\u7ea7 IR\uff08\u4f8b\u5982\u8ba1\u7b97\u56fe\uff09\u7684\u8f6c\u6362\u4ee5\u53ca\u57fa\u4e8e\u9ad8\u7ea7 IR \u7684\u786c\u4ef6\u65e0\u5173\u4f18\u5316\u3002 \u5c3d\u7ba1\u524d\u7aef\u7684\u5b9e\u73b0\u5728 DLC \u7684\u9ad8\u7ea7 IR \u7684\u6570\u636e\u8868\u793a\u548c\u8fd0\u7b97\u7b26\u5b9a\u4e49\u65b9\u9762\u53ef\u80fd\u6709\u6240\u4e0d\u540c\uff0c\u4f46\u72ec\u7acb\u4e8e\u786c\u4ef6\u7684\u4f18\u5316\u96c6\u4e2d\u5728\u4e09\u4e2a\u7ea7\u522b\uff1a\u8282\u70b9\u7ea7\u522b\u3001\u5757\u7ea7\u522b\u548c\u6570\u636e\u6d41\u7ea7\u522b\u3002 \u6bcf\u4e2a\u7ea7\u522b\u7684\u4f18\u5316\u65b9\u6cd5\u5229\u7528 DL \u7279\u5b9a\u548c\u901a\u7528\u7f16\u8bd1\u4f18\u5316\u6280\u672f\uff0c\u51cf\u5c11\u8ba1\u7b97\u5197\u4f59\u5e76\u63d0\u9ad8 DL \u6a21\u578b\u5728\u8ba1\u7b97\u56fe\u7ea7\u522b\u7684\u6027\u80fd\u3002</p>"},{"location":"mlc/dlc-survey.html#44-backend-optimizations","title":"4.4. Backend Optimizations","text":"<p>DLC \u7684\u540e\u7aef\u901a\u5e38\u5305\u62ec\u5404\u79cd\u7279\u5b9a\u4e8e\u786c\u4ef6\u7684\u4f18\u5316(hardware-specific optimizations)\u3001 \u81ea\u52a8\u8c03\u6574\u6280\u672f(auto-tuning) \u548c \u4f18\u5316\u7684\u5185\u6838\u5e93(optimized kernel libraries) \u3002 \u7279\u5b9a\u4e8e\u786c\u4ef6\u7684\u4f18\u5316\u53ef\u4ee5\u4e3a\u4e0d\u540c\u7684\u786c\u4ef6\u76ee\u6807\u751f\u6210\u9ad8\u6548\u7684\u4ee3\u7801\u3002 \u81ea\u52a8\u8c03\u6574\u5728\u7f16\u8bd1\u5668\u540e\u7aef\u4e2d\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\uff0c\u53ef\u4ee5\u51cf\u8f7b\u624b\u52a8\u5de5\u4f5c\u4ee5\u83b7\u5f97\u6700\u4f73\u53c2\u6570\u914d\u7f6e\u3002 \u6b64\u5916\uff0c\u9ad8\u5ea6\u4f18\u5316\u7684\u5185\u6838\u5e93\u4e5f\u5e7f\u6cdb\u7528\u4e8e\u901a\u7528\u5904\u7406\u5668\u548c\u5176\u4ed6\u5b9a\u5236\u5316 DL \u52a0\u901f\u5668\u3002</p>"},{"location":"mlc/dlc-survey.html#441-hardware-specific-optimization","title":"4.4.1. Hardware-specific Optimization","text":"<p>\u7279\u5b9a\u4e8e\u786c\u4ef6\u7684\u4f18\u5316\uff0c\u4e5f\u79f0\u4e3a\u76ee\u6807\u76f8\u5173\u4f18\u5316(targetdependent optimizations)\uff0c\u7528\u4e8e\u83b7\u5f97\u9488\u5bf9\u7279\u5b9a\u786c\u4ef6\u7684\u9ad8\u6027\u80fd\u4ee3\u7801\u3002 \u5e94\u7528\u540e\u7aef\u4f18\u5316\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u4f4e\u7ea7 IR \u8f6c\u6362\u4e3a LLVM IR\uff0c\u4ee5\u5229\u7528 LLVM \u57fa\u7840\u8bbe\u65bd\u751f\u6210\u4f18\u5316\u7684 CPU/GPU \u4ee3\u7801\u3002 \u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 DL \u9886\u57df\u77e5\u8bc6\u8bbe\u8ba1\u5b9a\u5236\u4f18\u5316\uff0c\u66f4\u6709\u6548\u5730\u5229\u7528\u76ee\u6807\u786c\u4ef6\u3002 \u7531\u4e8e\u7279\u5b9a\u4e8e\u786c\u4ef6\u7684\u4f18\u5316\u662f\u4e3a\u7279\u5b9a\u786c\u4ef6\u91cf\u8eab\u5b9a\u5236\u7684\uff0c\u56e0\u6b64\u65e0\u6cd5\u5728\u672c\u6587\u4e2d\u8be6\u5c3d\u4ecb\u7ecd\uff0c\u56e0\u6b64\u6211\u4eec\u63d0\u51fa\u4e865\u79cd\u5728\u73b0\u6709\u7f16\u8bd1\u5668\u4e2d\u5e7f\u6cdb\u91c7\u7528\u7684\u65b9\u6cd5\u3002 \u56fe 4 \u663e\u793a\u4e86\u8fd9\u4e9b\u7279\u5b9a\u4e8e\u786c\u4ef6\u7684\u4f18\u5316\u7684\u6982\u89c8</p> <p>\u8be6\u7ec6\u8bf4\u660e\u5982\u4e0b\uff1a</p> <ol> <li> <p>Hardware intrinsic mapping</p> <p>\u786c\u4ef6\u6307\u4ee4\u6620\u5c04\u53ef\u4ee5\u5c06\u4e00\u7ec4\u7279\u5b9a\u7684 low-level IR \u6307\u4ee4\u8f6c\u6362\u4e3a\u5df2\u7ecf\u5728\u786c\u4ef6\u4e0a\u9ad8\u5ea6\u4f18\u5316\u7684kernels\u3002 </p> <p>\u5728 TVM \u4e2d\uff0c\u786c\u4ef6\u6307\u4ee4\u6620\u5c04\u662f\u901a\u8fc7 extensible tensorization \u5b9e\u73b0\u7684\uff0c\u53ef\u4ee5\u58f0\u660e\u786c\u4ef6\u6307\u4ee4\u7684\u884c\u4e3a\u548c\u6307\u4ee4\u6620\u5c04\u7684\u964d\u4f4e\u89c4\u5219\u3002 \u8fd9\u79cd\u65b9\u6cd5\u4f7f\u7f16\u8bd1\u5668\u540e\u7aef\u80fd\u591f\u5c06\u786c\u4ef6\u5b9e\u73b0\u4ee5\u53ca\u9ad8\u5ea6\u4f18\u5316\u7684\u624b\u5de5\u5fae\u5185\u6838\u5e94\u7528\u4e8e\u7279\u5b9a\u7684\u64cd\u4f5c\u6a21\u5f0f\uff0c\u4ece\u800c\u663e\u7740\u63d0\u9ad8\u6027\u80fd\u3002 </p> <p>\u800c Glow \u652f\u6301\u786c\u4ef6\u6307\u4ee4\u6620\u5c04\uff0c\u4f8b\u5982\u91cf\u5316\u3002 \u5b83\u53ef\u4ee5\u4f30\u8ba1\u795e\u7ecf\u7f51\u7edc\u6bcf\u4e2a\u9636\u6bb5\u53ef\u80fd\u7684\u6570\u503c\u8303\u56f4\uff0c\u5e76\u652f\u6301profileguided optimization\u81ea\u52a8\u8fdb\u884c\u91cf\u5316\u3002 </p> <p>\u6b64\u5916\uff0cHalide/TVM \u5c06\u7279\u5b9a\u7684 IR \u6a21\u5f0f\u6620\u5c04\u5230\u6bcf\u4e2a\u4f53\u7cfb\u7ed3\u6784\u4e0a\u7684 SIMD \u64cd\u4f5c\u7801\uff0c\u4ee5\u907f\u514d LLVM IR mapping \u5728\u9047\u5230 vector patterns \u65f6\u6548\u7387\u4f4e\u4e0b\u3002</p> </li> <li> <p>Memory allocation and fetching</p> <p>\u5185\u5b58\u5206\u914d\u662f\u4ee3\u7801\u751f\u6210\u4e2d\u7684\u53e6\u4e00\u4e2a\u6311\u6218\uff0c\u5c24\u5176\u662f\u5bf9\u4e8e GPU \u548c\u5b9a\u5236\u52a0\u901f\u5668\u3002 \u4f8b\u5982\uff0cGPU \u4e3b\u8981\u5305\u542b\u5171\u4eab\u5185\u5b58\u7a7a\u95f4\uff08\u8bbf\u95ee\u5ef6\u8fdf\u8f83\u4f4e\uff0c\u5185\u5b58\u5927\u5c0f\u6709\u9650\uff09\u548c\u672c\u5730\u5185\u5b58\u7a7a\u95f4\uff08\u8bbf\u95ee\u5ef6\u8fdf\u8f83\u9ad8\uff0c\u5bb9\u91cf\u5927\uff09\u3002 \u8fd9\u79cd\u5185\u5b58\u5c42\u6b21\u7ed3\u6784\u9700\u8981\u6709\u6548\u7684\u5185\u5b58\u5206\u914d\u548c\u83b7\u53d6\u6280\u672f\u6765\u6539\u5584\u6570\u636e\u5c40\u90e8\u6027\u3002 </p> <p>\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u79cd\u4f18\u5316\uff0cTVM\u5f15\u5165\u4e86 memory scope \u7684\u8c03\u5ea6\u6982\u5ff5\u3002 \u5185\u5b58\u8303\u56f4\u8c03\u5ea6\u539f\u8bed\u53ef\u4ee5\u5c06\u8ba1\u7b97\u9636\u6bb5\u6807\u8bb0\u4e3a\u5171\u4eab\u6216\u7ebf\u7a0b\u672c\u5730\u3002 \u5bf9\u4e8e\u6807\u8bb0\u4e3a\u5171\u4eab\u7684\u8ba1\u7b97\u9636\u6bb5\uff0cTVM \u751f\u6210\u5177\u6709\u5171\u4eab\u5185\u5b58\u5206\u914d\u548c\u534f\u4f5c\u6570\u636e\u83b7\u53d6\u7684\u4ee3\u7801\uff0c\u5728\u9002\u5f53\u7684\u4ee3\u7801\u4f4d\u7f6e\u63d2\u5165\u5185\u5b58\u5c4f\u969c\u4ee5\u4fdd\u8bc1\u6b63\u786e\u6027\u3002 </p> <p>\u6b64\u5916\uff0c TC \u8fd8\u901a\u8fc7\u6269\u5c55 PPCG [97] \u7f16\u8bd1\u5668\u63d0\u4f9b\u4e86\u7c7b\u4f3c\u7684\u529f\u80fd\uff08\u79f0\u4e3amemory promotion\uff09\u3002 \u4f46\u662f\uff0cTC \u4ec5\u652f\u6301\u6709\u9650\u7684\u9884\u5b9a\u4e49\u89c4\u5219\u3002 \u7279\u522b\u662f\uff0cTVM \u5141\u8bb8\u901a\u8fc7 memory scope \u8c03\u5ea6\u539f\u8bed\u5728\u52a0\u901f\u5668\u4e2d\u542f\u7528\u7279\u6b8a\u7f13\u51b2\u3002</p> </li> <li> <p>Memory latency hiding</p> <p>\u901a\u8fc7\u91cd\u6392\u6267\u884c\u6d41\u6c34\u7ebf\uff0c\u5185\u5b58\u5ef6\u8fdf\u9690\u85cf\u4e5f\u662f\u540e\u7aef\u4f7f\u7528\u7684\u4e00\u9879\u91cd\u8981\u6280\u672f\u3002 \u7531\u4e8e\u5927\u591a\u6570 DLC \u90fd\u652f\u6301 CPU \u548c GPU \u4e0a\u7684\u5e76\u884c\u5316\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u786c\u4ef6\u81ea\u7136\u5730\u5b9e\u73b0\u5185\u5b58\u5ef6\u8fdf\u9690\u85cf\uff08\u4f8b\u5982\uff0cGPU \u4e0a\u7684 warp \u4e0a\u4e0b\u6587\u5207\u6362\uff09\u3002 \u4f46\u5bf9\u4e8e\u5177\u6709 decoupled access-execute (DAE) \u67b6\u6784\u7684\u7c7b TPU \u52a0\u901f\u5668\uff0c\u540e\u7aef\u9700\u8981\u6267\u884c\u8c03\u5ea6\u548c\u7ec6\u7c92\u5ea6\u540c\u6b65\u4ee5\u83b7\u5f97\u6b63\u786e\u548c\u9ad8\u6548\u7684\u4ee3\u7801\u3002 \u4e3a\u4e86\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd\u5e76\u51cf\u5c11\u7f16\u7a0b\u8d1f\u62c5\uff0cTVM \u5f15\u5165\u4e86\u865a\u62df\u7ebf\u7a0b\u8c03\u5ea6\u539f\u8bed\uff0c\u4f7f\u7528\u6237\u80fd\u591f\u5728\u865a\u62df\u5316\u591a\u7ebf\u7a0b\u67b6\u6784\u4e0a\u6307\u5b9a\u6570\u636e\u5e76\u884c\u5ea6\u3002 \u7136\u540e TVM \u901a\u8fc7\u63d2\u5165\u5fc5\u8981\u7684\u5185\u5b58\u5c4f\u969c\u6765\u964d\u4f4e\u8fd9\u4e9b\u865a\u62df\u5e76\u884c\u5316\u7684\u7ebf\u7a0b\uff0c\u5e76\u5c06\u6765\u81ea\u8fd9\u4e9b\u7ebf\u7a0b\u7684\u64cd\u4f5c\u4ea4\u7ec7\u5230\u5355\u4e2a\u6307\u4ee4\u6d41\u4e2d\uff0c\u4ece\u800c\u5f62\u6210\u6bcf\u4e2a\u7ebf\u7a0b\u66f4\u597d\u7684\u6267\u884c\u7ba1\u9053\u4ee5\u9690\u85cf\u5185\u5b58\u8bbf\u95ee\u5ef6\u8fdf\u3002</p> </li> <li> <p>Loop oriented optimizations</p> <p>\u9762\u5411\u5faa\u73af\u7684\u4f18\u5316\u4e5f\u5e94\u7528\u4e8e\u540e\u7aef\uff0c\u4e3a\u76ee\u6807\u786c\u4ef6\u751f\u6210\u9ad8\u6548\u4ee3\u7801\u3002 \u7531\u4e8e Halide \u548c LLVM [51]\uff08\u4e0e\u591a\u9762\u4f53\u65b9\u6cd5\u96c6\u6210\uff09\u5df2\u7ecf\u91c7\u7528\u4e86\u6b64\u7c7b\u4f18\u5316\u6280\u672f\uff0c\u56e0\u6b64\u4e00\u4e9b DLC \u5728\u5176\u540e\u7aef\u5229\u7528\u4e86 Halide \u548c LLVM\u3002 \u9762\u5411\u5faa\u73af\u7684\u4f18\u5316\u4e2d\u5e94\u7528\u7684\u5173\u952e\u6280\u672f\u5305\u62ec\u5faa\u73af\u878d\u5408(loop fusion)\u3001 \u6ed1\u52a8\u7a97\u53e3(sliding window)\u3001 \u5faa\u73af\u5206\u5757(loop tiling)\u3001 \u5faa\u73af\u91cd\u65b0\u6392\u5e8f(loop reording) \u548c \u5faa\u73af\u5c55\u5f00(loop unrolling)</p> <ol> <li> <p>Loop fusion \u5faa\u73af\u878d\u5408\u662f\u4e00\u79cd\u5faa\u73af\u4f18\u5316\u6280\u672f\uff0c\u53ef\u4ee5\u878d\u5408\u5177\u6709\u76f8\u540c\u8fb9\u754c\u7684\u5faa\u73af\uff0c\u4ee5\u5b9e\u73b0\u66f4\u597d\u7684\u6570\u636e\u91cd\u7528\u3002 \u5bf9\u4e8e PlaidML\u3001TVM\u3001TC \u548c XLA \u7b49\u7f16\u8bd1\u5668\uff0c\u6b64\u7c7b\u4f18\u5316\u662f\u901a\u8fc7 Halide \u8c03\u5ea6\u6216\u591a\u9762\u4f53\u65b9\u6cd5\u6267\u884c\u7684\uff0c\u800c Glow \u901a\u8fc7\u5176\u8fd0\u7b97\u7b26\u5806\u6808\u5e94\u7528\u5faa\u73af\u878d\u5408\u3002</p> </li> <li> <p>Sliding window \u6ed1\u52a8\u7a97\u53e3\u662f Halide \u91c7\u7528\u7684\u4e00\u79cd\u5faa\u73af\u4f18\u5316\u6280\u672f\u3002 \u5b83\u7684\u6838\u5fc3\u6982\u5ff5\u662f\u5728\u9700\u8981\u65f6\u8ba1\u7b97\u503c\u5e76\u52a8\u6001\u5b58\u50a8\u5b83\u4eec\u4ee5\u4f9b\u6570\u636e\u91cd\u7528\uff0c\u76f4\u5230\u4e0d\u518d\u9700\u8981\u5b83\u4eec\u4e3a\u6b62\u3002 \u7531\u4e8e\u6ed1\u52a8\u7a97\u53e3\u4ea4\u7ec7\u4e24\u4e2a\u5faa\u73af\u7684\u8ba1\u7b97\u5e76\u4f7f\u5b83\u4eec\u4e32\u884c\uff0c\u8fd9\u662f\u5e76\u884c\u6027\u548c\u6570\u636e\u91cd\u7528\u4e4b\u95f4\u7684\u6743\u8861\u3002</p> </li> <li> <p>Tiling Tiling \u5c06\u5faa\u73af\u62c6\u5206\u4e3a\u591a\u4e2a tile\uff0c\u56e0\u6b64\u5faa\u73af\u5206\u4e3a\u8fed\u4ee3\u904d\u5386 tile \u7684\u5916\u5faa\u73af\u548c\u8fed\u4ee3 tile \u5185\u90e8\u7684\u5185\u5faa\u73af\u3002 \u8fd9\u79cd\u8f6c\u6362\u901a\u8fc7\u5c06\u56fe\u5757\u653e\u5165\u786c\u4ef6\u7f13\u5b58\u6765\u5b9e\u73b0\u56fe\u5757\u5185\u66f4\u597d\u7684\u6570\u636e\u5c40\u90e8\u6027\u3002 \u7531\u4e8e\u56fe\u5757\u7684\u5927\u5c0f\u662f\u7279\u5b9a\u4e8e\u786c\u4ef6\u7684\uff0c\u56e0\u6b64\u8bb8\u591a DLC \u901a\u8fc7\u81ea\u52a8\u8c03\u6574\u6765\u786e\u5b9a\u56fe\u5757\u6a21\u5f0f\u548c\u5927\u5c0f\u3002</p> </li> <li> <p>Loop reordering \u5faa\u73af\u91cd\u65b0\u6392\u5e8f\u6539\u53d8\u5d4c\u5957\u5faa\u73af\u4e2d\u7684\u8fed\u4ee3\u987a\u5e8f\uff0c\u53ef\u4ee5\u4f18\u5316\u5185\u5b58\u8bbf\u95ee\uff0c\u4ece\u800c\u589e\u52a0\u7a7a\u95f4\u5c40\u90e8\u6027\u3002 \u5b83\u7279\u5b9a\u4e8e\u6570\u636e\u5e03\u5c40\u548c\u786c\u4ef6\u529f\u80fd\u3002 \u4f46\u662f\uff0c\u5f53\u8fed\u4ee3\u987a\u5e8f\u5b58\u5728\u4f9d\u8d56\u5173\u7cfb\u65f6\uff0c\u6267\u884c\u5faa\u73af\u91cd\u65b0\u6392\u5e8f\u662f\u4e0d\u5b89\u5168\u7684\u3002</p> </li> <li> <p>Loop unrolling \u5faa\u73af\u5c55\u5f00\u53ef\u4ee5\u5c06\u7279\u5b9a\u5faa\u73af\u5c55\u5f00\u4e3a\u56fa\u5b9a\u6570\u91cf\u7684\u5faa\u73af\u4f53\u526f\u672c\uff0c\u8fd9\u5141\u8bb8\u7f16\u8bd1\u5668\u5e94\u7528\u79ef\u6781\u7684\u6307\u4ee4\u7ea7\u5e76\u884c\u6027\u3002 \u901a\u5e38\uff0c\u5faa\u73af\u5c55\u5f00\u4e0e\u5faa\u73af\u62c6\u5206\u7ed3\u5408\u5e94\u7528\uff0c\u5b83\u9996\u5148\u5c06\u5faa\u73af\u62c6\u5206\u4e3a\u4e24\u4e2a\u5d4c\u5957\u5faa\u73af\uff0c\u7136\u540e\u5c06\u5185\u5c42\u5faa\u73af\u5b8c\u5168\u5c55\u5f00\u3002</p> </li> </ol> </li> <li> <p>Parallelization </p> <p>\u7531\u4e8e\u73b0\u4ee3\u5904\u7406\u5668\u901a\u5e38\u652f\u6301\u591a\u7ebf\u7a0b\u548cSIMD\u5e76\u884c\uff0c\u7f16\u8bd1\u5668\u540e\u7aef\u9700\u8981\u5229\u7528\u5e76\u884c\u6027\u6765\u63d0\u9ad8\u786c\u4ef6\u5229\u7528\u7387\u3002</p> <p>Halide \u4f7f\u7528\u4e00\u4e2a\u79f0\u4e3a <code>parallel</code> \u7684\u8c03\u5ea6\u539f\u8bed\u6765\u6307\u5b9a \u7ebf\u7a0b\u7ea7\u5e76\u884c\u5316\u5faa\u73af \u7684\u5e76\u884c\u7ef4\u6570\u3002\u5e76\u4e14\u5b83\u7528\u4e00\u4e2an\u5bbd\u7684\u5411\u91cf\u8bed\u53e5\u4ee3\u66ff\u4e86\u4e00\u4e2a\u5927\u5c0f\u4e3an\u7684\u5faa\u73af\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u786c\u4ef6\u6307\u4ee4mapping \u6620\u5c04\u5230\u786c\u4ef6\u7279\u5b9a\u7684SIMD\u64cd\u4f5c\u7801\u3002 </p> <p>Stripe \u5f00\u53d1\u4e86\u591a\u9762\u4f53\u6a21\u578b\u7684\u53d8\u4f53\uff0c\u79f0\u4e3a\u5d4c\u5957\u591a\u9762\u4f53\u6a21\u578b\uff0c\u5b83\u5f15\u5165\u5e73\u884c\u591a\u9762\u4f53\u5757\u4f5c\u4e3a\u5176\u8fed\u4ee3\u7684\u57fa\u672c\u6267\u884c\u5143\u7d20\u3002 \u5728\u6b64\u6269\u5c55\u4e4b\u540e\uff0c\u5d4c\u5957\u591a\u9762\u4f53\u6a21\u578b\u53ef\u4ee5\u68c0\u6d4b\u5e73\u94fa\u548c\u8de8\u8d8a\u7ea7\u522b\u4e4b\u95f4\u7684\u5c42\u6b21\u7ed3\u6784\u5e76\u884c\u5316\u3002 \u6b64\u5916\uff0c\u4e00\u4e9b DLC \u4f9d\u8d56\u624b\u5de5\u5e93\uff0c\u4f8b\u5982 Glow \u6216\u786c\u4ef6\u4f9b\u5e94\u5546\u63d0\u4f9b\u7684\u4f18\u5316\u6570\u5b66\u5e93\uff08\u5728\u7b2c 4.4.3 \u8282\u4e2d\u8ba8\u8bba\uff09\u3002 \u540c\u65f6\uff0cGlow \u5c06 \u5411\u91cf\u5316\u5de5\u4f5c\u8f6c\u79fb\u5230 LLVM\uff0c\u56e0\u4e3a LLVM auto-vectorizer \u5728\u63d0\u4f9b\u5f20\u91cf\u7ef4\u5ea6\u548c\u5faa\u73af\u6b21\u6570\u4fe1\u606f\u65f6\u8fd0\u884c\u826f\u597d\u3002 \u7136\u800c\uff0c\u5b8c\u5168\u7531\u7f16\u8bd1\u5668\u540e\u7aef\u5229\u7528\u5e76\u884c\u6027\u5141\u8bb8\u5e94\u7528\u66f4\u591a DL \u6a21\u578b\u7684\u7279\u5b9a\u9886\u57df\u77e5\u8bc6\uff0c\u4ece\u800c\u4ee5\u66f4\u591a\u7684\u5de5\u7a0b\u5de5\u4f5c\u4e3a\u4ee3\u4ef7\u83b7\u5f97\u66f4\u9ad8\u7684\u6027\u80fd\u3002</p> </li> </ol>"},{"location":"mlc/dlc-survey.html#442-auto-tuning","title":"4.4.2. Auto-tuning","text":"<p>\u7531\u4e8e\u5728\u7279\u5b9a\u4e8e\u786c\u4ef6\u7684\u4f18\u5316\u4e2d\u53c2\u6570\u8c03\u6574\u7684\u5de8\u5927\u641c\u7d22\u7a7a\u95f4\uff0c\u56e0\u6b64\u6709\u5fc5\u8981\u5229\u7528 Auto-tuning \u6765\u786e\u5b9a\u6700\u4f73\u53c2\u6570\u914d\u7f6e\u3002 \u5728\u672c\u6b21\u8c03\u67e5\u7814\u7a76\u7684 DLC \u4e2d\uff0cTVM\u3001TC \u548c XLA \u652f\u6301\u81ea\u52a8\u8c03\u6574\u3002 \u901a\u5e38\uff0c\u81ea\u52a8\u8c03\u6574\u5b9e\u73b0\u5305\u62ec4\u4e2a\u5173\u952e\u7ec4\u4ef6\uff0c\u4f8b\u5982\u53c2\u6570\u5316\u3001\u6210\u672c\u6a21\u578b\u3001\u641c\u7d22\u6280\u672f\u548c\u52a0\u901f\u3002</p> <ol> <li> <p>Parameterization</p> <p>1\uff09Data and target: \u6570\u636e\u53c2\u6570\u63cf\u8ff0\u6570\u636e\u7684\u89c4\u683c\uff0c\u5982\u8f93\u5165\u5f62\u72b6\u3002 \u76ee\u6807\u53c2\u6570\u63cf\u8ff0\u4e86\u5728\u4f18\u5316\u8c03\u5ea6\u548c\u4ee3\u7801\u751f\u6210\u671f\u95f4\u8981\u8003\u8651\u7684\u7279\u5b9a\u4e8e\u786c\u4ef6\u7684\u7279\u6027\u548c\u7ea6\u675f\u3002 \u4f8b\u5982\uff0c\u5bf9\u4e8e GPU \u76ee\u6807\uff0c\u9700\u8981\u6307\u5b9a\u5171\u4eab\u5185\u5b58\u548c\u5bc4\u5b58\u5668\u5927\u5c0f\u7b49\u786c\u4ef6\u53c2\u6570\u3002 </p> <p>2\uff09Optimization options: \u4f18\u5316\u9009\u9879\u5305\u62ec\u4f18\u5316\u8c03\u5ea6\u548c\u76f8\u5e94\u7684\u53c2\u6570\uff0c\u4f8b\u5982\u9762\u5411\u5faa\u73af\u7684\u4f18\u5316\u548c tile size \u3002 \u5728 TVM \u4e2d\uff0c\u9884\u5b9a\u4e49\u548c\u7528\u6237\u5b9a\u4e49\u7684\u8c03\u5ea6\u4ee5\u53ca\u53c2\u6570\u90fd\u88ab\u8003\u8651\u5728\u5185\u3002 \u800c TC \u548c XLA \u66f4\u559c\u6b22\u53c2\u6570\u5316\u4f18\u5316\uff0c\u8fd9\u4e0e\u6027\u80fd\u6709\u5f88\u5f3a\u7684\u76f8\u5173\u6027\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u4ee5\u540e\u4ee5\u4f4e\u6210\u672c\u66f4\u6539\u3002 \u4f8b\u5982\uff0cminibatch \u7ef4\u5ea6\u662f CUDA \u4e2d\u901a\u5e38\u6620\u5c04\u5230 grid dimensions \u7684\u53c2\u6570\u4e4b\u4e00\uff0c\u53ef\u4ee5\u5728\u81ea\u52a8\u8c03\u6574\u671f\u95f4\u8fdb\u884c\u4f18\u5316\u3002</p> </li> <li> <p>Cost model</p> <p>\u5e94\u7528\u4e8e\u81ea\u52a8\u8c03\u6574\u7684\u4e0d\u540c\u6210\u672c\u6a21\u578b\u7684\u6bd4\u8f83\u5982\u4e0b\u3002 </p> <p>1) Black-box model\uff1a\u8be5\u6a21\u578b\u53ea\u8003\u8651\u6700\u7ec8\u6267\u884c\u65f6\u95f4\uff0c\u4e0d\u8003\u8651\u7f16\u8bd1\u4efb\u52a1\u7684\u7279\u6027\u3002 \u5efa\u7acb\u9ed1\u76d2\u6a21\u578b\u5f88\u5bb9\u6613\uff0c\u4f46\u5982\u679c\u6ca1\u6709\u4efb\u52a1\u7279\u5f81\u7684\u6307\u5bfc\uff0c\u5f88\u5bb9\u6613\u5bfc\u81f4\u66f4\u9ad8\u7684\u5f00\u9500\u548c\u4e0d\u592a\u7406\u60f3\u7684\u89e3\u51b3\u65b9\u6848\u3002 TC \u91c7\u7528\u8fd9\u79cd\u6a21\u5f0f\u3002 </p> <p>2) ML-based cost model\uff1a\u57fa\u4e8e\u673a\u5668\u5b66\u4e60\u7684\u6210\u672c\u6a21\u578b\u662f\u4e00\u79cd\u4f7f\u7528\u673a\u5668\u5b66\u4e60\u65b9\u6cd5\u9884\u6d4b\u6027\u80fd\u7684\u7edf\u8ba1\u65b9\u6cd5\u3002 \u5b83\u4f7f\u6a21\u578b\u80fd\u591f\u968f\u7740\u65b0\u914d\u7f6e\u7684\u63a2\u7d22\u800c\u66f4\u65b0\uff0c\u8fd9\u6709\u52a9\u4e8e\u5b9e\u73b0\u66f4\u9ad8\u7684\u9884\u6d4b\u51c6\u786e\u6027\u3002 TVM \u548c XLA \u91c7\u7528\u4e86\u8fd9\u79cd\u6a21\u578b\uff0c\u4f8b\u5982 gradient tree boosting model\uff08GBDT\uff09\u548c\u524d\u9988\u795e\u7ecf\u7f51\u7edc\uff08FNN\uff09\u3002 </p> <p>3) Pre-defined cost model\uff1a\u4e00\u79cd\u57fa\u4e8e\u9884\u5b9a\u4e49\u6210\u672c\u6a21\u578b\u7684\u65b9\u6cd5\u671f\u671b\u4e00\u4e2a\u5efa\u7acb\u5728\u7f16\u8bd1\u4efb\u52a1\u7279\u5f81\u4e0a\u7684\u5b8c\u7f8e\u6a21\u578b\uff0c\u5e76\u4e14\u80fd\u591f\u8bc4\u4f30\u4efb\u52a1\u7684\u6574\u4f53\u6027\u80fd\u3002 \u4e0e\u57fa\u4e8e ML \u7684\u6a21\u578b\u76f8\u6bd4\uff0c\u9884\u5b9a\u4e49\u6a21\u578b\u5728\u5e94\u7528\u65f6\u4ea7\u751f\u7684\u8ba1\u7b97\u5f00\u9500\u8f83\u5c0f\uff0c\u4f46\u9700\u8981\u5927\u91cf\u7684\u5de5\u7a0b\u5de5\u4f5c\u6765\u5728\u6bcf\u4e2a\u65b0\u7684 DL \u6a21\u578b\u548c\u786c\u4ef6\u4e0a\u91cd\u65b0\u6784\u5efa\u6a21\u578b\u3002</p> </li> <li> <p>Searching technique</p> <p>1\uff09Initialization and searching space determination\uff1a\u521d\u59cb\u9009\u9879\u53ef\u4ee5\u968f\u673a\u8bbe\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u57fa\u4e8e\u5df2\u77e5\u914d\u7f6e\uff0c\u4f8b\u5982\u7528\u6237\u7ed9\u5b9a\u7684\u914d\u7f6e\u6216\u5386\u53f2\u6700\u4f18\u914d\u7f6e\u3002 \u5728\u641c\u7d22\u7a7a\u95f4\u65b9\u9762\uff0c\u9700\u8981\u5728\u81ea\u6574\u5b9a\u524d\u6307\u5b9a\u3002 TVM \u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u4ed6\u4eec\u7684\u7279\u5b9a\u9886\u57df\u77e5\u8bc6\u6307\u5b9a\u641c\u7d22\u7a7a\u95f4\uff0c\u5e76\u6839\u636e\u8ba1\u7b97\u63cf\u8ff0\u4e3a\u6bcf\u4e2a\u786c\u4ef6\u76ee\u6807\u63d0\u4f9b\u81ea\u52a8\u641c\u7d22\u7a7a\u95f4\u63d0\u53d6\u3002 \u76f8\u6bd4\u4e4b\u4e0b\uff0cTC \u4f9d\u8d56\u4e8e\u7f16\u8bd1\u7f13\u5b58\u548c\u9884\u5b9a\u4e49\u89c4\u5219\u3002 </p> <p>2\uff09Genetic algorithm\uff1aGA\u5c06\u6bcf\u4e2a\u8c03\u6574\u53c2\u6570\u89c6\u4e3a\u57fa\u56e0\uff0c\u5c06\u6bcf\u4e2a\u914d\u7f6e\u89c6\u4e3a\u5019\u9009\u8005\u3002 \u65b0\u5019\u9009\u8005\u6839\u636e\u9002\u5e94\u5ea6\u503c\u901a\u8fc7\u4ea4\u53c9\u3001\u53d8\u5f02\u548c\u9009\u62e9\u8fed\u4ee3\u751f\u6210\uff0c\u8fd9\u662f\u4e00\u79cd\u53d7\u81ea\u7136\u9009\u62e9\u8fc7\u7a0b\u542f\u53d1\u7684\u5143\u542f\u53d1\u5f0f\u7b97\u6cd5\u3002 \u6700\u540e\uff0c\u5bfc\u51fa\u6700\u4f73\u5019\u9009\u8005\u3002 \u4ea4\u53c9\u7387\u3001\u53d8\u5f02\u7387\u548c\u9009\u62e9\u7387\u7528\u4e8e\u63a7\u5236\u63a2\u7d22\u548c\u5f00\u53d1\u4e4b\u95f4\u7684\u6743\u8861\u3002 TC \u5728\u5176\u81ea\u52a8\u8c03\u6574\u6280\u672f\u4e2d\u91c7\u7528\u4e86 GA\u3002</p> <p>3\uff09Simulated annealing algorithm\uff1a \u6a21\u62df\u9000\u5316\u7b97\u6cd5\u4e5f\u662f\u4e00\u79cd\u53d7\u9000\u706b\u542f\u53d1\u7684\u5143\u542f\u53d1\u5f0f\u7b97\u6cd5\u3002 \u5b83\u5141\u8bb8\u6211\u4eec\u4ee5\u9012\u51cf\u7684\u6982\u7387\u63a5\u53d7\u66f4\u5dee\u7684\u89e3\uff0c\u8fd9\u53ef\u4ee5\u5728\u56fa\u5b9a\u7684\u8fed\u4ee3\u6b21\u6570\u4e2d\u627e\u5230\u8fd1\u4f3c\u7684\u5168\u5c40\u6700\u4f18\u5e76\u907f\u514d\u7cbe\u786e\u7684\u5c40\u90e8\u6700\u4f18\u3002 TVM \u5728\u5176\u81ea\u52a8\u8c03\u6574\u6280\u672f\u4e2d\u91c7\u7528\u4e86 SA\u3002 </p> <p>4) Reinforcement learning (RL)\uff1a\u5f3a\u5316\u5b66\u4e60\u901a\u8fc7\u5b66\u4e60\u5728\u7ed9\u5b9a\u73af\u5883\u4e0b\u901a\u8fc7\u63a2\u7d22\u548c\u5f00\u53d1\u4e4b\u95f4\u7684\u6743\u8861\u6765\u6700\u5927\u5316\u5956\u52b1\u3002 Chameleon [5]\uff08\u5efa\u7acb\u5728 TVM \u4e4b\u4e0a\uff09\u5728\u5176\u81ea\u52a8\u8c03\u6574\u6280\u672f\u4e2d\u91c7\u7528\u4e86 RLRL\u3002</p> </li> <li> <p>Acceleration</p> <p>1\uff09 Parallelization: \u52a0\u901f Auto-tuning \u7684\u4e00\u4e2a\u65b9\u5411\u662f\u5e76\u884c\u5316\u3002 \u8003\u8651\u5230\u9057\u4f20\u7b97\u6cd5\u9700\u8981\u8bc4\u4f30\u6bcf\u4e00\u4ee3\u4e2d\u7684\u6240\u6709\u5019\u9009\u8005\uff0cTC \u63d0\u51fa\u4e86\u591a\u7ebf\u7a0b\u3001\u591a GPU \u7b56\u7565\u3002 \u9996\u5148\uff0c\u5b83\u5c06\u5019\u9009\u914d\u7f6e\u6392\u5165\u961f\u5217\u5e76\u5728\u591a\u4e2a CPU \u7ebf\u7a0b\u4e0a\u7f16\u8bd1\u5b83\u4eec\u3002 \u751f\u6210\u7684\u4ee3\u7801\u5728 GPU \u4e0a\u5e76\u884c\u8bc4\u4f30\uff0c\u6bcf\u4e2a\u5019\u9009\u8005\u90fd\u62e5\u6709\u7236\u9009\u62e9\u6b65\u9aa4\u4f7f\u7528\u7684\u9002\u5408\u5ea6\u3002 \u6574\u4e2a\u8bc4\u4f30\u5b8c\u6210\u540e\uff0c\u751f\u6210\u65b0\u7684\u5019\u9009\uff0c\u65b0\u7684\u7f16\u8bd1\u4f5c\u4e1a\u5165\u961f\uff0c\u7b49\u5f85CPU\u7f16\u8bd1\u3002 \u540c\u6837\uff0cTVM \u652f\u6301\u4ea4\u53c9\u7f16\u8bd1\u548c RPC\uff0c\u5141\u8bb8\u7528\u6237\u5728\u672c\u5730\u673a\u5668\u4e0a\u7f16\u8bd1\u5e76\u5728\u591a\u4e2a\u76ee\u6807\u4e0a\u8fd0\u884c\u5177\u6709\u4e0d\u540c\u81ea\u52a8\u8c03\u6574\u914d\u7f6e\u7684\u7a0b\u5e8f\u3002 </p> <p>2\uff09 Configuration reuse: \u52a0\u901f Auto-tuning \u7684\u53e6\u4e00\u4e2a\u65b9\u5411\u662f\u91cd\u7528\u4e4b\u524d\u7684 Auto-tuning \u914d\u7f6e\u3002 TC \u901a\u8fc7\u7f16\u8bd1\u7f13\u5b58\u5b58\u50a8\u4e0e\u7ed9\u5b9a\u914d\u7f6e\u76f8\u5bf9\u5e94\u7684\u5df2\u77e5\u6700\u5feb\u751f\u6210\u4ee3\u7801\u7248\u672c\u3002 \u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u6bcf\u6b21\u5185\u6838\u4f18\u5316\u524d\u90fd\u4f1a\u67e5\u8be2\u7f13\u5b58\uff0c\u5982\u679c\u7f13\u5b58\u672a\u547d\u4e2d\u5219\u89e6\u53d1\u81ea\u52a8\u8c03\u4f18\u3002 \u7c7b\u4f3c\u5730\uff0cTVM \u4f1a\u751f\u6210\u4e00\u4e2a\u65e5\u5fd7\u6587\u4ef6\uff0c\u5176\u4e2d\u5b58\u50a8\u6240\u6709\u8c03\u5ea6\u7b97\u5b50\u7684\u6700\u4f73\u914d\u7f6e\uff0c\u5e76\u5728\u7f16\u8bd1\u671f\u95f4\u67e5\u8be2\u65e5\u5fd7\u6587\u4ef6\u4ee5\u83b7\u53d6\u6700\u4f73\u914d\u7f6e\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0cTVM \u5bf9 Halide IR \u4e2d\u7684\u6bcf\u4e2a\u7b97\u5b50\uff08\u4f8b\u5982 <code>conv2d</code> \uff09\u6267\u884c\u81ea\u52a8\u8c03\u6574\uff0c\u56e0\u6b64\u5206\u522b\u4e3a\u6bcf\u4e2a\u7b97\u5b50\u786e\u5b9a\u6700\u4f73\u914d\u7f6e\u3002</p> </li> </ol>"},{"location":"mlc/dlc-survey.html#443-optimized-kernel-libraries","title":"4.4.3. Optimized Kernel Libraries","text":"<p>\u6709\u51e0\u4e2a\u9ad8\u5ea6\u4f18\u5316\u7684\u5185\u6838\u5e93\u88ab\u5e7f\u6cdb\u7528\u4e8e\u52a0\u901f\u5404\u79cd\u786c\u4ef6\u4e0a\u7684 DL \u8bad\u7ec3\u548c\u63a8\u7406\u3002 Intel \u7684 DNNL\uff08\u4ee5\u524d\u79f0\u4e3a MKL-DNN\uff09\u3001NVIDIA \u7684 cuDNN \u548c AMD \u7684 MIOpen \u662f\u5e7f\u6cdb\u4f7f\u7528\u7684\u5e93\u3002 \u8ba1\u7b97\u5bc6\u96c6\u578b\u539f\u8bed\uff08\u4f8b\u5982\uff0cconv\u3001GEMM \u548c RNN\uff09\u548c\u5185\u5b58\u5e26\u5bbd\u53d7\u9650\u539f\u8bed\uff08\u4f8b\u5982\uff0cbatch normalization\u3001pooling\u548c shuffle \uff09\u90fd\u6839\u636e\u786c\u4ef6\u7279\u6027\uff08\u4f8b\u5982\uff0cAVX-512 ISA\u3001\u5f20\u91cf\u6838\u5fc3\uff09\u8fdb\u884c\u4e86\u9ad8\u5ea6\u4f18\u5316\u3002 \u5e76\u4e14\u652f\u6301\u53ef\u5b9a\u5236\u7684\u6570\u636e\u5e03\u5c40\uff0c\u53ef\u4ee5\u8f7b\u677e\u96c6\u6210\u5230 DL \u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u907f\u514d\u9891\u7e41\u7684\u6570\u636e\u5e03\u5c40\u8f6c\u6362\u3002 \u6b64\u5916\uff0c\u8fd8\u652f\u6301\u4f4e\u7cbe\u5ea6\u8bad\u7ec3\u548c\u63a8\u7406\uff0c\u5305\u62ec FP32\u3001FP16\u3001INT8 \u548c\u975e IEEE \u6d6e\u70b9\u683c\u5f0f bfloat16 [45]\u3002 \u5176\u4ed6\u5b9a\u5236\u7684 DL \u52a0\u901f\u5668\u4e5f\u7ef4\u62a4\u5176\u7279\u5b9a\u7684\u5185\u6838\u5e93 [43\u300157]\u3002</p> <p>\u73b0\u6709\u7684 DLC \uff0c\u5982 TVM\u3001nGraph \u548c TC\uff0c\u53ef\u4ee5\u5728\u4ee3\u7801\u751f\u6210\u671f\u95f4\u751f\u6210\u5bf9\u8fd9\u4e9b\u5e93\u7684\u51fd\u6570\u8c03\u7528\u3002 \u4f46\u662f\uff0c\u5982\u679c DLC \u9700\u8981\u5229\u7528\u73b0\u6709\u7684\u4f18\u5316\u5185\u6838\u5e93\uff0c\u4ed6\u4eec\u5e94\u8be5\u9996\u5148\u5c06\u6570\u636e\u5e03\u5c40\u548c\u878d\u5408\u6837\u5f0f\u8f6c\u6362\u4e3a\u5185\u6838\u5e93\u4e2d\u9884\u5b9a\u4e49\u7684\u7c7b\u578b\u3002 \u8fd9\u79cd\u8f6c\u6362\u53ef\u80fd\u4f1a\u7834\u574f\u6700\u4f18\u63a7\u5236\u6d41\u3002 \u6b64\u5916\uff0cDLC \u5c06\u5185\u6838\u5e93\u89c6\u4e3a\u9ed1\u76d2\u3002 \u56e0\u6b64\uff0c\u4ed6\u4eec\u65e0\u6cd5\u5728\u8c03\u7528\u5185\u6838\u5e93\u65f6\u8de8 \u7b97\u5b50 \u5e94\u7528\u4f18\u5316\uff08\u4f8b\u5982\uff0c\u7b97\u5b50\u878d\u5408\uff09\u3002 \u603b\u800c\u8a00\u4e4b\uff0c\u5f53\u7279\u5b9a\u9ad8\u5ea6\u4f18\u5316\u7684\u539f\u8bed\u53ef\u4ee5\u6ee1\u8db3\u8ba1\u7b97\u65f6\uff0c\u4f7f\u7528\u4f18\u5316\u7684\u5185\u6838\u5e93\u53ef\u4ee5\u5b9e\u73b0\u663e\u7740\u7684\u6027\u80fd\u63d0\u5347\uff0c\u5426\u5219\u5b83\u53ef\u80fd\u4f1a\u53d7\u5230\u8fdb\u4e00\u6b65\u4f18\u5316\u7684\u9650\u5236\uff0c\u5e76\u906d\u53d7\u4e0d\u592a\u7406\u60f3\u7684\u6027\u80fd\u3002</p>"},{"location":"mlc/dlc-survey.html#444-discussion","title":"4.4.4. Discussion","text":"<p>backend \u8d1f\u8d23\u57fa\u4e8e low-level IR \u7684\u88f8\u673a\u4f18\u5316\u548c\u4ee3\u7801\u751f\u6210\u3002 \u5c3d\u7ba1\u540e\u7aef\u7684\u8bbe\u8ba1\u53ef\u80fd\u56e0\u5404\u79cd low-level IR \u800c\u4e0d\u540c\uff0c\u4f46\u5b83\u4eec\u7684\u4f18\u5316\u53ef\u4ee5\u5206\u4e3a\u786c\u4ef6\u7279\u5b9a\u7684\u4f18\u5316\uff1a\u81ea\u52a8\u8c03\u6574\u6280\u672f\u548c\u4f18\u5316\u7684\u5185\u6838\u5e93\u3002 \u8fd9\u4e9b\u4f18\u5316\u53ef\u4ee5\u5355\u72ec\u6267\u884c\u6216\u7ec4\u5408\u6267\u884c\uff0c\u4ee5\u901a\u8fc7\u5229\u7528\u786c\u4ef6/\u8f6f\u4ef6\u7279\u6027\u5b9e\u73b0\u66f4\u597d\u7684\u6570\u636e\u5c40\u90e8\u6027\u548c\u5e76\u884c\u5316\u3002 \u6700\u7ec8\uff0cDL \u6a21\u578b\u7684\u9ad8\u7ea7 IR \u88ab\u8f6c\u5316\u4e3a\u5728\u4e0d\u540c\u786c\u4ef6\u4e0a\u7684\u9ad8\u6548\u4ee3\u7801\u5b9e\u73b0\u3002</p>"},{"location":"mlc/dlc-survey.html#5-taxonomy-of-dl-compilers","title":"5. TAXONOMY OF DL COMPILERS","text":"<p>\u672c\u6b21\u8c03\u67e5\u4e2d\u7814\u7a76\u7684 DLC \u5305\u62ec TVM\u3001nGraph\u3001Tensor Comprehension (TC)\u3001Glow \u548c XLA\u3002 \u6211\u4eec\u9009\u62e9\u8fd9\u4e9b\u7f16\u8bd1\u5668\u662f\u56e0\u4e3a\u5b83\u4eec\u4f17\u6240\u5468\u77e5\u3001\u7ef4\u62a4\u826f\u597d\uff0c\u6700\u91cd\u8981\u7684\u662f\uff0c\u5b83\u4eec\u88ab\u5e7f\u6cdb\u4f7f\u7528\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u5de5\u4e1a\u754c\u548c\u5b66\u672f\u754c\u627e\u5230\u8db3\u591f\u7684\u8bba\u6587\u3001\u6587\u6863\u548c\u8ba8\u8bba\uff0c\u4ee5\u6df1\u5165\u7814\u7a76\u5b83\u4eec\u7684\u8bbe\u8ba1\u548c\u5b9e\u73b0\u3002 \u8868 1 \u4ece \u524d\u7aef\u3001 \u540e\u7aef\u3001 IR \u548c \u4f18\u5316 \u56db\u4e2a\u89d2\u5ea6\u8bf4\u660e\u4e86\u6240\u9009 DLC \u7684\u5206\u7c7b\uff0c\u8fd9\u4e0e\u672c\u6b21\u8c03\u67e5\u4e2d\u63cf\u8ff0\u7684\u5173\u952e\u7ec4\u4ef6\u76f8\u5bf9\u5e94\u3002</p> <p>\u5728\u8868 1 \u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u6bcf\u4e2a DL \u7f16\u8bd1\u5668\u7684\u7279\u6027\uff0c\u5305\u62ec\u524d\u7aef\u7c7b\u522b\u4e2d\u7684\u5f00\u53d1\u4eba\u5458\u3001\u7f16\u7a0b\u8bed\u8a00\u3001ONNX/\u6846\u67b6\u652f\u6301\u3001\u8bad\u7ec3\u652f\u6301\u548c\u91cf\u5316\u652f\u6301\uff0c\u4ee5\u53ca\u540e\u7aef\u7c7b\u522b\u4e2d\u7684\u7f16\u8bd1\u65b9\u6cd5\u548c\u652f\u6301\u7684\u8bbe\u5907\u3002 \u603b\u7ed3\u8fd9\u4e9b\u7279\u6027\u662f\u56e0\u4e3a\u5b83\u4eec\u5f3a\u70c8\u5f71\u54cd DL \u7f16\u8bd1\u5668\u5728\u7279\u5b9a\u573a\u666f\u4e2d\u7684\u4f7f\u7528\u3002 \u57fa\u4e8e\u8fd9\u4e9b\u7279\u6027\uff0c\u4ece\u4e1a\u8005\u6216\u7814\u7a76\u4eba\u5458\u53ef\u4ee5\u8f7b\u677e\u5730\u51b3\u5b9a\u4ed6\u4eec\u60f3\u8981\u4f7f\u7528\u54ea\u79cd DL \u7f16\u8bd1\u5668\u3002</p> <p>\u8868 1 \u548c\u56fe 2 \u53ef\u4ee5\u4f5c\u4e3a\u672c\u6b21\u8c03\u67e5\u7684\u7cfb\u7edf\u603b\u7ed3\u3002 \u901a\u8fc7\u5b83\u4eec\uff0c\u8bfb\u8005\u53ef\u4ee5\u8bc6\u522b\u6bcf\u4e2a\u7f16\u8bd1\u5668\u652f\u6301\u7684\u529f\u80fd\u4ee5\u53ca\u6bcf\u4e2a\u7f16\u8bd1\u5668\u7684\u5173\u952e\u7ec4\u4ef6\u3002 \u4ee5\u4e0b\u5404\u8282\u4ecb\u7ecd\u4e86\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002</p>"},{"location":"mlc/loop-opt.html","title":"\u7a0b\u5e8f\u4e2d\u5faa\u73af\u7684\u4f18\u5316","text":"<p>Ref:</p> <ul> <li>\u77e5\u4e4e-\u7f16\u8bd1\u5668\u9886\u57df\u7684\u591a\u9762\u4f53\u6a21\u578b\uff08Polyhderal Model)</li> <li>https://en.wikipedia.org/wiki/Polytope_model</li> </ul>"},{"location":"mlc/loop-opt.html#polyhedron-model","title":"Polyhedron Model","text":"<p>From Wiki:</p> <p>\u5d4c\u5957\u5faa\u73af\u7a0b\u5e8f\u662f\u53ef\u4ee5\u5e94\u7528\u591a\u9762\u4f53\u6a21\u578b\uff08\u4e5f\u79f0\u4e3a\u591a\u9762\u4f53\u65b9\u6cd5\uff09\u8fdb\u884c\u4f18\u5316\u7684\u5178\u578b\u4f8b\u5b50\u3002\u591a\u9762\u4f53\u65b9\u6cd5\u5c06\u5d4c\u5957\u5faa\u73af\u4e2d\u7684\u6bcf\u4e2a\u5faa\u73af\u8fed\u4ee3\u89c6\u4e3a\u79f0\u4e3a\u591a\u9762\u4f53\u7684\u6570\u5b66\u5bf9\u8c61\u5185\u7684\u683c\u70b9\uff0c\u6267\u884c\u4eff\u5c04\u53d8\u6362\u6216\u66f4\u4e00\u822c\u7684\u975e\u4eff\u5c04\u53d8\u6362\uff0c\u4f8b\u5982\u5728\u591a\u9762\u4f53\u4e0a tiling\uff0c\u7136\u540e\u5c06\u53d8\u6362\u540e\u7684\u591a\u9762\u4f53\u8f6c\u6362\u4e3a\u7b49\u6548\u4f46\u4f18\u5316\u7684\uff08\u53d6\u51b3\u4e8etargeted optimization goal\uff09\uff0c\u901a\u8fc7\u591a\u9762\u4f53\u626b\u63cf\u8fdb\u884c\u5faa\u73af\u5d4c\u5957\u3002</p>"},{"location":"mlc/loop-opt.html#_2","title":"\u4eff\u5c04\u53d8\u6362\u7406\u8bba\u6982\u8ff0","text":"<p>Ref: \u9f99\u4e66</p>"},{"location":"mlc/mlir-iree.html","title":"MLIR-IREE","text":"<p>https://github.com/openxla/iree </p>"},{"location":"mlc/mlir-iree.html#0-abstract","title":"0. Abstract","text":"<p>\u8fc7\u53bb\u5341\u5e74\u4e2d\uff0c\u6a21\u578b\u90e8\u7f72\u4e00\u76f4\u662f\u5de5\u4e1a\u754c\u548c\u5b66\u672f\u754c\u7684\u91cd\u8981\u8bfe\u9898\u3002 \u5927\u90e8\u5206\u5de5\u4f5c\u96c6\u4e2d\u5728\u5f00\u53d1\u7279\u5b9a\u5de5\u5177\u94fe\u4ee5\u652f\u6301\u52a0\u901f\u786c\u4ef6\u4e0a\u3002 \u672c\u6587\u4ecb\u7ecd IREE\uff0c\u662f\u4e00\u4e2a\u57fa\u4e8e MLIR \u7684\u7aef\u5230\u7aef\u7f16\u8bd1\u5668\u548c\u8fd0\u884c\u65f6\uff0c\u5176\u76ee\u6807\u662f\u7f29\u5c0f\u673a\u5668\u5b66\u4e60\u7a0b\u5e8f\u5360\u7528\u7a7a\u95f4\u4f7f\u5176\u80fd\u90e8\u7f72\u5230\u79fb\u52a8\u548c\u8fb9\u7f18\u8bbe\u5907\uff0c\u540c\u65f6\u4fdd\u6301\u6269\u5c55\u5230\u66f4\u5927\u90e8\u7f72\u76ee\u6807\u7684\u80fd\u529b\u3002 IREE \u901a\u8fc7\u4f7f\u7528 MLIR \u7f16\u8bd1\u5668\u57fa\u7840\u67b6\u6784\u9488\u5bf9\u5f02\u6784\u786c\u4ef6\u52a0\u901f\u5668\u8fdb\u884c\u4f18\u5316\uff0cMLIR \u63d0\u4f9b\u4e86\u5feb\u901f\u8bbe\u8ba1\u548c\u5b9e\u73b0\u591a\u7ea7 IR \u7684\u65b9\u6cd5\u3002 \u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u672c\u6587\u5173\u6ce8\u7684\u662f TinyIREE\uff0c\u5b83\u662f IREE \u4e2d\u7684\u4e00\u7ec4\u90e8\u7f72\u9009\u9879\uff0c\u53ef\u9002\u5e94\u5d4c\u5165\u5f0f\u7cfb\u7edf\u548c\u88f8\u673a\u5e73\u53f0\u4e2d\u6709\u9650\u7684\u5185\u5b58\u548c\u8ba1\u7b97\u8d44\u6e90\uff0c\u540c\u65f6\u8fd8\u5c55\u793a\u4e86 IREE \u4e3a\u4e0d\u540c ISA \u6269\u5c55\u751f\u6210\u5de5\u4f5c\u8d1f\u8f7d\u7684\u76f4\u89c2\u5de5\u4f5c\u6d41\u548c ABIs through LLVM.</p>"},{"location":"mlc/mlir-iree.html#5-conclusion","title":"5. CONCLUSION","text":"<p>\u6211\u4eec\u4ecb\u7ecd\u4e86 IREE\uff0c\u4e00\u79cd\u57fa\u4e8e compiler \u7684 ML \u6267\u884c\u6846\u67b6\uff0c\u5b83\u5145\u5206\u5229\u7528\u4e86 MLIR\uff0c\u4e14\u53ef\u9488\u5bf9\u4e0d\u540c\u76ee\u6807\u8bbe\u5907\u8f7b\u677e\u914d\u7f6e\u3002 \u6b64\u5916\uff0cTinyIREE \u9009\u9879\u53ef\u4ee5 \u590d\u7528 \u76f8\u540c\u7684\u7f16\u8bd1\u6d41\u7a0b\uff0c\u901a\u8fc7\u8c03\u6574 runtime \u4ee5\u964d\u4f4e\u5f00\u9500\u4ece\u800c\u9002\u5e94\u5d4c\u5165\u5f0f\u7cfb\u7edf\u3002 \u6211\u4eec\u8fd8\u5c55\u793a\u4e86 \u901a\u8fc7\u8c03\u6574 LLVM \u7f16\u8bd1\u6807\u5fd7\u652f\u6301\u4e0d\u540c CPU \u67b6\u6784\u548c ISA \u6269\u5c55\u7684\u80fd\u529b\u3002 \u56e0\u6b64\uff0c\u63d0\u51fa\u7684\u6846\u67b6\u53ef\u4ee5\u540c\u65f6\u9488\u5bf9\u591a\u4e2a\u76ee\u6807\u540e\u7aef\u8fdb\u884c\u4f18\u5316\uff0c\u540c\u65f6\u4fdd\u6301\u8db3\u591f\u7684\u5b9a\u5236\u7075\u6d3b\u6027\u3002</p>"},{"location":"mlc/mlir-iree.html#1-intro","title":"1. Intro","text":"<p>\u968f\u7740\u65b0\u6a21\u578b\u67b6\u6784\u548c\u66f4\u5927\u6570\u636e\u96c6\u7684\u51fa\u73b0\uff0c\u5bf9\u786c\u4ef6\u7684\u9700\u6c42\u4e5f\u5728\u589e\u52a0\u3002 \u8fd9\u52a0\u901f\u4e86 ML \u6a21\u578b\u8bad\u7ec3\u548c\u63a8\u7406\u7684\u65b0\u67b6\u6784\u7684\u5f00\u53d1\u3002 \u7136\u800c\uff0c\u8981\u5145\u5206\u5229\u7528\u6b64\u7c7b\u52a0\u901f\u786c\u4ef6\uff0c\u5f00\u53d1\u5de5\u5177\u94fe\u9700\u8981\u65b0\u7684\u90e8\u7f72\u548c\u7f16\u8bd1\u6d41\u7a0b\u3002 \u6b64\u5916\uff0c\u7531\u4e8e\u7cfb\u7edf\u8d44\u6e90\u548c\u529f\u7387\u9650\u5236\uff0c\u5c06\u6a21\u578b\u90e8\u7f72\u5230\u79fb\u52a8\u548c\u8fb9\u7f18\u8bbe\u5907\u65f6\u5fc5\u987b\u7279\u522b\u8003\u8651\u3002</p> <p>\u8be5\u884c\u4e1a\u7684\u5927\u90e8\u5206\u6295\u8d44\u90fd\u9488\u5bf9\u53ef\u6269\u5c55\u5230\u6700\u5f3a\u5927\u7684\u90e8\u7f72\u76ee\u6807\u7684\u7528\u4f8b\uff0c\u800c\u5728\u4f4e\u529f\u8017\u548c\u5d4c\u5165\u5f0f\u8bbe\u5907\u7684\u8868\u73b0\u5374\u5f88\u5dee\u3002 IREE\uff08Intermediate Representation Execution Environment\uff09\u901a\u8fc7\u8bbe\u8ba1\u4e00\u4e2a\u7edf\u4e00\u7684\u7f16\u8bd1\u5668\u548c\u8fd0\u884c\u65f6\u5806\u6808\u6765\u89e3\u51b3\u8fd9\u79cd\u4e0d\u5e73\u8861\uff0c\u5176\u76ee\u6807\u662f\u6700\u5c0f\u5316\u7a7a\u95f4\u5360\u7528\uff0c\u540c\u65f6\u4fdd\u7559\u5176\u6269\u5c55\u5230\u66f4\u5927\u76ee\u6807\u7684\u80fd\u529b\uff08\u5e76\u96c6\u6210\u66f4\u9ad8\u7ea7\u7684\u5206\u5e03\u5f0f\u8fd0\u884c\u65f6\uff09\u3002 \u8fd9\u79cd\u5bf9\u6a21\u578b\u53ef\u79fb\u690d\u6027\u7684\u5173\u6ce8\u4fc3\u4f7f IREE \u6709\u6548\u5730\u5c06\u88f8\u673a/\u5d4c\u5165\u5f0f CPU \u548c\u5fae\u63a7\u5236\u5668\u4f5c\u4e3a\u76ee\u6807\u3002 \u672c\u6587\u4ecb\u7ecd\u4e86\u5982\u4f55\u5b9e\u73b0\u8fd9\u79cd\u53ef\u79fb\u690d\u6027\u3002</p> <p>\u4f20\u7edf\u4e0a\uff0cML \u63a8\u7406\u6846\u67b6(\u4ee5\u5fae\u63a7\u5236\u5668 \uff08Microcontrollers\uff09 \u4e3a\u76ee\u6807) \u4e3b\u8981\u662f\u7531\u57fa\u4e8e\u5185\u6838\u8fd0\u884c\u65f6\u5b8c\u6210\u7684\uff0c\u8fd9\u4e9b\u8fd0\u884c\u65f6\u9488\u5bf9\u4e00\u5c0f\u7ec4\u5e38\u7528\u7b97\u5b50\u8fdb\u884c\u624b\u52a8\u4f18\u5316\u3002 \u4e00\u79cd\u7b80\u5316\u5c06\u6a21\u578b\u90e8\u7f72\u5230\u5fae\u63a7\u5236\u5668\u7684\u65b9\u6cd5\u662f TensorFlow Lite for Microcontrollers (TFLM)\uff0c\u8fd9\u662f\u4e00\u79cd\u4e13\u95e8\u8bbe\u8ba1\u7528\u4e8e\u652f\u6301\u5fae\u63a7\u5236\u5668\u4e0a\u7684\u6a21\u578b\u6267\u884c\u7684\u6846\u67b6 [1]\u3002 \u5b83\u4f7f\u7528\u652f\u6301 TensorFlow \u7b97\u5b50\u5b50\u96c6\u7684\u5c0f\u578b\u8fd0\u884c\u65f6\u5e93\uff08\u5bf9\u4e8e Arm Cortex-M3 \u7ea6\u4e3a 16 kB\uff09\uff0c\u5177\u6709\u7279\u5b9a\u4e8e\u786c\u4ef6\u7684\u9ad8\u7ea7\u7b97\u5b50\u5185\u6838\u5b9e\u73b0\u3002 \u56fe\u4f18\u5316\u4ecd\u7136\u5229\u7528 TensorFlow Lite \u7f16\u8bd1\u6d41\u7a0b\uff0c\u5e76\u5728\u7b97\u5b50\u7ea7\u522b\u8fdb\u884c\u4f18\u5316\u3002</p> <p>\u5c3d\u7ba1 TFLM \u662f\u4e00\u4e2a\u5177\u6709\u6709\u9650\u786c\u4ef6\u7279\u5b9a\u5185\u6838\u7684\u8fd0\u884c\u65f6\u5e93\uff0c\u4f46\u57fa\u4e8e\u7f16\u8bd1\u5668\u7684\u65b9\u6cd5\u6700\u8fd1\u4e5f\u5df2\u5e94\u7528\u4e8e\u52a0\u901f\u5668\u548c\u5d4c\u5165\u5f0f\u7cfb\u7edf\u3002 \u5176\u4e2d\u4e00\u4e2a\u7f16\u8bd1\u5668\u662f Glow [2]\uff0c\u5b83\u4f7f\u7528\u4e24\u9636\u6bb5\u4e2d\u95f4\u8868\u793a (IR) \u6765\u964d\u4f4e\u795e\u7ecf\u7f51\u7edc\u56fe\u3002 \u4f7f\u7528\u9ad8\u7ea7\u4e2d\u95f4\u8868\u793a\u6765\u5e94\u7528\u7279\u5b9a\u9886\u57df\u7684\u4f18\u5316\u3002 \u8f83\u4f4e\u7ea7\u522b\u7684 IR \u5141\u8bb8\u7f16\u8bd1\u5668\u5e94\u7528\u4e0e\u5185\u5b58\u76f8\u5173\u7684\u4f18\u5316\u3002 \u8fd9\u4e9b\u4f18\u5316\u5305\u62ec\u6307\u4ee4\u8c03\u5ea6\u3001\u9759\u6001\u5185\u5b58\u5206\u914d\u548c\u590d\u5236\u6d88\u9664\u3002</p> <p>\u53e6\u4e00\u4e2a\u7f16\u8bd1\u5668\u662f Apache TVM [3]\uff0c\u5b83\u5728\u5404\u79cd\u4e2d\u95f4\u8868\u793a\u4e2d\u6267\u884c\u9ad8\u7ea7\u56fe\u91cd\u65b0\u914d\u7f6e\u548c\u4f4e\u7ea7\u64cd\u4f5c\u4f18\u5316\u3002 \u867d\u7136 TVM \u9762\u5411CPU\u3001GPU\u3001DSP\u7b49\u5404\u79cd\u8bbe\u5907\u540e\u7aef\uff0c\u4f46\u5bf9\u4e8e\u88f8\u673a\u5fae\u63a7\u5236\u5668\uff0c\u9700\u8981 MicroTVM \u6269\u5c55\u6765\u652f\u6301\u6a21\u578b\u6267\u884c\u8c03\u5ea6\u548c\u5185\u5b58\u7ba1\u7406\uff0c\u4ee5\u5f25\u8865\u64cd\u4f5c\u7cfb\u7edf\u7684\u7f3a\u5931\u3002</p> <p>\u8fd9\u8ba9\u6211\u4eec\u4e86\u89e3\u4e86\u6211\u4eec\u5982\u4f55\u901a\u8fc7 IREE \u5e94\u5bf9\u8fd9\u4e00\u6311\u6218\u3002 IREE \u662f\u4e00\u4e2a\u7aef\u5230\u7aef\u7684\u7f16\u8bd1\u5668\u548c\u8fd0\u884c\u65f6\u6846\u67b6\uff0c\u7528\u4e8e\u57fa\u4e8e MLIR \u7f16\u8bd1\u5668\u57fa\u7840\u8bbe\u65bd [4] \u7684\u6a21\u578b\u6267\u884c\u3002 \u5b83\u9075\u5faa\u57fa\u4e8e\u7f16\u8bd1\u5668\u7684\u65b9\u6cd5\uff0c\u5c06 ML \u6a21\u578b\u8f6c\u6362\u4e3a\u4e2d\u95f4\u8868\u793a\uff0c\u5141\u8bb8\u5206\u6790\u548c\u4f18\u5316 ML \u6a21\u578b\uff0c\u540c\u65f6\u9488\u5bf9\u5f02\u6784\u786c\u4ef6\u52a0\u901f\u5668[5] \u751f\u6210\u4ee3\u7801 \u3002 \u5982 \u56fe 1 \u6240\u793a\uff0cIREE \u53ef\u4ee5\u5c06\u5404\u79cd\u6a21\u578b\u8868\u793a\u4f5c\u4e3a\u8f93\u5165\uff0c\u5e76\u4e3a\u4e0d\u540c\u7684\u786c\u4ef6\u76ee\u6807\u751f\u6210\u53ef\u6267\u884c\u683c\u5f0f\u3002</p> <p>IREE \u5c06 ML \u6a21\u578b\u89c6\u4e3a\u53e6\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u7528\u5404\u79cd MLIR \u65b9\u8a00\u8868\u793a\u5b83\uff0c\u5e76\u6700\u7ec8\u751f\u6210\u53ef\u4ee5\u5728\u76ee\u6807\u67b6\u6784\u4e0a\u8fd0\u884c\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002 \u4e00\u79cd MLIR dialect \u53ef\u4ee5\u8ba4\u4e3a\u662f\u903b\u8f91\u4e0a\u7684\u4e00\u5c42 IR\u3002 \u8fd9\u79cd\u901a\u8fc7\u4e00\u7cfb\u5217\u53ef\u7ec4\u5408 IR [5] \u8fdb\u884c\u591a\u9636\u6bb5\u7f16\u8bd1\u662f\u4e00\u4e2a\u5173\u952e\u7684\u533a\u522b\u56e0\u7d20\uff0c\u56e0\u4e3a\u5b83\u4f7f\u6211\u4eec\u80fd\u591f\u66f4\u6709\u6548\u5730\u91cd\u65b0\u5b9a\u4f4d\u548c\u6982\u62ec\u7528\u4e8e\u9488\u5bf9\u66f4\u5927\u89c4\u6a21\u90e8\u4ef6\u7684\u65b9\u6cd5\u548c\u7ec4\u4ef6\uff0c\u4ee5\u5b9e\u73b0\u4e13\u95e8\u7684\u3001\u6df1\u5ea6\u5d4c\u5165\u7684\u7528\u9014\u3002 \u8fd9\u79cd\u6cdb\u5316\u5728\u7ecf\u5178\u7684\u3001\u57fa\u4e8e\u53d1\u5c04\u5668\u7684\u4e24\u9636\u6bb5\u7f16\u8bd1\u5668\u4e2d\u66f4\u96be\u5b9e\u73b0\uff0c\u5e76\u4e14\u5728 TFLM \u7b49\u6267\u884c\u5668\u4e2d\u6839\u672c\u4e0d\u53ef\u80fd\u5b9e\u73b0\u3002</p> <p>IREE \u65e8\u5728\u9488\u5bf9\u5404\u79cd\u8fb9\u7f18\u8bbe\u5907\u548c\u52a0\u901f\u5668\uff0c\u5305\u62ec CPU\u3001GPU \u548c\u5404\u79cd ML \u52a0\u901f\u5668\u3002 \u56e0\u6b64\uff0c\u79fb\u52a8\u90e8\u7f72\u7684\u5404\u4e2a\u65b9\u9762\uff0c\u5982\u5c0f\u4e8c\u8fdb\u5236\u6587\u4ef6\u5927\u5c0f\u3001\u4e0e\u5e94\u7528\u7a0b\u5e8f\u7684\u4e92\u64cd\u4f5c\u6027\u548c\u53ef\u79fb\u690d\u6027\uff0c\u90fd\u662f\u5934\u7b49\u5927\u4e8b\u3002 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u91cd\u70b9\u4ecb\u7ecd TinyIREE\uff0c\u5b83\u662f IREE \u9009\u9879\u7684\u5b50\u96c6\uff0c\u53ef\u751f\u6210\u7d27\u51d1\u7684\u5de5\u4f5c\u8d1f\u8f7d\u548c\u8fd0\u884c\u65f6\u5e93\uff0c\u8be5\u5e93\u9488\u5bf9\u6ca1\u6709\u64cd\u4f5c\u7cfb\u7edf\u7684\u5d4c\u5165\u5f0f\u7cfb\u7edf\u8fdb\u884c\u4e86\u4f18\u5316\u3002 \u8fd9\u4e9b\u9009\u9879\u53ef\u4ee5\u65e0\u7f1d\u652f\u6301\u4e0d\u540c\u7684 CPU \u67b6\u6784\u548c ISA \u6269\u5c55\uff0c\u540c\u65f6\u8fd8\u63d0\u4f9b\u4e00\u4e2a\u63a5\u53e3\u6765\u652f\u6301\u5d4c\u5165\u5f0f ML \u52a0\u901f\u5668\u3002 \u5728\u56fe 1 \u4e2d\uff0cTinyIREE \u9009\u9879\u662f\u5f69\u8272\u7684\uff0c\u800c\u4e00\u822c\u7684 IREE \u7f16\u8bd1\u548c\u90e8\u7f72\u9009\u9879\u662f\u7070\u8272\u7684\u3002</p> <p>\u5728\u4ee5\u4e0b\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd IREE \u7684\u7f16\u8bd1\u6d41\u7a0b\u5e76\u89e3\u91ca\u4e00\u4e9b TinyIREE \u90e8\u7f72\u9009\u9879\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u5728\u7ed9\u51fa\u7ed3\u8bba\u4e4b\u524d\u5c55\u793a\u4e86\u5df2\u7f16\u8bd1\u7684 MobileNet \u5355\u6b21\u68c0\u6d4b\u5668 (SSD) \u6a21\u578b\u7684\u7ed3\u679c\u3002</p>"},{"location":"mlc/mlir-iree.html#2-iree-compilation-flow","title":"2. IREE COMPILATION FLOW \ud83d\udca1","text":"<p>IREE \u7684\u7f16\u8bd1\u6d41\u7a0b\u4f7f\u7528 MLIR \u7684\u65b9\u6cd5\uff0c\u5c06 ML \u7a0b\u5e8f\u9010\u6b65\u964d\u4f4e\u4e3a\u76ee\u6807\u786c\u4ef6\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002 MLIR \u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\u7684\u4e3b\u8981\u5de5\u5177\u662f \u65b9\u8a00 dialect\u3002 MLIR \u4e2d\u7684\u65b9\u8a00\u662f operations \u548c associated types \u7684\u96c6\u5408\u3002 \u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u65b9\u8a00\u5728\u4e0d\u540c\u7684\u62bd\u8c61\u5c42\u6b21\u4e0a\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u5efa\u6a21\u3002</p> <p>\u4f8b\u5982\uff0c\u56fe 1 \u4e2d\u7684 IREE importer \u663e\u793a\u4e86 IREE \u4e2d\u7528\u4e8e\u5c06 ML \u7a0b\u5e8f\u8f6c\u6362\u4e3a\u673a\u5668\u53ef\u6267\u884c\u4ee3\u7801\u7684\u4e00\u4e9b\u4e0d\u540c\u65b9\u8a00\u3002</p> <ul> <li>TOSA\uff08Tensor Operator Set Architecture\uff09[6] / MHLO\uff08Meta High Level Optimizer\uff09dialects \u5728\u5f20\u91cf\u8fd0\u7b97\u7ea7\u522b\u5bf9 ML \u7a0b\u5e8f\u8fdb\u884c\u5efa\u6a21\u3002</li> <li>Linalg \u65b9\u8a00\u4ee5\u7b80\u6d01\u3001\u6613\u4e8e\u64cd\u4f5c\u7684\u65b9\u5f0f\u8868\u793a\u5b8c\u7f8e\u5d4c\u5957\u5faa\u73af\uff0c\u4f7f\u5f97\u5b9e\u73b0\u878d\u5408\u3001\u5e73\u94fa\u3001\u5faa\u73af\u4ea4\u6362\u7b49\u8f6c\u6362\u53d8\u5f97\u5bb9\u6613\u3002</li> <li>Vector \u65b9\u8a00 \u5c06\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\u5efa\u6a21\u6210\u865a\u62df\u5411\u91cf\u8fd0\u7b97\u3002</li> <li>\u6700\u540e\uff0cLLVM \u65b9\u8a00\u662f\u4e00\u79cd leaf dialect\uff0c\u5b83\u5141\u8bb8\u5c06 MLIR \u7a0b\u5e8f\u7ffb\u8bd1\u6210 LLVM IR\u3002 </li> </ul> <p>\u8fd9\u4e9b\u65b9\u8a00\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u662f\u4f7f\u7528\u901a\u7528\u57fa\u7840\u7ed3\u6784\u5b9a\u4e49\u7684\uff0c\u6240\u4ee5\u5728\u6bcf\u4e2a\u7ea7\u522b\u4e0a\uff0c\u90fd\u53ef\u4ee5\u5e94\u7528\u901a\u7528\u7684\u7f16\u8bd1\u5668\u4f18\u5316\uff0c\u5982\u516c\u5171\u5b50\u8868\u8fbe\u5f0f\u6d88\u9664 (CSE)\u3001\u6b7b\u4ee3\u7801\u6d88\u9664 (DCE) \u7b49\u3002\u6bcf\u4e2a\u65b9\u8a00\u4e5f\u53ef\u4ee5\u5e94\u7528\u81ea\u5b9a\u4e49\u4f18\u5316 \u4f7f\u7528\u8be5\u65b9\u8a00\u4e2d\u7684\u64cd\u4f5c\u6355\u83b7\u7684\u8bed\u4e49\u4fe1\u606f\u3002 \u4f8b\u5982\uff0c\u5728 TOSA \u65b9\u8a00\u4e2d\uff0c\u4eba\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8bc6\u522b 1\u00d71 \u4e8c\u7ef4\u5377\u79ef\u8fd0\u7b97\u5e76\u5c06\u5b83\u4eec\u8f6c\u6362\u4e3a\u77e9\u9635\u4e58\u6cd5\u8fd0\u7b97\uff0c\u7136\u540e\u53ef\u4ee5\u66f4\u6709\u6548\u5730\u6267\u884c\u3002 \u4ece\u66f4\u9ad8\u7ea7\u522b\u8868\u793a\uff08\u5982 TOSA/MHLO\uff09\u7684\u65b9\u8a00\u901a\u8fc7\u4e2d\u95f4\u65b9\u8a00\u8f6c\u6362\u4e3a\u53ef\u6267\u884c\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u8fc7\u7a0b\u2014\u2014\u88ab\u79f0\u4e3a progressive lowering \u3002 \u672c\u8282\u7684\u5176\u4f59\u90e8\u5206\u6982\u8ff0\u4e86 IREE importer \u652f\u6301\u7684\u6bcf\u79cd\u65b9\u8a00\u7684\u7a0b\u5e8f\u8868\u793a\u3002</p> <p>TOSA \u548c MHLO \u7b49\u524d\u7aef\u65b9\u8a00\u4f7f\u7528\u52a0\u6cd5\u3001\u5377\u79ef\u3001\u70b9\u79ef\u7b49\u64cd\u4f5c\u8868\u793a\u7a0b\u5e8f\u3002 \u4f8b\u5982\uff0c\u6e05\u5355 1 \u663e\u793a\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u5e8f\u5217\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2a\u70b9\u79ef\uff0c\u7136\u540e\u662f TOSA \u65b9\u8a00\u4e2d\u7684\u504f\u7f6e\u52a0\u6cd5\u3002 \u5728 MLIR \u5185\u7f6e\u7c7b\u578b Tensor \u4e2d\u4f7f\u7528 <code>?</code> \u8868\u793a\u52a8\u6001\u7ef4\u5ea6\uff08\u5373\u5728\u7f16\u8bd1\u65f6\u672a\u77e5\u7684\u7ef4\u5ea6\uff09\u3002 \u56e0\u6b64\uff0cMLIR \u5bf9\u8868\u793a\u52a8\u6001\u5f62\u72b6\u7684\u8ba1\u7b97\u63d0\u4f9b\u4e86\u4e00\u6d41\u7684\u652f\u6301\u3002</p> <p>\u7136\u540e\u5c06\u7a0b\u5e8f\u964d\u4f4e\u5230 Linalg \u65b9\u8a00\u3002 \u5728\u8fd9\u4e2a\u7ea7\u522b\uff0c\u64cd\u4f5c\u88ab\u8868\u793a\u4e3a\u5b8c\u7f8e\u5d4c\u5957\u5faa\u73af\u8ba1\u7b97\uff0c\u6700\u5185\u5c42\u5faa\u73af\u7684\u4e3b\u4f53\u6267\u884c\u6807\u91cf\u64cd\u4f5c\u3002 \u8fd9\u79cd\u8868\u793a\u65e8\u5728\u66f4\u8f7b\u677e\u5730\u5e94\u7528\u4f20\u7edf\u7684\u5faa\u73af\u8f6c\u6362\uff0c\u5982\u5faa\u73af\u878d\u5408\u3001\u5faa\u73af\u5e73\u94fa\u548c\u5faa\u73af\u4ea4\u6362\u3002 \u8fd9\u79cd\u5efa\u6a21\u7684\u7075\u611f\u6765\u81ea\u591a\u9762\u4f53\u7f16\u8bd1\uff0c\u5176\u4f7f\u7528\u6b63\u4ea4\u7a7a\u95f4\u8868\u793a\u8ba1\u7b97\uff0c\u8ba1\u7b97\u7684\u6bcf\u4e2a\u5faa\u73af\u90fd\u6709\u4e00\u4e2a\u8f74\u3002 \u8fd9\u4e2a\u6b63\u4ea4\u7a7a\u95f4\u88ab\u79f0\u4e3a\u8ba1\u7b97\u7684\u8fed\u4ee3\u7a7a\u95f4\u3002 \u5faa\u73af\u4e2d\u5f52\u7eb3\u53d8\u91cf\u7684\u503c\u8868\u793a\u4e3a\u6cbf\u76f8\u5e94\u8f74\u7684\u70b9\u3002 \u8fd9\u4e2a\u6b63\u4ea4\u7a7a\u95f4\u4e2d\u7684\u6bcf\u4e2a\u70b9\u90fd\u4ee3\u8868\u5728\u6700\u5185\u5c42\u5faa\u73af\u4e2d\u6267\u884c\u7684\u6807\u91cf\u64cd\u4f5c\u5e8f\u5217\u3002</p> <p>\u6e05\u5355 2 \u663e\u793a\u4e86\u5f62\u5f0f\u4e3a \\(D_{ij} = C_{ij} + A_{ik} \\times B_{kj}\\) \u7684 GEMM \u8fd0\u7b97\u7684 Linalg \u65b9\u8a00\u8868\u793a\u3002 \u5faa\u73af\u6570\u7531\u5217\u8868\u8fed\u4ee3\u5668\u7c7b\u578b\u4e2d\u7684\u6761\u76ee\u6570\u6355\u83b7\u3002 \u5faa\u73af\u8fed\u4ee3\u4e4b\u95f4\u7684\u6570\u636e\u4f9d\u8d56\u88ab\u6307\u5b9a\u4e3a\u5e76\u884c\uff08\u65e0\u4f9d\u8d56\uff09\u6216\u5f52\u7ea6\uff08\u5f52\u7ea6\u578b\u4f9d\u8d56\uff09\u3002</p> <p></p> <p>\u4e0e\u8fed\u4ee3\u7a7a\u95f4\u7c7b\u4f3c\uff0c\u6bcf\u4e2a\u64cd\u4f5c\u6570\u4e5f\u7531\u4e0e\u64cd\u4f5c\u6570\u76f8\u540c\u7ef4\u6570\u7684\u6807\u51c6\u6b63\u4ea4\u7a7a\u95f4\u8868\u793a\u3002 \u8be5\u7a7a\u95f4\u79f0\u4e3a\u64cd\u4f5c\u6570\u7684\u6570\u636e\u7a7a\u95f4\u3002 \u4f8b\u5982\uff0c\u5728 GEMM \u64cd\u4f5c\u4e2d\uff0c\u6240\u6709\u64cd\u4f5c\u6570\u90fd\u7531 2D \u6570\u636e\u7a7a\u95f4\u8868\u793a\u3002 \u7d22\u5f15\u6620\u5c04\u4e2d\u7684\u6620\u5c04\u6355\u83b7\u6bcf\u4e2a\u64cd\u4f5c\u6570\u7684\u6570\u636e\u8bbf\u95ee\u6a21\u5f0f\u3002 \u5728\u6bcf\u4e2a\u6620\u5c04\u4e2d\uff0c\u57df\u8868\u793a\u8fed\u4ee3\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u70b9\uff0c\u8303\u56f4\u8868\u793a\u6620\u5c04\u8bbf\u95ee\u7684\u64cd\u4f5c\u6570\u6570\u636e\u7a7a\u95f4\u4e2d\u7684\u70b9\u3002</p> <p>region of the operation \uff08<code>{</code> and <code>}</code> \u4e4b\u95f4\u7684\u64cd\u4f5c\u5e8f\u5217\uff09\u8868\u793a\u5728\u8fed\u4ee3\u7a7a\u95f4\u4e2d\u7684\u6bcf\u4e2a\u70b9\u6267\u884c\u7684\u8ba1\u7b97\u3002 \u6bcf\u4e2a Linalg \u64cd\u4f5c\u90fd\u6709\u4e00\u4e2a\u5e26\u6709\u5355\u4e2a\u57fa\u672c\u5757\u7684\u533a\u57df\uff0c\u5176\u53c2\u6570\u8868\u793a\u6807\u91cf\u503c\uff0c\u8fd9\u4e9b\u503c\u662f\u4f7f\u7528\u7d22\u5f15\u6620\u5c04\u4ece\u64cd\u4f5c\u6570\u4e2d\u83b7\u5f97\u7684\u3002 \u4ea7\u751f\u7684\u503c\u662f\u8fed\u4ee3\u7a7a\u95f4\u4e2d\u8be5\u70b9\u7684\u8ba1\u7b97\u7ed3\u679c\u3002 \u4f8b\u5982\uff0c\u5728\u6e05\u5355 2 \u4e2d\uff0c\u8fed\u4ee3\u7a7a\u95f4\u4e2d\u7684\u6bcf\u4e2a\u70b9\u90fd\u6267\u884c\u4e58\u52a0\u8fd0\u7b97\u3002</p> <p>TOSA/MHLO \u7684\u6240\u6709\u5f20\u91cf\u8fd0\u7b97\u90fd\u53ef\u4ee5\u964d\u7ea7\u4e3a Linalg \u65b9\u8a00\u7684 <code>linalg.generic</code> \u8fd0\u7b97\u3002 \u901a\u8fc7\u4ec5\u4f7f\u7528\u8fed\u4ee3\u5668\u7c7b\u578b\u548c\u7d22\u5f15\u6620\u5c04\u4e2d\u7684\u4fe1\u606f\uff0c\u53ef\u4ee5\u5c06\u4e24\u4e2a\u5177\u6709\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u5173\u7cfb\u7684\u6b64\u7c7b\u64cd\u4f5c\u878d\u5408\u5230\u53e6\u4e00\u4e2a <code>linalg.generic</code> \u64cd\u4f5c\u4e2d\u3002 \u8fd9\u79cd\u878d\u5408\u5305\u542b\u6240\u6709\u9010\u5143\u7d20\u878d\u5408\u4f18\u5316\uff08\u5728 XLA \u4e2d\u4e5f\u79f0\u4e3a\u5faa\u73af\u878d\u5408\uff09\uff0c\u800c\u65e0\u9700\u63a8\u65ad\u6bcf\u4e2a\u64cd\u4f5c\u6267\u884c\u7684\u5b9e\u9645\u8ba1\u7b97\u3002 \u4f8b\u5982\uff0c\u5728 TOSA/MHLO \u7ea7\u522b\u8fdb\u884c\u76f8\u540c\u7684\u878d\u5408\u4f1a\u5bfc\u81f4\u878d\u5408\u53ef\u80fd\u6027\u6570\u91cf\u7684\u7ec4\u5408\u7206\u70b8\u3002 \u8bf7\u6ce8\u610f\uff0c\u53ef\u4ee5\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u878d\u5408\u7684\u64cd\u4f5c\u7c7b\u522b\u5927\u4e8e\u7eaf\u5143\u7d20\u64cd\u4f5c\uff0c\u5305\u62ec\u6392\u5217\u548c\u5e7f\u64ad\u3002</p> <p>Linalg \u65b9\u8a00\u4e2d\u7684\u64cd\u4f5c\u4e5f\u53ef\u4ee5\u4ec5\u4f7f\u7528\u8fed\u4ee3\u5668\u7c7b\u578b\u548c\u7d22\u5f15\u6620\u5c04\u63d0\u4f9b\u7684\u4fe1\u606f\u6765\u5e73\u94fa\u3002 \u8fd9\u79cd\u8f6c\u6362\u5141\u8bb8\u5c06\u6bcf\u4e00\u5c42\u7684\u8ba1\u7b97\u62c6\u5206\u4e3a\u7c7b\u4f3c\u8ba1\u7b97\u7684\u8f83\u5c0f\u5757\u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a GEMM \u64cd\u4f5c\u53ef\u4ee5\u88ab\u5206\u5272\u6210\u51e0\u4e2a\u66f4\u5c0f\u7684 GEMM \u64cd\u4f5c\u3002 \u8fd9\u4e9b\u8f83\u5c0f\u7684\u56fe\u5757\u53ef\u4ee5\u5e76\u884c\u8ba1\u7b97\uff0c\u56e0\u6b64\u53ef\u4ee5\u5206\u914d\u7ed9\u4e0d\u540c\u7684\u7ebf\u7a0b\u3002 \u7136\u540e\uff0c\u6bcf\u4e2a tile \u8868\u793a\u7684\u8ba1\u7b97\u88ab\u5c01\u88c5\u5728\u4e00\u4e2a\u8c03\u5ea6\u533a\u57df\u5185\u3002 \u6bcf\u4e2a\u8c03\u5ea6\u533a\u57df\u90fd\u5305\u542b\u5fc5\u987b\u4ee5\u539f\u5b50\u65b9\u5f0f\u5728\u8bbe\u5907\u4e0a\u6267\u884c\u7684\u4ee3\u7801\u3002 \u6b64\u65f6\uff0c\u6bcf\u4e2a\u8ba1\u7b97\u88ab\u5206\u6210\u4e24\u90e8\u5206\u6267\u884c\uff1a\u5206\u6d3e\u533a\u57df\uff08\u5206\u5757\u8ba1\u7b97\uff09\u548c\u6267\u884c\u4e3b\u673a\u7aef\u8ba1\u7b97\u7684\u4ee3\u7801\uff08VM \u547d\u4ee4\uff09\uff0c\u5b83\u6307\u5b9a\u4e86\u5206\u6d3e\u533a\u57df\u7684\u6267\u884c\u987a\u5e8f\u3002 \u7136\u540e\u4f7f\u7528\u878d\u5408\u3001\u5faa\u73af\u4ea4\u6362\u7b49\u8fdb\u4e00\u6b65\u8f6c\u6362\u8c03\u5ea6\u533a\u57df\u5185\u7684\u4ee3\u7801\uff0c\u4ee5\u5b9e\u73b0\u66f4\u597d\u7684\u7f13\u5b58\u5c40\u90e8\u6027\u548c\u6570\u636e\u8bbf\u95ee\u6a21\u5f0f\u3002</p> <p>\u6700\u540e\uff0c\u4ee3\u7801\u88ab\u964d\u4f4e\u5230 Vector \u65b9\u8a00\u4e2d\u3002 \u8fd9\u79cd\u65b9\u8a00\u8868\u793a\u76ee\u6807\u786c\u4ef6\u4e0a\u53ef\u7528\u7684\u9ad8\u7ea7\u3001\u53ef\u91cd\u5b9a\u5411\u7684\u77e2\u91cf\u6307\u4ee4\u3002 \u8fd9\u79cd\u65b9\u8a00\u4e2d\u7684\u8f6c\u6362\u5141\u8bb8\u751f\u6210\u7684\u4ee3\u7801\u4f7f\u7528\u76ee\u6807\u4f53\u7cfb\u7ed3\u6784\u4e0a\u53ef\u7528\u7684\u9ad8\u6548\u77e2\u91cf\u8bfb/\u5199\u548c\u7279\u6b8a\u56fa\u5b9a\u529f\u80fd\u5355\u5143\u3002</p> <p>\u8bbe\u5907\u7aef\u7f16\u8bd1\u7684\u6700\u540e\u4e00\u6b65\u662f\u5c06\u7a0b\u5e8f\u964d\u4f4e\u4e3a LLVM \u65b9\u8a00\uff0c\u8fd9\u5141\u8bb8\u7a0b\u5e8f\u673a\u68b0\u5730\u8f6c\u6362\u4e3a LLVM IR\u3002 \u7136\u540e LLVM \u7f16\u8bd1\u5806\u6808\u53ef\u4ee5\u4e3a\u76ee\u6807\u67b6\u6784\u751f\u6210\u4e8c\u8fdb\u5236\u4ee3\u7801\u3002 LLVM target \u6807\u5fd7\u53ef\u7528\u4e8e\u9009\u62e9\u8981\u4f7f\u7528\u7684 CPU \u67b6\u6784\u3001ABI \u548c ISA \u6269\u5c55\u3002 \u4f8b\u5982\uff0c\u8981\u4e3a x86-64 CPU \u6784\u5efa module\uff0c\u5e94\u7528\u4ee5\u4e0b\u6807\u5fd7\uff1a</p> <p>\u524d\u9762\u63d0\u5230\u7684\u4f18\u5316\u8fc7\u7a0b\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5e94\u7528\u4e8e\u5176\u4ed6\u975e ML \u7279\u5b9a\u7684\u7ebf\u6027\u4ee3\u6570\u8fd0\u7b97\uff0c\u53ea\u8981\u8fd9\u4e9b\u8fd0\u7b97\u91c7\u7528\u9002\u5f53\u7684\u683c\u5f0f\u5373\u53ef\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0cIREE \u8fd8\u53ef\u4ee5\u5c06\u6267\u884c\u8f93\u5165\u9884\u5904\u7406\u548c\u8f93\u51fa\u540e\u5904\u7406\u7684\u64cd\u4f5c\u4f5c\u4e3a\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\u8fdb\u884c\u4f18\u5316\u3002 \u4f8b\u5982\uff0c\u89c6\u89c9 ML \u7a0b\u5e8f\u901a\u5e38\u4f1a\u6267\u884c\u989c\u8272\u7a7a\u95f4\u8f6c\u6362\u6216\u56fe\u50cf\u6570\u636e\u6d41\u7684\u56fe\u50cf\u5927\u5c0f\u8c03\u6574\uff0c\u5e76\u4e14\u8fd9\u4e9b\u64cd\u4f5c\u53ef\u4ee5\u901a\u8fc7\u9075\u5faa\u76f8\u540c\u7684\u7f16\u8bd1\u6d41\u7a0b\u5728\u7a0b\u5e8f\u4e2d\u878d\u5408\u3002</p>"},{"location":"mlc/mlir-iree.html#3-tinyiree-deployment-options","title":"3. TINYIREE DEPLOYMENT OPTIONS","text":"<p>\u4e0a\u8ff0\u7f16\u8bd1\u6d41\u7a0b\u7684\u8f93\u51fa\u662f\u4e00\u4e2a IREE module\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u6bb5\u7528\u4e8e\u63a7\u5236\u7f13\u51b2\u533a\u8bbe\u7f6e\u7684 VM commands \u548c\u4e00\u7ec4\u4f5c\u4e3a\u5de5\u4f5c\u8d1f\u8f7d\u7684\u8c03\u5ea6\u533a\u57df\u3002 \u8fd9\u4e9b\u5de5\u4f5c\u8d1f\u8f7d\u5305\u542b\u53ef\u4ee5 \u5206\u53d1 \u5230\u5404\u4e2a\u76ee\u6807\u8bbe\u5907\u7684 ML \u7a0b\u5e8f\u3002 \u5982\u56fe 1 \u7684\u5e95\u90e8\u6240\u793a\uff0c\u5f53\u4ee5\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e3a\u76ee\u6807\u65f6\uff0c\u7528\u6237\u9700\u8981\u6784\u5efa\u4e00\u4e2a IREE \u8fd0\u884c\u65f6\u5e94\u7528\u7a0b\u5e8f\uff0c\u5176\u4e2d\u5305\u62ec\u7528\u4e8e\u914d\u7f6e VM \u8bbe\u7f6e\u7684 IREE \u8fd0\u884c\u65f6\u5e93\u3001\u5de5\u4f5c\u8d1f\u8f7d\u52a0\u8f7d\u5668\u3001\u5de5\u4f5c\u8d1f\u8f7d\u8c03\u5ea6\u5668\u3002 \u540e\u4e24\u8005\u88ab\u5b9a\u4e49\u4e3a\u8bbe\u5907\u786c\u4ef6\u62bd\u8c61\u5c42 (HAL) \u9a71\u52a8\u7a0b\u5e8f\u3002</p> <p>\u5728\u7f16\u8bd1\u6700\u7ec8\u7684\u53ef\u6267\u884c\u6587\u4ef6\u4e4b\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u4e00\u6b65\u5206\u89e3\u5177\u6709\u4e0d\u540c\u90e8\u7f72\u7b56\u7565\u7684 IREE \u6a21\u5757\u7ed3\u6784\uff0c\u5982\u4ee5\u4e0b\u5c0f\u8282\u6240\u8ff0\u3002 \u5982\u56fe 2 \u6240\u793a\uff0cIREE \u4e3a CPU \u4e0a\u7684\u5404\u79cd\u90e8\u7f72\u573a\u666f\u63d0\u4f9b\u4e86\u4e00\u7ec4\u7075\u6d3b\u7684\u5de5\u5177\uff0c\u5305\u62ec\u9759\u6001\u548c\u52a8\u6001\u5d4c\u5165\u5f0f\u5e93\uff0c\u800c VM \u63a7\u5236\u652f\u6301\u53ef\u4ee5\u4f7f\u7528 bytecode renderer \u6216 C source code \u6765\u5b9e\u73b0\u3002 \u5728\u8fd9\u91cc\uff0cVM \u5b57\u8282\u7801\u4ee5 FlatBuffer format (vmfb) \u5b58\u50a8\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u53ef\u4ee5\u9009\u62e9\u4ee5\u5171\u4eab\u52a8\u6001\u5e93\u7684\u683c\u5f0f\u5d4c\u5165\u8bbe\u5907\u5de5\u4f5c\u8d1f\u8f7d\u3002</p> <p>\u9664\u4e86\u5d4c\u5165\u5f0f CPU \u7684\u8fd9\u4e9b\u90e8\u7f72\u8def\u5f84\u4e4b\u5916\uff0c\u5f00\u53d1\u4eba\u5458\u8fd8\u53ef\u4ee5\u5229\u7528\u73b0\u6709\u7684 HAL \u63a5\u53e3\u4e0e\u5b9a\u5236\u7684 ML \u52a0\u901f\u5668\u8fdb\u884c\u4ea4\u4e92\u3002 \u6b64\u5916\uff0c\u867d\u7136 IREE \u8fd0\u884c\u65f6\u53ef\u4ee5\u652f\u6301\u52a8\u6001\u90e8\u7f72\uff0c\u4f46\u5d4c\u5165\u5f0f\u7cfb\u7edf\u751a\u81f3\u53ef\u4ee5\u5b8c\u5168\u7ed5\u8fc7 IREE \u8fd0\u884c\u65f6\u5e76\u90e8\u7f72\u7279\u5b9a\u7684\u5de5\u4f5c\u8d1f\u8f7d\u4ee5\u5b9e\u73b0\u6700\u9ad8\u6548\u7684\u6267\u884c\u3002</p>"},{"location":"mlc/mlir-iree.html#31-virtual-machine-control-with-emitc","title":"3.1. Virtual machine control with EmitC","text":"<p>VM commands \u63a7\u5236\u8d44\u6e90\u6240\u6709\u6743\u548c\u6267\u884c\u6d41\u7a0b\uff0c\u5b83\u4eec\u88ab\u7f16\u7801\u4e3a\u53e6\u4e00\u79cd MLIR \u65b9\u8a00\uff1aVM dialect\u3002 \u8fd9\u4e9b\u64cd\u4f5c\u53ef\u4ee5\u5e8f\u5217\u5316\u4e3a\u5728\u8fd0\u884c\u65f6\u89e3\u91ca\u7684\u5b57\u8282\u7801 module\u3002 \u53e6\u4e00\u79cd\u9009\u62e9\u662f\u5c06\u8fd9\u4e9b\u64cd\u4f5c\u5e8f\u5217\u5316\u4e3a C \u6e90\u4ee3\u7801\u3002 \u8fd9\u662f\u901a\u8fc7\u5c06 VM \u64cd\u4f5c\u8f6c\u6362\u4e3a EmitC dialect \u6765\u5b9e\u73b0\u7684\uff0cEmitC dialect \u662f\u4e00\u79cd\u5141\u8bb8\u4ece MLIR \u751f\u6210 C/C++ \u7684 MLIR dialect\u3002 \u5c06 VM \u64cd\u4f5c\u8f6c\u6362\u4e3a EmitC \u64cd\u4f5c\u540e\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u5c06\u901a\u8fc7 Cpp emitter \u8f6c\u6362\u4e3a C\u3002 EmitC \u5305\u542b\u4e00\u4e2a\u8868\u793a C \u51fd\u6570\u8c03\u7528\u7684 call operation \u3002 \u53e6\u5916\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u64cd\u4f5c\u7528\u4e8e\u76f4\u63a5\u8c03\u7528 VM API\uff0c\u800c\u4e0d\u662f\u5c06\u8c03\u7528\u5e8f\u5217\u5316\u4e3a\u7b49\u6548\u7684\u5b57\u8282\u7801\u8868\u793a\u3002 \u56e0\u6b64\uff0c\u5b57\u8282\u7801\u89e3\u91ca\u5668\u6ca1\u6709\u94fe\u63a5\u5230\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\uff0c\u4ece\u800c\u51cf\u5c11\u4e86\u5b83\u7684\u4f53\u79ef\u3002</p> <p>IREE repo \u4e2d\u7684 <code>static_library_demo_c</code> \u793a\u4f8b\u4e2d\u63d0\u4f9b\u4e86\u4f7f\u7528 EmitC \u7684\u793a\u4f8b\u3002</p>"},{"location":"mlc/mlir-iree.html#32-ml-workload-as-a-static-or-dynamic-library","title":"3.2. ML workload as a static or dynamic library","text":"<p>ML \u5de5\u4f5c\u8d1f\u8f7d\u53ef\u4ee5\u5305\u542b\u5728\u9759\u6001\u6216\u52a8\u6001\u5e93\u4e2d\u3002 \u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0cIREE \u4f7f\u7528 LLVM \u751f\u6210\u5bf9\u7279\u5b9a\u76ee\u6807\u4f18\u5316\u7684\u6307\u4ee4\u6d41\u3002 \u9759\u6001 ML \u5de5\u4f5c\u8d1f\u8f7d\u5e93\u53ef\u4ee5\u4e0e\u5e8f\u5217\u5316\u7684 VM \u5b57\u8282\u7801\u6a21\u5757\u7ed3\u5408\u4f7f\u7528\uff0c\u5f62\u6210 IREE module. \u4f46\u5982\u679c\u8981\u7f29\u51cf\u4e8c\u8fdb\u5236\u6587\u4ef6\u5927\u5c0f\uff0c\u9759\u6001\u5e93\u5e94\u8be5\u4e0e\u8f6c\u6362\u4e3a C \u8c03\u7528\u7684 VM commands \u7ed3\u5408\u4f7f\u7528\u3002</p> <p>\u53e6\u4e00\u65b9\u9762\uff0c\u52a8\u6001 ML \u5de5\u4f5c\u8d1f\u8f7d\u5e93\u63d0\u4f9b\u4e86\u66f4\u5927\u7684\u7075\u6d3b\u6027\u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a\u5177\u6709\u76f8\u540c\u5165\u53e3\u70b9\u548c\u51fa\u53e3\u70b9\u7684\u9488\u5bf9\u4e0d\u540c\u4f53\u7cfb\u7ed3\u6784\u4f18\u5316\u7684\u52a8\u6001\u5e93\u3002 \u7136\u540e\u5728\u8fd0\u884c\u65f6\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e2a\u52a8\u6001\u5e93\u3002 \u7531\u4e8e\u5d4c\u5165\u5f0f\u7cfb\u7edf\u5f80\u5f80\u4e0d\u63d0\u4f9b\u52a8\u6001\u5e93\u652f\u6301\uff0cIREE\u4f7f\u7528\u56fa\u5b9a\u7684\u52a8\u6001\u5e93ABI\uff0c\u5e76\u5728\u8fd0\u884c\u65f6\u5e93\u4e2d\u96c6\u6210\u4e86\u81ea\u5df1\u7684\u4f4e\u5f00\u9500\u52a8\u6001\u5e93\u52a0\u8f7d\u5668\u3002</p>"},{"location":"mlc/mlir-iree.html#33-scheduler-of-the-hal-driver","title":"3.3. Scheduler of the HAL driver","text":"<p>\u4e00\u65e6host VM \u6b63\u786e\u8bbe\u7f6e\u4e86\u547d\u4ee4\u7f13\u51b2\u533a\uff0c\u5de5\u4f5c\u8d1f\u8f7d\u8c03\u5ea6\u7a0b\u5e8f\u5c31\u4f1a\u8d1f\u8d23\u8c03\u5ea6\u547d\u4ee4\u7f13\u51b2\u533a\u4e2d\u8bbe\u7f6e\u7684\u8bbe\u5907\u5de5\u4f5c\u8d1f\u8f7d\u3002 \u53d7 GPU \u8c03\u5ea6\u7a0b\u5e8f\u548c\u8ba1\u7b97 API \u7684\u542f\u53d1\uff0cIREE \u9488\u5bf9\u5305\u542b\u6570\u636e\u7f13\u51b2\u533a\u548c\u8c03\u5ea6\u4fe1\u606f\u7684\u7279\u5b9a worker \u7ed3\u6784\u91c7\u7528 3D \u7f51\u683c\u62d3\u6251\u8fdb\u884c\u5de5\u4f5c\u8d1f\u8f7d\u8c03\u5ea6\uff0c\u5982\u6e05\u5355 3 \u6240\u793a\u3002</p> <p>\u5bf9\u4e8e\u652f\u6301\u591a\u7ebf\u7a0b\u7684\u7cfb\u7edf\uff0cIREE \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f02\u6b65\u4efb\u52a1\u8c03\u5ea6\u7a0b\u5e8f\uff0c\u4ee5\u66f4\u9ad8\u6548\u5730\u6267\u884c\u6709\u5411\u65e0\u73af\u56fe (DAG) \u6765\u62c6\u5206\u5de5\u4f5c\u8d1f\u8f7d\u3002 \u8fd9\u5141\u8bb8\u4e71\u5e8f\u548c\u6d41\u6c34\u7ebf\u6267\u884c\uff0c\u53ef\u4ee5\u5b9e\u73b0\u66f4\u597d\u7684\u5e76\u884c\u6027\u548c\u76ee\u6807\u8bbe\u5907\u7684\u66f4\u597d\u5229\u7528\u3002 \u4f46\u662f\uff0cIREE \u8fd8\u652f\u6301\u901a\u8fc7\u987a\u5e8f\u53d1\u5e03\u5de5\u4f5c\u8d1f\u8f7d\u6765\u540c\u6b65\u8c03\u5ea6\u7a0b\u5e8f\u6267\u884c\u3002 \u5bf9\u4e8e\u6ca1\u6709\u7ebf\u7a0b\u5904\u7406\u7a0b\u5e8f\u7684\u5d4c\u5165\u5f0f\u7cfb\u7edf\u6216\u6ca1\u6709\u64cd\u4f5c\u7cfb\u7edf\u652f\u6301\u7684 CPU\uff0c\u540c\u6b65\u8c03\u5ea6\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u4e00\u79cd\u76f4\u89c2\u7684\u65b9\u5f0f\u6765\u5206\u6d3e\u5de5\u4f5c\u8d1f\u8f7d\u3002</p>"},{"location":"mlc/mlir-iree.html#34-stream-execution","title":"3.4. Stream execution","text":"<p>\u7531 IREE \u8fd0\u884c\u65f6\u8c03\u5ea6\u7684 work \u4ee5\u53ca work \u4e4b\u95f4\u7684\u4f9d\u8d56\u4fe1\u606f \u88ab\u63d0\u4f9b\u7ed9\u5e95\u5c42\u7cfb\u7edf\u8c03\u5ea6\u7a0b\u5e8f \u2014\u2014 \u53ef\u80fd\u662f  hardware command processor \u6216 CPU \u7ebf\u7a0b\u6c60\u7b49\u3002 \u5f53\u7cfb\u7edf\u5171\u4eab\u6709\u9650\u7684\u8bbe\u5907\u8d44\u6e90\u65f6\uff0c\u8fd9\u63d0\u4f9b\u4e86\u6700\u7ec8\u7ea7\u522b\u7684\u5373\u65f6\u8c03\u5ea6\u3001\u5de5\u4f5c\u5e73\u8861\u548c\u5b89\u5168\u62a2\u5360\u70b9\u3002 \u5f02\u6b65\u5de5\u4f5c\u671f\u95f4\u6240\u9700\u7684\u5185\u5b58 is reserved from a pool that is aware of the streaming behavior\uff0c\u5e76\u4e14\u53ea\u4f1a\u5206\u914d\u5e76\u53d1\u53ef\u6267\u884c\u5de5\u4f5c\u6240\u9700\u8981\u7684\u5185\u5b58\u3002 \u8fd9\u4f7f\u5f97\u6df1\u5165\u7684\u5de5\u4f5c\u7ba1\u9053\u80fd\u591f\u63d0\u4ea4\u7ed9\u8bbe\u5907\uff0c\u800c\u4e0d\u4f1a\u8fc7\u5ea6\u4f7f\u7528\u6709\u9650\u7684\u5185\u5b58\u8d44\u6e90\u3002 \u56e0\u4e3a\u5728\u5178\u578b\u63a8\u7406\u4e2d\u4f7f\u7528\u7684\u5927\u90e8\u5206\u5185\u5b58\u8981\u4e48\u662f\u5e38\u91cf\uff0c\u8981\u4e48\u662f\u4e34\u65f6\u503c\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5c06\u52a0\u8f7d\u7a0b\u5e8f\u7684\u9759\u6001\u5185\u5b58\u6d88\u8017\u51cf\u5c11\u5230\u4ec5\u51e0\u5343\u5b57\u8282 \uff0c\u5e38\u91cf\u6240\u9700\u7684\u5185\u5b58\u901a\u5e38\u53ef\u4ee5\u6620\u5c04\u5230 discardable \u5185\u5b58\u4e2d\u3002 \u8fd9\u5141\u8bb8\u52a0\u8f7d\u591a\u4e2a\u7a0b\u5e8f\u2014\u2014\u5373\u4f7f\u5728\u8de8\u8c03\u7528\u4fdd\u7559\u72b6\u6001\u65f6\u2014\u2014\u7136\u540e\u53ef\u4ee5\u5b89\u6392\u4ea4\u9519\u6267\u884c\uff0c\u540c\u65f6\u4ec5\u6d88\u8017\u4efb\u4f55\u5355\u4e2a\u8c03\u7528\u4f7f\u7528\u7684\u5cf0\u503c\u5185\u5b58\u3002</p>"},{"location":"mlc/mlir-iree.html#35-buffer-allocation-and-permission-control","title":"3.5. Buffer allocation and permission control","text":"<p>IREE \u8fd0\u884c\u65f6\u4f7f\u7528\u8bbe\u5907\u63d0\u4f9b\u7684\u5185\u5b58\u5206\u914d\u5668\u6765\u5904\u7406 device buffer configuration and preparation\uff0c\u5e76\u4f7f\u7528\u7cfb\u7edf\u5206\u914d\u5668\u6765\u5904\u7406 host-side VM buffers\u3002 \u5206\u914d\u5668\u53ef\u4ee5\u663e\u5f0f\u8bbe\u7f6e host (VM) \u548c device \u4e4b\u95f4\u7f13\u51b2\u533a\u7684\u53ef\u89c1\u6027\uff0c\u540c\u65f6\u4f7f\u7528\u6807\u51c6\u5185\u5b58\u5206\u914d\u5e93\u8fdb\u884c\u6b63\u786e\u5bf9\u9f50\u3002 \u5185\u5b58\u5757\u53ef\u4ee5\u5728\u4e00\u4fa7\uff08\u4e3b\u673a\u6216\u8bbe\u5907\uff09\u5206\u914d\uff0c \u540c\u65f6\u53ef\u4ee5\u4ece\u53e6\u4e00\u7aef\u6709\u9009\u62e9\u5730\u8bbf\u95ee\u3002 \u4f8b\u5982\uff0cML \u7a0b\u5e8f\u7684\u8f93\u5165\u7f13\u51b2\u533a\u53ef\u4ee5\u5728\u4e3b\u673a\u4e0a\u5206\u914d\uff0c\u8fd9\u6837\u5b83\u5c31\u53ef\u4ee5\u7528\u6b63\u786e\u7684\u8f93\u5165\u503c\u542f\u52a8\uff0c\u540c\u65f6\u8bbe\u7f6e\u4e3a\u5bf9\u5177\u6709\u8bfb\u53d6\u8bbf\u95ee\u6743\u9650\u7684\u8bbe\u5907\u53ef\u89c1\uff0c\u8fd9\u6837\u5b83\u7684\u5185\u5bb9\u5c31\u53ef\u4ee5\u88ab\u5de5\u4f5c\u8d1f\u8f7d\u6d88\u8017\u3002 \u8fd9\u79cd\u53ef\u89c1\u6027\u548c\u6743\u9650\u63a7\u5236\u4e0e\u652f\u6301 enclave \u8ba1\u7b97\u7684\u7cfb\u7edf\u76f8\u7ed3\u5408\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b89\u5168\u7684 ML \u6267\u884c\u73af\u5883\u3002</p>"},{"location":"mlc/mlir-iree.html#4-result","title":"4. Result","text":"<p>\u901a\u8fc7\u5e94\u7528 IREE \u7684\u7f16\u8bd1\u6d41\u7a0b\u5e76\u9009\u62e9\u88f8\u673a\u53cb\u597d\u7684\u914d\u7f6e\u6765\u90e8\u7f72 ML \u7a0b\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u51cf\u5c11 IREE module \u548c IREE runtime \u7684\u5927\u5c0f\u3002</p> <p>\u8868 1 \u663e\u793a\u4e86\u4f7f\u7528 IREE snapshot 20211203.686 \u9488\u5bf9\u4e0d\u540c\u7684 target \u548c \u4f7f\u7528\u4e0d\u540c\u7f16\u8bd1 mode \u7f16\u8bd1 MobileNet SSD V2 [7] \u7684\u7ed3\u679c\u3002 \u4e3a\u4e86\u9488\u5bf9 Armv7E-M\uff08i.e. Arm Cortex-M4\uff09\u76ee\u6807\u8fdb\u884c\u7f16\u8bd1\uff0c\u53c2\u6570\u88ab\u91cf\u5316\u3002 \u5b83\u663e\u793a\u4e86\u6253\u5305\u5230 FlatBuffer \u6587\u4ef6\u4e2d\u7684 IREE module \u7684\u5927\u5c0f\uff0c\u4ee5\u53ca\u8de8\u4e0d\u540c LLVM \u7f16\u8bd1\u76ee\u6807\u7684\u53ef\u6267\u884c\u5de5\u4f5c\u8d1f\u8f7d\uff08\u5d4c\u5165 module FlatBuffer \u4e2d\uff09\u7684\u5927\u5c0f\uff0c\u6bcf\u4e2a\u7f16\u8bd1\u76ee\u6807\u90fd\u6709\u56db\u79cd IREE \u7f16\u8bd1\u6a21\u5f0f\uff1aDebug-dylib\uff08\u52a8\u6001\u5e93 \u5305\u542b\u8c03\u8bd5\u7b26\u53f7\uff1b\u9ed8\u8ba4\uff09\u3001Dylib\uff08\u65e0\u8c03\u8bd5\u7b26\u53f7\uff09\u3001Embedded\uff08\u5d4c\u5165\u5f0f\u7cfb\u7edf\u53cb\u597d\u7684\u52a8\u6001\u5e93\uff09\u548c Static\uff08\u9759\u6001\u5e93\uff09\u3002 \u540e\u4e24\u79cd\u6a21\u5f0f\u662f TinyIREE \u6a21\u5f0f\u3002 \u7ed3\u679c\u663e\u793a\u5de5\u4f5c\u8d1f\u8f7d\u5927\u5c0f\u968f LLVM \u76ee\u6807\u800c\u53d8\u5316\u3002 \u7279\u522b\u662f\uff0c\u7531\u4e8e\u9488\u5bf9\u6b64\u7c7b\u76ee\u6807\u8fdb\u884c\u4e86 LLVM \u4f18\u5316\uff0c\u5d4c\u5165\u5f0f\u7cfb\u7edf\u76ee\u6807\uff08\u4f8b\u5982 Armv7E-M\uff09\u7684\u5de5\u4f5c\u8d1f\u8f7d\u5927\u5c0f\u8981\u5c0f\u5f97\u591a\u3002</p> <p>\u56fe 3 \u63cf\u7ed8\u4e86\u4e0d\u540c target \u548c mode \u4e4b\u95f4\u7684\u5de5\u4f5c\u8d1f\u8f7d\u5927\u5c0f\u6bd4\u8f83\uff0c\u4ee5\u53ca TinyIREE \u6a21\u5f0f\u5bf9\u5d4c\u5165\u5f0f\u7cfb\u7edf\u7684\u4f18\u5316\u3002 \u6ce8\u610f\u5bf9\u4e8e\u9759\u6001\u5e93\u6a21\u5f0f\uff0cML \u5de5\u4f5c\u8d1f\u8f7d\u6210\u4e3a\u4e00\u4e2a\u53ef\u4ee5\u5728\u94fe\u63a5\u65f6\u4f18\u5316\u7684\u5e93\uff0c\u56e0\u6b64\u5176\u6700\u7ec8\u5927\u5c0f\u53d6\u51b3\u4e8e\u7528\u6237\u5e94\u7528\u7a0b\u5e8f\u5982\u4f55\u96c6\u6210\u5de5\u4f5c\u8d1f\u8f7d\u5e93\u3002 \u4f8b\u5982\uff0c\u5f53\u4ece\u9759\u6001\u5e93\u5207\u6362\u5230\u4f7f\u7528 EmitC \u7684\u865a\u62df\u673a\u63a7\u5236\u65f6\uff0c\u53ef\u4ee5\u5220\u9664\u5b57\u8282\u7801\u89e3\u91ca\u5668\uff0c\u8fd9\u5728\u4e3a Armv7E-M \u7f16\u8bd1\u65f6\u8282\u7701\u4e86\u5927\u7ea6 15 kB\u3002</p> <p>\u5728\u6267\u884c\u65b9\u9762\uff0cIREE \u8fd0\u884c\u65f6\u8fd8\u63d0\u4f9b\u4e86\u66f4\u9ad8\u6548\u7684\u5185\u5b58\u4f7f\u7528\u3002 \u8868 2 \u663e\u793a\u4e86 x86-64 TensorFlow Lite (TFLite) benchmark tool [8] \u548c\u4f7f\u7528 dynamic embedded library mode \u4ee5\u53ca synchronous HAL driver \u6784\u5efa\u7684 IREE \u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u7684\u5cf0\u503c\u5185\u5b58\u4f7f\u7528\u6bd4\u8f83\u3002 \u4e0e TFLite \u89e3\u91ca\u5668\u76f8\u6bd4\uff0c IREE \u53ef\u4ee5\u4f7f\u7528\u66f4\u5c0f\u7684\u8fd0\u884c\u65f6\u5e93\u6765\u90e8\u7f72\u76f8\u540c\u7684\u5de5\u4f5c\u8d1f\u8f7d\u3002 \u8bf7\u6ce8\u610f\uff0cTFLM \u53ef\u4ee5\u63d0\u4f9b\u7c7b\u4f3c\u5927\u5c0f\u7684\u5bbf\u4e3b\u5e93\uff0c\u4f46\u5b83\u53ea\u652f\u6301 \u7b97\u5b57\u5e93 \u7684\u4e00\u4e2a\u5b50\u96c6\u3002 \u56e0\u6b64\uff0c\u5e76\u975e\u6240\u6709 TFLite artifacts \u90fd\u4e0e TFLM \u517c\u5bb9\u3002 \u4f8b\u5982\uff0cthe pre-2.5.0-rc0 TFLM\u53ef\u4ee5\u90e8\u7f72 \u8868 2 \u4e2d\u6240\u793a\u7684\u76f8\u540c MobileNet V2 SSD \u6a21\u578b\uff0c\u5177\u6709 4.91 MB \u7684\u5cf0\u503c\u5185\u5b58\u4f7f\u7528\u548c 80.02 kB x86-64 host lib\uff0c\u4f46 TFLM \u6b64\u540e\u653e\u5f03\u4e86\u5bf9 unsigned operators \u7684\u652f\u6301\uff0c\u56e0\u6b64\u65e0\u6cd5\u518d\u652f\u6301\u8fd9\u4e2a\u6a21\u578b\u3002</p>"},{"location":"mlc/mlir-onnx.html","title":"Compiling ONNX Neural Network Models Using MLIR","text":"<p>IBM \u4e8e 20\u5e748\u6708 \u6302\u5728 Arxiv\u3002 onnx-mlir \u73b0\u5728\u4f5c\u4e3a ONNX \u7684\u5b50\u9879\u76ee\u4e4b\u4e00\uff1a ONNX-MLIR</p>"},{"location":"mlc/mlir-onnx.html#0","title":"0. \u6458\u8981","text":"<p>\u672c\u6587\u5bf9 onnx-mlir \u7f16\u8bd1\u5668\u7684\u505a\u521d\u6b65 high-level \u62a5\u544a\u3002 Onnx-mlir \u662f\u4e00\u4e2a\u5f00\u6e90\u7f16\u8bd1\u5668\uff0c\u4f7f\u7528 MLIR \u57fa\u7840\u67b6\u6784\u5b9e\u73b0\u3002 Onnx-mlir \u4f9d\u8d56 MLIR \u7684\u65b9\u8a00\u6982\u5ff5\u6765\u5b9e\u73b0\u5176\u529f\u80fd\u3002 \u6211\u4eec\u5728\u8fd9\u91cc\u63d0\u51fa\u4e24\u79cd\u65b0\u7684\u65b9\u8a00\uff1a\uff081\uff09\u4e00\u79cd ONNX \u7279\u5b9a\u65b9\u8a00\uff0c\u5b83\u5bf9 ONNX \u6807\u51c6\u8bed\u4e49\u8fdb\u884c\u7f16\u7801\uff082\uff09\u4e00\u79cd\u57fa\u4e8e\u5faa\u73af\u7684\u65b9\u8a00\uff0c\u4e3a\u6240\u6709 ONNX \u65b9\u8a00\u64cd\u4f5c\u63d0\u4f9b\u4e00\u4e2a\u5171\u540c\u7684\u964d\u4f4e\u70b9\u3002 \u6bcf\u4e2a\u4e2d\u95f4\u8868\u793a\u5206\u522b\u4fc3\u8fdb\u5176\u81ea\u8eab\u7684\u56fe\u7ea7\u548c\u57fa\u4e8e\u5faa\u73af\u4f18\u5316\u7684\u7279\u5f81\u96c6\u3002 \u6211\u4eec\u901a\u8fc7\u63d0\u51fa\u7684\u8868\u793a\u9075\u5faa\u51e0\u4e2a\u6a21\u578b\u6765\u8bf4\u660e\u6211\u4eec\u7684\u65b9\u6cd5\uff0c\u5e76\u4e14\u6211\u4eec\u5305\u62ec\u4e00\u4e9b\u65e9\u671f\u7684\u4f18\u5316\u5de5\u4f5c\u548c\u6027\u80fd\u7ed3\u679c\u3002</p>"},{"location":"mlc/mlir-onnx.html#1-intro","title":"1. Intro","text":"<p>\u9996\u5148 diss \u4e86\u4f9d\u8d56\u4e8e\u7b2c\u4e09\u65b9\u52a0\u901f\u5e93\u7684\u65b9\u6cd5\uff1a </p> <ol> <li>\u53ef\u4ee5\u91cd\u5199\u7684\u6a21\u578b\u6570\u91cf\u53d7\u5230\u5e93\u4e2d\u63d0\u4f9b\u7684\u51fd\u6570\u7684\u9650\u5236</li> <li>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u9700\u8981\u5b89\u88c5\u9644\u52a0\u5305\u624d\u80fd\u4f7f\u5e93\u6b63\u5e38\u8fd0\u884c</li> <li>\u5b83\u7f3a\u4e4f\u9488\u5bf9\u4e0d\u540c\u95ee\u9898\u5b9a\u5236\u4ee3\u7801\u7684\u80fd\u529b</li> </ol> <p>\u63a5\u7740\u63d0\u51fa\u4e86 ONNX-MLIR compiler\uff1a \u4f7f\u7528\u7f16\u8bd1\u5668\u957f\u671f\u53d1\u5c55\u8fc7\u7a0b\u4e2d\u5f00\u53d1\u7684\u8bb8\u591a\u6210\u719f\u4f18\u5316\u6280\u672f\uff0c\u4f8b\u5982\u9488\u5bf9\u7279\u5b9a\u95ee\u9898\u5b9a\u5236\u4ee3\u7801\u7684\u80fd\u529b\u3001\u5185\u5b58\u4f18\u5316\u548c\u5e76\u884c\u5316\u3002 \u9009\u62e9\u4e86\u5f00\u653e\u795e\u7ecf\u7f51\u7edc\u4ea4\u6362 (ONNX) [1] \u4f5c\u4e3a\u8868\u793a\u7f16\u8bd1\u5668\u8f93\u5165\u6a21\u578b\u7684\u683c\u5f0f\u3002 \u4f7f\u7528 MLIR [5] \u7f16\u5199\u2014\u2014\u8fd9\u662f\u4e00\u79cd\u7528\u4e8e\u591a\u7ea7\u4e2d\u95f4\u8868\u793a\u7684\u73b0\u4ee3\u5f00\u6e90\u7f16\u8bd1\u5668\u57fa\u7840\u67b6\u6784\u3002 \u5c3d\u7ba1\u5b83\u4ecd\u5904\u4e8e\u5f00\u53d1\u9636\u6bb5\uff0c\u4f46\u5b83\u5df2\u7ecf\u53ef\u4ee5\u5c06\u4e00\u4e9b\u6d41\u884c\u7684\u6a21\u578b\uff08\u5982 MNIST \u548c ResNet50\uff09\u7f16\u8bd1\u4e3a x86 \u673a\u5668\u3001IBM Power Systems \u548c IBM System Z \u4e0a\u7684\u672c\u5730\u4ee3\u7801\u3002</p> <p>\u6587\u7ae0\u4ece 4 \u4e2a\u65b9\u9762\u4ecb\u7ecd\u8fd9\u4e2a\u7f16\u8bd1\u5668\uff1a</p> <ol> <li>\u4ecb\u7ecd\u7f16\u8bd1\u5668\u7684\u603b\u4f53\u8bbe\u8ba1\u548c\u67b6\u6784\uff0c</li> <li>\u5f15\u5165\u7684\u4e24\u79cd\u65b0\u65b9\u8a00\uff1a <code>onnx</code> \u65b9\u8a00\u7f16\u7801 ONNX \u6807\u51c6\u8bed\u4e49\uff0c <code>krnl</code> \u65b9\u8a00\u4e3a\u6240\u6709 ONNX \u65b9\u8a00\u64cd\u4f5c\u63d0\u4f9b\u4e00\u4e2a\u5171\u540c\u7684\u964d\u4f4e\u70b9\u3002</li> <li>\u4f18\u5316 passes \uff0c\u4f8b\u5982\u56fe\u91cd\u5199\u3001\u5e38\u91cf\u4f20\u64ad\u548c\u5185\u5b58\u7ba1\u7406</li> <li>\u8ba8\u8bba\u4e3a\u4e0d\u540c\u67b6\u6784\u751f\u6210\u4ee3\u7801\u65f6\u9047\u5230\u7684\u4e00\u4e9b\u95ee\u9898\u3002</li> </ol> <p>\u7ae0\u82822\u8ba8\u8bba\u4e86 ONNX \u548c MLIR\u3002 \u7ae0\u82823\u4ecb\u7ecd\u7f16\u8bd1\u5668\u7684\u8bbe\u8ba1\u539f\u7406\u548c\u67b6\u6784\uff0c \u8fd8\u5728\u672c\u8282\u4e2d\u8ba8\u8bba\u4e86\u4e24\u79cd\u65b0\u65b9\u8a00\uff0c\u5373 <code>onnx</code> \u548c <code>krnl</code> \uff0c\u4ee5\u53ca\u4e00\u4e9b\u4f18\u5316pass\u3002 \u7ae0\u82824\uff0c\u5c55\u793a IBM Power Systems \u4e0a MNIST \u548c ResNet50 \u6a21\u578b\u7684\u4e00\u4e9b\u521d\u6b65\u5b9e\u9a8c\u7ed3\u679c\u3002 \u7ae0\u82825\u603b\u7ed3\u8bba\u6587\u5e76\u8ba8\u8bba\u4e86\u672a\u6765\u7684\u5de5\u4f5c\u3002</p>"},{"location":"mlc/mlir-onnx.html#5-conclusion","title":"5. Conclusion","text":"<p>onnx-mlir \u5f00\u6e90\u7f16\u8bd1\u5668\u7528\u4e8e\u5c06 ONNX \u6a21\u578b\u7f16\u8bd1\u6210 native code\u3002 MLIR \u88ab\u7528\u4f5c\u6784\u5efa\u7f16\u8bd1\u5668\u7684\u57fa\u7840\u8bbe\u65bd\uff0c\u5e76\u5f15\u5165\u4e86 onnx \u548c krnl \u4e24\u79cd\u65b9\u8a00\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u4f7f\u7528 MLIR \u57fa\u7840\u8bbe\u65bd\uff0c\u65b0\u7684\u4f18\u5316\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u96c6\u6210\u5230 onnx-mlir \u4e2d\u3002 \u672a\u6765\u5c06\u6dfb\u52a0\u66f4\u591a\u4f18\u5316\uff0c\u4f8b\u5982\u591a\u9762\u4f53\u4f18\u5316\u3001\u5faa\u73af\u878d\u5408\u3001SIMD \u4f18\u5316\uff0c\u5e76\u4e3a\u52a0\u901f\u5668\u4ee3\u7801\u751f\u6210\u6dfb\u52a0\u652f\u6301\u3002</p>"},{"location":"mlc/mlir-onnx.html#2-background","title":"2. Background","text":""},{"location":"mlc/mlir-onnx.html#21-onnx","title":"2.1. ONNX","text":"<p>ONNX \u5b9a\u4e49\u4e86\u4e00\u4e2a\u53ef\u6269\u5c55\u7684\u8ba1\u7b97\u56fe\u6a21\u578b\u3001\u7b97\u5b50\u548c\u6807\u51c6\u6570\u636e\u7c7b\u578b\uff0c\u4e3a\u4e0d\u540c\u7684\u6846\u67b6\u63d0\u4f9b\u4e86\u4e00\u4e2a\u901a\u7528\u7684 IR\u3002 \u6709\u4e24\u79cd ONNX \u53d8\u4f53\uff1a 1. the neural-network-only ONNX \u4ec5\u5c06\u5f20\u91cf\u8bc6\u522b\u4e3a\u8f93\u5165\u548c\u8f93\u51fa\u7c7b\u578b 2. the classic machine learning ONNX-ML \u4e5f\u8bc6\u522b\u5e8f\u5217\u548c\u6620\u5c04\u3002 ONNX-ML \u4f7f\u7528\u4e0d\u57fa\u4e8e\u795e\u7ecf\u7f51\u7edc\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u6269\u5c55\u4e86 ONNX \u7b97\u5b50\u96c6\u3002 </p> <p>\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5173\u6ce8\u4ec5\u795e\u7ecf\u7f51\u7edc\u7684 ONNX \u53d8\u4f53\uff0c\u5e76\u5c06\u5176\u7b80\u79f0\u4e3a ONNX\u3002</p>"},{"location":"mlc/mlir-onnx.html#22-mlir","title":"2.2. MLIR","text":"<p>MLIR [5] \u662f\u4e00\u79cd\u53ef\u91cd\u7528\u548c\u53ef\u6269\u5c55\u7684\u73b0\u4ee3\u7f16\u8bd1\u5668\u57fa\u7840\u67b6\u6784\u3002 \u5b83\u901a\u8fc7 facilitating the design and implementation of \u4e0d\u540c\u62bd\u8c61\u7ea7\u522b\u7684\u4ee3\u7801\u751f\u6210\u5668\u3001\u7ffb\u8bd1\u5668\u548c\u4f18\u5316\u5668\uff0c\u964d\u4f4e\u4e86\u6784\u5efa\u7279\u5b9a\u9886\u57df\u7f16\u8bd1\u5668\u7684\u6210\u672c\u3002\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u7b80\u8981\u56de\u987e\u4e86\u7528\u4e8e\u6784\u5efa\u6211\u4eec\u7684\u7f16\u8bd1\u5668\u7684 MLIR \u4e2d\u7684\u4e00\u4e9b\u7279\u6027\u3002</p> <p>\u4e0e LLVM \u7c7b\u4f3c\uff0cMLIR \u4e2d\u7684 IR \u662f\u57fa\u4e8e\u9759\u6001\u5355\u4e00\u5206\u914d (SSA) \u7684 \u4e09\u5730\u5740\u7801\uff0c\u5176\u4e2d\u503c\u5728\u4f7f\u7528\u524d\u5b9a\u4e49\uff0c\u5e76\u4e14\u5177\u6709\u7531\u5b83\u4eec\u7684\u652f\u914d\u5173\u7cfb\u5b9a\u4e49\u7684\u8303\u56f4\u3002 \u64cd\u4f5c\u53ef\u80fd\u4f1a\u4ea7\u751f\u96f6\u4e2a\u6216\u591a\u4e2a\u7ed3\u679c\uff0c\u5e76\u4e14\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u662f\u4e00\u4e2a\u4e0d\u540c\u7684 SSA \u503c\uff0c\u5177\u6709\u7531\u7c7b\u578b\u7cfb\u7edf\u5b9a\u4e49\u7684\u81ea\u5df1\u7684\u7c7b\u578b\u3002 MLIR \u4e2d\u7684\u7c7b\u578b\u7cfb\u7edf\u662f\u5f00\u653e\u7684\uff0c\u53ef\u4ee5\u5b9a\u4e49\u7279\u5b9a\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u7c7b\u578b\u3002 \u6709\u8bb8\u591a\u57fa\u672c\u7c7b\u578b\uff0c\u4f8b\u5982 <code>integers</code>\uff0c\u4ee5\u53ca\u7528\u4e8e\u8868\u793a\u5f20\u91cf\u548c\u5185\u5b58\u7f13\u51b2\u533a\u7684\u805a\u5408\u7c7b\u578b\uff0c\u4f8b\u5982 <code>Tensor</code> \u548c <code>MemRef</code>\u3002 <code>Tensor</code> \u7c7b\u578b\u662f\u8f83\u4e3a\u9ad8\u9636\u7684\u62bd\u8c61\uff0c\u6ca1\u6709\u6307\u5411\u6570\u636e\u7684\u6307\u9488\uff0c<code>MemRef</code> \u7c7b\u578b\u662f\u8f83\u4f4e\u7ea7\u7684\u8868\u793a\uff0c\u6307\u5411\u7279\u5b9a\u7684\u5185\u5b58\u533a\u57df\u3002 \u5728 MLIR \u4e2d\uff0c<code>Tensor</code> \u548c <code>MemRef</code> \u7c7b\u578b\u5728\u8bed\u6cd5\u4e0a\u8868\u793a\u4e3a <code>tensor&lt;D1\u00d7D2\u00d7 ... \u00d7DN\u00d7dtype&gt;</code> \u548c <code>memref&lt;D1\u00d7D2\u00d7 ... \u00d7DN\u00d7dtype&gt;</code>, \u5176\u4e2d D1, D2, ... , DN \u662f\u8868\u793a tensor \u6216 memref \u7ef4\u5ea6\u7684\u6574\u6570\uff0cdtype \u662f\u5f20\u91cf\u6216 memref \u4e2d\u5143\u7d20\u7684\u7c7b\u578b\uff0c\u4f8b\u5982\uff0cf32 \u8868\u793a float32\u3002<code>&lt;D1\u00d7D2\u00d7 ... \u00d7DN&gt;</code>\u79f0\u4e3a <code>tensor</code> \u6216 <code>memref</code> \u7684\u5f62\u72b6\u3002 <code>Tensor</code> \u548c <code>MemRef</code> \u7c7b\u578b\u5728\u5f62\u72b6\u672a\u77e5\u65f6\u53ef\u4ee5\u88ab\u6807\u8bb0\u4e3a unranked \u3002 \u5728 MLIR \u4e2d\uff0cunranked Tensor \u548c MemRef \u7c7b\u578b\u5728\u8bed\u6cd5\u4e0a\u5206\u522b\u8868\u793a\u4e3a <code>tensor&lt;\u2217\u00d7dtype&gt;</code> \u548c <code>memref&lt;\u2217\u00d7dtype&gt;</code>\u3002</p> <p>MLIR \u7684operation \u63d0\u4f9b\u4e86\u5bf9\u4e8e \u5d4c\u5957\u533a\u57df(nested regions) \u7684\u4e00\u6d41\u652f\u6301\uff0c \u8fd9\u5bf9\u4e8e\u8868\u793a\u6a21\u578b\u4e2d\u7684\u63a7\u5236\u6d41\u6bd4\u8f83\u53cb\u597d\u3002</p> <p>\u4f7f\u7528 MLIR \u4e8c\u6b21\u5f00\u53d1\uff0c\u9700\u8981\u81ea\u5b9a\u4e49 dialects and optimization passes \u3002 MLIR \u4e2d\u6709\u73b0\u6210\u53ef\u7528\u7684\u65b9\u8a00\uff0c\u4f8b\u5982 llvm\u3001std\u3001scf \u548c affine\u3002 llvm\u65b9\u8a00\u662f\u4e00\u79cd\u4f4e\u7ea7\u65b9\u8a00\u3002 \u5b83\u5c06 LLVM IR \u7c7b\u578b\u548c\u6307\u4ee4\u5305\u88c5\u5230 MLIR \u7c7b\u578b\u548c\u64cd\u4f5c\u4e2d\u3002 std \u65b9\u8a00\u5305\u62ec\u6807\u51c6\u64cd\u4f5c\uff0c\u5982 load\u3001store\u3001addi\u3001addf\u3001absf \u548c call\u3002 scf \u65b9\u8a00\u5b9a\u4e49\u4e86\u63a7\u5236\u6d41\u64cd\u4f5c\uff0c\u4f8b\u5982 for \u548c if\u3002 affine \u65b9\u8a00\u4e3a affine \u64cd\u4f5c\u548c\u5206\u6790\u63d0\u4f9b\u4e86\u62bd\u8c61\u3002</p>"},{"location":"mlc/mlir-onnx.html#3-compiling-onnx-models","title":"3. Compiling ONNX Models","text":"<p>\u672c\u8282\u4ecb\u7ecd onnx-mlir \u3002 \u9996\u5148\u8ba8\u8bba\u5b83\u7684\u6574\u4f53\u67b6\u6784\u3002 \u7136\u540e\u4ecb\u7ecd\u4e24\u79cd\u65b0\u65b9\u8a00 onnx \u548c krnl\u3002 \u6700\u540e\uff0c\u4ecb\u7ecd\u7528\u4e8e\u6267\u884c\u4f18\u5316\u7684 MLIR passes\u3002</p>"},{"location":"mlc/mlir-onnx.html#31-overview","title":"3.1. Overview","text":"<p>\u56fe 2 \u663e\u793a\u4e86 onnx-mlir \u7684\u6574\u4f53\u67b6\u6784\u3002 \u8f93\u5165\u662f\u4e00\u4e2a ONNX \u6a21\u578b\uff0c\u8f93\u51fa\u662f\u4e00\u4e2a\u5305\u542b\u7f16\u8bd1\u4ee3\u7801\u7684\u5e93\u3002 \u8f93\u51fa\u5e93\u5305\u542b\u4e00\u4e2a\u540d\u4e3a \"_dyn_entry_point_main_graph\" \u7684\u5165\u53e3\u51fd\u6570\uff0c \u5176\u8f93\u5165\u548c\u8f93\u51fa\u5206\u522b\u7c7b\u4f3c\u4e8e ONNX \u6a21\u578b\u7684\u8f93\u5165\u548c\u8f93\u51fa\u3002 \u4e3a\u4e86\u4f7f\u7528\u8f93\u51fa\u5e93\u8fdb\u884c\u63a8\u7406\uff0c\u7528\u6237\u7f16\u5199\u7a0b\u5e8f\u901a\u8fc7\u5c06\u8f93\u5165\u4f20\u9012\u7ed9\u51fd\u6570\u6765\u8c03\u7528\u5165\u53e3\u51fd\u6570\u5e76\u83b7\u5f97\u7ed3\u679c\u3002</p> <p>onnx-mlir \u4e2d\u6709\u4e94\u79cd\u4e3b\u8981\u65b9\u8a00\uff1a onnx\u3001krnl\u3001affine\u3001std \u548c llvm\uff0c\u5206\u4e3a\u56db\u4e2a\u62bd\u8c61\u7ea7\u522b\u3002 1. \u7b2c\u4e00\u4e2a\u62bd\u8c61\u7ea7\u522b\u662f ONNX \u64cd\u4f5c\u7684\u9ad8\u7ea7\u8868\u793a\u3002 \u7531 onnx \u548c std \u65b9\u8a00\u4e2d\u7684 operation \u7ec4\u6210\uff0c\u5176\u4e2d onnx \u65b9\u8a00\u662f\u901a\u8fc7 importer \u81ea\u52a8\u751f\u6210\u7684\u3002  2. \u7b2c\u4e8c\u4e2a\u62bd\u8c61\u7ea7\u522b\u5305\u62ec krnl\u3001affine \u548c std \u65b9\u8a00\u3002 krnl dialect \u63d0\u4f9b\u4e86\u4e00\u79cd\u9002\u7528\u4e8e\u5faa\u73af\u4f18\u5316\u7684\u8868\u793a\uff0c\u80fd\u591f\u8f7b\u677e\u5730\u8fdb\u884c tiling\u3001 skew\u3001 \u548c permutation \u7b49\u53d8\u6362\u3002 \u5b83\u5145\u5f53\u4e2d\u95f4\u65b9\u8a00\uff0c\u6709\u6548\u5730\u5c06 onnx \u65b9\u8a00\u964d\u7ea7\u4e3a\u66f4\u4f4e\u7ea7\u65b9\u8a00\uff08\u4f8b\u5982\uff0caffine\u3001std \u548c llvm\uff09\u3002  3. \u7b2c\u4e09\u4e2a\u62bd\u8c61\u7ea7\u522b\u5305\u62ec affine \u548c std \u65b9\u8a00\uff0c\u5176\u4e2d\u53ef\u4ee5\u81ea\u7531\u5e94\u7528 MLIR \u4e2d\u73b0\u6709\u7684\u4f18\u5316 pass\u3002  4. \u7b2c\u56db\u4e2a\u62bd\u8c61\u7ea7\u522b\u4ec5\u5305\u62ec\u771f\u6b63\u751f\u6210 bitcode \u7684 llvm \u65b9\u8a00\u3002</p> <p>MLIR passes \u7528\u4e8e\u5c06\u4e00\u79cd\u65b9\u8a00\u8f6c\u6362\u4e3a\u53e6\u4e00\u79cd\u65b9\u8a00\uff0c\u4ee5\u53ca\u9488\u5bf9\u7279\u5b9a\u65b9\u8a00\u8fdb\u884c\u4f18\u5316\u3002 onnx \u65b9\u8a00\u901a\u8fc7 pass <code>--convert-onnx-to-krnl</code> \u8f6c\u6362\u4e3a krnl \u65b9\u8a00\u3002 \u7136\u540e\u901a\u8fc7 pass <code>--convert-krnl-to-affine</code> \u5c06 krnl \u65b9\u8a00\uff08except some of its operations\uff09\u8f6c\u6362\u4e3a affine \u548c std \u65b9\u8a00\u3002 krnl dialect \u4e2d\u7684\u5269\u4f59\u64cd\u4f5c\u548c affine \u548c std dialect \u4e2d\u7684\u64cd\u4f5c\u901a\u8fc7 pass <code>--convert-krnl-to-llvm</code> \u76f4\u63a5\u8f6c\u6362\u4e3a llvm \u4e2d\u7684\u6307\u4ee4\u3002 \u56fe 2 \u7684\u53f3\u4fa7\u663e\u793a\u4e86\u53ef\u4ee5\u5728\u6bcf\u4e2a\u62bd\u8c61\u7ea7\u522b\u6267\u884c\u7684\u4f18\u5316\u8fc7\u7a0b(\u6211\u4eec\u5728\u8fd9\u91cc\u53ea\u5217\u4e3e\u4e86\u91cd\u8981\u7684\u4f18\u5316)\u3002</p> <p>\u5728\u8be6\u7ec6\u8ba8\u8bba\u65b9\u8a00\u548c\u4f18\u5316\u8fc7\u7a0b\u4e4b\u524d\uff0c\u6211\u4eec\u7ed9\u51fa\u4e00\u4e2a\u7b80\u77ed\u7684\u8fd0\u884c\u793a\u4f8b\uff0c\u5e76\u5728 onnx-mlir \u4e2d\u4ecb\u7ecd\u65b9\u8a00\u3002 \u6b64\u793a\u4f8b\u662f ONNX \u4e2d\u7684\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u6a21\u578b\uff0c\u5b83\u6267\u884c\u9010\u5143\u7d20\u52a0\u6cd5\u3002 \u56fe 3 \u663e\u793a\u4e86\u6d4b\u8bd5\u7528\u4f8b\u7684\u8fd9\u4e2a ONNX \u6a21\u578b\u3002 add \u64cd\u4f5c\u63a5\u53d7\u4e24\u4e2a <code>&lt;3x4x5xf32&gt;</code> \u7c7b\u578b\u7684 tensor \u5e76\u8fd4\u56de\u76f8\u540c\u7c7b\u578b\u7684\u7ed3\u679c\uff0c\u5373 <code>sum</code>\u3002 \u6e05\u5355 3\u30014 \u548c 5 \u5206\u522b\u663e\u793a\u4e86\u5728 onnx\u3001krnl\u3001affine \u65b9\u8a00\u4e2d\u7684\u7a0b\u5e8f\u3002 \u9650\u4e8e\u7bc7\u5e45\u7701\u7565\u4e86llvm\u4e2d\u7684\u7a0b\u5e8f\u3002</p> <p>\u5728 onnx \u65b9\u8a00\u4e2d\uff0c\u64cd\u4f5c\u7684\u8868\u793a\u7c7b\u4f3c\u4e8e\u5b83\u4eec\u5728 ONNX \u4e2d\u7684\u63cf\u8ff0\u3002 ONNX\u6a21\u578b\u8f6c\u5316\u4e3a\u51fd\u6570 <code>main_graph</code> \u3002 \u4e3a\u4e86\u751f\u6210\u63a5\u6536\u7528\u6237\u8f93\u5165\u7684\u5165\u53e3\u70b9\u51fd\u6570\uff0c\u6211\u4eec\u5728 onnx \u65b9\u8a00\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u8f85\u52a9\u64cd\u4f5c\uff0c\u5373 <code>onnx.EntryPoint</code>\uff0c\u5b83\u5c06\u5143\u6570\u636e\u4fdd\u5b58\u5728\u64cd\u4f5c\u7684\u5c5e\u6027\u4e2d\uff0c\u4f8b\u5982\u8981\u8c03\u7528\u7684\u51fd\u6570\u540d\u79f0\u548c\u8f93\u5165\u7684\u6570\u91cf\u4ee5\u53ca\u8f93\u51fa\u3002</p> <p>\u5728 krnl \u65b9\u8a00\u4e2d\uff0c<code>onnx.Add</code> \u64cd\u4f5c\u88ab\u7ffb\u8bd1\u6210\u57fa\u4e8e\u5faa\u73af\u7684\u8ba1\u7b97\uff0c\u7531 krnl \u65b9\u8a00\u4e2d\u7684\u64cd\u4f5c\u8868\u793a\uff0c\u5176\u4e2d\u6807\u91cf\u8ba1\u7b97\u7531 affine \u548c std \u65b9\u8a00\u4e2d\u7684\u539f\u59cb\u64cd\u4f5c\u8868\u793a\u3002 \u6211\u4eec\u53ef\u4ee5\u5c06\u5faa\u73af\u4f18\u5316\uff08\u4f8b\u5982 tiling\u3001 skew \u6216 tranpose\uff09\u5e94\u7528\u4e8e\u57fa\u4e8e\u5faa\u73af\u7684\u8ba1\u7b97\u3002 \u5728\u6b64\u7ea7\u522b\uff0c\u6211\u4eec\u4e3a\u8f93\u51fa\u5f20\u91cf\u5206\u914d\u5185\u5b58\uff0c\u5e76\u53ef\u4ee5\u6267\u884c\u5185\u5b58\u7ba1\u7406\u3002</p> <p>\u5728 affine \u65b9\u8a00\u4e2d\uff0ckrnl \u65b9\u8a00\u4e2d\u4f18\u5316\u7684\u57fa\u4e8e\u5faa\u73af\u7684\u8ba1\u7b97\u88ab\u8f6c\u6362\u4e3a <code>affine.for</code> \u5faa\u73af\u3002 \u5728\u8fd9\u4e00\u5c42\uff0c\u6211\u4eec\u5728 krnl \u4e2d\u8fd8\u6709\u4e00\u4e2a\u64cd\u4f5c\uff0c\u5373 <code>krnl.entry_point</code>\u3002 \u8fd9\u6837\u7684\u64cd\u4f5c\u4e0e\u4e3b\u8ba1\u7b97\u65e0\u5173\uff0c\u4f1a\u76f4\u63a5\u8f6c\u4e3a llvm\u3002 \u5728\u964d\u4f4e\u4e3a llvm \u65b9\u8a00\u4e2d\u7684\u6307\u4ee4\u4e4b\u524d\uff0c affine \u65b9\u8a00\u4e2d\u7684\u64cd\u4f5c\u5c06\u8f6c\u6362\u4e3a std \u548c scf \u65b9\u8a00\u4e2d\u7684\u64cd\u4f5c\u3002</p>"},{"location":"mlc/mlir-onnx.html#32-onnx-dialect","title":"3.2. onnx dialect","text":"<p>onnx \u65b9\u8a00\u662f onnx-mlir \u4e2d\u7684\u7b2c\u4e00\u4e2a\u62bd\u8c61\u7ea7\u522b\u3002 \u6211\u4eec\u7f16\u5199\u4e86\u4e00\u4e2a python \u811a\u672c\u6765\u81ea\u52a8\u5c06 ONNX \u64cd\u4f5c\u5bfc\u5165\u5230 MLIR \u4e2d\u57fa\u4e8e TableGen \u7684\u64cd\u4f5c\u5b9a\u4e49\u4e2d\u3002 \u8fd9\u4e9b\u5bfc\u5165\u7684\u64cd\u4f5c\u88ab\u7ec4\u7ec7\u5230 onnx \u65b9\u8a00\u4e2d\u3002 \u591a\u4e8f\u4e86 tablegen\uff0connx \u65b9\u8a00\u4e2d\u7684\u64cd\u4f5c\u5b9a\u4e49\u4e0e ONNX \u4e2d\u7684\u64cd\u4f5c\u63cf\u8ff0\u975e\u5e38\u76f8\u4f3c\uff0c\u6211\u4eec\u80fd\u591f\u5c06\u6240\u6709\u5fc5\u8981\u7684\u4fe1\u606f\uff08\u4f8b\u5982\u8f93\u5165\u3001\u8f93\u51fa\u3001\u5c5e\u6027\u548c\u63cf\u8ff0\uff09\u4ee5\u4eba\u7c7b\u53ef\u8bfb\u7684\u6587\u672c\u5f62\u5f0f\u5b9a\u4e49\u8868\u793a\u5230\u4e00\u4e2a\u57fa\u4e8e tablegen \u7684\u8868\u4e2d\u3002</p> <p>\u6211\u4eec\u8fd8\u5728 onnx \u65b9\u8a00\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u64cd\u4f5c\uff0c\u5373 <code>onnx.EntryPoint</code> \u4ee5\u4fdd\u5b58\u4e0e ONNX \u6a21\u578b\u4e2d\u7684 dynamic list of inputs \u76f8\u5173\u7684\u4fe1\u606f\u3002 \u8fd9\u4e2a\u64cd\u4f5c\u4f1a\u88ab\u964d\u7ea7\u751f\u6210\u751f\u6210\u5e93\u7684\u5165\u53e3\u51fd\u6570 <code>dyn_entry_point_main_graph</code>\u3002</p> <p>\u6e05\u5355 6 \u663e\u793a\u4e86\u901a\u8fc7 onnx-mlir \u5bfc\u5165 relu \u64cd\u4f5c\u7684\u5b9a\u4e49\u3002 \u6240\u6709\u8f93\u5165\u548c\u8f93\u51fa\u90fd\u5c06\u4f5c\u4e3a MLIR \u4e2d\u7684\u5f20\u91cf\u5bfc\u5165\u3002 importer \u81ea\u52a8\u63a8\u65ad\u8f93\u5165\u3001\u5c5e\u6027\u548c\u8f93\u51fa\u7684\u5143\u7d20\u7c7b\u578b\u3002 \u7136\u800c\uff0c\u5f20\u91cf\u7684\u5f62\u72b6\u5c06\u901a\u8fc7 <code>--shape-inference-pass</code> \u63a8\u65ad\u51fa\u6765\uff0c \u8fd9\u662f LeakyRelu \u64cd\u4f5c\uff08\u7b2c 2 \u884c\uff09\u4e2d\u7684\u4e00\u4e2a trait \u3002 MLIR \u4ece\u5176 Tablegen-based definition  \u4e2d\u4e3a operation \u751f\u6210 C++ \u7c7b\u5b9a\u4e49\u3002 \u5982\u679c\u7528\u6237\u60f3\u5728\u7c7b\u4e2d\u5b9a\u4e49\u81ea\u5b9a\u4e49\u58f0\u660e\uff0c\u53ef\u4ee5\u901a\u8fc7\"ex-traClassDeclaration\" \u5b57\u6bb5\uff08\u7b2c 7 \u884c\uff09\u6765\u5b8c\u6210\u3002</p>"},{"location":"mlc/mlir-onnx.html#33-krnl-dialect","title":"3.3. krnl dialect","text":"<p>\u795e\u7ecf\u7f51\u7edc\u5de5\u4f5c\u8d1f\u8f7d\u4e2d\u7684\u8ba1\u7b97\u5185\u6838\u5177\u6709\u5c40\u90e8\u7ed3\u6784\u7b80\u5355\u6027\uff0c\u5176\u4e2d\u5faa\u73af\u5d4c\u5957\u901a\u5e38\u5f88\u7b80\u5355\uff0c\u4f8b\u5982\uff0c\u8d85\u77e9\u5f62\u548c\u8bed\u53e5\u5e26\u6709\u975e\u5e38\u7b80\u5355\u7684\u7b97\u672f\u8bed\u4e49\u3002 \u8fd9\u79cd\u7279\u6027\u975e\u5e38\u9002\u5408\u5728\u591a\u9762\u4f53\u6a21\u578b\u4e2d\u8868\u793a\u4ee5\u8fdb\u884c\u4f18\u5316 [8]\u3002 krnl \u65b9\u8a00\u65e8\u5728\u4e8e\u5355\u4e00\u8868\u793a\u4e2d\u540c\u65f6\u6258\u7ba1 \u5faa\u73af\u4f18\u5316 \u548c \u6807\u91cf\u8bed\u4e49\u4f18\u5316 \u3002 \u5b83\u6709\u671b\u63d0\u4f9b\u53ef\u89e3\u91ca\u6027\uff0c\u4e0d\u4ec5\u591a\u9762\u4f53\u8868\u793a\u53ef\u8bfb\uff0c\u800c\u4e14\u8fd8\u4f7f\u7a0b\u5e8f\u8bed\u4e49\uff08\u6216\u6267\u884c\u4ec0\u4e48\uff09\u548c\u7a0b\u5e8f\u8c03\u5ea6\uff08\u5982\u4f55\u4ee5\u53ca\u4f55\u65f6\u6267\u884c\uff09\u72ec\u7acb\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u7684\u76ee\u6807\u4e0d\u4ec5\u662f\u4f18\u5316\u7a0b\u5e8f\uff0c\u8fd8\u4f18\u5316\u5404\u4e2a\u8c03\u5ea6\u7684\u7ec4\u5408\uff0c\u8fd9\u662f\u5176\u4ed6\u73b0\u6709\u7cfb\u7edf\u901a\u5e38\u7f3a\u4e4f\u7684\u529f\u80fd\u3002</p> <p>\u7591\u95ee</p> <p>Halide \u548c TVM \u4e2d\u7684\u8ba1\u7b97\u8c03\u5ea6\u5206\u79bb\uff1f</p> <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u5728 krnl \u4e2d\u5b9a\u4e49\u5d4c\u5957\u5faa\u73af\u7684\u4f8b\u5b50\uff1a</p> <pre><code>%ii, %jj = krnl.define_loops 2\nkrnl.iterate ( %ii , %jj ) with ( %ii -&gt; %i = 0 to 10 , %jj -&gt; %j = 0 to 10) {\n%foo = std.addi %i , %j : index\n}\n</code></pre> <p>\u5176\u4e2d <code>krnl.define_loops</code> \u5b9a\u4e49\u4e86\u4e24\u4e2a\u5faa\u73af\uff0c\u79f0\u4e3a <code>ii</code> \u548c <code>jj</code>\u3002 \u8fd9\u4e9b\u5faa\u73af\u53d8\u91cf\u5c06\u7528\u4e8e\u8868\u8fbe\u7a0b\u5e8f\u8bed\u4e49\u548c\u8c03\u5ea6\u3002 \u64cd\u4f5c <code>krnl.iterate</code> \u5728\u8bed\u4e49\u4e0a\u63a5\u53d7\u4e24\u79cd\u7c7b\u578b\u7684\u5faa\u73af\u53d8\u91cf\uff1a\u539f\u59cb\u5faa\u73af\u7684\u53d8\u91cf\u548c\u9884\u5b9a\u5faa\u73af\u7684\u53d8\u91cf\u3002 \u5728\u8bed\u6cd5\u7cd6\u5f62\u5f0f\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u5173\u952e\u5b57 <code>with</code> \u5c06\u4e24\u79cd\u7c7b\u578b\u7684\u5faa\u73af\u5206\u5f00\uff0c\u5373 (scheduled loops) <code>with</code> (original loops)\u3002 \u5f52\u7eb3\u53d8\u91cf\uff0c\u4f8b\u5982\u4e0a\u4f8b\u4e2d\u7684 i \u548c j\uff0c\u5c06\u4f7f\u7528\u539f\u59cb\u5faa\u73af\u5b9a\u4e49\u3002 \u5982\u679c\u6ca1\u6709\u8c03\u5ea6\uff08\u4f8b\u5982 block, skew \u7b49\uff09\uff0c\u8c03\u5ea6\u5faa\u73af\u7c7b\u4f3c\u4e8e\u539f\u59cb\u5faa\u73af\u3002</p> <p>\u63a5\u4e0b\u6765\u662f\u4e00\u4e2a block(\u6216 \u79f0\u4e3atiling) \u8c03\u5ea6\u7684\u4f8b\u5b50\uff1a</p> <pre><code>%ii = krnl.define_loops 1\n%ib, %il = krnl.block %ii 2 : (!krnl.loop) -&gt;(!krnl.loop, !krnl.loop)\nkrnl.iterate (%ib, %il) with (%ii -&gt; %i = 0 to 10){\n%foo = std.addi %i , %i : index\n}\n</code></pre> <p>Operation <code>krnl.block</code>\uff08\u7b2c 2 \u884c\uff09\u5c06\u5faa\u73af\u548c\u6574\u6570\u4f5c\u4e3a\u8f93\u5165\uff0c\u5176\u4e2d\u6574\u6570\u662ftile size\uff08\u5373\u4e00\u4e2atile\u5757\u7684\u5927\u5c0f\uff09\u3002 \u7ed3\u679c\u662f\u5185\u5916\u5c42\u4e24\u4e2a\u5faa\u73af\u53d8\u91cf\u3002 \u8fd9\u4e24\u4e2a\u5faa\u73af\u5c06\u7528\u4f5c\u8c03\u5ea6\u7684\u7ed3\u679c\u5e76\u4f20\u9012\u7ed9 <code>krnl.iterate</code>\uff08\u7b2c 3 \u884c\uff09\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728\u63d2\u5165\u8c03\u5ea6\u65f6\uff0c <code>krnl.iterate</code> \u4e2d\u7684\u539f\u59cb\u5faa\u73af\u548c\u8ba1\u7b97\u4fdd\u6301\u4e0d\u53d8\uff0c\u8fd9\u6b63\u662f\u6211\u4eec\u5728 krnl \u65b9\u8a00\u4e2d\u5206\u79bb\u7a0b\u5e8f\u8bed\u4e49\u548c\u8c03\u5ea6\u6240\u9700\u8981\u7684\u3002</p> <p><code>--convert-krnl-to-affine</code> \u8fc7\u7a0b\u81ea\u52a8\u751f\u6210\u4f18\u5316\u7684 <code>affine.for</code> \u5faa\u73af\uff0c\u5982\u4e0b\u6240\u793a\u3002</p> <pre><code>#map0 = affine_map &lt;(d0) -&gt; (d0)&gt;\n#map1 = affine_map &lt;(d0) -&gt; (d0 + 2)&gt;\naffine.for %arg0 = 0 to 10 step 2 {\naffine.for %arg1 = #map0 (%arg0) to #map1 (%arg0) {\n%0 = addi %arg1 , %arg1 : index\n}\n}\n</code></pre> <p>\u5916\u5c42 <code>affine.for</code> \u8fed\u4ee3\u6b65\u957f\u4e3a 2\uff0c\u5373 tile size\uff0c \u5185\u90e8 <code>affine.for</code> \u8fed\u4ee3\u4e00\u4e2a <code>tile</code> \u4e2d\u7684\u5143\u7d20\u3002</p> <p>\u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\u4f7f\u7528\u5176\u4ed6\u8c03\u5ea6\uff0c\u4f8b\u5982\u504f\u659c\u548c\u6392\u5217\u3002 \u6240\u6709\u8ba1\u5212\u90fd\u662f\u53ef\u7ec4\u5408\u7684\u5e76\u4e14\u53ef\u4ee5\u5d4c\u5957\u3002</p>"},{"location":"mlc/mlir-onnx.html#34-optimization-passes","title":"3.4. Optimization Passes","text":"<p>\u672c\u8282\u8ba8\u8bba onnx-mlir \u4e2d\u7684\u4e00\u4e9b\u4f18\u5316 pass\u3002 \u7531\u4e8e MLIR \u7684\u8868\u8fbe\u80fd\u529b\uff0c\u8bb8\u591a\u4f18\u5316\u53ef\u4ee5\u901a\u8fc7\u58f0\u660e\u91cd\u5199\u89c4\u5219 (DRR) \u4f7f\u7528 tablegen \u8f7b\u677e\u8868\u8fbe</p> <ol> <li> <p>Operation Decomposition</p> <p>ONNX \u4e2d\u8bb8\u591a\u64cd\u4f5c\u53ef\u7528\u5176\u4ed6\u57fa\u672c\u64cd\u4f5c\u8868\u793a\u3002 \u5982\uff0c\u5411\u91cf x \u4e0a\u7684 ReduceL1(\u5373L1\u8303\u6570) \u5373\u4e3a\u5bf9 x \u4e2d\u5143\u7d20\u7684\u7edd\u5bf9\u503c\u6c42\u548c\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u6709</p> \\[\\texttt{ReduceL1} (x) = \\texttt{ReduceSum} (\\texttt{Abs} (x))\\] <p>\u6211\u4eec\u53ea\u9700\u5c06 onnx \u65b9\u8a00\u4e2d\u7684\u64cd\u4f5c\u5b50\u96c6\u964d\u4f4e\u5230 krnl \u65b9\u8a00\u4e2d\uff0c\u800connx\u65b9\u8a00\u4e2d\u7684\u5176\u4f59\u64cd\u4f5c\u5c06\u5206\u89e3\u4e3a\u5b50\u96c6\u4e2d\u7684\u64cd\u4f5c\u3002</p> <p>\u4f7f\u7528 MLIR \u4e2d\u7684 DRR\uff0c\u64cd\u4f5c\u5206\u89e3\u7b80\u660e\u5730\u5199\u6210\u4ee5\u4e0b\u6a21\u5f0f\uff1a</p> <pre><code>def ReduceL1Pattern: Pat&lt;\n    (ReduceL1Op $x, $axes, $keepdims),\n    (ReduceSumOp (AbsOp $x), $axes, $keepdims)\n&gt;;\n</code></pre> <p>\u5176\u4e2d <code>ReduceL1Op</code>\u3001<code>ReduceSumOp</code> \u548c <code>AbsOp</code> \u5206\u522b\u662f onnx.ReduceL1\u3001onnx.ReduceSum \u548c onnx.Abs \u7684\u53ef\u7f16\u7a0b\u64cd\u4f5c\u5f62\u5f0f\u3002 \u53d8\u91cf x\u3001axes \u548c keepdims \u7528\u4e8e\u4fdd\u5b58\u64cd\u4f5c ReduceL1Op \u7684\u8f93\u5165\u503c\u3002 \u91cd\u5199\u6a21\u5f0f <code>ReduceL1Pattern</code> \u5c06\u4f1a\u5339\u914d <code>ReduceL1Op</code> \u66ff\u6362\u4e3a <code>ReduceSumOp</code> \u548c <code>AbsOp</code>\u3002</p> </li> <li> <p>Shape Inference</p> <p><code>--shape-inference</code> pass \u5c1d\u8bd5\u5728 onnx \u7684\u7a0b\u5e8f\u4e2d\u63a8\u65ad\u6240\u6709\u5f20\u91cf\u7684\u5f62\u72b6\u3002 pass \u904d\u5386\u7a0b\u5e8f\u4e2d\u7684\u6240\u6709\u64cd\u4f5c\uff0c\u63a8\u65ad\u5177\u6709 unranked shape \u7684\u5f20\u91cf\u7684\u5f62\u72b6\uff08\u5373 \\(\\texttt{tensor}\\langle * \\times f32\\rangle\\)\uff09\uff0c\u5c06 ranked shape \u4f20\u64ad\u5230 consuming operations \uff0c \u5e76\u5728\u6240\u6709\u5f20\u91cf\u5177\u6709 ranked shapes \u540e\u7ec8\u6b62\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u64cd\u4f5c\uff0c\u5982\u679c\u5176\u8f93\u5165\u5177\u6709\u9759\u6001\u5f62\u72b6\uff0c\u5219 <code>--shape-inference</code> pass \u5f88\u53ef\u80fd\u80fd\u591f\u4e3a\u5176\u8f93\u51fa\u63a8\u65ad\u9759\u6001\u5f62\u72b6\u3002 \u5982\u679c\u8f93\u5165\u5177\u6709\u52a8\u6001\u5f62\u72b6 (\u5982 \\(\\texttt{tensor} \\langle ?\\times ?\\times ?\\times f32\\rangle\\))\uff0c \u5219\u8f93\u51fa\u4e5f\u5c06\u5177\u6709\u52a8\u6001\u5f62\u72b6(\u9664\u4e86\u4e00\u4e9b\u5728\u64cd\u4f5c\u5c5e\u6027\u4e2d\u6307\u5b9a\u8f93\u51fa\u5f20\u91cf\u5f62\u72b6\u7684\u64cd\u4f5c)\u3002</p> </li> <li> <p>Graph Rewriting</p> <p>\u5728 MLIR \u4e2d\uff0c\u56fe\u91cd\u5199\u89c4\u5219\u53ef\u4ee5\u65b9\u4fbf\u5730\u4f7f\u7528 DRR \u8868\u793a\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u89c4\u5219\u662f\u5728 <code>MatMulOp</code> \u7684\u7ed3\u679c\u53ea\u88ab <code>AddOp</code> \u6d88\u8d39\u7684\u6761\u4ef6\u4e0b\uff0c\u5c06 onnx.Add \u548c onnx.MatMul \u878d\u5408\u4e3a\u4e00\u4e2aonnx.Gemm \u7684\u64cd\u4f5c\uff1a</p> <pre><code>def MulAddToGemmPattern: Pat&lt;\n  (AddOp(MatMulOp: $res $m1, $m2), $m3),\n  (GemmOp $m1, $m2, $m3),\n  [(HasOneUse $res)]\n&gt;;\n</code></pre> <p>\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f\u901a\u8fc7\u5c06\u5176\u8f93\u5165\u76f4\u63a5\u4f20\u9012\u7ed9\u5b83\u7684\u6d88\u8d39\u64cd\u4f5c\u6765\u5220\u9664 IdentityOp \u64cd\u4f5c\u3002</p> <pre><code>def IdentityEliminationPattern: Pat&lt;\n  (ONNXIdentityOp $arg),\n  (replaceWithValue $arg)\n&gt;;\n</code></pre> </li> <li> <p>Constant propagation</p> <p>\u5e38\u91cf\u4f20\u64ad\u6709\u4e24\u4e2a\u5173\u952e\u601d\u60f3\uff1a\uff081\uff09\u5982\u679c\u4e00\u4e2a\u64cd\u4f5c\u7684\u6240\u6709\u8f93\u5165\u90fd\u662f\u5e38\u91cf\uff0c\u5219\u5728\u7f16\u8bd1\u671f\u95f4\u8ba1\u7b97\u5176\u8f93\u51fa\u5e76\u5220\u9664\u8be5\u64cd\u4f5c\uff0c\uff082\uff09\u5982\u679c\u5b58\u5728\u5e38\u91cf\u548c\u975e\u5e38\u91cf\u7684\u6df7\u5408\uff0c normalize the operation\u3002 \u5f52\u4e00\u5316\u662f\u4e3a\u4e86\u589e\u52a0\u4e0d\u65ad\u4f20\u64ad\u7684\u53ef\u80fd\u6027\uff0c\u5e76\u4e14\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d6\u51b3\u4e8e\u64cd\u4f5c\u7684\u6570\u5b66\u5c5e\u6027\u3002 \u4ee5\u4e0b\u662f onnx-mlir \u4e2d onnx.Add \u64cd\u4f5c\u7684\u4e00\u4e9b\u89c4\u8303\u5316\u89c4\u5219\uff0c\u5176\u5c5e\u6027\u662f associative and communicative\u3002 Normalization rules \u540c\u6837\u4f7f\u7528 DRR \u8868\u793a\u3002</p> <p>(1) \\(c + x \\Rightarrow x + c\\)</p> <p>(2) \\((x + c_1) + c_2 \\Rightarrow x + (c_1 + c_2)\\)</p> <p>(3) \\((x + c) + y \\Rightarrow (x + y) + c\\)</p> <p>(4) \\(x + (y + c) \\Rightarrow (x + y) + c\\)</p> <p>(5) \\((x + c_1) + (y + c_2) \\Rightarrow (x + y) + (c_1 + c_2)\\)</p> </li> </ol>"},{"location":"mlc/mlir-onnx.html#4-preliminary-experiments","title":"4. Preliminary Experiments","text":""},{"location":"mlc/mlir-onnx.html#41-onnx-operation-support-and-testcases","title":"4.1. ONNX operation support and testcases","text":"<p>ONNX \u4e3a\u6bcf\u4e2a\u64cd\u4f5c\u63d0\u4f9b\u4e86\u4e00\u7ec4\u6d4b\u8bd5\u7528\u4f8b\u3002 \u5f53\u6211\u4eec\u652f\u6301 onnx-mlir \u4e2d\u7684\u4efb\u4f55\u64cd\u4f5c\u65f6\uff0c\u6211\u4eec\u542f\u7528\u5b83\u7684 ONNX \u6d4b\u8bd5\u7528\u4f8b\u6765\u68c0\u67e5\u64cd\u4f5c\u662f\u5426\u6b63\u786e\u8fd0\u884c\u5e76\u4ea7\u751f\u6b63\u786e\u7684\u7ed3\u679c\u3002 \u5728\u64b0\u5199\u672c\u6587\u65f6\uff082020\u5e74\uff09\uff0connx-mlir \u652f\u6301 ONNX \u4e2d 139 \u4e2a\u64cd\u4f5c\u4e2d\u7684 51 \u4e2a\u64cd\u4f5c\uff0c\u5305\u62ec\u5377\u79ef\u3001\u6c60\u5316\u3001Gemm \u548c LSTM \u7b49\u3002 \u8fd9\u4e9b\u8db3\u4ee5\u7f16\u8bd1\u548c\u6267\u884c MNIST \u548c ResNet50 \u7b49\u4e3b\u8981\u7f51\u7edc\u3002 </p> <p>2023 \u5e74 3\u6708 11\u65e5\uff0c 172 models from ONNX Model Zoo: 120 passed, 19 failed, 33 skipped</p> <ul> <li> <p>MNIST \u662f\u4e00\u4e2a\u5c0f\u578b\u6a21\u578b\uff0c\u5177\u6709\u4e24\u4e2a\u5377\u79ef\u8fd0\u7b97\u3001\u4e00\u4e2a\u6700\u5927\u6c60\u5316\u8fd0\u7b97\u548c\u4e00\u4e2a\u77e9\u9635\u4e58\u6cd5\uff0c\u7136\u540e\u662f\u9010\u5143\u7d20\u52a0\u6cd5\u3002 \u7f16\u8bd1 MNIST \u6a21\u578b\u5e76\u8fdb\u884c\u63a8\u7406\u7684\u901f\u5ea6\u76f8\u5f53\u5feb\uff0c\u4e0d\u5230\u4e00\u79d2\u5373\u53ef\u5b8c\u6210\u3002 \u5728 MNIST \u6a21\u578b\u4e2d\uff0c\u56fe\u91cd\u5199\u89c4\u5219 <code>MulAddToGemm-Pattern</code> \u3002 </p> </li> <li> <p>ResNet50 \u662f\u4e00\u4e2a\u590d\u6742\u7684\u6df1\u5ea6\u6a21\u578b\uff0c\u7531 50 \u5c42\u5377\u79ef\u548c\u6c60\u5316\u7b49\u64cd\u4f5c\u7ec4\u6210\u3002 \u8be5\u6a21\u578b\u5927\u7ea6\u6709 100MB\uff0c \u5305\u62ec\u5b66\u4e60\u7684\u6743\u91cd\u3002 \u5bf9\u4e8e ResNet50\uff0c\u5f53\u524d\u7248\u672c\u7684 onnx-mlir \u5728\u7f16\u8bd1\u671f\u95f4\u6ca1\u6709\u5bf9\u6a21\u578b\u5e94\u7528\u4efb\u4f55\u4f18\u5316\u3002 \u4f46\u662f\uff0c\u6211\u4eec\u8ba4\u4e3a\u7f16\u8bd1\u65f6\u95f4\u770b\u8d77\u6765\u5408\u7406\uff0c\u63a8\u7406\u65f6\u95f4\u4e5f\u6ca1\u6709\u90a3\u4e48\u6162\u3002 \u6211\u4eec\u5e0c\u671b\u4e00\u65e6\u6211\u4eec\u5728\u4e0d\u4e45\u7684\u5c06\u6765\u96c6\u6210\u91cd\u8981\u7684\u4f18\u5316\uff0c\u5982\u591a\u9762\u4f53\u4f18\u5316\u3001SIMD \u4f18\u5316\u548c\u5faa\u73af\u878d\u5408\uff0c\u63a8\u7406\u65f6\u95f4\u5c06\u663e\u7740\u51cf\u5c11\u3002</p> </li> </ul> <p>\u867d\u7136 onnx-mlir \u5b8c\u5168\u5efa\u7acb\u5728\u5e7f\u6cdb\u4f7f\u7528\u7684\u5f00\u6e90\u8f6f\u4ef6\uff08\u5982 ONNX \u548c MLIR\uff09\u4e4b\u4e0a\uff0c\u4f46\u6211\u4eec\u53d1\u73b0\u4e86\u4e00\u4e2a\u4e0e\u652f\u6301\u4e0d\u540c\u7cfb\u7edf\u76f8\u5173\u7684\u95ee\u9898\u3002 \u6211\u4eec\u65e0\u6cd5\u5728 IBM System Z (s390-linux) \u4e0a\u7684 Linux \u4e0a\u8fd0\u884c ONNX \u6a21\u578b\uff0c\u56e0\u4e3a\u5927\u7aef\u683c\u5f0f\u5728 ONNX \u548c MLIR \u4e2d\u6ca1\u6709\u5f97\u5230\u5f88\u597d\u7684\u652f\u6301\u3002 \u51fa\u73b0\u8fd9\u6837\u7684\u95ee\u9898\u6709\u4e24\u4e2a\u539f\u56e0\u3002 \u9996\u5148\uff0cONNX \u4e2d\u5927\u91cf\u7684 public \u8f93\u5165\u6570\u636e\u548c\u6a21\u578b\u90fd\u662f\u4ee5\u5c0f\u7aef\u683c\u5f0f\u5b58\u50a8\u7684\u3002 \u56e0\u6b64\uff0c\u5728\u5927\u7aef\u7cfb\u7edf\u4e2d\u4f7f\u7528\u5b83\u4eec\u4e4b\u524d\uff0c\u5fc5\u987b\u5c06\u5b83\u4eec\u8f6c\u6362\u4e3a\u5927\u7aef\u683c\u5f0f\u3002 \u5176\u6b21\uff0c\u6211\u4eec\u53d1\u73b0 ONNX \u6a21\u578b\u4e2d\u7684\u5e38\u91cf\u503c\u672a\u6b63\u786e\u52a0\u8f7d\u5230 MLIR \u4e2d\u3002 LLVM \u5728 big-endian \u4e2d\u5f97\u5230\u4e86\u5f88\u597d\u7684\u652f\u6301\uff0c\u4f46 MLIR \u5374\u6ca1\u6709\u3002 \u6211\u4eec\u521b\u5efa\u4e86\u4e24\u4e2a\u8865\u4e01\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1a\u4e00\u4e2a\u5728 ONNX \u4e2d\uff0c\u4e00\u4e2a\u5728 MLIR \u4e2d\uff0c\u5b83\u4eec\u73b0\u5728\u53ef\u4ee5\u5728 ONNX \u548c MLIR \u7684\u4e3b\u5206\u652f\u4e0a\u4f7f\u7528\u3002 \u56e0\u6b64\uff0connx-mlir \u73b0\u5728\u652f\u6301 Linux on x86 (x86-Linux)\u3001Linux on Power Systems (ppc64le-Linux)\u3001Linux on IBM Z (s390-Linux) \u548c Windows\u3002</p>"},{"location":"mlc/mlir-toy.html","title":"MLIR-TOY Example","text":"<p>Ref:</p> <ul> <li>MLIR\u7684\u6cd5\u5b9d\uff1aDialects</li> <li>\u3010\u4ece\u96f6\u5f00\u59cb\u5b66\u6df1\u5ea6\u5b66\u4e60\u7f16\u8bd1\u5668\u3011\u5341\u4e8c\uff0cMLIR</li> </ul>"},{"location":"mlc/mlir-toy.html#1-chapter1-toy-ast","title":"1. Chapter1: Toy \u8bed\u8a00\u548c AST","text":"<p>\u8fd9\u4e2a\u6559\u7a0b\u7528\u7684\u662fkaleidoscope \u7684\u53d8\u5f62\uff0c \u4e00\u4e2a\u4f8b\u5b50\u5982\u4e0b\uff1a</p> <pre><code># RUN: toyc-ch1 %s -emit=ast 2&gt;&amp;1 | FileCheck %**s**\n\n# User defined function that \u64cd\u4f5c **\u4efb\u610f** \u5f62\u72b6\u7684\u53c2\u6570\uff08\u7c7b\u6bd4 function template\uff09\ndef multiply_transpose(a, b) {\n  return transpose(a) * transpose(b);\n}\n\ndef main() {\n  # `a` shape &lt;2, 3&gt;; \u5176 shape \u4ece\u5b57\u9762\u91cf\u63a8\u65ad\u800c\u6765\n  var a = [[1, 2, 3], [4, 5, 6]];\n  # b \u4e0e a \u5b8c\u5168\u76f8\u540c, literal array is **implicitly reshaped**\n  var b&lt;2, 3&gt; = [1, 2, 3, 4, 5, 6];\n\n  # This call will specialize `multiply_transpose` with &lt;2, 3&gt; for both\n  # arguments and deduce a return type of &lt;2, 2&gt; in initialization of `c`.\n  var c = multiply_transpose(a, b);\n  # A second call to `multiply_transpose` with &lt;2, 3&gt; for both arguments will\n  # reuse the previously specialized and inferred version and return `&lt;2, 2&gt;`\n  var d = multiply_transpose(b, a);\n  # A new call with `&lt;2, 2&gt;` for both dimension will trigger another\n  # specialization of `multiply_transpose`.\n  var e = multiply_transpose(b, c);\n  # call `multiply_transpose` with \u4e0d\u5339\u914d\u7684 shape will \u5bfc\u81f4\u4e00\u4e2a inference error\n  var f = multiply_transpose(transpose(a), c);\n}\n</code></pre> <p>\u6267\u884c<code>.\\bin\\toyc-ch1 ..\\mlir\\test\\Examples\\Toy\\Ch1\\ast.toy -emit=ast</code></p> <p>\u4e0a\u9762 Toy \u7a0b\u5e8f\u4ea7\u751f\u7684 AST(\u53bb\u6389\u6e90\u7801\u4f4d\u7f6e\u4fe1\u606f):</p> <pre><code>Module:\nFunction\nProto 'multiply_transpose' Params: [a, b]\nBlock {\nReturn\nBinOp: * Call 'transpose' [ var: a ]\nCall 'transpose' [ var: b ]\n} // Block\nFunction\nProto 'main' Params: []\nBlock {\nVarDecl a&lt;&gt; Literal: &lt;2, 3&gt;[ &lt;3&gt;[ 1.000000e+00, 2.000000e+00, 3.000000e+00], &lt;3&gt;[ 4.000000e+00, 5.000000e+00, 6.000000e+00]] VarDecl b&lt;2, 3&gt; Literal: &lt;6&gt;[ 1.000000e+00, 2.000000e+00, 3.000000e+00, 4.000000e+00, 5.000000e+00, 6.000000e+00] VarDecl c&lt;&gt; Call 'multiply_transpose' [ var: a var: b ]\nVarDecl d&lt;&gt; Call 'multiply_transpose' [ var: b var: a ]\nVarDecl e&lt;&gt; Call 'multiply_transpose' [ var: b var: c ]\nVarDecl f&lt;&gt; Call 'multiply_transpose' [ Call 'transpose' [ var: a ]\nvar: c ]\n} // Block\n</code></pre>"},{"location":"mlc/mlir-toy.html#2-chapter2-mlir","title":"2. Chapter2. \u751f\u6210\u521d\u7ea7 MLIR","text":"<p>\u9996\u5148\u8bf4\u4e86\u7f16\u8bd1\u5668\u9886\u57df\u7684\u8f6f\u4ef6\u788e\u7247\u5316\u95ee\u9898\uff1a</p> <p>\u50cf LLVM \u8fd9\u79cd\u7f16\u8bd1\u5668\uff0c \u63d0\u4f9b\u4e86a fixed set of predefined types and (usually low-level / RISC-like) instructions\u3002 \u4f46\u5c3d\u7ba1\u4e0d\u540c\u7684\u524d\u7aef\u53ef\u4ee5\u91cd\u7528LLVM\uff0c\u751f\u6210LLVMIR\u8fd9\u4e00\u7edf\u4e00\u7684\u4e2d\u95f4\u8868\u793a\uff0c\u4f46\u662f \u50cfC++ \u8fd9\u6837\u7684\u8bed\u8a00\u9700\u8981\u81ea\u5df1\u5b9e\u73b0 high level AST(\u4f8b\u5982 clang AST, Rust AST)\uff0c \u5b8c\u6210\u8bed\u8a00\u7279\u5b9a\u7684\u7c7b\u578b\u68c0\u67e5\u3001\u5206\u6790(\u5982C++\u7684\u6a21\u677f\u7279\u5316\uff0cRust\u7684\u751f\u547d\u5468\u671f\u68c0\u67e5)\u7b49\u3002 </p> <p>\u6700\u7ec8\u6bcf\u4e00\u95e8\u9ad8\u7ea7\u8bed\u8a00\u90fd\u8981\u53bb\u8bbe\u8ba1\u5b9e\u73b0\u4e00\u5957\u81ea\u5df1\u7684AST\uff0c \u5c3d\u7ba1\u8fd9\u4e9bAST\u5728\u5f88\u591a\u5730\u65b9\u76f8\u4f3c\uff0c\u5c3d\u7ba1\u518d\u8fd9\u4e9bAST\u4e0a\u7684\u4f18\u5316\u5f88\u7c7b\u4f3c\uff0c\u4f46\u662f\u5f7c\u6b64\u4e4b\u95f4\u65e0\u6cd5\u91cd\u7528\uff0c\u9020\u6210\u8f6f\u4ef6\u788e\u7247\u5316\u3002 </p> <p>MLIR \u5929\u751f\u4e3a\u53ef\u6269\u5c55\u3001\u53ef\u91cd\u7528\u800c\u8bbe\u8ba1\uff0c MLIR\u4e2d\u6709\u5f88\u5c11\u7684\u5185\u7f6e\u7c7b\u578b\u548c\u6307\u4ee4\uff0c \u5373\u6240\u8c13\u7684 (little builtin, everything customizable) \u8bbe\u8ba1\u539f\u5219\u3002\u5b83\u7684\u613f\u666f\u662f\u63d0\u4f9b\u4e00\u5957\u6784\u5efaIR\u7684\u57fa\u7840\u8bbe\u65bd\uff0c \u5373\u4f7f\u7528MLIR \u6765\u6784\u5efaIR\uff0c \u8fd9\u6837\u4e0d\u540c\u7684IR \u4e4b\u95f4\u6709\u5dee\u5f02\uff0c\u4f46\u662f\u80fd\u5171\u7528\u5f88\u591a\u90e8\u5206\uff0c\u80fd\u5229\u7528\u5df2\u7ecf\u5145\u5206\u6210\u719f\u7684\u7f16\u8bd1\u5668\u9886\u57df\u7684\u6210\u679c\u548c\u8fd9\u4e48\u591a\u5e74\u79ef\u7d2f\u4e0b\u6765\u7684\u6700\u4f73\u5b9e\u8df5\uff0c\u800c\u4e0d\u662f\u53bb\u91cd\u590d\"\u53d1\u660e\"\u4e00\u4e9b\"\u65b0\u6280\u672f\"\u51fa\u6765\u3002</p> <p>the system should encourage one to design reusable abstractions and assume they will be used outside of their initial scope.</p> <p>\u4e0a\u9762\u63d0\u5230 MLIR \u88ab\u8bbe\u8ba1\u4e3a\u53ef\u6269\u5c55\u7684\u57fa\u7840\u8bbe\u65bd\uff0c\u6ca1\u6709\u5c01\u95ed\u7684\u5c5e\u6027\u96c6\uff0c\u7c7b\u578b\u96c6\uff0c\u64cd\u4f5c\u96c6\uff1b MLIR \u901a\u8fc7 \u65b9\u8a00 Dialects \u7684\u6982\u5ff5\u6765\u652f\u6301\u8fd9\u79cd\u53ef\u6269\u5c55\u6027\u3002 \u4e00\u4e2a Dialect \u5c31\u662f\u7528\u6237(\u6216\u8005MLIR\u9884\u5b9a\u4e49)\u5728\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e0b\u63d0\u4f9b\u7684\u4e00\u7ec4\u62bd\u8c61\uff0c \u901a\u8fc7 Dialect \u6765\u7edf\u4e00\u4e0d\u540c\u7ea7\u522b\u7684IR\u3002</p> <p>\u9996\u5148\u770b\u4e00\u4e2a Dialect \u7684\u4f8b\u5b50\uff1a \u6267\u884c chapter2 \u7684\u7a0b\u5e8f: <code>./bin/toyc-ch2 ../mlir/test/Examples/Toy/Ch2/codegen.toy -emit=mlir -mlir-print-debuginfo</code> \u5f97\u5230\u7b2c\u4e00\u7ae0\u4e2d\u7a0b\u5e8f\u793a\u4f8b\u7684 Toy Dialect \u8868\u793a\u5982\u4e0b\uff08\u4e0b\u9762\u7684\u4ee3\u7801\u5220\u9664\u6389\u4e86 debug-info \uff09</p> <pre><code>module {\ntoy.func @multiply_transpose(%arg0: tensor&lt;*xf64&gt;, %arg1: tensor&lt;*xf64&gt;) -&gt; tensor&lt;*xf64&gt; {\n// 1. \u8f6c\u7f6e\u4e24\u4e2a\u8f93\u5165\u77e9\u9635\n%0 = toy.transpose(%arg0 : tensor&lt;*xf64&gt;) to tensor&lt;*xf64&gt;\n%1 = toy.transpose(%arg1 : tensor&lt;*xf64&gt;) to tensor&lt;*xf64&gt;\n// 2. \u76f8\u4e58\n%2 = toy.mul %0, %1 : tensor&lt;*xf64&gt;\ntoy.return %2 : tensor&lt;*xf64&gt;\n}\ntoy.func @main() {\n// var a&lt;2, 3&gt; = [[1, 2, 3], [4, 5, 6]];\n%0 = toy.constant dense&lt;[[1.000000e+00, 2.000000e+00, 3.000000e+00], [4.000000e+00, 5.000000e+00, 6.000000e+00]]&gt; : tensor&lt;2x3xf64&gt;\n%1 = toy.reshape(%0 : tensor&lt;2x3xf64&gt;) to tensor&lt;2x3xf64&gt;\n// var b&lt;2, 3&gt; = [1, 2, 3, 4, 5, 6];\n%2 = toy.constant dense&lt;[1.000000e+00, 2.000000e+00, 3.000000e+00, 4.000000e+00, 5.000000e+00, 6.000000e+00]&gt; : tensor&lt;6xf64&gt;\n%3 = toy.reshape(%2 : tensor&lt;6xf64&gt;) to tensor&lt;2x3xf64&gt;\n// var c = multiply_transpose(a, b);\n// var d = multiply_transpose(b, a);\n%4 = toy.generic_call @multiply_transpose(%1, %3) : (tensor&lt;2x3xf64&gt;, tensor&lt;2x3xf64&gt;) -&gt; tensor&lt;*xf64&gt;\n%5 = toy.generic_call @multiply_transpose(%3, %1) : (tensor&lt;2x3xf64&gt;, tensor&lt;2x3xf64&gt;) -&gt; tensor&lt;*xf64&gt;\n// print(d);\ntoy.print %5 : tensor&lt;*xf64&gt;\ntoy.return\n}\n}\n</code></pre> <p>\u5728 MLIR \u4e2d\uff0c <code>Operations</code> \u662f\u62bd\u8c61\u548c\u8ba1\u7b97\u7684\u6838\u5fc3\uff0c MLIR \u4e2d\u7684 instructions, functions, modules \u90fd\u4f7f\u7528 <code>Operation</code> \u6765\u8868\u793a\u3002 \u4ee5\u4e0a\u9762 MLIR toy dialect \u4e2d\u7684 <code>transpose</code> \u64cd\u4f5c\u4e3a\u4f8b\uff0c\u6765\u770b\u770b MLIR \u8868\u8fbe\u5f0f\u662f\u7531\u4ec0\u4e48\u7ec4\u6210\u7684\uff1a <code>transpose(a)</code> \u7684 MLIR \u8868\u8fbe\u5f0f\u7531\u64cd\u4f5c\u7ed3\u679c\u540d\u79f0\u3001Dialect\u547d\u540d\u7a7a\u95f4\u3001\u64cd\u4f5c\u540d\u3001\u53c2\u6570\u5217\u8868\u3001\u8f93\u5165\u53c2\u6570\u7c7b\u578b\u3001\u8f93\u51fa\u7c7b\u578b\u548c\u64cd\u4f5c\u5728\u6e90\u6587\u4ef6\u4e2d\u7684\u4f4d\u7f6e\u7ec4\u6210\u3002</p> <pre><code>%t_tensor = \"toy.transpose\"(%tensor) {inplace = true} : (tensor&lt;2x3xf64&gt;) -&gt; tensor&lt;3x2xf64&gt; loc(\"example/file/path\":12:1)\n</code></pre> <ul> <li><code>%t_tensor</code>\uff1a\u8fd9\u4e2a Operation \u5b9a\u4e49\u7684\u7ed3\u679c\u7684\u540d\u5b57\uff0c\u524d\u9762\u7684%\u662f\u907f\u514d\u51b2\u7a81\uff0c\u89c1 https://mlir.llvm.org/docs/LangRef/#identifiers-and-keywords \u3002\u4e00\u4e2a Operation \u53ef\u4ee5\u5b9a\u4e49 0 \u6216\u8005\u591a\u4e2a\u7ed3\u679c\uff08\u5728 Toy \u8bed\u8a00\u4e2d\uff0c\u53ea\u6709\u5355\u7ed3\u679c\u7684 Operation\uff09\uff0c\u5b83\u4eec\u662f SSA \u503c\u3002\u8be5\u540d\u79f0\u5728\u89e3\u6790\u671f\u95f4\u4f7f\u7528\uff0c\u4f46\u4e0d\u662f\u6301\u4e45\u7684\uff08\u4f8b\u5982\uff0c\u5b83\u4e0d\u4f1a\u5728 SSA \u503c\u7684\u5185\u5b58\u8868\u793a\u4e2d\u8fdb\u884c\u8ddf\u8e2a\uff09\u3002</li> <li><code>\"toy.transpose\"</code> \uff1aOperation \u7684\u540d\u5b57\u3002\u5b83\u5e94\u8be5\u662f\u4e00\u4e2a\u552f\u4e00\u7684\u5b57\u7b26\u4e32\uff0cDialect \u7684\u547d\u540d\u7a7a\u95f4\u524d\u7f00\u4e3a <code>.</code>\u3002 \u8fd9\u53ef\u4ee5\u7406\u89e3\u4e3a Toy Dialect \u4e2d\u7684 transpose Operation\u3002</li> <li><code>(%tensor)</code>\uff1a\u96f6\u4e2a\u6216\u591a\u4e2a\u8f93\u5165\u64cd\u4f5c\u6570\uff08\u6216\u53c2\u6570\uff09\u7684\u5217\u8868\uff0c\u5b83\u4eec\u662f\u7531\u5176\u5b83\u64cd\u4f5c\u5b9a\u4e49\u6216\u5f15\u7528\u5757\u53c2\u6570\u7684 SSA \u503c\u3002</li> <li><code>{ inplace = true }</code>\uff1a\u96f6\u4e2a\u6216\u591a\u4e2a\u5c5e\u6027\u7684\u5b57\u5178\uff0c\u8fd9\u4e9b\u5c5e\u6027\u662f\u59cb\u7ec8\u4e3a\u5e38\u91cf\u7684\u7279\u6b8a\u64cd\u4f5c\u6570\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a <code>inplace</code> \u7684\u5e03\u5c14\u5c5e\u6027\uff0c\u5b83\u7684\u5e38\u91cf\u503c\u4e3a true\u3002</li> <li><code>(tensor&lt;2x3xf64&gt;) -&gt; tensor&lt;3x2xf64&gt;</code>\uff1a\u51fd\u6570\u5f62\u5f0f\u8868\u793a\u7684\u64cd\u4f5c\u7c7b\u578b\uff0c\u524d\u8005\u662f\u8f93\u5165\uff0c\u540e\u8005\u662f\u8f93\u51fa\u3002&lt;2x3xf64&gt;\u53f7\u4e2d\u95f4\u7684\u5185\u5bb9\u63cf\u8ff0\u4e86\u5f20\u91cf\u7684\u5c3a\u5bf82x3\u548c\u5f20\u91cf\u4e2d\u5b58\u50a8\u7684\u6570\u636e\u7c7b\u578bf64\uff0c\u4e2d\u95f4\u4f7f\u7528x\u8fde\u63a5\u3002</li> <li><code>loc(\"example/file/path\":12:1)</code>\uff1a\u6b64\u64cd\u4f5c\u7684\u6e90\u4ee3\u7801\u4e2d\u7684\u4f4d\u7f6e\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a MLIR \u4e2d\u7684 loc \u4fe1\u606f\uff08\u6e90\u7801\u4f4d\u7f6e\u4fe1\u606f\uff09\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u662f\u4e0d\u80fd\u53bb\u9664\u7684\uff0c \u8fd9\u4e0e \u5728 LLVM\u7b49\u5176\u5b83\u7f16\u8bd1\u5668\u4e2d \u4e2d\u9644\u52a0\u7684 Debug \u4fe1\u606f\u4e0d\u540c\u3002</li> </ul> <p>In MLIR, every operation has a mandatory source location associated with it. Contrary to LLVM, where debug info locations are metadata and can be dropped, in MLIR, the location is a core requirement, and APIs depend on and manipulate it. Dropping a location is thus an explicit choice which cannot happen by mistake. </p> <p>\ud83d\udca1\u90a3\u6211\u4eec\u7684 <code>codegen.toy</code> \u4e2d\u7684toy\u8bed\u8a00\u6e90\u7801\u662f\u600e\u4e48\u6837\u8f6c\u6362\u6210\u4e0a\u9762\u8fd9\u4e2a Toy Dialect \u7684\u5462\uff1a</p> <p>\u7b80\u5355\u6765\u8bf4\uff0c\u6211\u4eec\u904d\u5386 toy \u8bed\u8a00\u7684 AST\uff0c \u5c06\u5bf9\u5e94\u7684\u8868\u8fbe\u5f0f Expr \u8f6c\u6362\u6210 Toy dialect \u4e2d\u7684 operation\u3002\u5c31\u5177\u4f53\u5b9e\u73b0\u6765\u8bf4\uff0c\u4ecetoy \u8bed\u8a00\u7684 AST(\u5373 <code>toy::ModuleAST</code>) \u5230 MLIR \u8868\u8fbe\u5f0f(\u5373<code>mlir::ModuleOp</code>) \u7684\u751f\u6210\u8fc7\u7a0b\u5728\u51fd\u6570 <code>dumpMLIR</code> \u4e2d\u5b9e\u73b0\u3002</p> <p>\ud83d\udca1\u5728\u7ee7\u7eed\u63a5\u4e0b\u6765\u7684\u5185\u5bb9\u4e4b\u524d\uff0c \u5148\u6765\u770b\u4e00\u4e0b MLIR Toy Example \u7684\u4ee3\u7801\u7ed3\u6784\uff0c\u4ee5\u7b2c\u4e8c\u7ae0\u4e3a\u4f8b\uff1a</p> <ul> <li> <p>include</p> <ul> <li>toy<ul> <li><code>Dialect.h</code>:  Toy Dialect \u7684\u5b9a\u4e49\uff0c \u4ee5\u53ca Toy Dialect \u4e0a\u7684 Operation \u7684\u5b9a\u4e49\uff1b\u5b9e\u9645\u4e0a\u8be5\u6587\u4ef6\u53ea\u662f\u7b80\u5355\u7684\u5305\u542b \u7531 tablegen \u751f\u6210\u7684\u4ee3\u7801</li> <li><code>MLIRGen.h</code>:  \u58f0\u660e\u4e86 \u4ece Toy AST \u751f\u6210 Toy Dialect \u7684\u63a5\u53e3 <code>mlirGen</code></li> <li><code>Ops.td</code>:     \u6574\u4e2a Example \u4e2d\u6700\u6838\u5fc3\u7684\u90e8\u5206\uff0c \u58f0\u660e\u4e86 Toy Dialect\uff0c \u4ee5\u53ca Toy Dialect \u4e0a\u7684 Operation\uff1b \u5c06\u7531 mlir-tablegen \u751f\u6210c++ \u4ee3\u7801</li> <li><code>AST.h</code>:      Toy \u8bed\u8a00\u7684 AST \u5b9a\u4e49\uff0c \u6765\u81ea Kaleidoscope\uff0c \u4e0d\u9700\u8981\u5173\u5fc3</li> <li><code>Lexer.h</code>:    \u4e00\u4e2a Tokenizer \u7684\u5b9e\u73b0\uff0c\u6765\u81ea Kaleidoscope\uff0c \u4e0d\u9700\u8981\u5173\u5fc3</li> <li><code>Parser.h</code>:   \u4e00\u4e2a\u9012\u5f52\u4e0b\u964d Parser\uff0c\u6765\u81ea Kaleidoscope\uff0c \u4e0d\u9700\u8981\u5173\u5fc3</li> </ul> </li> </ul> </li> <li> <p>mlir</p> <ul> <li><code>Dialect.cpp</code>:  \u4ece Toy AST \u751f\u6210 Toy Dialect \u7684\u5177\u4f53\u5b9e\u73b0\uff0c \u4e3b\u8981\u5728 <code>MLIRGenImpl</code> class \u4e2d\u5b9e\u73b0\uff0c \u8fd9\u4e2a\u7c7b\u66b4\u9732\u4e00\u4e2a <code>mlir::ModuleOp mlirGen(ModuleAST &amp;moduleAST)</code> \uff1b\u5185\u90e8\u5b9e\u73b0\u5bf9\u6bcf\u4e00\u79cd Toy AST(\u5982 ExprAST, FunctionAST \u7b49) \u7684\u8f6c\u6362</li> <li><code>MLIRGen.cpp</code>:  \u4e3b\u8981\u662f Toy Dialect \u4e0a\u7684 Operation \u7684\u5177\u4f53\u5b9e\u73b0\uff0c \u76ee\u524d\u4e0d\u662f\u7279\u522b\u61c2TODO\uff1b \u8fd8\u5b9e\u73b0\u4e86\u6bcf\u79cd Operation \u7684 print \u5177\u4f53\u5b9e\u73b0\uff0c \u7528\u4e8edump</li> </ul> </li> <li>parser<ul> <li><code>AST.cpp</code>:  Toy \u8bed\u8a00\u7684 AST \u5b9a\u4e49\uff0c \u6765\u81ea Kaleidoscope\uff0c \u4e0d\u9700\u8981\u5173\u5fc3</li> </ul> </li> <li><code>toyc.cpp</code>: toy \u8bed\u8a00\u7f16\u8bd1\u5668\u7684 cli\uff0c \u5b9e\u73b0\u4e86 <code>emit-MLIR</code> \u548c <code>emit-AST</code> \u7b49 </li> </ul> <ol> <li> <p>dumpMLIR \u5b9e\u73b0\u5728 <code>examples/toy/Ch2/toys.cpp</code> \u4e2d\uff1a</p> <pre><code>int dumpMLIR() {\nmlir::MLIRContext context;\n// 1. \u5c06\u6211\u4eec\u81ea\u5b9a\u4e49\u7684 toy Dialect \u52a0\u8f7d\u5230\u8fd9\u4e2a MLIR Context\ncontext.getOrLoadDialect&lt;mlir::toy::ToyDialect&gt;();\n\n// 2. \u4ece cli \u8bfb\u53d6\u7684 inputFilename \u662f '.toy' \u6587\u4ef6\u65f6\uff0c \u8c03\u7528 mlirGen\nauto moduleAST = parseInputFile(inputFilename);\nmlir::OwningOpRef&lt;mlir::ModuleOp&gt; module = mlirGen(context, *moduleAST);\n\n// 3. dump\nmodule-&gt;dump();\n// \u8f93\u5165\u662f .mlir \u7b49\u5176\u5b83\u60c5\u51b5\u65f6\uff1b\u7701\u7565\n...\n}\n</code></pre> </li> <li> <p>\u4ece\u4e0a\u9762\u53ef\u4ee5\u770b\u5230\uff0c\u5173\u952e\u5728\u4e8e <code>mlirGen</code> \u65b9\u6cd5\uff0c\u5176\u5b9e\u73b0\u5728 \u6587\u4ef6 <code>examples/toy/Ch2/mlir/MLIRGen.cpp</code> \u7684 <code>MLIRGenImpl::mlirGen</code> \u65b9\u6cd5\u4e2d:</p> <pre><code>/// \u4f7f\u7528 RTTI \u5224\u65ad\u8868\u8fbe\u5f0f\u7c7b\u578b\uff0c Dispatch \u5230\u5bf9\u5e94\u7684 codegen \u65b9\u6cd5\nmlir::Value mlirGen(ExprAST &amp;expr) {\nswitch (expr.getKind()) {\ncase toy::ExprAST::Expr_BinOp:\nreturn mlirGen(cast&lt;BinaryExprAST&gt;(expr));\ncase toy::ExprAST::Expr_Var:\nreturn mlirGen(cast&lt;VariableExprAST&gt;(expr));\ncase toy::ExprAST::Expr_Literal:\nreturn mlirGen(cast&lt;LiteralExprAST&gt;(expr));\ncase toy::ExprAST::Expr_Call:\nreturn mlirGen(cast&lt;CallExprAST&gt;(expr));\ncase toy::ExprAST::Expr_Num:\nreturn mlirGen(cast&lt;NumberExprAST&gt;(expr));\ndefault:\nemitError();\nreturn nullptr;\n}\n}\n</code></pre> </li> <li> <p>codeGen \u7684\u5177\u4f53\u8fc7\u7a0b\u5c31\u662f\u904d\u5386\u6574\u4e2aAST\uff0c \u751f\u6210\u5bf9\u5e94\u7684 MLIR Operation\uff0c \u63d2\u5165\u5230 <code>OpBuilder::block</code> \u4e2d\u3002 \u4e0b\u9762\u662f\u4e09\u4e2a\u4f8b\u5b50\uff1a</p> <pre><code>// 1. \u5c06 toy AST \u4e2d\u7684 `NumberExprAST` \u8f6c\u6210 `ConstantOp`\nmlir::Value mlirGen(NumberExprAST &amp;num) {\nreturn builder.create&lt;ConstantOp&gt;(loc(num.loc()), num.getValue());\n}\n// 2. \u5c06 toy AST \u4e2d\u7684 `BinaryExprAST` \u8f6c\u6210 `AddOp` or `MulOp`\nmlir::Value mlirGen(BinaryExprAST &amp;binop) {\nmlir::Value lhs = mlirGen(*binop.getLHS());\nif (!lhs) return nullptr;\nmlir::Value rhs = mlirGen(*binop.getRHS());\nif (!rhs) return nullptr;\nswitch (binop.getOp()) {\ncase '+':\nreturn builder.create&lt;AddOp&gt;(loc(binop.loc()), lhs, rhs);\ncase '*':\nreturn builder.create&lt;MulOp&gt;(loc(binop.loc()), lhs, rhs);\n}\n}\n// 3. \u5c06 toy AST \u4e2d\u7684 `CallExprAST` \u8f6c\u6210 `TransposeOp` \u6216\u5176\u5b83 Op\nmlir::Value mlirGen(CallExprAST &amp;call) {\n// \u9996\u5148\u4e3a operands \u8fdb\u884c Codegen\nSmallVector&lt;mlir::Value, 4&gt; operands;\nfor (auto &amp;expr : call.getArgs()) {\nauto arg = mlirGen(*expr);\noperands.push_back(arg);\n}\n// Builtin calls \nif (call.getCallee() == \"transpose\") {\nreturn builder.create&lt;TransposeOp&gt;(loc(call.loc()), operands[0]);\n}\n// \u5426\u5219 this is a call to a user-defined function.\n...\n}\n</code></pre> <p>\u8fc7\u7a0b\u4e2d\u751f\u6210\u7684 Operation \u4f1a\u6309\u987a\u5e8f\u88ab insert \u5230 <code>mlir::OpBuilder::block</code> \u4e2d\u3002 \u6700\u7ec8\u904d\u5386\u751f\u6210\u7684 MLIR Operation\uff0c \u6267\u884c\u6253\u5370\uff0c\u5c31\u5f97\u5230\u4e86\u4e0a\u9762\u6253\u51fa\u6765\u7684 MLIR \u8868\u8fbe\u5f0f\u3002 \u8fd9\u91cc\u7684\u95ee\u9898\u662f <code>AddOp</code> <code>ConstantOp</code> \u7b49 Op \u662f toy dialect \u4e2d\u7684\u5185\u5bb9\uff0c \u56e0\u6b64\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u5b9a\u4e49\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\uff0c \u90a3\u4e48\u5177\u4f53\u8be5\u5982\u4f55\u5229\u7528 MLIR \u8fd9\u4e2a\u6846\u67b6\uff0c\u53bb\u5b9a\u4e49\u6211\u4eec\u81ea\u5df1\u7684 dialect \u5462\uff1f</p> </li> </ol>"},{"location":"mlc/mlir-toy.html#21-toy-dialect","title":"2.1. \u5b9a\u4e49\u4e00\u4e2a Toy Dialect","text":"<p>\u63a5\u4e0b\u8fd9\u90e8\u5206\u662f \u5b98\u65b9\u6587\u6863\u7ffb\u8bd1\uff1a</p> <p>\ud83d\udca1\u5b9a\u4e49\u4e00\u4e2a Toy Dialect</p> <p>\u4e3a\u4e86\u6709\u6548\u5730\u4e0eMLIR\u4ea4\u4e92\uff0c\u6211\u4eec\u5c06\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684toy\u65b9\u8a00\u3002\u8fd9\u79cd\u65b9\u8a00\u5c06\u6a21\u62dftoy\u8bed\u8a00\u7684\u7ed3\u6784\uff0c\u5e76\u4e3a\u9ad8\u7ea7\u5206\u6790\u548c\u8f6c\u6362\u63d0\u4f9b\u4e00\u6761\u7b80\u5355\u7684\u9014\u5f84\u3002</p> <pre><code>/// Toy dialect \u7ee7\u627f\u81ea mlir::Dialect\n/// \u5e76\u4e14 \u5728\u6784\u9020\u51fd\u6570\u4e2d registers \u4e00\u7cfb\u5217\u81ea\u5b9a\u4e49\u7684 \u5c5e\u6027\u3001\u64cd\u4f5c\u3001\u7c7b\u578b\n/// \u5b83\u4e5f\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199\u4e00\u4e9b virtual methods \u6539\u53d8\u4e00\u4e9b general behavior\n/// (\u5728\u4e0b\u4e00\u4e2a chapter \u4e2d\u5c06\u4f1a\u8ba8\u8bba)\nclass ToyDialect : public mlir::Dialect {\npublic:\nexplicit ToyDialect(mlir::MLIRContext *ctx);\n\nstatic llvm::StringRef getDialectNamespace() { return \"toy\"; }\n};\n</code></pre> <p>\u73b0\u5728\u53ef\u4ee5\u5728\u5168\u5c40\u6ce8\u518c\u8868\u4e2d\u6ce8\u518c\u8be5\u65b9\u8a00\uff1a</p> <pre><code>mlir::registerDialect&lt;ToyDialect&gt;();\n</code></pre> <p>\u4ece\u73b0\u5728\u5f00\u59cb\u521b\u5efa\u7684\u4efb\u4f55\u65b0\u7684 <code>MLIRContext</code> \u90fd\u5c06\u5305\u542btoy\u65b9\u8a00\u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u8c03\u7528\u7279\u5b9a\u7684 hooks \u6765\u89e3\u6790\u5c5e\u6027\u548c\u7c7b\u578b\u3002</p> <p>\ud83d\udca1\u5b9a\u4e49\u4e00\u4e2a Toy Dialect \u4e0a\u7684 Operation</p> <p>\u6709\u4e86 toy dialect\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u6ce8\u518c\u8be5 Dialect \u4e0a\u7684\u64cd\u4f5c\u4e86\u3002\u8fd9\u5c06\u5141\u8bb8\u63d0\u4f9b\u8bed\u4e49\u4fe1\u606f\u7ed9\u5269\u4f59\u7cfb\u7edf\u8c03\u7528\u3002\u4ee5 <code>toy.constant</code> \u64cd\u4f5c\u7684\u521b\u5efa\u8fc7\u7a0b\u4e3a\u4f8b\uff1a</p> <pre><code>%4 = \"toy.constant\"() {value = dense&lt;1.0&gt; : tensor&lt;2x3xf64&gt;} : () -&gt; tensor&lt;2x3xf64&gt;\n</code></pre> <p><code>toy.constant</code> \u64cd\u4f5c\u6ca1\u6709\u53c2\u6570\uff0c\u6709\u4e00\u4e2a\u540d\u4e3avalue \u7684 dense elements\u5c5e\u6027\u7528\u6765\u8868\u793aconstant value\uff0c\u8fd4\u56de\u4e00\u4e2a RankedTensorType\u3002<code>ConstantOp</code> \u7ee7\u627f\u81ea CRTP <code>mlir::op</code>\uff0c\u8be5\u7c7b\u8fd8\u9700\u8981\u4e00\u4e9b\u53ef\u9009\u7684 Traits(<code>mlir::OpTrait</code>) \u6765\u7ea6\u675f\u5176\u884c\u4e3a\u3002\u8fd9\u4e9b\u7279\u5f81\u53ef\u4ee5\u63d0\u4f9b\u989d\u5916\u7684accessors, verification\u7b49\u529f\u80fd\u3002</p> <pre><code>class ConstantOp : public mlir::Op&lt;ConstantOp,\n/// ConstantOp takes no inputs.\nmlir::OpTrait::ZeroOperands,\n/// ConstantOp returns a single result.\nmlir::OpTrait::OneResult,\n/// result of getType is `Type`.\nmlir::OpTrait::OneTypedResult&lt;Type&gt;::Impl&gt; {\n\npublic:\n/// Inherit the constructors from the base Op class.\nusing Op::Op;\n\n/// \u4e3a\u8fd9\u4e2a operation \u63d0\u4f9b\u4e00\u4e2a unique name\n/// MLIR \u4f7f\u7528\u8fd9\u4e2a\u540d\u5b57\u5728\u5168\u5c40\u6ce8\u518c\u8be5 Operation\nstatic llvm::StringRef getOperationName() { return \"toy.constant\"; }\n\n/// \u8fd4\u56de constant value by fetching it from the attribute.\nmlir::DenseElementsAttr getValue();\n\n/// Operations \u9664\u4e86 traits \u8fd8\u53ef\u63d0\u4f9b\u989d\u5916\u7684 verification\uff1b\n/// \u8fd9\u91cc\u6211\u4eec\u5c06\u786e\u4fdd specific invariants of the constant\n/// operation are upheld. \u4f8b\u5982\uff0c \u8fd4\u56de\u7c7b\u578b\u5fc5\u987b\u662f TensorType.\nLogicalResult verify();\n\n/// \u63d0\u4f9b\u4eceinput values \u6784\u5efa\u8be5 operation \u7684\u63a5\u53e3\n/// builder \u5c06\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u63a5\u53e3\uff0c\u4ece\u800c\u80fd\u591f\u7b80\u5355\u5730\u751f\u6210\u8be5 operation \u5b9e\u4f8b:\n///   ``mlir::OpBuilder::create&lt;ConstantOp&gt;(...)``\n/// This method populates the given `state` that MLIR uses to create\n/// operations. This state is a collection of all of the discrete elements\n/// that an operation may contain.\n/// Build a constant with the given return type and `value` attribute.\nstatic void build(mlir::OpBuilder &amp;builder, mlir::OperationState &amp;state,\nmlir::Type result, mlir::DenseElementsAttr value);\n/// Build a constant and reuse the type from the given 'value'.\nstatic void build(mlir::OpBuilder &amp;builder, mlir::OperationState &amp;state,\nmlir::DenseElementsAttr value);\n/// Build a constant \u5e7f\u64ad given 'value'.\nstatic void build(mlir::OpBuilder &amp;builder, mlir::OperationState &amp;state,\ndouble value);\n};\n</code></pre> <p>\u5e76\u4e14\u6211\u4eec\u5728Toy Dialect\u6784\u9020\u51fd\u6570\u4e2d\u6ce8\u518c\u6b64\u64cd\u4f5c\uff1a</p> <pre><code>ToyDialect::ToyDialect(mlir::MLIRContext *ctx)\n: mlir::Dialect(getDialectNamespace(), ctx) {\naddOperations&lt;ConstantOp&gt;();\n}\n</code></pre> <p>\u4e0d\u8fc7\u5728\u8fd9\u91cc\u6211\u4eec\u4e5f\u53ef\u4ee5\u770b\u5230\uff0c\u4e3a\u4e86\u9002\u914d\u5404\u79cd\u63a5\u53e3\uff0c\u5b9a\u4e49\u4e00\u4e2a <code>ConstantOp</code> \u5df2\u7ecf\u5341\u5206\u590d\u6742\u4e86\u3002 MLIR \u4e3a\u4e86\u89e3\u51b3\u8fd9\u79cd\u590d\u6742\u6027\uff0c \u63d0\u4f9b\u4e86\u4e00\u4e2a\u57fa\u4e8e TableGen \u7684 Operation Definition Specification (ODS) Framework\uff0c \u7528\u6237\u901a\u8fc7ODS \u58f0\u660e dialect \u53ca\u5176 Operations\uff0c MLIR \u6846\u67b6\u901a\u8fc7<code>mir-tblgen</code> \u5de5\u5177\u5c06\u8be5\u58f0\u660e\u5f0f\u8bed\u8a00\u81ea\u52a8\u8f6c\u5316\u4e3aC++ \u4ee3\u7801\uff0c \u7b80\u5316\u4e86\u7528\u6237\u81ea\u5b9a\u4e49 dialect \u7684\u6d41\u7a0b\u3002 </p> <p>\u8fd9\u79cd\u65b9\u5f0f\u662f MLIR \u63a8\u8350\u7684\u5b9a\u4e49 Dialect \u7684\u65b9\u5f0f\uff0c \u5728 Toy \u8bed\u8a00\u4e2d\u6211\u4eec\u7684 toy Dialect\uff0c\u4e5f\u662f\u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5\u6765\u5b9a\u4e49\u7684\u3002\u5177\u4f53\u7684\u6587\u4ef6\u5728 <code>mlir/examples/toy/Ch2/include/toy/Ops.td</code> \uff0c </p> <pre><code>def Toy_Dialect : Dialect {\nlet name = \"toy\";\nlet cppNamespace = \"::mlir::toy\";\nlet emitAccessorPrefix = kEmitAccessorPrefix_Prefixed;\n}\n\n// Inherits from the base `Op` class in `OpBase.td`\n// And provides:\n//   * Toy operation \u7684 parent dialect(\u5373 toy dialect).\n//   * Toy operation \u7684 mnemonic(\u52a9\u8bb0\u8bcd)\uff0c or the name without the dialect prefix.\n//   * A list of traits for the operation.\nclass Toy_Op&lt;string mnemonic, list&lt;Trait&gt; traits = []&gt; :\nOp&lt;Toy_Dialect, mnemonic, traits&gt;;\n</code></pre> <p>\u5176\u4e2d <code>ConstantOp</code> \u7684\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>// ConstantOp(\u5177\u4f53\u7684 Operation) \u7ee7\u627f 'Toy_Op'.\n// \u8fd9\u91cc\u4e3a constant operation \u63d0\u4f9b\u4e86\u4e00\u4e2a\u52a9\u8bb0\u8bcd \u548c\u4e00\u4e2a traits \u5217\u8868.\n// Constant operation \u6709 trait 'NoSideEffect' \u56e0\u4e3a\u5b83\u662f pure operation, so that may be removed if dead.\ndef ConstantOp : Toy_Op&lt;\"constant\", [NoSideEffect]&gt; {\n// summary and description. \u53ef\u88ab\u7528\u4e8e\u81ea\u52a8\u751f\u6210\u6587\u6863\nlet summary = \"constant\";\nlet description = [{\nConstant operation turns a literal into an SSA value. The data is attached\nto the operation as an attribute. For example:\n\n    ```mlir\n%0 = toy.constant dense&lt;[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]&gt;\n: tensor&lt;2x3xf64&gt;\n```\n}];\n\n// The constant operation \u63a5\u6536\u4e00\u4e2a\u5c5e\u6027\u4f5c\u4e3a\u552f\u4e00\u7684\u8f93\u5165\nlet arguments = (ins F64ElementsAttr:$value);\n\n// The constant operation \u8fd4\u56de\u4e00\u4e2a TensorType \u7c7b\u578b\u7684\u503c\nlet results = (outs F64Tensor);\n\n// Indicate that the operation has a custom parser and printer method.\nlet hasCustomAssemblyFormat = 1;\n\n// Add custom build methods for the constant operation. These method populates\n// the `state` that MLIR uses to create operations, i.e. these are used when\n// using `builder.create&lt;ConstantOp&gt;(...)`.\nlet builders = [\n// Build a constant with a given constant tensor value.\nOpBuilder&lt;(ins \"DenseElementsAttr\":$value), [{\nbuild($_builder, $_state, value.getType(), value);\n}]&gt;,\n\n// Build a constant with a given constant floating-point value.\nOpBuilder&lt;(ins \"double\":$value)&gt;\n];\n\n// https://mlir.llvm.org/docs/Tutorials/Toy/Ch-2/#verifying-operation-semantics\nlet hasVerifier = 1;\n}\n</code></pre> <p>\u53ef\u4ee5\u6ce8\u610f\u5230\u8fd9\u91cc \u4e0e\u4e0a\u9762\u7684 C++ \u4ee3\u7801\u76f8\u6bd4\u7f3a\u5c11\u4e86 <code>ZeroOperands</code> and <code>OneResult</code> traits;</p> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u4f7f\u7528 <code>mlir-tblgen</code> \u5de5\u5177\u81ea\u52a8\u5c06 <code>.td</code> \u63cf\u8ff0\u6587\u4ef6\u8f6c\u6210 C++ \u4ee3\u7801\uff1a</p> <ol> <li> <p><code>mlir-tblgen -gen-dialect-decls ../mlir/example/toy/Ch2/include/toy/Ops.td -I ../mlir/include</code></p> <p>\u751f\u6210\u4e86<code>ToyDialect</code> \u7684c++\u4ee3\u7801\u5b9a\u4e49\uff1a</p> <pre><code>/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\\\n|*                                                                            *|\n|* Dialect Declarations                                                       *|\n|*                                                                            *|\n|* Automatically generated file, do not edit!                                 *|\n|*                                                                            *|\n\\*===----------------------------------------------------------------------===*/\n\nnamespace mlir {\nnamespace toy {\n\nclass ToyDialect : public ::mlir::Dialect {\nexplicit ToyDialect(::mlir::MLIRContext *context);\n\nvoid initialize();\nfriend class ::mlir::MLIRContext;\npublic:\n~ToyDialect() override;\nstatic constexpr ::llvm::StringLiteral getDialectNamespace() {\nreturn ::llvm::StringLiteral(\"toy\");\n}\n};\n} // namespace toy\n} // namespace mlir\nMLIR_DECLARE_EXPLICIT_TYPE_ID(::mlir::toy::ToyDialect)\n</code></pre> <p>\u8fd9\u4e9b\u4ee3\u7801\u5728 <code>Dialect.cpp</code> \u4e2d \u88ab\u5305\u542b\u8fdb\u53bb: <code>#include \"toy/Dialect.cpp.inc\"</code></p> </li> <li> <p><code>mlir-tblgen -gen-op-defs ../mlir/example/toy/Ch2/include/toy/Ops.td -I ../mlir/include</code></p> <p>\u7c7b\u4f3c\uff0c\u751f\u6210 Operations \u7684\u5b9a\u4e49\uff0c \u4ee5 <code>ConstantOp</code>\u4e3a\u4f8b\uff0c \u751f\u6210\u7684\u4ee3\u7801\u5728 <code>toy/Ops.cpp.inc</code> \u548c <code>toy/Ops/h/inc</code> \u4e2d\uff0c\u592a\u957f\u4e0d\u653e\u5728\u8fd9\u91cc</p> </li> </ol>"},{"location":"mlc/mlir-toy.html#3-chapter-3-high-level","title":"3. Chapter 3: High-level \u5206\u6790\u548c\u8f6c\u6362","text":"<p>MLIR \u4e2d\u4f7f\u7528 \u8868\u8fbe\u5f0f\u5339\u914d \u548c \u91cd\u5199 \u6765\u5b8c\u6210 MLIR \u5206\u6790/\u8f6c\u6362\u3002\u8fd9\u4e2a\u6559\u7a0b\u4e2d\u5206\u522b\u4ecb\u7ecd\u4f7f\u7528 C++ \u6a21\u5f0f\u5339\u914d\u548c\u91cd\u5199\u4ee5\u53ca\u57fa\u4e8e DRR \u6846\u67b6 \u6765\u5b9a\u4e49\u91cd\u5199\u89c4\u5219\uff0c\u7136\u540e\u4f7f\u7528 ODS \u6846\u67b6\u6765\u81ea\u52a8\u751f\u6210\u4ee3\u7801\u3002</p> <p>\u8fd9\u91cc\u4ee5 toy \u8bed\u8a00\u4e2d\u7684\u4e00\u4e2a\u8fde\u7eed\u4e24\u6b21\u8f6c\u7f6e\u7684\u7a0b\u5e8f\u4e3a\u4f8b\uff1a</p> <pre><code>def transpose_transpose(x) {\n  return transpose(transpose(x));\n}\n</code></pre> <p>\u4e0d\u505a\u8f6c\u6362\u7684\u60c5\u51b5\u4e0b\u751f\u6210\u7684 toy dialect \u5982\u4e0b\uff1a</p> <pre><code>func @transpose_transpose(%arg0: tensor&lt;*xf64&gt;) -&gt; tensor&lt;*xf64&gt; {\n%0 = toy.transpose(%arg0 : tensor&lt;*xf64&gt;) to tensor&lt;*xf64&gt;\n%1 = toy.transpose(%0 : tensor&lt;*xf64&gt;) to tensor&lt;*xf64&gt;\ntoy.return %1 : tensor&lt;*xf64&gt;\n}\n</code></pre> <p>\u5982\u679c\u5c06\u8fd9\u4e2a\u7a0b\u5e8f\u4f7f\u7528 C++ \u5199\uff0c \u5927\u6982\u957f\u8fd9\u4e2a\u6837\u5b50\uff1a</p> <pre><code>void sink(void *);\nvoid double_transpose(int A[N][M]) {\nint B[M][N];\nfor(int i = 0; i &lt; N; ++i) {\nfor(int j = 0; j &lt; M; ++j) {\nB[j][i] = A[i][j];\n}\n}\nfor(int i = 0; i &lt; N; ++i) {\nfor(int j = 0; j &lt; M; ++j) {\nA[i][j] = B[j][i];\n}\n}\nsink(A);\n}\n</code></pre> <p>\u8fd9\u4e2a\u7a0b\u5e8f\u81f3\u5c11\u5bf9\u4e8e\u73b0\u5728\u7684 clang \u800c\u8a00\uff0c \u65e0\u6cd5\u5c06\u4e24\u6b21\u8fde\u7eed\u7684\u8f6c\u7f6e\u6d88\u9664\u3002\u6211\u4eec\u63a5\u4e0b\u6765\u770b\u4e00\u4e0b\u5982\u4f55\u5229\u7528 MLIR \u4e2d\u7684 \u6a21\u5f0f\u5339\u914d\u548c\u91cd\u5199\u673a\u5236\u5b9e\u73b0 IR \u7684\u8f6c\u6362</p>"},{"location":"mlc/mlir-toy.html#31-c-pass","title":"3.1. \u4f7f\u7528 C++ \u5199 pass","text":"<p>\u53ef\u4ee5\u76f4\u63a5\u5199 C++ \u6765\u91cd\u5199 IR\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0 <code>RewritePattern</code> \u63d2\u5165 MLIR Canonicalizer pass\uff1a</p> <pre><code>/// \u6298\u53e0 `transpose(transpose(x))` -&gt; `x`\nstruct SimplifyRedundantTranspose : public mlir::OpRewritePattern&lt;TransposeOp&gt; {\n/// We register this pattern to match every toy.transpose in the IR.\n/// The \"benefit\" is used by the framework to order the patterns and process\n/// them in order of profitability.\nSimplifyRedundantTranspose(mlir::MLIRContext *context)\n: OpRewritePattern&lt;TransposeOp&gt;(context, /*benefit=*/1) {}\n\n/// \u8fd9\u4e2a\u65b9\u6cd5\u5c1d\u8bd5\u5339\u914d\u56fa\u5b9a\u7684\u6a21\u5f0f(\u5373\u4e24\u4e2a\u8fde\u7eed\u7684\u8f6c\u7f6e)\uff0c\u5e76\u8fdb\u884c\u91cd\u5199. \nmatchAndRewrite(TransposeOp op,\nmlir::PatternRewriter &amp;rewriter) const override {\n// Look through the input of the current transpose.\nmlir::Value transposeInput = op.getOperand();\nTransposeOp transposeInputOp = transposeInput.getDefiningOp&lt;TransposeOp&gt;();\n\n// Input defined by another transpose? If not, no match.\nif (!transposeInputOp)\nreturn failure();\n\n// Otherwise, we have a redundant transpose. Use the rewriter.\nrewriter.replaceOp(op, {transposeInputOp.getOperand()});\nreturn success();\n}\n};\n</code></pre> <p>\u4e0a\u8ff0\u4ee3\u7801\u4f4d\u4e8e <code>examples/toy/Ch3/mlir/ToyCombine.cpp</code>\uff0c \u9664\u4e86\u91cd\u5199\u89c4\u5219\u4e4b\u5916\uff0c \u8fd8\u9700\u8981\u5c06\u8be5\u89c4\u5219\u6dfb\u52a0\u5230 \u89c4\u8303\u5316\u6846\u67b6 (Canonicalization Framework) :</p> <pre><code>/// \u5c06\u6211\u4eec\u7684 SimplifyRedundantTranspose patterns \u52a0\u5165\u5230 \"canonicalization\" \u91cd\u5199\u96c6\u5408\u4e2d\n/// \u4ece\u800c\u6267\u884c Canonicalize pass \u65f6\uff0c\u4f1a\u6267\u884c\u5230\u8fd9\u91cc\nvoid TransposeOp::getCanonicalizationPatterns(RewritePatternSet &amp;results,\nMLIRContext *context) {\nresults.add&lt;SimplifyRedundantTranspose&gt;(context);\n}\n</code></pre> <p>\u5c06\u8868\u8fbe\u5f0f\u91cd\u5199\u89c4\u5219\u6dfb\u52a0\u5230\u4e86\u89c4\u8303\u5316\u6846\u67b6\u540e\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4fee\u6539\u4e00\u4e0b\u5b9a\u4e49 <code>TransposeOp</code> \u7684 <code>.td</code> \u6587\u4ef6\uff0c\u542f\u7528\u89c4\u8303\u5316\u6846\u67b6(\u6dfb\u52a0 <code>let hasCanonicalizer=1</code>)\uff0c\u540c\u65f6\u7ed9 <code>TransposeOp</code> \u7684\u5b9a\u4e49\u6dfb\u52a0\u4e00\u4e2a <code>NoSideEffect</code> \u7684 trait\uff0c \u73b0\u5728 <code>Transpose</code> \u64cd\u4f5c\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>def TransposeOp : Toy_Op&lt;\"transpose\", [NoSideEffect]&gt; {\nlet summary = \"transpose operation\";\nlet arguments = (ins F64Tensor:$input);\nlet results = (outs F64Tensor);\nlet assemblyFormat = [{\n`(` $input `:` type($input) `)` attr-dict `to` type(results)\n}];\n\n// Enable registering canonicalization patterns with this operation.\nlet hasCanonicalizer = 1;\n\nlet builders = [\nOpBuilder&lt;(ins \"Value\":$input)&gt;\n];\nlet hasVerifier = 1;\n}\n</code></pre> <p>\u6211\u4eec\u8fd8\u9700\u8981\u66f4\u65b0 <code>toyc.cpp</code>\uff0c \u4ee5\u6dfb\u52a0\u4f18\u5316 pass\u3002\u5728 MLIR \u4e2d\uff0c\u4f18\u5316\u4ee5\u7c7b\u4f3c\u4e8e LLVM \u7684\u65b9\u5f0f\u901a\u8fc7 PassManager \u8fd0\u884c\uff1a</p> <pre><code>mlir::PassManager pm(module-&gt;getName());\npm.addNestedPass&lt;mlir::toy::FuncOp&gt;(mlir::createCanonicalizerPass());\n</code></pre> <p>\u7136\u540e\u8fd0\u884c <code>./bin/toyc-ch3 ../mlir/test/Examples/Toy/Ch3/transpose_transpose.toy -emit=mlir -opt</code> \u5f97\u5230</p> <pre><code>module {\n// \u6ce8\u610f\u5bf9\u6bd4\u8fd9\u91cc\u4f18\u5316\u540e \u4e0e \u4e4b\u524d\u672a\u4f18\u5316\ntoy.func @transpose_transpose(%arg0: tensor&lt;*xf64&gt;) -&gt; tensor&lt;*xf64&gt; {\ntoy.return %arg0 : tensor&lt;*xf64&gt;\n}\ntoy.func @main() {\n%0 = toy.constant dense&lt;[[1.000000e+00, 2.000000e+00, 3.000000e+00], [4.000000e+00, 5.000000e+00, 6.000000e+00]]&gt; : tensor&lt;2x3xf64&gt;\n%1 = toy.generic_call @transpose_transpose(%0) : (tensor&lt;2x3xf64&gt;) -&gt; tensor&lt;*xf64&gt;\ntoy.print %1 : tensor&lt;*xf64&gt;\ntoy.return\n}\n}\n</code></pre> <p>\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\uff0c \u5982\u679c\u6211\u4eec\u4e0d\u4fee\u6539 <code>.td</code> \u4e2d <code>TransposeOp</code> \u7684 trait\uff08\u6dfb\u52a0\u4e00\u4e2a <code>NoSideEffect</code>\uff09\uff0c \u5219\u4f1a\u51fa\u73b0\u4ee5\u4e0b\u7ed3\u679c\uff1a</p> <pre><code>toy.func @transpose_transpose(%arg0: tensor&lt;*xf64&gt;) -&gt; tensor&lt;*xf64&gt; {\n%0 = toy.transpose(%arg0 : tensor&lt;*xf64&gt;) to tensor&lt;*xf64&gt;\ntoy.return %arg0 : tensor&lt;*xf64&gt;\n}\n</code></pre> <p>\u8fd9\u662f\u56e0\u4e3a\uff0c \u6211\u4eec\u7684\u6a21\u5f0f\u7528\u51fd\u6570\u8f93\u5165\u66ff\u6362\u4e86\u6700\u540e\u4e00\u4e2a\u53d8\u6362\uff0c\u5e76\u7559\u4e0b\u4e86\u73b0\u5728\u6b7b\u6389\u7684\u8f6c\u7f6e\u8f93\u5165\u3002 Canonicalizer \u77e5\u9053\u6e05\u7406\u6b7b\u64cd\u4f5c\uff1b\u7136\u800c\uff0cMLIR \u4fdd\u5b88\u5730\u5047\u8bbe\u64cd\u4f5c\u53ef\u80fd\u6709\u526f\u4f5c\u7528\u3002\u800c\u5728\u4e3a <code>TransposeOp</code> \u6dfb\u52a0\u4e00\u4e2a <code>NoSideEffect</code> \u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u8fd9\u4e2a trait \u5728 <code>include/mlir/Interfaces/SideEffectInterfaces.td</code> \u4e2d\u5b9a\u4e49 TODO: \u4e4b\u540e\u53ef\u4ee5\u7814\u7a76\u4e00\u4e0b \u5728 MLIR \u4e2d\u600e\u4e48\u5b9a\u4e49 \u5e76\u4f7f\u7528 trait</p>"},{"location":"mlc/mlir-toy.html#32-drr-pass","title":"3.2. \u4f7f\u7528 DRR \u5199 pass","text":"<p>MLIR \u8fd8\u63d0\u4f9b\u4e86\u4e00\u79cd\u57fa\u4e8e DDR \u89c4\u5219\u7684\u65b9\u5f0f\u6765\u81ea\u52a8\u751f\u6210 \u6a21\u5f0f\u5339\u914d \u548c \u91cd\u5199\u51fd\u6570\uff0c\u4ee3\u7801\u751f\u6210\u7684\u90e8\u5206\u4ecd\u7136\u57fa\u4e8e ODS \u6846\u67b6\u5b9e\u73b0\u3002Declarative, rule-based pattern-match and rewrite (DRR) \u5b83\u662f\u4e00\u79cd\u57fa\u4e8e DAG \u7684\u58f0\u660e\u5f0f\u91cd\u5199\u5668\uff0c\u63d0\u4f9b\u57fa\u4e8e tablegen \u7684\u6a21\u5f0f\u5339\u914d\u548c\u91cd\u5199\u89c4\u5219\u7684\u53e5\u6cd5\uff1a</p> <pre><code>class Pattern&lt;\ndag sourcePattern, list&lt;dag&gt; resultPatterns,\nlist&lt;dag&gt; additionalConstraints = [],\ndag benefitsAdded = (addBenefit 0)&gt;;\n</code></pre> <p>\u63a5\u4e0b\u6765\u4ee5\u6d88\u9664 MLIR \u8868\u8fbe\u5f0f\u4e2d\u5197\u4f59\u7684\u5f20\u91cf reshape \u64cd\u4f5c\u4e3a\u4f8b:</p> <pre><code>def main() {\n  var a&lt;2,1&gt; = [1, 2];\n  var b&lt;2,1&gt; = a;\n  var c&lt;2,1&gt; = b;\n  print(c);\n}\n</code></pre> <p>\u5bf9\u5e94\u7684 toy dialect \u5982\u4e0b\uff1a</p> <pre><code>module  {\nfunc @main() {\n%0 = toy.constant dense&lt;[1.000000e+00, 2.000000e+00]&gt; : tensor&lt;2xf64&gt;\n%1 = toy.reshape(%0 : tensor&lt;2xf64&gt;) to tensor&lt;2x1xf64&gt;\n%2 = toy.reshape(%1 : tensor&lt;2x1xf64&gt;) to tensor&lt;2x1xf64&gt;\n%3 = toy.reshape(%2 : tensor&lt;2x1xf64&gt;) to tensor&lt;2x1xf64&gt;\ntoy.print %3 : tensor&lt;2x1xf64&gt;\ntoy.return\n}\n}\n</code></pre> <p>a\uff0cb\uff0cc \u5b8c\u5168\u76f8\u540c\uff0c \u6211\u4eec\u6709\u673a\u4f1a\u5728 dialect \u4e2d\u6d88\u9664\u5197\u4f59\u7684 <code>reshape</code> \u3002 \u4e0b\u9762\u6211\u4eec\u8981\u57fa\u4e8e DDR \u6846\u67b6\u6765\u5b9a\u4e49\u5339\u914d\u548c\u6d88\u9664\u89c4\u5219\u3002</p> <p>\u7c7b\u4f3c\u4e8e <code>SimplifyRedundantTranspose</code> \u7684\u9488\u5bf9 \u5197\u4f59 <code>reshape</code> \u7684\u4f18\u5316\u53ef\u4ee5\u4f7f\u7528 DRR \u66f4\u7b80\u5355\u5730\u8868\u793a\u5982\u4e0b\uff1a</p> <pre><code>// Reshape(Reshape(x)) -&gt; Reshape(x)\ndef ReshapeReshapeOptPattern : Pat&lt;(ReshapeOp(ReshapeOp $arg)),\n(ReshapeOp $arg)&gt;;\n</code></pre> <p>\u5f53\u8f6c\u6362\u4ee5\u53c2\u6570\u548c\u7ed3\u679c\u7684\u67d0\u4e9b\u5c5e\u6027\u4e3a\u6761\u4ef6\u65f6\uff0cDRR \u8fd8\u63d0\u4f9b\u4e86\u4e00\u79cd\u6dfb\u52a0\u53c2\u6570\u7ea6\u675f\u7684\u65b9\u6cd5\u3002\u4e00\u4e2a\u4f8b\u5b50\u662f\u5f53 reshape \u7684\u53c2\u6570\u548c\u7ed3\u679c\u7684\u7c7b\u578b\u662f\u4e00\u6837\u7684\uff0c\u8bf4\u660e\u8fd9\u4e2a reshape \u662f\u65e0\u7528\u7684\uff0c\u76f4\u63a5\u8fd4\u56de\u8f93\u5165\u53c2\u6570\u5373\u53ef\uff0c \u5373 <code>Reshape(x) = x</code></p> <p><pre><code>// Reshape(x) = x, where input and output shapes are identical\ndef TypesAreIdentical : Constraint&lt;CPred&lt;\"$0.getType() == $1.getType()\"&gt;&gt;;\ndef RedundantReshapeOptPattern : Pat&lt;\n(ReshapeOp:$res $arg), (replaceWithValue $arg),\n[(TypesAreIdentical $res, $arg)]&gt;;\n</code></pre> \u5373\u5f53 <code>0.getType()</code> \u4e0e <code>1.getType()</code> \u76f8\u540c\u65f6\uff0c\u4f7f\u7528\u64cd\u4f5c\u6570 <code>$arg</code> \u4ee3\u66ff\u3002</p> <p>\u540c\u6837\u9700\u8981\u5c06\u8fd9\u4e2a\u51fd\u6570\u52a0\u5165\u5230</p> <p>DRR\u4ee3\u7801\u4f4d\u4e8e <code>mlir/examples/toy/Ch3/mlir/ToyCombine.td</code>\uff0c \u751f\u6210\u7684\u4ee3\u7801\u4f4d\u4e8e <code>Ch3/ToyCombine.inc</code></p> <p>\u6267\u884c <code>./bin/toyc-ch3 ../mlir/test/Examples/Toy/Ch3/trivial_reshape.toy -emit=mlir -opt</code></p> <p>\u5f97\u5230\u7ed3\u679c\u5982\u4e0b\uff1a</p> <pre><code>module {\ntoy.func @main() {\n%0 = toy.constant dense&lt;[[1.000000e+00], [2.000000e+00]]&gt; : tensor&lt;2x1xf64&gt;\ntoy.print %0 : tensor&lt;2x1xf64&gt;\ntoy.return\n}\n}\n</code></pre>"},{"location":"mlc/mlir-toy.html#4-chapter-4-interfaces-transformation","title":"4. Chapter 4: \u4f7f\u7528 Interfaces \u6cdb\u5316 Transformation","text":"<p>\u4e0a\u9762\u5b9e\u73b0\u7684\u91cd\u5199\u89c4\u5219\u6709\u4e00\u4e2a\u660e\u663e\u7684\u95ee\u9898\uff1a\u6211\u4eec\u4e3a Toy Dialect \u5b9e\u73b0\u7684 Pass \u5728\u5176\u5b83\u7684 Dialect \u4e2d\u6ca1\u529e\u6cd5\u91cd\u7528\uff0c\u56e0\u4e3a\u662f\u9488\u5bf9 Toy dialect \u4e00\u4e9b Operation \u7684\u7279\u5316\u64cd\u4f5c\uff0c\u5982\u679c\u4e3a\u6bcf\u79cd Dialect \u5b9e\u73b0\u6bcf\u79cd\u8f6c\u5316\u4f1a\u5bfc\u81f4\u5927\u91cf\u91cd\u590d\u4ee3\u7801\u3002\u6240\u4ee5\uff0c\u8fd9\u4e00\u8282\u770b\u5982\u4f55\u5728 MLIR \u4e2d \u5229\u7528 Interfaces \u5b9e\u73b0\u6cdb\u5316\u3002</p> <p>\u9996\u5148\u662f <code>mlir/test/Examples/Toy/Ch4/codegen.toy</code> \u4e2d\u7684\u4f8b\u5b50</p> <pre><code>def multiply_transpose(a, b) {\nreturn transpose(a) * transpose(b);\n}\n\ndef main() {\nvar a&lt;2, 3&gt; = [[1, 2, 3], [4, 5, 6]];\nvar b&lt;2, 3&gt; = [1, 2, 3, 4, 5, 6];\nvar c = multiply_transpose(a, b);\nvar d = multiply_transpose(b, a);\nprint(d);\n}\n</code></pre> <p>\u5176\u751f\u6210\u7684 Toy Dialect\uff1a</p> <pre><code>module {\ntoy.func private @multiply_transpose(%arg0: tensor&lt;*xf64&gt;, %arg1: tensor&lt;*xf64&gt;) -&gt; tensor&lt;*xf64&gt; {\n%0 = toy.transpose(%arg0 : tensor&lt;*xf64&gt;) to tensor&lt;*xf64&gt;\n%1 = toy.transpose(%arg1 : tensor&lt;*xf64&gt;) to tensor&lt;*xf64&gt;\n%2 = toy.mul %0, %1 : tensor&lt;*xf64&gt;\ntoy.return %2 : tensor&lt;*xf64&gt;\n}\ntoy.func @main() {\n%0 = toy.constant dense&lt;[[1.000000e+00, 2.000000e+00, 3.000000e+00], [4.000000e+00, 5.000000e+00, 6.000000e+00]]&gt; : tensor&lt;2x3xf64&gt;\n%1 = toy.reshape(%0 : tensor&lt;2x3xf64&gt;) to tensor&lt;2x3xf64&gt;\n%2 = toy.constant dense&lt;[1.000000e+00, 2.000000e+00, 3.000000e+00, 4.000000e+00, 5.000000e+00, 6.000000e+00]&gt; : tensor&lt;6xf64&gt;\n%3 = toy.reshape(%2 : tensor&lt;6xf64&gt;) to tensor&lt;2x3xf64&gt;\n%4 = toy.generic_call @multiply_transpose(%1, %3) : (tensor&lt;2x3xf64&gt;, tensor&lt;2x3xf64&gt;) -&gt; tensor&lt;*xf64&gt;\n%5 = toy.generic_call @multiply_transpose(%3, %1) : (tensor&lt;2x3xf64&gt;, tensor&lt;2x3xf64&gt;) -&gt; tensor&lt;*xf64&gt;\ntoy.print %5 : tensor&lt;*xf64&gt;\ntoy.return\n}\n}\n</code></pre> <p>\ud83d\udca1\u6ce8\u610f\u5230\u8fd9\u91cc <code>multiply_transpose</code> \u7684\u7b7e\u540d\u8f93\u5165\u8f93\u51fa\u7c7b\u578b \u90fd\u662f <code>tensor&lt;*xf64&gt;</code> \u5373\u52a8\u6001\u5f62\u72b6\uff0c \u6216\u8005\u53eb generic tensor</p> <p>\u5728\u8fd9\u4e00\u8282\u7684\u4f18\u5316\u4e4b\u540e(<code>./bin/toyc-ch4 ../mlir/test/Examples/Toy/Ch4/codegen.toy -emit=mlir -opt</code>)\uff0c \u751f\u6210\u7684 IR \u5c06\u4f1a\u53d8\u4e3a\uff1a</p> <pre><code>module {\ntoy.func @main() {\n%0 = toy.constant dense&lt;[[1.000000e+00, 2.000000e+00, 3.000000e+00], [4.000000e+00, 5.000000e+00, 6.000000e+00]]&gt; : tensor&lt;2x3xf64&gt;\n%1 = toy.transpose(%0 : tensor&lt;2x3xf64&gt;) to tensor&lt;3x2xf64&gt;\n%2 = toy.mul %1, %1 : tensor&lt;3x2xf64&gt;\ntoy.print %2 : tensor&lt;3x2xf64&gt;\ntoy.return\n}\n}\n</code></pre> <p>\ud83d\udca1\u5148\u662f\u5229\u7528\u5230\u4e86\u4e0a\u4e00\u8282\u4e2d\u7684\u4f18\u5316\u6d88\u9664\u6389\u4e86\u5197\u4f59\u7684 <code>reshape</code>\uff1b\u5e76\u4e14\u6b64\u65f6 <code>multiply_transpose</code> \u88ab\u5185\u8054\uff08\u539f\u5b9a\u4e49\u88ab\u5220\u9664\uff09\uff1b \u6700\u91cd\u8981\u7684\u662f\u6240\u6709\u7684 tensor \u5f62\u72b6\u90fd\u53d8\u6210\u4e86 static\uff0c IR \u4e2d \u4e0d\u518d\u5177\u6709\u52a8\u6001\u5f62\u72b6\uff1b \u5e76\u4e14 <code>%4</code> and <code>%5</code> \u76f8\u540c\uff0c \u56e0\u6b64\u53ea\u88ab\u8ba1\u7b97\u4e86\u4e00\u6b21\uff1b</p> <p>Toy IR \u76ee\u524d\u64cd\u4f5c generic tensors\uff0c \u8fd9\u610f\u5473\u7740\u9664\u4e86\u4f7f\u7528\u5e38\u91cf\u521d\u59cb\u5316\u7684 tensor\uff0c \u6211\u4eec\u4e0d\u77e5\u9053\u5176\u5b83 tensor \u7684\u5f62\u72b6\u3002\u8fd9\u4f7f \u4f18\u5316 \u548c \u4ee3\u7801\u751f\u6210 \u53d8\u5f97\u590d\u6742\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728 IR \u4e2d\u4f20\u64ad\u7f16\u8bd1\u65f6\u5df2\u77e5\u7684\u9759\u6001\u5f62\u72b6 \u6765\u7f13\u89e3\u8fd9\u4e2a\u95ee\u9898\u3002\u5f62\u72b6\u4f20\u64ad\u7684\u96be\u9898\u5728\u4e8e\u5982\u4f55\u5904\u7406 user-defined \u51fd\u6570\u8c03\u7528\u53c2\u6570\u548c\u8fd4\u56de\u503c\u90fd\u6ca1\u6709\u7ed9\u51fa\u5f62\u72b6\u4fe1\u606f\uff08\u5373\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 <code>multiply_transpose</code>\uff09\uff1a\u6bcf\u4e2a\u8c03\u7528\u70b9\u90fd\u53ef\u4ee5\u63a8\u65ad\u51fa\u4e0d\u540c\u7684\u5f62\u72b6\u3002\u4e00\u79cd\u53ef\u80fd\u662f\u6839\u636e\u53c2\u6570\u7c7b\u578b\u6267\u884c\u7b26\u53f7\u63a8\u7406\uff0c\u4f46\u968f\u7740\u5f15\u5165\u66f4\u591a\u63a7\u5236\u6d41\uff0c\u7b26\u53f7\u63a8\u7406\u5c06\u5f88\u96be\u6cdb\u5316\u3002\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u51fd\u6570\u7279\u5316\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5177\u6709\u65b0\u53c2\u6570\u5f62\u72b6\u7684\u8c03\u7528\u70b9\u90fd\u5185\u8054\u88ab\u8c03\u7528\u51fd\u6570\u5e76\u5bf9\u5176\u8fdb\u884c\u7279\u5316\u3002\u6211\u4eec\u5bf9 Toy \u91c7\u53d6\u7684\u65b9\u6cd5\u662f\u5185\u8054\u6240\u6709\u51fd\u6570\u8c03\u7528\uff0c\u7136\u540e\u6267\u884c\u8fc7\u7a0b\u5185\u5f62\u72b6\u4f20\u64ad\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u4e13\u4e3a Toy Dialect \u8bbe\u8ba1\u7684\u5185\u8054\u7b97\u6cd5\uff0c\u4f46\u8fd9\u53ef\u80fd\u4f1a\u53d8\u5f97\u76f8\u5f53\u590d\u6742\u3002\u6487\u5f00\u6210\u672c\u5efa\u6a21\u4e0d\u8c08\uff0c\u4ece\u5934\u5f00\u59cb\u5199\u56fa\u5b9a\u6a21\u5f0f\u7684\u4ee3\u7801\u5c31\u5df2\u7ecf\u5f88\u590d\u6742\u4e86\u3002MLIR \u63d0\u4f9b\u4e86 Dialect \u53ef\u4ee5 \u63a5\u5165 \u7684\u901a\u7528\u5185\u8054\u7b97\u6cd5\u3002\u5728 Toy \u4e2d\uff0c\u6211\u4eec\u9700\u8981\u505a\u7684\u5c31\u662f\u4e3a\u5185\u8054\u5668\u63d0\u4f9b Interfaces\u3002</p> <ol> <li> <p>\u7b2c\u4e00\u6b65\u662f\u5728 Toy Dialect \u4e2d\u5b9a\u4e49\u5bf9\u5185\u8054\u64cd\u4f5c\u7684\u7ea6\u675f\u3002\u6b64\u4fe1\u606f\u901a\u8fc7 dialect interface \u63d0\u4f9b\u3002 dialect interface \u672c\u8d28\u4e0a\u662f\u5305\u542b\u4e00\u7ec4 virtual hooks \u7684\u7c7b\uff0c\u65b9\u8a00\u901a\u8fc7\u91cd\u5199\u8fd9\u4e9b\u65b9\u6cd5\u63d0\u4f9b\u5177\u4f53\u5b9e\u73b0\u3002\u5728\u8fd9\u4e2a\u5185\u8054\u4f8b\u5b50\u4e2d\uff0c \u6211\u4eec\u7528\u5230\u7684 Interface \u662f <code>DialectInlinerInterface</code></p> <pre><code>/// \u8fd9\u4e2a\u7c7b\u5b9a\u4e49\u4e86\u7528\u4e8e Toy Dialect \u6267\u884c inline \u64cd\u4f5c\u7684\u63a5\u53e3\n/// \u8fd9\u91cc\u7684\u5b9e\u73b0\u505a\u4e86\u7b80\u5316\uff0c\u5e76\u4e14\u53ea\u91cd\u5199\u4e86\u5fc5\u8981\u7684\u65b9\u6cd5\nstruct ToyInlinerInterface : public DialectInlinerInterface {\nusing DialectInlinerInterface::DialectInlinerInterface;\n\n/// \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d simply return true, \u56e0\u4e3a Toy `Call` operation \u603b\u662f\u53ef\u5185\u8054\u7684\nbool isLegalToInline(Operation *call, Operation *callable, bool wouldBeCloned) const final {\nreturn true;\n}\n\n/// \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d simply return true, \u56e0\u4e3a Toy operation \u603b\u662f\u53ef\u5185\u8054\u7684\nbool isLegalToInline(Operation *, Region *, bool, IRMapping &amp;) const final {\nreturn true;\n}\n\n/// \u540c\u4e0a\nbool isLegalToInline(Region *dest, Region *src, bool wouldBeCloned, IRMapping &amp;valueMapping) const final {\nreturn true;\n}\n\n/// \u5f53\u4e00\u4e2a terminator operation \u88ab inline \u540e\u6267\u884c\u6b64 hook\uff0c \u4fdd\u8bc1\u63a7\u5236\u6d41\u7684\u6b63\u786e\u6027\uff08\u4e0d\u4f1a\u63d0\u524d\u8fd4\u56de\uff09\n/// Toy \u4e2d\u552f\u4e00\u7684 terminator Operation\u662f `toy.return`\nvoid handleTerminator(Operation *op, ArrayRef&lt;Value&gt; valuesToRepl) const final {\n// \u5904\u7406 \"toy.return\"\nauto returnOp = cast&lt;ReturnOp&gt;(op);\n\n// \u7b80\u5355\u7684\u5c06 return \u8bed\u53e5\u66ff\u6362\u6210 return \u8bed\u53e5\u7684 operands\nassert(returnOp.getNumOperands() == valuesToRepl.size());\nfor (const auto &amp;it : llvm::enumerate(returnOp.getOperands()))\nvaluesToRepl[it.index()].replaceAllUsesWith(it.value());\n}\n};\n</code></pre> <p>\u6b64\u5916\uff0c\u5185\u8054\u5668\u53ea\u4f1a \u5220\u9664 \u79c1\u6709\u53ef\u89c1\u7684\u672a\u4f7f\u7528\u51fd\u6570\u5b9a\u4e49\u3002\u56e0\u6b64\u8fd8\u9700\u8981\u5728 <code>mlirGen</code> \u4e2d\u8bbe\u7f6e\u51fd\u6570\uff08<code>main</code>\u9664\u5916\uff09\u4e3a private</p> <pre><code>mlir::toy::FuncOp mlirGen(FunctionAST &amp;funcAST) {\n...\nif (funcAST.getProto()-&gt;getName() != \"main\")\nfunction.setPrivate();\n...\n}\n</code></pre> </li> <li> <p>\u7136\u540e\u6211\u4eec\u76f4\u63a5\u5728 Toy Dialect \u4e0a\u6ce8\u518c\u6211\u4eec\u7684 Dialect interface\uff1b\u5728\u6587\u4ef6 <code>mlir/examples/toy/Ch5/mlir/Dialect.cpp</code> \u4e2d:</p> <pre><code>void ToyDialect::initialize() {\naddOperations&lt;\n#define GET_OP_LIST\n#include \"toy/Ops.cpp.inc\"\n&gt;();\naddInterfaces&lt;ToyInlinerInterface&gt;();\n}\n</code></pre> <p>\u8fd9\u91cc\u7684 <code>addInterfaces&lt;ToyInlinerInterface&gt;()</code> \u5c31\u662f\u6ce8\u518c\u5185\u8054 Pass \u7684\u8fc7\u7a0b\uff0c\u5176\u4e2d<code>ToyInlinerInterface</code> \u5c31\u662f\u6211\u4eec\u5b9a\u4e49\u7684\u8868\u8fbe\u5f0f\u53d8\u5f62\u89c4\u5219\u3002</p> </li> <li> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u63d0\u4f9b\u4e00\u79cd\u65b9\u6cd5\u8ba9\u5185\u8054\u5668\u77e5\u9053 <code>toy.generic_call</code> \u4ee3\u8868\u4e00\u4e2a\u8c03\u7528\uff0c <code>toy.func</code> \u4ee3\u8868\u4e00\u4e2a\u51fd\u6570\u3002 MLIR \u63d0\u4f9b\u4e86 operation interface\uff0c \u53ef\u7528\u4e8e\u5c06 operation \u6807\u8bb0\u4e3a <code>call-like</code> \u6216 <code>callable-like</code> (\u4e0e dialect interface \u4e0d\u540c\uff0c operation interface \u63d0\u4f9b\u66f4\u7ec6\u7c92\u5ea6\u7684\u4fe1\u606f)\uff0c \u8fd9\u91cc\u4e3a GenericCallOp \u6dfb\u52a0 <code>CallOpInterface</code> \uff0c \u4e3a FuncOp <code>CallableOpInterface</code> </p> <p>\u8981\u6dfb\u52a0\u6b64\u63a5\u53e3\uff0c\u6211\u4eec\u53ea\u9700\u5c06\u5b9a\u4e49 include \u5230\u6211\u4eec\u7684 operation \u63cf\u8ff0\u6587\u4ef6 (<code>Ops.td</code>) \u4e2d\uff1a</p> <pre><code>include \"mlir/Interfaces/CallInterfaces.td\"\n\n...\n\ndef FuncOp : Toy_Op&lt;\"func\",\n    [DeclareOpInterfaceMethods&lt;CallableOpInterface&gt;]&gt; {\n  ...\n}\n\ndef GenericCallOp : Toy_Op&lt;\"generic_call\",\n    [DeclareOpInterfaceMethods&lt;CallOpInterface&gt;]&gt; {\n  ...\n}\n</code></pre> </li> <li> <p>\u8fd8\u9700\u8981\u5728 Dialect \u5b9a\u4e49\u4e2d\u6dfb\u52a0 cast \u64cd\u4f5c\u5e76\u8bbe\u7f6e\u8c03\u7528\u7684\u63a5\u53e3\u3002\u4e3a\u4ec0\u4e48\u9700\u8981\u6dfb\u52a0 cast \u64cd\u4f5c\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u5728\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u8f93\u5165\u5f20\u91cf\u7684\u7c7b\u578b\u662f\u786e\u5b9a\u7684\u3002\u4f46\u5728\u51fd\u6570\u5b9a\u4e49\u7684\u65f6\u5019\uff0c\u8f93\u5165\u5f20\u91cf\u7684\u7c7b\u578b\u662f generic \u7684\u3002\u5373\u6211\u4eec\u9700\u8981<code>tensor&lt;2x3xf64&gt; -&gt; tensor&lt;*xf64&gt;</code> \u3002\u4e0b\u9762\u5728 <code>mlir/examples/toy/Ch5/include/toy/Ops.td</code> \u4e2d\u6dfb\u52a0 cast \u64cd\u4f5c\uff1a</p> <pre><code>def CastOp : Toy_Op&lt;\"cast\", [\nDeclareOpInterfaceMethods&lt;CastOpInterface&gt;,\nNoSideEffect,\nSameOperandsAndResultShape\n]&gt; {\nlet summary = \"shape cast operation\";\nlet description = [{ ... }];\n\nlet arguments = (ins F64Tensor:$input);\nlet results = (outs F64Tensor:$output);\n\nlet assemblyFormat = \"$input attr-dict `:` type($input) `to` type($output)\";\n}\n</code></pre> <p>\u6211\u4eec\u4f7f\u7528\u4e86 <code>DeclareOpInterfaceMethods</code> \u5728 <code>CallOpInterface</code> \u7684\u58f0\u660e\u4e2d\u58f0\u660e\u6240\u7528\u7684\u63a5\u53e3\u65b9\u6cd5\u3002 <code>DeclareOpInterfaceMethods</code> \u8fd9\u4e2a trait \u8bf4\u660e\u7a0b\u5e8f\u4f1a\u8bc6\u522b cast \u64cd\u4f5c\u3002</p> <p>\u63a5\u4e0b\u6765\u8fd8\u9700\u8981\u91cd\u5199 cast op \u7684 <code>areCastCompatible</code> \u65b9\u6cd5\uff08\u5728 <code>mlir/examples/toy/Ch5/mlir/Dialect.cpp</code>\u4e2d\uff09\uff1a</p> <p><pre><code>bool CastOp::areCastCompatible(TypeRange inputs, TypeRange outputs) {\nif (inputs.size() != 1 || outputs.size() != 1)\nreturn false;\n// The inputs must be Tensors with the same element type.\nTensorType input = inputs.front().dyn_cast&lt;TensorType&gt;();\nTensorType output = outputs.front().dyn_cast&lt;TensorType&gt;();\nif (!input || !output || input.getElementType() != output.getElementType())\nreturn false;\n// The shape is required to match if both types are ranked.\nreturn !input.hasRank() || !output.hasRank() || input == output;\n}\n</code></pre> \u8fd9\u4e2a\u65b9\u6cd5\u7528\u6765\u5224\u65ad\u662f\u5426\u9700\u8981\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\uff0c\u5982\u679c inputs \u548c outputs \u7684\u7c7b\u578b\u662f\u517c\u5bb9\u8fd4\u56de\u771f\uff0c\u5426\u5219\u9700\u8981\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\uff08cast\uff09\u8fd4\u56de\u5047\u3002</p> <p>\u53e6\u5916\u6211\u4eec\u8fd8\u9700\u8981\u91cd\u5199 <code>ToyInlinerInterface</code> \u4e0a\u7684 hook \uff0c \u5373 <code>materializeCallConversion</code> \u51fd\u6570\uff1a</p> <p><pre><code>struct ToyInlinerInterface : public DialectInlinerInterface {\n....\n/// \u5c1d\u8bd5\u5728\u51fd\u6570\u8c03\u7528\u7684\u5730\u65b9\u63d2\u5165 cast \u8282\u70b9. \u5982\u679c\u4e0d\u80fd\u8f6c\u6362 \u8fd4\u56de nullptr\nOperation *materializeCallConversion(OpBuilder &amp;builder, Value input,\nType resultType,\nLocation conversionLoc) const final {\nreturn builder.create&lt;CastOp&gt;(conversionLoc, resultType, input);\n}\n};\n</code></pre> \u8fd9\u4e2a\u51fd\u6570\u662f\u5185\u8054 Pass \u7684\u5165\u53e3\u3002</p> </li> <li> <p>\u5c06 Inline Pass \u6dfb\u52a0\u5230\u4f18\u5316 pipline \u4e2d\uff0c\u5728 <code>mlir/examples/toy/Ch5/toyc.cpp</code> \u4e2d\uff1a</p> <pre><code>if (enableOpt) {\nmlir::PassManager pm(&amp;context);\n// Apply any generic pass manager command line options and run the pipeline.\napplyPassManagerCLOptions(pm);\n\n// \u5c06\u6240\u6709\u7684 call \u63d2\u5165 main \u5e76\u4e14\u5220\u9664\u4e4b\npm.addPass(mlir::createInlinerPass());\n...\n}\n</code></pre> </li> </ol> <p>\u6b64\u65f6\u5f97\u5230\u7684 toy dialect \u5982\u4e0b\uff1a</p> <pre><code>func @main() {\n%0 = \"toy.constant\"() {value = dense&lt;[[1.000000e+00, 2.000000e+00, 3.000000e+00], [4.000000e+00, 5.000000e+00, 6.000000e+00]]&gt; : tensor&lt;2x3xf64&gt;} : () -&gt; tensor&lt;2x3xf64&gt;\n%1 = \"toy.constant\"() {value = dense&lt;[[1.000000e+00, 2.000000e+00, 3.000000e+00], [4.000000e+00, 5.000000e+00, 6.000000e+00]]&gt; : tensor&lt;2x3xf64&gt;} : () -&gt; tensor&lt;2x3xf64&gt;\n%2 = \"toy.cast\"(%1) : (tensor&lt;2x3xf64&gt;) -&gt; tensor&lt;*xf64&gt;\n%3 = \"toy.cast\"(%0) : (tensor&lt;2x3xf64&gt;) -&gt; tensor&lt;*xf64&gt;\n%4 = \"toy.transpose\"(%2) : (tensor&lt;*xf64&gt;) -&gt; tensor&lt;*xf64&gt;\n%5 = \"toy.transpose\"(%3) : (tensor&lt;*xf64&gt;) -&gt; tensor&lt;*xf64&gt;\n%6 = \"toy.mul\"(%4, %5) : (tensor&lt;*xf64&gt;, tensor&lt;*xf64&gt;) -&gt; tensor&lt;*xf64&gt;\ntoy.print %6 : tensor&lt;*xf64&gt;\ntoy.return\n}\n</code></pre> <p>\u73b0\u5728 MLIR \u8868\u8fbe\u5f0f\u53ea\u6709\u4e00\u4e2a\u4e3b\u51fd\u6570\uff0c\u4e4b\u524d\u7684 <code>transpose</code> \u51fd\u6570\u88ab\u5185\u8054\u4e86\uff0c\u5e76\u4e14\u53ef\u4ee5\u770b\u5230 <code>toy.cast</code> \u5b9e\u73b0\u7684\u529f\u80fd\u3002</p>"},{"location":"mlc/mlir-toy.html#42-pass","title":"4.2. \u5f62\u72b6\u4f20\u64ad pass","text":"<p>\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u5185\u8054\u4e86\u6240\u6709\u51fd\u6570\uff0c\u5269\u4e0b\u7684\u662f\u4e00\u4e2a\u5305\u542b\u9759\u6001\u548c\u52a8\u6001\u5f62\u72b6\u64cd\u4f5c\u6df7\u5408\u7684\u4e3b\u51fd\u6570\u3002\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u5f62\u72b6\u63a8\u7406\u8fc7\u7a0b\u5728\u5355\u4e2a\u51fd\u6570\u5185\u64ad\u5f62\u72b6\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u5199\u6210\u9488\u5bf9 Toy Dialect pass\uff0c\u7136\u800c\u7ecf\u9a8c\u6cd5\u5219\u544a\u8bc9\u6211\u4eec\uff0c\u6700\u597d\u5c3d\u53ef\u80fd\u901a\u7528\u5730\u8868\u8fbe\u8f6c\u6362\uff0c\u4ee5\u4fbf\u5c06\u6765\u53ef\u4ee5\u6269\u5c55\u5230\u5176\u4ed6\u65b9\u8a00\u3002</p> <p>\u4e0e Operation \u7c7b\u4f3c\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528 ODS \u6846\u67b6\u6765\u5b9a\u4e49 Operation Interfaces</p> <ol> <li> <p>\u4f7f\u7528 ODS \u6846\u67b6\u5b9a\u4e49 Shape \u63a8\u65ad Operation Interface\uff0c \u4ee3\u7801\u5728 <code>mlir/examples/toy/Ch5/include/toy/ShapeInferenceInterface.td</code></p> <pre><code>def ShapeInferenceOpInterface : OpInterface&lt;\"ShapeInference\"&gt; {\nlet description = [{\nInterface to access a registered method to infer the return types for an\noperation that can be used during type inference.\n}];\n\nlet methods = [\nInterfaceMethod&lt;\"Infer and set the output shape for the current operation.\",\n\"void\", \"inferShapes\"&gt;\n];\n}\n</code></pre> <p>\u5176\u4e2d\u7684 <code>method</code> \u8868\u793a\u9700\u8981\u4e3a\u8be5\u63a5\u53e3\u63d0\u4f9b\u7684\u65b9\u6cd5 \uff0c \u4e09\u4e2a\u5b57\u6bb5\u5206\u522b\u8868\u793a desc\uff0c return type\uff0c method name 2. \u5c06 \u5b9a\u4e49\u7684 <code>ShapeInferenceOpInterface</code> \u6dfb\u52a0\u5230\u5fc5\u8981\u7684 Toy Operation \u5b9a\u4e49\u4e2d</p> <p>\u8fd9\u91cc\u6211\u4eec\u7ed9 <code>AddOp</code>, <code>MulOp</code>, <code>CastOp</code> \u548c <code>TranposeOp</code> \u52a0\u4e0a ShapeInferenceOpInterface\uff1a</p> <pre><code>def CastOp : Toy_Op&lt;\"cast\", [\nDeclareOpInterfaceMethods&lt;CastOpInterface&gt;,\n// \u8fd9\u91cc\u6dfb\u52a0 ShapeInferenceOpInterface\nDeclareOpInterfaceMethods&lt;ShapeInferenceOpInterface&gt;, NoSideEffect,\nSameOperandsAndResultShape\n]&gt; {...}\n</code></pre> <p>\u6240\u6709\u6dfb\u52a0\u4e86 <code>ShapeInferenceOpInterface</code> \u7684 Op \u90fd\u9700\u8981\u5b9e\u73b0\u63a5\u53e3<code>method</code>\u5b57\u6bb5\u4e2d\u5b9a\u4e49\u7684\u7684 <code>inferShapes</code> \u65b9\u6cd5\uff1a</p> <pre><code>// cast op \u7684\u5f62\u72b6\u63a8\u65ad\u51fd\u6570\nvoid CastOp::inferShapes() { getResult().setType(getOperand().getType()); }\n\n// transpose op \u7684 \u5f62\u72b6\u63a8\u65ad\u51fd\u6570\nvoid TransposeOp::inferShapes() {\nauto arrayTy = getOperand().getType().cast&lt;RankedTensorType&gt;();\nSmallVector&lt;int64_t, 2&gt; dims(llvm::reverse(arrayTy.getShape()));\ngetResult().setType(RankedTensorType::get(dims, arrayTy.getElementType()));\n}\n</code></pre> </li> <li> <p>\u5b9e\u73b0\u5f62\u72b6\u63a8\u5bfc\uff08\u5373\u5f62\u72b6\u4f20\u64ad\uff09 Pass</p> <p><code>ShapeInferencePass</code> \u5c06\u5bf9\u51fd\u6570\u8fdb\u884c\u64cd\u4f5c\uff1a\u5b83\u5c06\u5728\u6bcf\u4e2a\u51fd\u6570\u4e0a\u72ec\u7acb\u8fd0\u884c\u3002 MLIR \u8fd8\u652f\u6301\u5728\u4efb\u4f55 \u5355\u72ec\u7684 Operation \u4e0a\u8fd0\u884c\u7684\u901a\u7528 <code>OperationPass</code>\uff0c\u4f46\u8fd9\u91cc\u6211\u4eec\u7684 module\u4ec5\u5305\u542b\u51fd\u6570\uff0c\u56e0\u6b64\u65e0\u9700\u6cdb\u5316\u5230\u6240\u6709\u64cd\u4f5c\u3002</p> <pre><code>struct ShapeInferencePass : public mlir::PassWrapper&lt;ShapeInferencePass, OperationPass&lt;toy::FuncOp&gt;&gt; {\nMLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(ShapeInferencePass)\n\nvoid runOnOperation() override {\nauto f = getOperation();\n\n// 0. \u5c06\u6240\u6709\u9700\u8981 \u5f62\u72b6\u63a8\u5bfc \u7684Op(\u8fd4\u56de dynamic shape \u7684 Op) \u52a0\u5165 worklist\nllvm::SmallPtrSet&lt;mlir::Operation *, 16&gt; opWorklist;\nf.walk([&amp;](mlir::Operation *op) {\nif (returnsDynamicShape(op))\nopWorklist.insert(op);\n});\n\n// \u5728 worklist \u4e0a\u8fed\u4ee3\uff0c \u76f4\u5230\u6240\u6709\u7684 operations \u90fd\u88ab\u63a8\u5bfc\uff08worklist \u4e3a\u7a7a\uff09\nwhile (!opWorklist.empty()) {\n// 1. \u627e\u5230\u4e0b\u4e00\u4e2a\u9700\u8981\u63a8\u5bfc\u7684 operation \u2014\u2014 \u8fd9\u4e2a operation \u7684\u6240\u6709\u53c2\u6570\u5f62\u72b6\u5e94\u8be5\u90fd\u5df2\u7ecf\u88ab\u63a8\u5bfc\nauto nextop = llvm::find_if(opWorklist, allOperandsInferred);\n\n// 2. \u6ca1\u6709\u627e\u5230\u8bf4\u660e\u5df2\u7ecf\u6536\u655b\uff0c \u7ed3\u675f\u7b97\u6cd5\nif (nextop == opWorklist.end()) break;\n\n// 3. \u4ece worklist \u4e2d\u5220\u9664 \u8be5 op\uff0c \u5e76\u8c03\u7528\u8be5 op \u7684 inferShapes \u65b9\u6cd5 \u63a8\u5bfc\u5f62\u72b6\nOperation *op = *nextop;\nopWorklist.erase(op);\n\n// 3.1. op \u5b9e\u73b0\u4e86 `ShapeInference` \u63a5\u53e3\u4e0a\u7684\u65b9\u6cd5 `inferShapes` \u5728\u8fd9\u91cc\u88ab\u8c03\u7528\nif (auto shapeOp = dyn_cast&lt;ShapeInference&gt;(op)) {\nshapeOp.inferShapes();\n} else {\nop-&gt;emitError(\"operation doesnt have shape inference interface\");\nreturn signalPassFailure();\n}\n}\n\n// 4. \u8df3\u51fa\u5faa\u73af\u540e\uff0c \u5982\u679c operation worklist \u4e0d\u4e3a\u7a7a, \u610f\u5473\u7740\u7b97\u6cd5\u5931\u8d25.\nif (!opWorklist.empty()) {\nf.emitError(\"Shape inference failed, \")\n&lt;&lt; opWorklist.size() &lt;&lt; \" operations couldn't be inferred\\n\";\nsignalPassFailure();\n}\n}\n}\n</code></pre> </li> <li> <p>\u628a\u5f62\u72b6\u63a8\u5bfc Pass \u52a0\u5230\u4f18\u5316 pipline</p> <p>\u540c\u6837\u7684\uff0c\u6211\u4eec\u5728\u6700\u540e\u628a shapeinference pass \u6dfb\u52a0\u5230\u6211\u4eec\u7684 passmanager \u4e2d\uff1a</p> <pre><code>optPM.addPass(mlir::toy::createShapeInferencePass());\n</code></pre> <p>MLIR \u4ee3\u7801\u4e2d\u8fd8\u6dfb\u52a0\u4e86\u4e00\u4e2a CSE pass\uff0c \u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u672c\u7ae0\u5f00\u59cb\u7684\u6700\u7ec8\u7ed3\u679c\u3002</p> </li> </ol>"},{"location":"mlc/mlir-toy.html#5-chapter-5-lowering-lower-level-dialects","title":"5. Chapter 5: \u90e8\u5206 Lowering \u5230 Lower-Level Dialects \u505a\u4f18\u5316","text":"<p>\u63a5\u4e0b\u6765\u5c55\u793a MLIR \u7684\u7279\u8272\uff0c \u5373\u901a\u8fc7\u5728\u540c\u4e00\u51fd\u6570\u4e2d\u5171\u5b58\u7684\u65b9\u8a00\u6df7\u5408\u6765\u6267\u884c\u6e10\u8fdb\u5f0f\u964d\u4f4e\u3002 </p> <p>\u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06 Toy Dialect \u7684\u90e8\u5206 Operation Lowering \u5230 Affine Dialect \u3002Affine Dialect \u662f\u4e3a \u8ba1\u7b97\u5bc6\u96c6\u578b \u7a0b\u5e8f\u91cf\u8eab\u5b9a\u5236\u7684\uff1a\u5b83\u4e0d\u652f\u6301\u8868\u793a\u6211\u4eec\u7684 <code>toy.print</code>\u3002 \u6211\u4eec\u53ef\u4ee5\u9488\u5bf9 Toy \u7684 \u8ba1\u7b97\u5bc6\u96c6\u578b \u90e8\u5206\u4f7f\u7528 Affine\uff0c\u5e76\u5728\u4e0b\u4e00\u7ae0\u4e2d\u76f4\u63a5\u9488\u5bf9 LLVM IR \u65b9\u8a00\u6765\u964d\u4f4e <code>toy.print</code>\u3002 \u4f5c\u4e3a\u6b64 Lowering \u7684\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u4ece Toy \u64cd\u4f5c\u7684 <code>TensorType</code> \u964d\u4f4e\u5230\u901a\u8fc7\u4eff\u5c04\u5faa\u73af\u5d4c\u5957\u7d22\u5f15\u7684 <code>MemRefType</code> \u3002 \u5f20\u91cf\u8868\u793a\u62bd\u8c61\u503c\u7c7b\u578b\u7684\u6570\u636e\u5e8f\u5217\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u4e0d\u5b58\u5728\u4e8e\u4efb\u4f55\u5185\u5b58\u4e2d\uff0c \u800c <code>MemRefs</code> \u8868\u793a\u8f83\u4f4e\u7ea7\u522b\u7684\u7f13\u51b2\u533a\u8bbf\u95ee\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u5bf9\u5185\u5b58\u533a\u57df\u7684\u5177\u4f53\u5f15\u7528\u3002</p> <p>MLIR \u6709\u4f17\u591a\u7684 Dialect\uff0c\u6240\u4ee5 MLIR \u63d0\u4f9b\u4e86\u4e00\u4e2a\u7edf\u4e00\u7684 <code>DialectConversion</code> \u6846\u67b6\u6765\u652f\u6301\u8fd9\u4e9b Dialect \u4e92\u8f6c\u3002 <code>DialectConversion</code> \u6846\u67b6 \u5141\u8bb8\u5c06\u4e00\u7ec4 <code>illegal</code> \u64cd\u4f5c\u8f6c\u6362\u4e3a\u4e00\u7ec4 <code>legal</code> \u64cd\u4f5c\u3002\u8981\u4f7f\u7528\u8fd9\u4e2a\u6846\u67b6\uff0c\u6211\u4eec\u9700\u8981\u63d0\u4f9b\u4e24\u4ef6\u4e8b\uff08\u4ee5\u53ca\u53ef\u9009\u7684\u7b2c\u4e09\u4ef6\u4e8b\uff09\uff1a</p> <ol> <li>\u8f6c\u6362\u76ee\u6807\uff08Conversation Target\uff09 \u660e\u786e\u54ea\u4e9b Dialect \u64cd\u4f5c\u662f\u9700\u8981\u5408\u6cd5\u8f6c\u6362\u7684\uff0c\u4e0d\u5408\u6cd5\u7684\u64cd\u4f5c\u9700\u8981\u91cd\u5199\u6a21\u5f0f (rewrite patterns) \u6765\u8fdb\u884c\u5408\u6cd5\u5316\u3002</li> <li>\u4e00\u7ec4\u91cd\u5199\u6a21\u5f0f\uff08Rewrite Pattern\uff09 \u8fd9\u662f\u7528\u4e8e\u5c06\u975e\u6cd5\u64cd\u4f5c\u8f6c\u6362\u4e3a\u96f6\u4e2a\u6216\u591a\u4e2a\u5408\u6cd5\u64cd\u4f5c\u7684\u4e00\u7ec4\u6a21\u5f0f\u3002</li> <li>\u7c7b\u578b\u8f6c\u6362\u5668 \uff08Type Converter\uff09\uff08\u53ef\u9009\uff09 \u8fd9\u4e00\u8282\u5c06\u4e0d\u9700\u8981\u6b64\u8f6c\u6362\u3002</li> </ol> <p>\u63a5\u4e0b\u6765\u4f9d\u6b21\u6765\u770b</p> <ol> <li> <p>\u8f6c\u6362\u76ee\u6807(Conversation Target)</p> <p>\u6211\u4eec\u5e0c\u671b\u5c06\u8ba1\u7b97\u5bc6\u96c6\u578b Toy Operation \u8f6c\u6362\u4e3a <code>Affine</code> \u3001 <code>Arith</code> \u3001 <code>Func</code> \u548c <code>MemRef</code> \u65b9\u8a00\u7684 Operation \u7ec4\u5408\uff0c\u4ee5\u8fdb\u4e00\u6b65\u4f18\u5316\u3002\u4e3a\u4e86\u5f00\u59cb\u964d\u4f4e\uff0c\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u6211\u4eec\u7684\u8f6c\u6362\u76ee\u6807\uff08\u8fd9\u6bb5\u4ee3\u7801\u4f4d\u4e8e <code>mlir/examples/toy/Ch5/mlir/LowerToAffineLoops.cpp</code> \uff09\uff1a</p> <pre><code>void ToyToAffineLoweringPass::runOnOperation() {\n// \u6307\u5b9a \u8f6c\u6362\u76ee\u6807\uff08Conversation Target\uff09\nmlir::ConversionTarget target(getContext());\n\n// \u6307\u5b9a\u5728\u8fd9\u6b21 lowering \u4e2d `Affine`, `Arith`, `Func`, \u548c `MemRef` \u65b9\u8a00\u662f\u5408\u6cd5\u7684\ntarget.addLegalDialect&lt;AffineDialect, arith::ArithDialect,\nfunc::FuncDialect, memref::MemRefDialect&gt;();\n\n// \u5c06 Toy Dialect \u6807\u8bb0\u4e3a\u975e\u6cd5\uff0c \u4ece\u800c\u5982\u679c\u6709 Toy Dialect \u4e2d\u7684 Operation \u6ca1\u6709\u88ab\u8f6c\u6362\uff0c\u5c31\u4f1a\u62a5\u9519\n// \u5c06 `toy.print` \u6807\u8bb0\u4e3a\u5408\u6cd5 \uff0c \u4e0d\u8fc7\u8fd9\u91cc\u9700\u8981\u6539\u53d8 \u8be5\u64cd\u4f5c\u7684 \u64cd\u4f5c\u6570\u4e3a `MemRefType`\n// \u7531\u4e8e MLIR \u4e2d\u5355\u4e2a\u64cd\u4f5c\u7684\u5b9a\u4e49\u59cb\u7ec8\u4f18\u4e8e Dialect \u7684\u5b9a\u4e49\uff0c\u56e0\u6b64\u4e0a\u9762\u4ee3\u7801\u4e2d\u5b9a\u4e49\u5408\u6cd5\ntarget.addIllegalDialect&lt;ToyDialect&gt;();\ntarget.addDynamicallyLegalOp&lt;toy::PrintOp&gt;([](toy::PrintOp op) {\nreturn llvm::none_of(op-&gt;getOperandTypes(),\n[](Type type) { return type.isa&lt;TensorType&gt;(); });\n});\n...\n}\n</code></pre> </li> <li> <p>\u8f6c\u6362\u6a21\u5f0f(Conversion Patterns)</p> <p>\u5728\u5b9a\u4e49\u4e86\u8f6c\u6362\u76ee\u6807\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5982\u4f55\u5c06\u975e\u6cd5\u64cd\u4f5c\u8f6c\u6362\u4e3a\u5408\u6cd5\u64cd\u4f5c\u3002 \u4e0e\u7b2c 3 \u7ae0\u4ecb\u7ecd\u7684ODS\u6846\u67b6\u7c7b\u4f3c\uff0c <code>DialectConversion</code> \u6846\u67b6\u4e5f\u4f7f\u7528 RewritePatterns \u6765\u6267\u884c\u8f6c\u6362\u903b\u8f91\u3002 \u8fd9\u4e9b\u6a21\u5f0f\u53ef\u80fd\u662f\u4e4b\u524d\u770b\u5230\u7684 RewritePatterns \u6216\u7279\u5b9a\u4e8e\u8f6c\u6362\u6846\u67b6 <code>ConversionPattern</code> \u7684\u65b0\u6a21\u5f0f\u3002 <code>ConversionPatterns</code> \u4e0e\u4f20\u7edf\u7684 RewritePatterns \u4e0d\u540c\uff0c\u56e0\u4e3a\u5b83\u4eec\u63a5\u53d7\u4e00\u4e2a\u989d\u5916\u7684\u64cd\u4f5c\u6570\u53c2\u6570\uff0c\u5176\u4e2d\u5305\u542b\u5df2\u91cd\u65b0\u6620\u5c04 / \u66ff\u6362\u7684 operands\u3002 \u5b98\u65b9\u6587\u6863\u4e2d\u7ed9\u51fa\u4e86 Lowering Toy Dialect \u4e2d transpose \u64cd\u4f5c\u7684\u4f8b\u5b50\uff0c\u4ee3\u7801\u5982\u4e0b\u3002</p> <pre><code>/// \u5c06 `toy.transpose` operation \u964d\u4f4e\u4e3a an affine loop nest.\nstruct TransposeOpLowering : public mlir::ConversionPattern {\nTransposeOpLowering(mlir::MLIRContext *ctx)\n: mlir::ConversionPattern(TransposeOp::getOperationName(), 1, ctx) {}\n\n/// \u5339\u914d\u91cd\u5199 `toy.transpose` operation, with the given\n/// operands that have been remapped from `tensor&lt;...&gt;` to `memref&lt;...&gt;`.\nmlir::LogicalResult\nmatchAndRewrite(mlir::Operation *op, ArrayRef&lt;mlir::Value&gt; operands,\nmlir::ConversionPatternRewriter &amp;rewriter) const final {\nauto loc = op-&gt;getLoc();\n\n// \u8c03\u7528\u8f85\u52a9\u51fd\u6570\uff0c\u5c06\u5f53\u524d\u64cd\u4f5c\u964d\u4f4e\u5230 \u4e00\u7ec4\u4eff\u5c04\u5faa\u73af\n// \u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5bf9\u91cd\u65b0\u6620\u5c04\u7684 \u64cd\u4f5c\u6570\u8fdb\u884c\u64cd\u4f5c\u7684\u4eff\u51fd\u6570\uff0c\u4ee5\u53ca\u6700\u5185\u5c42 \u5faa\u73af\u4f53\u7684\u5faa\u73af\u5f52\u7eb3\u53d8\u91cf\u3002\nlowerOpToLoops(\nop, operands, rewriter,\n[loc](mlir::PatternRewriter &amp;rewriter,\nArrayRef&lt;mlir::Value&gt; memRefOperands,\nArrayRef&lt;mlir::Value&gt; loopIvs) {\n\nTransposeOpAdaptor transposeAdaptor(memRefOperands);\nmlir::Value input = transposeAdaptor.input();\n\n// Transpose the elements by generating a load from the reverse indices.\nSmallVector&lt;mlir::Value, 2&gt; reverseIvs(llvm::reverse(loopIvs));\nreturn rewriter.create&lt;mlir::AffineLoadOp&gt;(loc, input, reverseIvs);\n});\nreturn success();\n}\n};\n</code></pre> <p>\u6211\u4eec\u628a\u8fd9\u4e2a\u8f6c\u6362\uff0c\u5305\u62ec\u5176\u5b83Op\u5230Affine\u7684\u8f6c\u6362\u4e5f\u6dfb\u52a0\u5230  <code>ToyToAffineLoweringPass</code> \u4e2d\uff1a</p> <pre><code>void ToyToAffineLoweringPass::runOnOperation() {\n...\n\n// \u628a Conversion Patterns \u6dfb\u52a0\u5230  `ToyToAffineLoweringPass`\nRewritePatternSet patterns(&amp;getContext());\npatterns.add&lt;AddOpLowering, ConstantOpLowering, FuncOpLowering, MulOpLowering,\nPrintOpLowering, ReturnOpLowering, TransposeOpLowering&gt;(&amp;getContext());\n\nif (failed(...)) signalPassFailure();\n}\n</code></pre> </li> <li> <p>\u6700\u7ec8\u5728 \u8be5Pass \u4e2d\u8c03\u7528 MLIR \u63d0\u4f9b\u7684 <code>applyPartialConversion</code>\uff1a</p> <pre><code>void ToyToAffineLoweringPass::runOnOperation() {\n// 1. \u5b9a\u4e49\u8f6c\u6362\u76ee\u6807(Conversation Target)\nConversionTarget target(getContext());\n...\n// 2. \u6dfb\u52a0\u8f6c\u6362\u6a21\u5f0f(Conversion Patterns)\nRewritePatternSet patterns(&amp;getContext());\n...\n// 3. applyPartialConversion\nif (failed(applyPartialConversion(getOperation(), target, std::move(patterns))))\nsignalPassFailure();\n}\n</code></pre> <p>\u6700\u540e\u5c06\u8fd9\u4e2a Pass \u6dfb\u52a0\u5230 PassManager \u4e2d\u5373\u53ef\uff0c \u7c7b\u4f3c\u524d\u9762\u51e0\u8282\u4e2d \u6dfb\u52a0 Inline Pass\uff1a</p> <pre><code>  if (isLoweringToAffine) {\n// Partially lower the toy dialect.\npm.addPass(mlir::toy::createLowerToAffinePass());\n\n// Add a few cleanups post lowering.\nmlir::OpPassManager &amp;optPM = pm.nest&lt;mlir::func::FuncOp&gt;();\noptPM.addPass(mlir::createCanonicalizerPass());\noptPM.addPass(mlir::createCSEPass());\n\n// Add optimizations if enabled.\nif (enableOpt) {\noptPM.addPass(mlir::createLoopFusionPass());\noptPM.addPass(mlir::createAffineScalarReplacementPass());\n}\n}\n</code></pre> </li> </ol> <p>\u672c\u8282\u7684\u4f8b\u5b50\u4f7f\u7528 <code>mlir/test/Examples/Toy/Ch5/affine-lowering.mlir</code></p> <pre><code>toy.func @main() {\n// %0 = [[1, 2, 3], [4, 5, 6]]  // -&gt; (2*3)\n// %2 = transpose(%0)           // -&gt; (3*2)\n// %3 = %2 * %2                 // -&gt; (3*2) element-wise mul\n%0 = toy.constant dense&lt;[[1.000000e+00, 2.000000e+00, 3.000000e+00], [4.000000e+00, 5.000000e+00, 6.000000e+00]]&gt; : tensor&lt;2x3xf64&gt;\n%2 = toy.transpose(%0 : tensor&lt;2x3xf64&gt;) to tensor&lt;3x2xf64&gt;\n%3 = toy.mul %2, %2 : tensor&lt;3x2xf64&gt;\ntoy.print %3 : tensor&lt;3x2xf64&gt;\ntoy.return\n}\n</code></pre> <p>\u6267\u884c <code>./bin/toyc-ch5 ../mlir/test/Examples/Toy/Ch5/affine-lowering.mlir -emit=mlir-affine</code> \u4e4b\u540e\u5c31\u53ef\u4ee5\u67e5\u770b\u5e94\u7528\u4e86\u672c\u8282\u7684\u90e8\u5206 Lowering \u4e4b\u540e\u6df7\u5408\u4e86\u591a\u79cd\u65b9\u8a00\u7684 MLIR \u8868\u8fbe\u5f0f\u4e86</p> <pre><code>module {\nfunc.func @main() {\n%cst = arith.constant 6.000000e+00 : f64\n%cst_0 = arith.constant 5.000000e+00 : f64\n%cst_1 = arith.constant 4.000000e+00 : f64\n%cst_2 = arith.constant 3.000000e+00 : f64\n%cst_3 = arith.constant 2.000000e+00 : f64\n%cst_4 = arith.constant 1.000000e+00 : f64\n%0 = memref.alloc() : memref&lt;3x2xf64&gt;\n%1 = memref.alloc() : memref&lt;3x2xf64&gt;\n%2 = memref.alloc() : memref&lt;2x3xf64&gt;\n\n// %2 = [[1, 2, 3], [4, 5, 6]]\naffine.store %cst_4, %2[0, 0] : memref&lt;2x3xf64&gt;\naffine.store %cst_3, %2[0, 1] : memref&lt;2x3xf64&gt;\naffine.store %cst_2, %2[0, 2] : memref&lt;2x3xf64&gt;\naffine.store %cst_1, %2[1, 0] : memref&lt;2x3xf64&gt;\naffine.store %cst_0, %2[1, 1] : memref&lt;2x3xf64&gt;\naffine.store %cst, %2[1, 2] : memref&lt;2x3xf64&gt;\n\n// %1 = transpose(%2)\naffine.for %arg0 = 0 to 3 {\naffine.for %arg1 = 0 to 2 {\n%3 = affine.load %2[%arg1, %arg0] : memref&lt;2x3xf64&gt;\naffine.store %3, %1[%arg0, %arg1] : memref&lt;3x2xf64&gt;\n}\n}\n// %0 = %1 * %1\naffine.for %arg0 = 0 to 3 {\naffine.for %arg1 = 0 to 2 {\n%3 = affine.load %1[%arg0, %arg1] : memref&lt;3x2xf64&gt;\n%4 = arith.mulf %3, %3 : f64\naffine.store %4, %0[%arg0, %arg1] : memref&lt;3x2xf64&gt;\n}\n}\n\ntoy.print %0 : memref&lt;3x2xf64&gt;\nmemref.dealloc %2 : memref&lt;2x3xf64&gt;\nmemref.dealloc %1 : memref&lt;3x2xf64&gt;\nmemref.dealloc %0 : memref&lt;3x2xf64&gt;\nreturn\n}\n}\n</code></pre> <p>\u9996\u5148\u6709 6 \u4e2a <code>f64</code> \u6570\u636e\u7c7b\u578b\u7684\u5e38\u91cf\uff0c\u4f7f\u7528 <code>%cst</code> \u5f00\u5934\u7684\u53d8\u91cf\u6765\u8868\u793a\u3002 \u7136\u540e\u4e3a\u8f93\u5165\u548c\u8f93\u51fa\u5206\u914d\u7f13\u51b2\u533a\uff0c\u5982 <code>%0 = memref.alloc() : memref&lt;3x2xf64&gt;</code> \u7533\u8bf7\u4e00\u4e2a\u7c7b\u578b\u4e3a <code>memref&lt;3x2xf64&gt;</code> \u7684\u7f13\u51b2\u533a\u3002\u7136\u540e <code>affine.store</code> \u5c06\u4e4b\u524d\u58f0\u660e\u7684 6 \u4e2a\u6570\u636e\u4f9d\u6b21\u5b58\u5165\u4e0a\u8ff0\u5206\u914d\u7684\u7f13\u51b2\u533a\u4e2d\u3002</p> <p>\u4e4b\u540e\uff0c\u7b2c\u4e00\u4e2a\u5faa\u73af\uff0c\u5c06\u52a0\u8f7d\u7684\u8f93\u5165\u6570\u636e\uff08\u6570\u636e\u52a0\u8f7d\u64cd\u4f5c <code>affine.load</code> \uff09\uff0c\u4fdd\u5b58\u5230\u53e6\u4e00\u4e2a\u6570\u636e\u5bb9\u5668\u4e2d\uff0c\u6700\u7ec8\u5b9e\u73b0\u8f6c\u7f6e\u64cd\u4f5c\u3002\u63a5\u7740\uff0c\u7b2c\u4e8c\u4e2a\u5faa\u73af\uff0c\u52a0\u8f7d\u4e4b\u524d\u5b9a\u4e49\u5728\u4e24\u4e2a\u6570\u636e\u5bb9\u5668\u4e2d\u7684\u6570\u636e\uff0c\u76f8\u4e58\u5e76\u5b58\u653e\u5230\u8f93\u51fa\u7684\u6570\u636e\u5bb9\u5668\u4e2d\u3002\u6700\u7ec8\u4f7f\u7528 <code>toy.print</code> \u6253\u5370\u7ed3\u679c\uff0c\u5e76\u91ca\u653e\u7f13\u51b2\u533a\u3002</p> <p>\u4f7f\u7528\u4e86 Affine Dialect \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 Operation \u66f4\u5e95\u5c42\u7684\u903b\u8f91\u5c55\u793a\u51fa\u6765\uff0c\u5c06\u4ee3\u7801\u4e2d\u7684\u5197\u4f59\u66f4\u8f7b\u6613\u7684\u66b4\u9732\u51fa\u6765\u3002\u8fd9\u91cc\u53ef\u4ee5\u4f18\u5316\u7684\u5730\u65b9\u4e3a\u4e24\u4e2a\u5faa\u73af\u5d4c\u5957\u7684\u5faa\u73af\u8fb9\u754c\u76f8\u540c\uff0c\u53ef\u4ee5\u8fdb\u884c\u5faa\u73af\u878d\u5408\uff0c \u878d\u5408\u540e\uff0c \u4e2d\u95f4\u53d8\u91cf<code>%1 = transpose(%2)</code> \u662f\u5197\u4f59\u7684\u53ef\u4ee5\u53bb\u6389\u3002</p> <p>\u5728 <code>mlir/examples/toy/Ch5/toyc.cpp</code> \u4e2d\u6dfb\u52a0\u4e86 <code>createLoopFusionPass</code> \u548c <code>createAffineScalarReplacementPass</code> \uff0c\u8fd9\u4e24\u79cd MLIR \u81ea\u5e26\u7684 Pass \u5206\u522b\u5b8c\u6210\u4e86\u76f8\u540c\u5faa\u73af\u8fb9\u754c\u878d\u5408\u4f18\u5316\u4ee5\u53ca\u5bf9\u4e8e MemRef \u7684\u6570\u636e\u6d41\u4f18\u5316\u529f\u80fd\u3002\u6211\u4eec\u53ea\u9700\u8981\u5728\u4e0a\u9762\u90a3\u4e2a\u751f\u6210\u90e8\u5206 Lowering \u7684 Affine Dialect \u547d\u4ee4\u4e2d\u989d\u5916\u52a0\u4e00\u4e2a <code>-opt</code> \u5c31\u53ef\u4ee5\u751f\u6210\u52a0\u5165\u4e86\u8fd9\u4e24\u4e2a\u4f18\u5316 Pass \u7684 Affine Dialect \u4e86\u3002\u547d\u4ee4\u5982\u4e0b\uff1a<code>./bin/toyc-ch5 ../mlir/test/Examples/Toy/Ch5/affine-lowering.mlir -emit=mlir-affine -opt</code> \u3002\u751f\u6210\u7684 MLIR \u8868\u8fbe\u5f0f\u4e3a\uff1a</p> <pre><code>module {\nfunc.func @main() {\n%cst = arith.constant 6.000000e+00 : f64\n%cst_0 = arith.constant 5.000000e+00 : f64\n%cst_1 = arith.constant 4.000000e+00 : f64\n%cst_2 = arith.constant 3.000000e+00 : f64\n%cst_3 = arith.constant 2.000000e+00 : f64\n%cst_4 = arith.constant 1.000000e+00 : f64\n%0 = memref.alloc() : memref&lt;3x2xf64&gt;\n%1 = memref.alloc() : memref&lt;2x3xf64&gt;\n\naffine.store %cst_4, %1[0, 0] : memref&lt;2x3xf64&gt;\naffine.store %cst_3, %1[0, 1] : memref&lt;2x3xf64&gt;\naffine.store %cst_2, %1[0, 2] : memref&lt;2x3xf64&gt;\naffine.store %cst_1, %1[1, 0] : memref&lt;2x3xf64&gt;\naffine.store %cst_0, %1[1, 1] : memref&lt;2x3xf64&gt;\naffine.store %cst, %1[1, 2] : memref&lt;2x3xf64&gt;\n\naffine.for %arg0 = 0 to 3 {\naffine.for %arg1 = 0 to 2 {\n%2 = affine.load %1[%arg1, %arg0] : memref&lt;2x3xf64&gt;\n%3 = arith.mulf %2, %2 : f64\naffine.store %3, %0[%arg0, %arg1] : memref&lt;3x2xf64&gt;\n}\n}\ntoy.print %0 : memref&lt;3x2xf64&gt;\nmemref.dealloc %1 : memref&lt;2x3xf64&gt;\nmemref.dealloc %0 : memref&lt;3x2xf64&gt;\nreturn\n}\n}\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u91cc\u5220\u9664\u4e86\u591a\u4f59\u7684\u6570\u636e\u7f13\u51b2\u533a\u7684\u5206\u914d\uff0c\u4e24\u4e2a\u5faa\u73af\u5d4c\u5957\u88ab\u878d\u5408\u5728\u4e00\u8d77\uff0c\u53e6\u5916\u53bb\u9664\u4e86\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u6570\u636e\u52a0\u8f7d\u64cd\u4f5c\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u901a\u8fc7\u90e8\u5206 Lowering \u786e\u5b9e\u5bfb\u6c42\u5230\u4e86\u66f4\u591a\u7684\u4f18\u5316\u673a\u4f1a\uff0c\u4f7f\u5f97 MLIR \u8868\u8fbe\u5f0f\u7684\u8fd0\u884c\u6548\u7387\u66f4\u9ad8\u3002</p>"},{"location":"mlc/mlir-toy.html#6-chapter-6-lowering-to-llvm-and-codegeneration","title":"6. Chapter 6: Lowering to LLVM and CodeGeneration","text":"<p>\u4e0a\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u5c06 Toy Dialect \u7684\u90e8\u5206 Operation Lowering \u5230 Affine Dialect\uff0c MemRef Dialect \u548c Standard Dialect\uff0c\u800c <code>toy.print</code> \u64cd\u4f5c\u4fdd\u6301\u4e0d\u53d8\u3002\u8fd9\u4e00\u8282\uff0c\u6211\u4eec\u5c06\u5728\u4e0a\u4e00\u8282\u5f97\u5230\u7684\u6df7\u5408\u578b MLIR \u8868\u8fbe\u5f0f\u5b8c\u5168 Lowering \u5230 LLVM Dialect \u4e0a\uff0c\u7136\u540e\u751f\u6210 LLVM IR\uff0c\u5e76\u4e14\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 MLIR \u7684 JIT \u7f16\u8bd1\u5f15\u64ce\u6765\u8fd0\u884c\u6700\u7ec8\u7684 MLIR \u8868\u8fbe\u5f0f\u5e76\u8f93\u51fa\u8ba1\u7b97\u7ed3\u679c\u3002</p>"},{"location":"mlc/mlir-toy.html#61-lowering-toyprint","title":"6.1. Lowering toy.print","text":"<p>\u63a5\u4e0b\u6765\u6211\u4eec\u5c1d\u8bd5\u628a <code>toy.print</code> Operation \u964d\u4f4e\u5230 SCF (structured control flow) Dialect\u3002 \u5373\uff0c \u6211\u4eec\u5c06\u628a <code>toy.print</code> Operation \u964d\u4f4e\u5230\u4e00\u4e2a\u975e\u4eff\u5c04\u5faa\u73af\u5d4c\u5957\uff0c\u5b83\u4e3a\u6bcf\u4e2a\u5143\u7d20\u8c03\u7528 <code>printf</code> \u3002\u8bf7\u6ce8\u610f\uff0c\u56e0\u4e3a\u65b9\u8a00\u8f6c\u6362\u6846\u67b6\u652f\u6301 Transitive lowering \uff0c\u6211\u4eec\u4e0d\u9700\u8981\u76f4\u63a5\u5728 LLVM Dialect \u4e2d\u53d1\u51fa\u64cd\u4f5c\u3002 Transitive lowering \u7684\u601d\u60f3\u662f\u8f6c\u6362\u6846\u67b6\u53ef\u4ee5\u5e94\u7528\u591a\u79cd\u6a21\u5f0f\u6765\u5b8c\u5168\u5408\u6cd5\u5316\u64cd\u4f5c\u3002 \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u751f\u6210 SCF \u800c\u4e0d\u662f LLVM Dialect \u4e2d\u7684\u5206\u652f\u5f62\u5f0f\u3002\u53ea\u8981\u6211\u4eec\u4ece\u5faa\u73af\u64cd\u4f5c\u964d\u4f4e\u5230 LLVM\uff0c \u964d\u4f4e\u4ecd\u7136\u4f1a\u6210\u529f\u3002</p> <pre><code>class PrintOpLowering : public ConversionPattern {\n\n/// \u5339\u914d `toy::PrintOp` Operation\uff0c \u91cd\u5199\u4e3a\u5bf9 operands (memRefType) \u9010\u5143\u7d20 \u8c03\u7528 `printf`\nLogicalResult matchAndRewrite(Operation *op, ArrayRef&lt;Value&gt; operands,\nConversionPatternRewriter &amp;rewriter) const override {...}\n\n...\n\n/// \u8fd4\u56de\u5bf9 `printf` \u7684\u7b26\u53f7\u5f15\u7528, inserting it into the module if necessary.\nstatic FlatSymbolRefAttr getOrInsertPrintf(PatternRewriter &amp;rewriter,\nModuleOp module,\nLLVM::LLVMDialect *llvmDialect) {\nauto *context = module.getContext();\nif (module.lookupSymbol&lt;LLVM::LLVMFuncOp&gt;(\"printf\"))\nreturn SymbolRefAttr::get(\"printf\", context);\n\n// \u58f0\u660e `printf`, the signature is:\n//   * `i32 (i8*, ...)`\nauto llvmI32Ty = IntegerType::get(context, 32);\nauto llvmI8PtrTy =\nLLVM::LLVMPointerType::get(IntegerType::get(context, 8));\nauto llvmFnType = LLVM::LLVMFunctionType::get(llvmI32Ty, llvmI8PtrTy,\n/*isVarArg=*/true);\n\n// Insert the `printf` function into the body of the parent module.\nPatternRewriter::InsertionGuard insertGuard(rewriter);\nrewriter.setInsertionPointToStart(module.getBody());\nrewriter.create&lt;LLVM::LLVMFuncOp&gt;(module.getLoc(), \"printf\", llvmFnType);\nreturn SymbolRefAttr::get(\"printf\", context);\n}\n\n}\n</code></pre> <p>\u63a5\u4e0b\u6765\u4e0e <code>ToyToAffineLoweringPass</code> \u7c7b\u4f3c\uff0c \u6211\u4eec\u5728 <code>ToyToLLVMLoweringPass</code> \u4e2d\u4f9d\u6b21\u6267\u884c\uff1a 1. \u5b9a\u4e49\u8f6c\u6362\u76ee\u6807(Conversion Target) 2. \u6dfb\u52a0\u8f6c\u6362\u6a21\u5f0f(Conversion Patterns) 3. apply Conversion \uff1b \u8fd9\u91cc\u4e0e <code>ToyToAffineLoweringPass</code> \u4e0d\u540c\uff0c \u8fd9\u91cc\u6267\u884c <code>applyFullConversion</code> \u800c\u4e0d\u662f \u90e8\u5206\u964d\u4f4e</p> <p>\u6dfb\u52a0 \u7c7b\u578b\u8f6c\u6362 \u548c \u5bf9\u4e8e <code>toy.print</code> \u7684\u8f6c\u6362\uff1a</p> <pre><code>void ToyToLLVMLoweringPass::runOnOperation() {\n// 1. \u5b9a\u4e49 conversion target\uff0c \u8fd9\u91cc target \u5c31\u662f LLVM dialect\nLLVMConversionTarget target(getContext());\ntarget.addLegalOp&lt;ModuleOp&gt;();\n\n// \u5b9a\u4e49 TypeConverter \u5c06 MemRef \u8f6c\u6362\u4e3a representation in LLVM\nLLVMTypeConverter typeConverter(&amp;getContext());\n\n// 2. \u6dfb\u52a0 Conversion Patterns, \u8fd9\u91cc\u53ef\u4ee5\u5229\u7528 MLIR \u4e2d\u5df2\u7ecf\u5b58\u5728\u7684 \u6a21\u5f0f\u5339\u914d-\u8f6c\u6362\n// \n// \u5f53\u524d\u6211\u4eec\u7684 MLIR \u8868\u793a \u7531\u591a\u79cd Dialect \u6784\u6210\uff0c \u5305\u62ec `toy`, `affine` \u7b49\n// affine\u3001arith \u548c std \u65b9\u8a00\u5df2\u7ecf\u63d0\u4f9b\u4e86\u5c06\u5b83\u4eec\u8f6c\u6362\u4e3a LLVM \u65b9\u8a00\u6240\u9700\u7684\u4e00\u7ec4\u6a21\u5f0f\nRewritePatternSet patterns(&amp;getContext());\npopulateAffineToStdConversionPatterns(patterns);\npopulateSCFToControlFlowConversionPatterns(patterns);\nmlir::arith::populateArithmeticToLLVMConversionPatterns(typeConverter, patterns);\npopulateMemRefToLLVMConversionPatterns(typeConverter, patterns);\ncf::populateControlFlowToLLVMConversionPatterns(typeConverter, patterns);\npopulateFuncToLLVMConversionPatterns(typeConverter, patterns);\n\n// \u6dfb\u52a0\u5bf9\u4e8e `toy.PrintOp` \u7684\u5339\u914d\u91cd\u5199\npatterns.add&lt;PrintOpLowering&gt;(&amp;getContext());\n\n// 3. `FullConversion`. \u53ef\u4ee5\u4fdd\u8bc1\u5728 conversion \u4e4b\u540e\u53ea\u6709 legal operations\nauto module = getOperation();\nif (failed(applyFullConversion(module, target, std::move(patterns))))\nsignalPassFailure();\n}\n</code></pre> <p>\u7c7b\u4f3c\u7684\uff0c \u6211\u4eec\u8fd8\u9700\u8981\u5c06\u8fd9\u4e2a pass \u52a0\u5165\u6211\u4eec\u7684 pass pipeline\uff0c \u5e76\u5728\u524d\u7aef\u52a0\u4e0a\u76f8\u5e94\u4ee3\u7801\uff0c \u63a5\u7740\u5c31\u53ef\u4ee5\u751f\u6210 LLVM Dialect \u4e86 <code>./bin/toyc-ch6 ../mlir/test/Examples/Toy/Ch6/llvm-lowering.mlir -emit=mlir-llvm</code>\uff1a</p>"},{"location":"mlc/mlir-toy.html#62-llvm-ir-jit","title":"6.2. \u751f\u6210LLVM IR \u5e76 JIT","text":"<p>\u63a5\u4e0b\u6765\u5c06 LLVM Dialect \u8f6c\u6362\u6210 LLVM IR\uff0c \u5e76\u8bbe\u7f6e JIT \u6765\u8fd0\u884c\u5b83\u3002</p> <p><pre><code>int runJit(mlir::ModuleOp module) {\n// Initialize LLVM targets.\nllvm::InitializeNativeTarget();\nllvm::InitializeNativeTargetAsmPrinter();\n\n// \u5c06 LLVM Dialect \u7ffb\u8bd1\u6210 LLVM IR\uff0c JIT \u65f6\u7f13\u5b58\uff0c \u4e0b\u6b21\u6267\u884c\u65f6\u4e0d\u4f1a\u91cd\u590d\u6267\u884c\u5404\u79cd MLIR \u8868\u8fbe\u5f0f\u53d8\u6362\nmlir::registerLLVMDialectTranslation(*module-&gt;getContext());\n\n// An optimization pipeline to use within the execution engine.\nauto optPipeline = mlir::makeOptimizingTransformer(\n/*optLevel=*/enableOpt ? 3 : 0, /*sizeLevel=*/0,\n/*targetMachine=*/nullptr);\n\n// \u521b\u5efa\u4e00\u4e2a MLIR \u6267\u884c\u5f15\u64ce. \u6267\u884c\u5f15\u64ce eagerly JIT-compiles the module.\nmlir::ExecutionEngineOptions engineOptions;\nengineOptions.transformer = optPipeline;\nauto maybeEngine = mlir::ExecutionEngine::create(module, engineOptions);\nassert(maybeEngine &amp;&amp; \"failed to construct an execution engine\");\nauto &amp;engine = maybeEngine.get();\n\n// Invoke the JIT-compiled function.\nauto invocationResult = engine-&gt;invokePacked(\"main\");\nif (invocationResult) {\nllvm::errs() &lt;&lt; \"JIT invocation failed\\n\";\nreturn -1;\n}\n\nreturn 0;\n}\n</code></pre> \u6267\u884c<code>./bin/toyc-ch6 ../mlir/test/Examples/Toy/Ch6/llvm-lowering.mlir -emit=llvm -opt</code> \u5f97\u5230\u7ed3\u679c\uff1a</p> <pre><code>; Function Attrs: nounwind\ndefine void @main() local_unnamed_addr #1 !dbg !3 {\n.preheader3:\n%0 = tail call i32 (ptr, ...) @printf(ptr nonnull @frmt_spec, double 1.000000e+00), !dbg !7\n%1 = tail call i32 (ptr, ...) @printf(ptr nonnull @frmt_spec, double 1.600000e+01), !dbg !7\n%putchar = tail call i32 @putchar(i32 10), !dbg !7\n%2 = tail call i32 (ptr, ...) @printf(ptr nonnull @frmt_spec, double 4.000000e+00), !dbg !7\n%3 = tail call i32 (ptr, ...) @printf(ptr nonnull @frmt_spec, double 2.500000e+01), !dbg !7\n%putchar.1 = tail call i32 @putchar(i32 10), !dbg !7\n%4 = tail call i32 (ptr, ...) @printf(ptr nonnull @frmt_spec, double 9.000000e+00), !dbg !7\n%5 = tail call i32 (ptr, ...) @printf(ptr nonnull @frmt_spec, double 3.600000e+01), !dbg !7\n%putchar.2 = tail call i32 @putchar(i32 10), !dbg !7\nret void, !dbg !9\n}\n</code></pre> <p>\u6267\u884c <code>./bin/toyc-ch6 ../mlir/test/Examples/Toy/Ch6/llvm-lowering.mlir -emit=jit -opt</code> \u5f97\u5230\u7ed3\u679c\uff1a</p> <pre><code>1.000000 16.000000 \n4.000000 25.000000 \n9.000000 36.000000\n</code></pre>"},{"location":"mlc/mlir-toy.html#7-chapter-7-toy","title":"7. Chapter 7: \u4e3a Toy \u6dfb\u52a0\u590d\u5408\u7c7b\u578b","text":"<p>\u5728\u4e0a\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u6f14\u793a\u4e86\u4ece Toy \u524d\u7aef\u5230 LLVM IR \u7684\u7aef\u5230\u7aef\u7f16\u8bd1\u6d41\u7a0b\u3002\u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u6269\u5c55 Toy \u8bed\u8a00\u4ee5\u652f\u6301\u65b0\u7684\u590d\u5408\u7ed3\u6784\u7c7b\u578b\u3002</p>"},{"location":"mlc/mlir.html","title":"MLIR: Scaling Compiler Infrastructure for Domain Specific Computation","text":""},{"location":"mlc/mlir.html#0","title":"0. \u6458\u8981","text":"<p>\u672c\u6587\u63d0\u51fa\u4e86MLIR\uff0c\u8fd9\u662f\u4e00\u79cd\u6784\u5efa\u53ef\u91cd\u7528\u3001\u53ef\u6269\u5c55\u7f16\u8bd1\u5668\u57fa\u7840\u7ed3\u6784\u7684\u65b0\u65b9\u6cd5\u3002MLIR\u65e8\u5728\u89e3\u51b3\u8f6f\u4ef6\u788e\u7247\u5316\uff0c\u6539\u8fdb\u5f02\u6784\u786c\u4ef6\u7684\u7f16\u8bd1\u8fc7\u7a0b\uff0c\u5927\u5927\u964d\u4f4e\u4e86\u6784\u5efa\u9886\u57df\u7279\u5b9a\u7f16\u8bd1\u5668\u7684\u6210\u672c\uff0c\u5e76\u6709\u52a9\u4e8e\u5c06\u73b0\u6709\u7684\u7f16\u8bd1\u5668\u8fde\u63a5\u5728\u4e00\u8d77\u3002MLIR\u8fd8\u6709\u52a9\u4e8e\u5728\u4e0d\u540c\u62bd\u8c61\u7ea7\u522b\u3001\u4e0d\u540c\u8de8\u5e94\u7528\u7a0b\u5e8f\u57df\u3001\u4e0d\u540c\u786c\u4ef6\u76ee\u6807\u548c\u6267\u884c\u73af\u5883\uff0c\u6539\u5584\u4ee3\u7801\u751f\u6210\u5668\u3001\u7ffb\u8bd1\u5668\u548c\u4f18\u5316\u5668\u7684\u8bbe\u8ba1\u548c\u5b9e\u73b0\u3002\u672c\u6587\u7684\u8d21\u732e\u5305\u62ec\uff081\uff09\u8ba8\u8bbaMLIR\u4f5c\u4e3a\u672c\u6587\u7814\u7a76\u6210\u679c\u53ef\u80fd\u7684\u6269\u5c55\u548c\u8fdb\u5316\uff0c\u5e76\u6307\u51fa\u8fd9\u4e2a\u65b0\u8bbe\u8ba1\u65b9\u6cd5\u5728\u8bbe\u8ba1\u3001\u8bed\u4e49\u3001\u4f18\u5316\u89c4\u8303\u3001\u7cfb\u7edf\u548c\u5de5\u7a0b\u7b49\u65b9\u9762\u5e26\u6765\u7684\u6311\u6218\u548c\u673a\u9047\u3002\uff082\uff09\u8bc4\u4f30MLIR\u4f5c\u4e3a\u53ef\u51cf\u5c11\u6784\u5efa\u7f16\u8bd1\u5668\u6210\u672c\u7684\u901a\u7528\u67b6\u6784\uff0c\u901a\u8fc7\u63cf\u8ff0\u5404\u79cd\u7528\u4f8b\uff0c\u663e\u793a\u672c\u6587\u7814\u7a76\u6210\u679c\u5728\u672a\u6765\u7f16\u7a0b\u8bed\u8a00\u3001\u7f16\u8bd1\u5668\u3001\u6267\u884c\u73af\u5883\u548c\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u65b9\u9762\u7684\u7814\u7a76\u548c\u6559\u5b66\u673a\u4f1a\u3002\u672c\u6587\u8fd8\u4ecb\u7ecd\u4e86MLIR\u8bbe\u8ba1\u57fa\u672c\u539f\u7406\u3001\u7ed3\u6784\u548c\u8bed\u4e49\u3002</p>"},{"location":"mlc/mlir.html#1-intro","title":"1. Intro","text":"<p>\u7f16\u8bd1\u5668\u8bbe\u8ba1\u662f\u4e00\u4e2a\u6210\u719f\u7684\u9886\u57df\uff0c\u5305\u62ec\u8bb8\u591a\u5e7f\u4e3a\u4eba\u77e5\u7684\u7b97\u6cd5\uff0c\u53ef\u7528\u4e8e\u4ee3\u7801\u751f\u6210\u3001\u9759\u6001\u5206\u6790\u3001\u7a0b\u5e8f\u8f6c\u6362\u7b49\u3002\u7f16\u8bd1\u5668\u8bbe\u8ba1\u9886\u57df\u5df2\u53d1\u5c55\u51fa\u8bb8\u591a\u6210\u719f\u6280\u672f\u5e73\u53f0\uff0c\u8fd9\u4e9b\u5e73\u53f0\u73b0\u5728\u5df2\u7ecf\u5728\u6574\u4e2a\u7f16\u8bd1\u5668\u793e\u533a\u5927\u89c4\u6a21\u5e94\u7528\uff0c\u5305\u62ecLLVM [25]\u3001JVM [26] \u7b49\u7cfb\u7edf\u3002\u8fd9\u4e9b\u6d41\u884c\u7cfb\u7edf\u7684\u4e00\u4e2a\u5171\u540c\u7279\u5f81\u662f\u5b83\u4eec\u7684\u201cone size fits all\u201d\u65b9\u6cd5\uff0c\u5373\u7cfb\u7edf\u63a5\u53e3\u53ea\u6709\u4e00\u5957\u62bd\u8c61\uff0c\u4f8b\u5982LLVM IR \u53ef\u88ab\u89c6\u4e3a C with vectors\uff0c\u800c JVM \u63d0\u4f9b\u4e86\u201c\u6709 gc \u7684\u9762\u5411\u5bf9\u8c61\u7c7b\u578b\u7cfb\u7edf\uff08object-oriented type system with a garbage collector\uff09\u201d\u62bd\u8c61\u3002\u8fd9\u79cd\u201cone size fits all\u201d\u7684\u65b9\u6cd5\u975e\u5e38\u6709\u4ef7\u503c\uff0c\u56e0\u4e3a\u4ece\u6e90\u8bed\u8a00\uff08C/C++\u548cJava\uff09\u5230\u8fd9\u4e9b\u62bd\u8c61\u9886\u57df\u7684\u6620\u5c04\u975e\u5e38\u76f4\u63a5\u3002</p> <p>\u540c\u65f6\u5e94\u8be5\u6307\u51fa\uff0c\u8bb8\u591a\u95ee\u9898\u5728\u8f83\u9ad8\u6216\u8f83\u4f4e\u7ea7\u522b\u7684\u62bd\u8c61\u5c42\u7ea7\u5efa\u6a21\u4f1a\u66f4\u597d\u3002\u4f8b\u5982\u5728LLVM IR\u4e0a\uff0c\u5bf9 C++ \u4ee3\u7801\u8fdb\u884c\u6e90\u4ee3\u7801\u7ea7\u5206\u6790\u975e\u5e38\u56f0\u96be\u3002\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u8bb8\u591a\u8bed\u8a00\uff08\u4f8b\u5982Swift\uff0cRust\uff0cJulia\uff0cFortran\uff09\u90fd\u5f00\u53d1\u4e86\u81ea\u5df1\u7684 IR\uff0c\u4ee5\u89e3\u51b3\u8fd9\u4e9b\u8bed\u8a00\u9886\u57df\u7279\u5b9a\u7684\u95ee\u9898\uff0c\u4f8b\u5982\u8bed\u8a00/\u5e93\u76f8\u5173\u7684\u4f18\u5316\u3001\u6d41\u654f\u611f\uff08 flow-sensitive\uff09\u7c7b\u578b\u68c0\u67e5\uff08\u4f8b\u5982\u7ebf\u6027\u7c7b\u578b\uff09\u548c\u6539\u5584\u964d\u7ea7\uff08lowering\uff09\u6d41\u7a0b\u7684\u5b9e\u73b0\u3002\u7c7b\u4f3c\u5730\uff0c\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u901a\u5e38\u5c06\u201cML\u56fe\u201d(ML graph)\u7528\u4f5c\u9886\u57df\u7279\u5b9a\u7684\u62bd\u8c61\u3002</p> <p>\u5c3d\u7ba1\u9886\u57df\u7279\u5b9aIR\u7684\u5f00\u53d1\u662f\u4e00\u9879\u5df2\u7ecf\u88ab\u5145\u5206\u7814\u7a76\u7684\u6280\u672f\uff0c\u4f46\u5176\u5de5\u7a0b\u548c\u5b9e\u73b0\u6210\u672c\u4ecd\u7136\u5f88\u9ad8\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u7cfb\u7edf\u7684\u5b9e\u73b0\u8005\u800c\u8a00\uff0c\u6709\u65f6\u5019\u57fa\u7840\u7ed3\u6784\u7684\u8d28\u91cf\u4e0d\u4e00\u5b9a\u662f\u4f18\u5148\u8003\u8651\u7684\u56e0\u7d20\u3002\u8fd9\u53ef\u80fd\u5bfc\u81f4\u7f16\u8bd1\u5668\u7cfb\u7edf\u7684\u5b9e\u73b0\u8d28\u91cf\u964d\u4f4e\uff0c\u8fd9\u5305\u62ec\u4e00\u4e9b\u7528\u6237\u53ef\u89c1\u7684\u95ee\u9898\uff0c\u4f8b\u5982\u7f16\u8bd1\u65f6\u95f4\u6162\u3001\u9519\u8bef\u7684\u5b9e\u73b0\u3001\u8bca\u65ad\u8d28\u91cf\u6b20\u4f73\u3001\u4f18\u5316\u4ee3\u7801\u7684\u8c03\u8bd5\u4f53\u9a8c\u5dee\u7b49\u7b49\u3002</p> <p>MLIR\u9879\u76ee\u7684\u76ee\u7684\u5c31\u662f\u8981\u5e94\u5bf9\u8fd9\u4e9b\u7f16\u7a0b\u8bed\u8a00\u8bbe\u8ba1\u548c\u5b9e\u73b0\u65b9\u9762\u7684\u6311\u6218\uff0c\u91c7\u7528\u7684\u65b9\u6cd5\u662f\u901a\u8fc7\u975e\u5e38\u7b80\u4fbf\u5730\u5b9a\u4e49\u548c\u5f15\u5165\u65b0\u7684\u62bd\u8c61\u7ea7\u522b\uff0c\u5e76\u63d0\u4f9b\u201c\u73b0\u6210\u7684\uff08in the box\uff09\u201d\u57fa\u7840\u67b6\u6784\u6765\u89e3\u51b3\u5e38\u89c1\u7684\u7f16\u8bd1\u5668\u5de5\u7a0b\u95ee\u9898\u3002 MLIR\u7684\u505a\u6cd5\u662f\uff1a\uff081\uff09\u6807\u51c6\u5316\u57fa\u4e8e\u9759\u6001\u5355\u8d4b\u503c\uff08SSA\uff09\u7684IR\u6570\u636e\u7ed3\u6784\uff0c\uff082\uff09\u63d0\u4f9b\u7528\u4e8e\u5b9a\u4e49IR dialect\u7684\u58f0\u660e\u7cfb\u7edf\uff0c\uff083\uff09\u63d0\u4f9b\u5e7f\u6cdb\u7684\u901a\u7528\u57fa\u7840\u7ed3\u6784\uff08\u5305\u62ec\u6587\u6863\u3001\u89e3\u6790\u548c\u6253\u5370\u903b\u8f91\u3001\u4f4d\u7f6e\u8ddf\u8e2a\u3001\u591a\u7ebf\u7a0b\u7f16\u8bd1\u652f\u6301\u3001pass\u7ba1\u7406\u7b49\uff09\u3002</p> <p>\u672c\u6587\u63a2\u8ba8\u4e86MLIR\u7cfb\u7edf\u7684\u5404\u4e2a\u8bbe\u8ba1\u8981\u70b9\uff0c\u5c06\u6211\u4eec\u7684\u7ecf\u9a8c\u5e94\u7528\u4e8e\u4e0d\u540c\u7684\u95ee\u9898\uff0c\u5e76\u8ba8\u8bba\u4e86\u8fd9\u9879\u5de5\u4f5c\u53ef\u80fd\u5bf9\u7f16\u7a0b\u8bed\u8a00\u8bbe\u8ba1\u548c\u6559\u5b66\u4ea7\u751f\u7684\u5f71\u54cd\u3002</p>"},{"location":"mlc/mlir.html#11","title":"1.1. \u4e3b\u8981\u8d21\u732e","text":"<p>\u5c3d\u7ba1 MLIR \u7cfb\u7edf\u7684\u5927\u90e8\u5206\u57fa\u4e8e\u5df2\u77e5\u7684\u7f16\u8bd1\u5668\u7b97\u6cd5\uff0c\u4f46\u662f\u5b83\u63d0\u4f9b\u8bb8\u591a\u6709\u8da3\u7684\u7814\u7a76\u7684\u673a\u4f1a\uff0c\u8fd9\u4f9d\u7136\u662f\u8db3\u591f\u521b\u65b0\u7684\u3002\u8fd9\u7bc7\u6587\u7ae0\u7684\u8d21\u732e\u5305\u62ec</p> <ul> <li>\u5bf9\u4e00\u4e2a\u5728\u5de5\u4e1a\u754c\u548c\u7814\u7a76\u4e2d\u6709\u5e7f\u6cdb\u5e94\u7528\u7684\u7f16\u8bd1\u5668\u57fa\u7840\u67b6\u6784\u7684\u63cf\u8ff0</li> <li>\u4e00\u79cd\u6784\u5efa\u53ef\u6269\u5c55\u7684\u6a21\u5757\u5316\u7684\u7f16\u8bd1\u5668\u7cfb\u7edf\u7684\u65b0\u65b9\u6cd5</li> <li>\u63a2\u7d22\u4e86\u51e0\u4e2a MLIR \u5728\u591a\u4e2a\u9886\u57df\u7684\u5e94\u7528\uff0c\u5e76\u5bf9\u8fd9\u4e9b\u7cfb\u7edf\u7684\u5171\u6027\u8fdb\u884c\u8bf4\u660e</li> <li>\u5206\u4eab\u57fa\u4e8eMLIR \u57fa\u7840\u67b6\u6784\u6784\u5efa\u7cfb\u7edf\u7684\u7ecf\u9a8c</li> </ul>"},{"location":"mlc/mlir.html#12-where-did-mlir-come-from","title":"1.2. Where did MLIR come from?","text":"<p>MLIR \u8d77\u6e90\u4e8e\u6211\u4eec\u610f\u8bc6\u5230\uff1a\u673a\u5668\u5b66\u4e60\u6846\u67b6\u7531\u8bb8\u591a\u4e0d\u540c\u7684 \u7f16\u8bd1\u5668\u3001\u56fe\u6280\u672f \u548c \u8fd0\u884c\u65f6\u7cfb\u7edf \u7ec4\u6210\uff08\u53c2\u89c1 \u56fe1 \uff09\uff0c \u4f46\u4ed6\u4eec\u5e76\u6ca1\u6709\u5171\u4eab\u516c\u5171\u7684\u57fa\u7840\u67b6\u6784\u548c design point\uff0c \u4e5f\u5e76\u4e0d\u662f\u6bcf\u4e00\u4e2a\u90fd\u9075\u5faa\u7f16\u8bd1\u5668\u8bbe\u8ba1\u7684\u6700\u4f73\u5b9e\u8df5\u3002\u8fd9\u5728\u5f88\u591a\u7528\u6237\u53ef\u89c1\u7684\u65b9\u9762\u5341\u5206\u660e\u663e\uff0c\u5305\u62ec\u7cdf\u7cd5\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u8fb9\u754c\u6761\u4ef6\u4e0b\u7684\u9519\u8bef\uff0c\u96be\u4ee5\u9884\u6d4b\u7684\u6027\u80fd\u4ee5\u53ca\u5c06\u5f53\u524d stack \u6cdb\u5316\u5230\u65b0\u786c\u4ef6\u7684\u96be\u5ea6\u3002</p> <p>\u6211\u4eec\u5f88\u5feb\u610f\u8bc6\u5230\uff0c\u6574\u4e2a\u7f16\u8bd1\u5668\u884c\u4e1a\u90fd\u5b58\u5728\u4e00\u4e2a\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u90a3\u5c31\u662f\uff0c\u8bf8\u5982 LLVM \u4e4b\u7c7b\u7684\u73b0\u6709\u7f16\u8bd1\u7cfb\u7edf\u5728\u8de8\u591a\u8bed\u8a00\u5b9e\u73b0\u7684\u7edf\u4e00\u548c\u96c6\u6210\u65b9\u9762\u975e\u5e38\u6210\u529f\uff0c\u4f46\u662f\u73b0\u4ee3\u9ad8\u7ea7\u8bed\u8a00\u901a\u5e38\u6700\u7ec8\u4f1a\u6784\u5efa\u81ea\u5df1\u7684\u9ad8\u7ea7IR\uff0c \u5e76\u91cd\u590d\u53d1\u660e\u8bb8\u591a\u76f8\u540c\u7684\u66f4\u9ad8\u5c42\u62bd\u8c61\u6280\u672f\uff08\u8bf7\u53c2\u89c1\u56fe2\uff09\u3002 \u540c\u65f6\uff0c\u5728 LLVM \u793e\u533a\u7ecf\u5e38\u51fa\u73b0\u4e00\u4e9b\u4e89\u8bba\uff0c \u6bd4\u5982\uff0c \u5982\u4f55\u6700\u597d\u5730\u8868\u793a\u5e76\u884c\u7ed3\u6784\uff0c \u5982\u4f55\u5171\u4eab\u5e38\u89c1\u7684\u524d\u7aef lowering \u57fa\u7840\u67b6\u6784\u5b9e\u73b0\uff08\u4f8b\u5982\uff0c\u7528\u4e8eC\u8c03\u7528\u7ea6\u5b9a\u6216\u8bf8\u5982OpenMP\u4e4b\u7c7b\u7684\u8de8\u8bed\u8a00\u529f\u80fd\uff09\uff0c\u4f46\u90fd\u6ca1\u6709\u5f97\u51fa\u4ee4\u4eba\u6ee1\u610f\u7684\u89e3\u51b3\u65b9\u6848\u3002</p> <p>\u9762\u5bf9\u8fd9\u4e9b\u6311\u6218\uff0c\u6211\u4eec\u8ba4\u4e3a\u6211\u4eec\u65e0\u6cd5\u627f\u62c5\u6539\u8fdb N \u4e2a\u7f16\u8bd1\u5668\u7684\u5de5\u4f5c\u91cf\uff0c\u56e0\u6b64\u8981\u6784\u5efa\u4e00\u4e2a\u66f4\u901a\u7528\u7684\u89e3\u51b3\u65b9\u6848\u3002\u6211\u4eec\u53ef\u4ee5\u82b1\u7cbe\u529b\u5f00\u53d1\u4e00\u5957\u9ad8\u8d28\u91cf\u7684\u57fa\u7840\u67b6\u6784\uff0c\u8fd9\u4f1a\u8ba9\u591a\u4e2a\u9886\u57df\u53d7\u76ca\uff0c\u4f1a\u8ba9\u6211\u4eec\u80fd\u591f\u9010\u6b65\u5347\u7ea7\u73b0\u6709\u7cfb\u7edf\uff0c\u8ba9\u6211\u4eec\u80fd\u591f\u66f4\u8f7b\u677e\u5730\u89e3\u51b3\u773c\u4e0b\u7d27\u8feb\u7684\u95ee\u9898\uff0c\u4f8b\u5982\u4e13\u7528\u52a0\u901f\u5668\u7684\u5f02\u6784\u7f16\u8bd1\u3002</p> <p>\u73b0\u5728\uff0c\u6211\u4eec\u5728\u6784\u5efa\u548c\u90e8\u7f72\u57fa \u4e8eMLIR \u7684\u7cfb\u7edf\u65b9\u9762\u79ef\u7d2f\u4e86\u5927\u91cf\u7ecf\u9a8c\uff0c\u53ef\u4ee5\u56de\u987e\u4e00\u4e0b MLIR \u57fa\u7840\u67b6\u6784\u7684\u539f\u7406\u548c\u8bbe\u8ba1\uff0c\u5e76\u8ba8\u8bba\u4e3a\u4ec0\u4e48\u8981\u671d\u8fd9\u4e2a\u65b9\u5411\u53d1\u5c55\u3002</p>"},{"location":"mlc/mlir.html#8","title":"8. \u7ed3\u8bba\u4e0e\u5c55\u671b","text":"<p>\u6587\u7ae0\u4ecb\u7ecd\u4e86MLIR\u2014\u2014\u4e00\u79cd\u7528\u4f5c\u6784\u9020\u7f16\u8bd1\u5668\u7684\u7075\u6d3b\u4e14\u53ef\u6269\u5c55\u7684\u57fa\u7840\u7ed3\u6784\u3002\u672c\u6587\u63cf\u8ff0\u4e86 MLIR \u7684\u5177\u4f53\u8bbe\u8ba1\uff0c\u5c55\u793a\u4e86\u5176\u5728\u4e00\u7cfb\u5217\u9886\u57df\u4e2d\u7684\u9002\u7528\u6027\uff0c\u5e76\u63cf\u8ff0\u4e86\u8bb8\u591a\u539f\u521b\u7814\u7a76\u548c\u5de5\u7a0b\u610f\u4e49\u3002</p> <p>\u5c55\u671b\u672a\u6765\uff0c\u6211\u4eec\u671f\u5f85\u770b\u5230\u4e00\u6709\u7684\u7f16\u8bd1\u5668\u793e\u533a(\u5982 clang )\u548c\u9886\u57df\u4e13\u5bb6\u80fd\u591f\u4ece\u8fd9\u79cd\u9ad8\u7ea7\u7684\u8bed\u8a00\u76f8\u5173\u7684 IR \u4e2d\u53d7\u76ca\u3002\u671f\u5f85\u770b\u5230\u7531\u8fd9\u4e2a\u57fa\u7840\u8bbe\u65bd\u50ac\u751f\u6216\u8005\u52a0\u901f\u7684\u5168\u65b0\u7684\u7814\u7a76\u9886\u57df\u3002</p> <p>\u672a\u6765\u65b9\u5411\uff1a </p> <p>\u6709\u51e0\u4e2aMLIR \u672a\u6765\u53d1\u5c55\u7684\u65b9\u5411\u3002</p> <ol> <li> <p>\u5728\u673a\u5668\u5b66\u4e60\u548c HPC \u9886\u57df\uff0c\u5305\u62ec\u4ece\u5177\u6709 symbolic shapes \u7684\u79e9\u591a\u6001\uff08rank-polymorphic\uff09\u89c4\u8303\u4e2d\u63a8\u65ad\u51fa\u9ad8\u6548\u7684Op\u5b9e\u73b0\u3002\u8fd8\u5305\u62ec\u5b9e\u73b0\u66f4\u5e7f\u6cdb\u7684\u6570\u636e\u7ed3\u6784\uff08 sparse, graph \uff09\u53ca\u5176\u76f8\u5e94\u8f6c\u6362\uff0c\u4ee5\u53ca\u5c06\u7b26\u53f7\u63a8\u7406\uff08\u4f8b\u5982\u81ea\u52a8\u5fae\u5206\u548c\u7b97\u6cd5\u7b80\u5316\uff09\u4e0e\u66f4\u5e38\u89c4\u7684\u6570\u636e\u6d41 \u53ca \u57fa\u4e8e\u63a7\u5236\u6d41\u4f18\u5316\u7684\u7ed3\u5408\u3002 </p> </li> <li> <p>\u9664 ML \u548c HPC \u4e4b\u5916\uff0c\u5f00\u53d1\u8005\u8fd8\u53ef\u4ee5\u8003\u8651 MLIR \u5728\u5176\u5b83\u76f8\u5173\u9886\u57df\u7684\u9002\u7528\u6027\uff0c\u4f8b\u5982\u5b89\u5168\u7f16\u8bd1\u3001\u5b89\u5168\u654f\u611f\uff08 safety-critical \uff09\u7cfb\u7edf\u3001\u6570\u636e\u5206\u6790\u548c\u56fe\u5f62\u5904\u7406\uff0c\u5173\u7cfb\u67e5\u8be2\u4f18\u5316\u7b49\u3002</p> </li> </ol> <p>\u56de\u5230\u901a\u7528\u8bed\u8a00\u9886\u57df\uff0c\u4e00\u4e2a\u660e\u663e\u7f3a\u5931\u7684\u524d\u7aef\u662f\u4ece Clang \u6d3e\u751f\u7684 C++ \u4e2d\u7ea7\u8868\u793a\u5f62\u5f0f\u3002\u6bd4\u5982\u8bf4\uff0c\"CIL\" \u5728\u672c\u8d28\u4e0a\u4e0e Swift \u7684 SIL \u548c Rust \u7684 MIR \u76f8\u4f3c\uff0c\u8fd9\u5c06\u6709\u52a9\u4e8e\u4f18\u5316\u5e38\u89c1\u7684 C++ idioms \uff0c \u8fd9\u4e9b idioms \u76ee\u524d\u9700\u8981\u4ece lowered code \u4e2d\u91cd\u5efa\uff08\u4f8b\u5982\uff0ctreating <code>std::vector</code> as an array rather than pointer manipulation\uff09\u3002\u652f\u6301 gc \u7684\u8bed\u8a00\u3001\u652f\u6301 higher-order and polymorphic type systems with type inference \u4e5f\u662f\u672a\u89e3\u51b3\u7684\u6311\u6218\u3002</p> <p>\u5728 LLVM \u4e2d\u63a2\u7d22\u5e76\u884c\u6027\u548c\u5e76\u53d1\u6784\u9020\u975e\u5e38\u56f0\u96be\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u6240\u9700\u7684\u4fee\u6539\u662f\u4fb5\u5165\u6027\u7684\uff0c\u4e14\u4e0d\u5bb9\u6613\u5206\u5c42\uff08\u4f8b\u5982\uff0c\u6ce8\u5165\u5143\u6570\u636e\u5e76\u68c0\u67e5\u6240\u6709pass\u4ee5\u786e\u4fdd\u5143\u6570\u636e\u88ab\u4f20\u64ad\uff0c\u540c\u65f6\u7531\u4e8e\u62bd\u8c61\u7ea7\u522b\u592a\u4f4e\u800c\u5931\u53bb\u4f18\u5316\u673a\u4f1a\uff09\u3002With MLIR, parallel constructs can be first-class operations, using regions and parallel idiom-specific verification. \u8fd9\u5c06\u80fd\u591f\u5728\u964d\u4f4e\u5230 \u4f8b\u5982 LLVM \u4e4b\u524d\u652f\u6301\u66f4\u9ad8\u7ea7\u522b\u7684\u8f6c\u6362\uff0c\u5728 LLVM \u4e2d\u53ef\u4ee5\u5bf9\u5df2\u7ecf\u964d\u4f4e\u7684\u4ee3\u7801\u6267\u884c\u5e38\u89c4\u8f6c\u6362\u3002</p> <p>\u9664\u4e86\u8c03\u8bd5\u548c\u6d4b\u8bd5\u4e4b\u5916\uff0cIR\u7684\u6587\u672c\u5f62\u5f0f\u5bf9\u4e8e\u6559\u5b66\u4e5f\u5f88\u6709\u7528\u3002\u901a\u8fc7\u5de5\u5177\u5c55\u793a\u9ad8\u6027\u80fd\u7f16\u8bd1\u4e2d\u4f18\u5316\u8fc7\u7a0b\u7684\u4ea4\u4e92\u4fe1\u606f\u6709\u52a9\u4e8e\u65b0\u751f\u624b\u4e86\u89e3\u7f16\u8bd1\u5668\u3002 IR\u8bbe\u8ba1\u662f\u5f00\u53d1\u65b0\u7684\u7f16\u8bd1\u5668\u6216\u4f18\u5316\u6846\u67b6\u4e0d\u53ef\u6216\u7f3a\u7684\u90e8\u5206\uff0c\u4f46\u662f\u8bb8\u591a\u672c\u79d1\u751f\u7684\u7f16\u8bd1\u5668\u8bfe\u7a0b\u5e76\u672a\u6db5\u76d6IR\u8bbe\u8ba1\u3002 MLIR\u4e3a\u6b64\u7c7b\u8bfe\u7a0b\u63d0\u4f9b\u4e86\u65b0\u7684\u63a2\u7d22\u65b9\u6cd5\u3002</p>"},{"location":"mlc/mlir.html#2","title":"2. \u8bbe\u8ba1\u539f\u5219","text":"<p>\u672c\u8282\u63a2\u8ba8\u4e86\u6307\u5bfc MLIR \u8bbe\u8ba1\u7684\u4e00\u4e9b\u9700\u6c42</p> <ol> <li> <p>\u5c3d\u53ef\u80fd\u5c11\u7684\u5185\u7f6e, \u5c3d\u53ef\u80fd\u591a\u7684\u5b9a\u5236(little builtin, everything customizable)</p> <p>MLIR \u7cfb\u7edf\u57fa\u4e8e\u6700\u5c11\u91cf\u7684\u57fa\u672c\u6982\u5ff5\uff0c\u5927\u90e8\u5206\u4e2d\u95f4\u8868\u793a\u90fd\u5b8c\u5168\u53ef\u5b9a\u5236\u3002\u5728\u8bbe\u8ba1\u65f6\uff0c\u5e94\u5f53\u7528\u5c11\u91cf\u62bd\u8c61\uff08types, operations and attributes\uff0c\u8fd9\u662fIR\u4e2d\u6700\u5e38\u89c1\u7684\uff09\u8868\u793a\u5176\u5b83\u6240\u6709\u5185\u5bb9\uff0c\u4ece\u800c\u53ef\u4ee5\u4f7f\u62bd\u8c61\u66f4\u5c11\u3001\u66f4\u4e00\u81f4\uff0c\u4e5f\u8ba9\u8fd9\u4e9b\u62bd\u8c61\u6613\u4e8e\u7406\u89e3\u3001\u6269\u5c55\u548c\u91c7\u7528\u3002\u4ece\u5e7f\u4e49\u4e0a\u8bb2\uff0c\u53ef\u5b9a\u5236\u6027\u786e\u4fdd\u7f16\u8bd1\u7cfb\u7edf\u53ef\u4ee5\u9002\u5e94\u4e0d\u65ad\u53d8\u5316\u7684\u9700\u6c42\uff0c\u5e76\u4e14\u66f4\u6709\u53ef\u80fd\u9002\u7528\u4e8e\u672a\u6765\u7684\u95ee\u9898\u3002\u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u8bb2\uff0c\u6211\u4eec\u5e94\u8be5\u5c06 IR \u6784\u5efa\u4e3a\u652f\u6301\u5176\u4e2d\u95f4\u8bed\u8a00\u7684\u8bed\u6cd5\u548c\u8bed\u4e49\u3001\u5177\u6709\u53ef\u91cd\u7528\u7ec4\u4ef6\u548c\u7f16\u7a0b\u62bd\u8c61\u7684\u57fa\u7840\u7ed3\u6784\u3002</p> <p>\u5b9a\u5236\u5316\u6210\u529f\u7684\u6807\u51c6\u662f\u53ef\u4ee5\u8868\u8fbe\u591a\u79cd\u62bd\u8c61\uff0c\u5305\u62ec\u673a\u5668\u5b66\u4e60\u56fe\u3001AST\u3001\u6570\u5b66\u62bd\u8c61\uff08\u4f8b\u5982\u591a\u9762\u4f53\uff09\u3001\u63a7\u5236\u6d41\u56fe\uff08CFG\uff09\u548c\u6307\u4ee4\u7ea7IR\uff08\u4f8b\u5982LLVM IR\uff09\uff0c\u800c\u4e14\u4ece\u62bd\u8c61\u5230\u7f16\u8bd1\u7cfb\u7edf\u65e0\u9700\u4efb\u4f55\u786c\u7f16\u7801\u3002</p> <p>\u5f53\u7136\uff0c\u7531\u4e8e\u517c\u5bb9\u6027\u4e0d\u4f73\uff0c\u53ef\u5b9a\u5236\u6027\u4f1a\u5e26\u6765\u5185\u90e8\u788e\u7247\u7684\u98ce\u9669\u3002\u867d\u7136\u4e0d\u53ef\u80fd\u6709\u4e00\u79cd\u7eaf\u7cb9\u7684\u6280\u672f\u89e3\u51b3\u65b9\u6848\u6765\u89e3\u51b3\u751f\u6001\u7cfb\u7edf\u788e\u7247\u5316\u95ee\u9898\uff0c\u4f46\u7cfb\u7edf\u5e94\u9f13\u52b1\u8bbe\u8ba1\u53ef\u91cd\u7528\u62bd\u8c61\uff0c\u5e76\u5047\u5b9a\u8fd9\u4e9b\u62bd\u8c61\u4f1a\u5728\u8bbe\u8ba1\u7684\u9884\u6599\u8303\u56f4\u4e4b\u5916\u4f7f\u7528\u3002</p> </li> <li> <p>SSA \u548c\u533a\u57df(region)</p> <p>SSA [15]\u662f\u7f16\u8bd1\u5668IR\u4e2d\u5e7f\u6cdb\u4f7f\u7528\u7684\u8868\u793a\u5f62\u5f0f\u3002\u9759\u6001\u5355\u8d4b\u503c\u6709\u8bb8\u591a\u4f18\u70b9\uff0c\u5305\u62ec\u4f7f\u6570\u636e\u6d41\u5206\u6790\u53d8\u5f97\u7b80\u5355\u800c\u7a00\u758f\uff0c\u5e76\u4e14\u7531\u4e8e\u9759\u6001\u5355\u8d4b\u503c\u4e0e\u5ef6\u7eed\u4f20\u9012\u98ce\u683c\uff08Continuation-Passing Style, CPS\uff09\u7684\u5173\u7cfb\uff0c\u7f16\u8bd1\u5668\u5f00\u53d1\u793e\u533a\u5bf9\u9759\u6001\u5355\u8d4b\u503c\u5df2\u6709\u5e7f\u6cdb\u7406\u89e3\uff0c\u5e76\u4e14\u5df2\u88ab\u5e94\u7528\u5230\u4e3b\u8981\u6846\u67b6\u4e2d\u3002\u5c3d\u7ba1\u8bb8\u591a\u73b0\u6709\u7684IR\u4f7f\u7528\u6241\u5e73\u7684\uff08flat\uff09\u3001\u7ebf\u6027CFG\uff0c\u4f46\u8868\u793a\u66f4\u9ad8\u7ea7\u522b\u7684\u62bd\u8c61\u5374\u63a8\u52a8\u5c06 \u5d4c\u5957\u533a\u57df \uff08nested regions\uff09 \u4f5c\u4e3aIR\u4e2d\u6700\u91cd\u8981\u7684\u6982\u5ff5\u3002\u8fd9\u8d85\u8d8a\u4e86\u4f20\u7edf\u7684\u533a\u57df\u5f62\u5f0f\uff0c\u63d0\u5347\u4e86\u62bd\u8c61\u7ea7\u522b\uff08\u4f8b\u5982\uff0cloop trees\uff09\uff0c\u52a0\u5feb\u4e86\u7f16\u8bd1\u8fc7\u7a0b\u3001\u6307\u4ee4\u63d0\u53d6\u6216SIMD\u5e76\u884c\u6027 [22\uff0c21\uff0c37]\u3002\u4e3a\u4e86\u652f\u6301\u5f02\u6784\u7f16\u8bd1\uff0c\u7cfb\u7edf\u5fc5\u987b\u652f\u6301\u7ed3\u6784\u5316\u63a7\u5236\u6d41\u3001\u5e76\u53d1\u6784\u9020\u3001\u6e90\u8bed\u8a00\u4e2d\u7684\u95ed\u5305\u7b49\u7b49\u3002\u4e00\u4e2a\u5177\u4f53\u7684\u6311\u6218\u5c31\u662f\u5728\u5d4c\u5957\u533a\u57df\u4e4b\u4e0a\u6784\u9020CFG\u5206\u6790\u548c\u8f6c\u6362\u3002</p> <p>\u7591\u95ee</p> <p>Continuation-Passing Style, CPS \u662f\u4ec0\u4e48\uff1f</p> <p>nested regions \u548c \u7ebf\u6027IR \u5728\u73b0\u6709 IR \u4e2d\u5206\u522b\u5bf9\u5e94\u7684\u4f8b\u5b50\uff1f</p> <p>\u7ed3\u6784\u5316\u63a7\u5236\u6d41/\u63a7\u5236\u6d41 \uff1f \u53c2\u8003 https://en.wikipedia.org/wiki/Control_flow</p> <p>\u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u727a\u7272LLVM\u7684\u5f52\u4e00\u5316\uff08 normalization \uff09\uff0c\u6709\u65f6\u751a\u81f3\u727a\u7272\u5176\u89c4\u8303\u5316\uff08 canonicalization \uff09\u5c5e\u6027\u3002\u80fd\u591f\u5c06\u5404\u79cd\u6570\u636e\u548c\u63a7\u5236\u7ed3\u6784\u964d\u7ea7\u4e3a\u66f4\u5c0f\u7684\u5f52\u4e00\u5316\uff08normalized\uff09\u8868\u793a\u96c6\u5408\uff0c\u8fd9\u5bf9\u4e8e\u63a7\u5236\u7f16\u8bd1\u5668\u7684\u590d\u6742\u6027\u81f3\u4e3a\u91cd\u8981\u3002\u5177\u6709pre-header\u3001header\u3001latch\u3001body\u7684\u89c4\u8303\u5faa\u73af\uff08canonical loop\uff09\u7ed3\u6784\u662f\u524d\u7aef\u8bed\u8a00\u4e2d\u5404\u79cd\u5faa\u73af\u6784\u9020\u7684\u7ebf\u6027\u5316\u63a7\u5236\u6d41\u8868\u793a\u7684\u5178\u578b\u60c5\u51b5\u3002MLIR\u7684\u76ee\u7684\u662f\u4e3a\u7528\u6237\u63d0\u4f9b\u4e00\u79cd\u9009\u62e9\uff0c\u5373\uff0c\u6839\u636e\u7f16\u8bd1\u6d41\u7a0b\u4e2dpass\u7684\u7f16\u8bd1\u7b97\u6cd5\uff0c\u53ef\u4ee5\u5c06\u5d4c\u5957\u5faa\u73af\u6355\u83b7\u4e3a\u5d4c\u5957\u533a\u57df\u6216\u7ebf\u6027\u5316\u63a7\u5236\u6d41\u3002\u901a\u8fc7\u63d0\u4f9b\u8fd9\u79cd\u9009\u62e9\uff0c\u6211\u4eec\u53ef\u4ee5\u8131\u79bbLLVM\u7684normalization-only\u65b9\u5411\uff0c\u540c\u65f6\u4fdd\u7559\u4e86\u5728\u5fc5\u8981\u65f6\u5904\u7406\u66f4\u9ad8\u7ea7\u522b\u62bd\u8c61\u7684\u80fd\u529b\u3002\u53cd\u8fc7\u6765\uff0c\u91c7\u7528MLIR\u7684\u8fd9\u4e9b\u65b9\u6cd5\u4e5f\u4ea7\u751f\u4e86\u5982\u4f55\u63a7\u5236\u62bd\u8c61\u89c4\u8303\u5316\uff08normalization\uff09\u7684\u95ee\u9898\uff0c\u8fd9\u662f\u4e0b\u4e00\u6bb5\u7684\u4e3b\u9898\u3002</p> <p>\u7591\u95ee</p> <p>normalization \u548c canonicalization \u5206\u522b\u662f\u4ec0\u4e48\u610f\u601d\uff1f</p> <p>\u3010\u8bd1\u6ce8\uff1a\u201c\u89c4\u8303\uff08canonical\uff09\u201d\u5f62\u5f0f\u548c\u201c\u5f52\u4e00\uff08normal\uff09\u201d\u5f62\u5f0f\u4e4b\u95f4\u7684\u533a\u522b\u56e0\u4e0d\u540c\u9886\u57df\u800c\u5f02\u3002\u901a\u5e38\uff0c\u89c4\u8303\u5f62\u5f0f\u4e3a\u6bcf\u4e2a\u5bf9\u8c61\u6307\u5b9a\u552f\u4e00\u7684\u8868\u793a\u5f62\u5f0f\uff0c\u800c\u5f52\u4e00\u5f62\u5f0f\u4ec5\u6307\u5b9a\u5176\u5f62\u5f0f\uff0c\u800c\u65e0\u9700\u552f\u4e00\u3002\u56e0\u6b64\uff0c\u89c4\u8303\u5316\u6bd4\u5f52\u4e00\u5316\u8981\u6c42\u66f4\u4e25\u683c\u3011</p> </li> <li> <p>\u6e10\u8fdb\u5f0f\u964d\u7ea7\uff08Progressive lowering\uff09</p> <p>\u7cfb\u7edf\u652f\u6301\u6e10\u8fdb\u5f0f\u7684\u7684lownering\uff0c\u5373\uff0c\u4ee5\u8f83\u5c0f\u7684\u6b65\u5e45\uff0c\u4f9d\u6b21\u7ecf\u8fc7\u591a\u4e2a\u62bd\u8c61\u7ea7\u522b\uff0c\u4ece\u8f83\u9ad8\u7ea7\u522b\u7684\u8868\u793a\u964d\u4f4e\u5230\u6700\u4f4e\u7ea7\u522b\u3002\u591a\u7ea7\u62bd\u8c61\u7684\u9700\u6c42\u6765\u81ea\u901a\u7528\u7f16\u8bd1\u5668\u57fa\u7840\u67b6\u6784\u652f\u6301\u7684\u591a\u91cd\u5e73\u53f0\u548c\u7f16\u7a0b\u6a21\u578b\u3002</p> <p>\u4e4b\u524d\u7684\u7f16\u8bd1\u5668\u90fd\u5728\u81ea\u5df1\u7684 pipeline \u4e2d\u5f15\u5165\u4e86\u56fa\u5b9a\u7ea7\u7684\u62bd\u8c61\uff0c\u5982 Open64 WHIRL \u8868\u793a\u6709\u4e94\u4e2a\u62bd\u8c61\u7b49\u7ea7\uff0cclang \u7f16\u8bd1\u5668\u7684\u7ffb\u8bd1\u8fc7\u7a0b\u5219\u5305\u542b\u4e86\u4ece AST \u5230 LLVM IR \u5230 SelectionDAG \u5230 MachineInstr \u5230 MCInst \u7684\u62bd\u8c61\u7b49\u7ea7\u3002\u8fd9\u4e9b\u65b9\u6848\u7684\u8bbe\u8ba1\u90fd\u592a\u8fc7\u4e8e\u56fa\u5316\uff0c\u9700\u8981\u66f4\u52a0\u7075\u6d3b\u7684\u8bbe\u8ba1\u4ee5\u652f\u6301\u6269\u5c55\u6027\u3002</p> <p>\u8fd9\u5bf9\u4e8e\u7a0b\u5e8f\u53d8\u6362\u7684 pass \u7684\u987a\u5e8f\u6709\u91cd\u8981\u5f71\u54cd\u3002\u5f53\u7f16\u8bd1\u5668\u4e13\u5bb6\u5f00\u59cb\u5b9e\u73b0\u8d8a\u6765\u8d8a\u591a\u7684 pass \u7684\u65f6\u5019\uff0c\u4e0d\u540c pass \u4e4b\u95f4\u5f00\u59cb\u51fa\u73b0\u590d\u6742\u4ea4\u4e92\u3002\u4e0d\u540c pass \u6574\u5408\u5230\u4e00\u8d77\u7684\u6700\u663e\u8457\u7684\u6536\u76ca\u662f\u6df7\u5408(mix)\u5e38\u91cf\u4f20\u64ad\uff0c\u503c\u7f16\u53f7( value numbering )\u548c\u6b7b\u4ee3\u7801\u6d88\u9664\u3002\u4ece\u4e00\u4e2a\u66f4\u901a\u7528\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u7f16\u8bd1 pass \u53ef\u4ee5\u88ab\u5927\u6982\u5206\u6210\u56db\u79cd\u89d2\u8272\uff1a (1)\u4f18\u5316\u53d8\u6362 (2)\u4f7f\u80fd(enabling)\u53d8\u6362 (3)\u7ffb\u8bd1(lowering) (4)\u6e05\u7406\u3002 \u7cfb\u7edf\u5e94\u8be5\u5728\u5355\u4e2a\u64cd\u4f5c(single operation)\u7684\u7c92\u5ea6\u5141\u8bb8\u6df7\u5408\u5e76\u4e14\u5339\u914d\u56db\u79cd\u89d2\u8272\uff0crather than sequencing passes on the full compilation unit</p> </li> <li> <p>\u4fdd\u7559\u9ad8\u7ea7\u8bed\u4e49</p> <p>\u7cfb\u7edf\u5e94\u8be5\u4fdd\u7559\u7a0b\u5e8f\u5206\u6790\u548c\u6027\u80fd\u4f18\u5316\u6240\u9700\u7684\u9ad8\u7ea7\u8bed\u4e49\u548c\u8ba1\u7b97\u7ed3\u6784\u3002\u4e00\u65e6\u964d\u4f4e\u8bed\u4e49\uff0c\u518d\u8bd5\u56fe\u63d0\u9ad8\u8bed\u4e49\u4f1a\u5f88\u96be\uff0c\u5e76\u4e14\u5c06\u8fd9\u79cd\u4fe1\u606f\u5f3a\u884c\u585e\u8fdb\u4e00\u4e2a\u4f4e\u5c42\u6b21IR\u7684\u73af\u5883\u4e2d\u901a\u5e38\u662f\u4fb5\u5165\u6027\u7684 invasive (\u4f8b\u5982\uff0c\u5728\u4f7f\u7528\u8c03\u8bd5\u4fe1\u606f\u6765\u8bb0\u5f55\u6570\u636e\u7ed3\u6784\u7684\u60c5\u51b5\u4e0b\uff0c\u6240\u6709 pass \u90fd\u9700\u8981\u8fdb\u884c\u9a8c\u8bc1/\u91cd\u65b0\u8bbf\u95ee)\u3002\u76f8\u53cd\uff0c\u7cfb\u7edf\u5e94\u8be5\u4fdd\u7559\u8ba1\u7b97\u7684\u7ed3\u6784\u5e76\u9010\u6b65 lower \u5230\u786c\u4ef6\u62bd\u8c61\u3002\u53ea\u6709\u5728\u786e\u5b9a\u4e0d\u518d\u9700\u8981\u4fdd\u7559\u8ba1\u7b97\u7684\u7ed3\u6784\u65f6\uff0c\u518d\u4e22\u5f03\u7ed3\u6784\u3002\u4f8b\u5982\uff0c\u7cfb\u7edf\u5e94\u5728\u6574\u4e2a\u76f8\u5173\u8f6c\u6362\u8fc7\u7a0b\u4e2d\u4fdd\u7559\u7ed3\u6784\u5316\u7684\u63a7\u5236\u6d41\uff0c\u4f8b\u5982\u5faa\u73af\u7ed3\u6784\u3002\u5220\u9664\u6b64\u7ed3\u6784\uff0c\u5373\u8f6c\u5230\u57fa\u4e8e CFG \u7684\u63a7\u5236\u6d41\uff0c\u5b9e\u8d28\u4e0a\u610f\u5473\u7740\u5c06\u4e0d\u518d\u5728\u6b64\u7ea7\u522b\u4e0a\u6267\u884c\u4efb\u4f55\u8f6c\u6362\u3002\u6700\u65b0\u7684\u751f\u4ea7\u7ea7\u7684\u5e76\u884c\u7f16\u8bd1\u5efa\u6a21\u8868\u660e\u4e86\u8fd9\u4e2a\u4efb\u52a1\u662f\u591a\u4e48\u56f0\u96be [23, 42]\u3002</p> <p>\u7591\u95ee</p> <p>\"\u5728\u4f7f\u7528\u8c03\u8bd5\u4fe1\u606f\u6765\u8bb0\u5f55\u6570\u636e\u7ed3\u6784\u7684\u60c5\u51b5\u4e0b\uff0c\u6240\u6709 pass \u90fd\u9700\u8981\u8fdb\u884c\u9a8c\u8bc1/\u91cd\u65b0\u8bbf\u95ee\"\uff0c \u8fd9\u91cc\u662f\u4ec0\u4e48\u610f\u601d\uff1f</p> <p>\u4e3a\u4e86\u5141\u8bb8\u7f16\u8bd1\u7cfb\u7edf\u7684\u4e00\u90e8\u5206 IR \u4fdd\u7559\u8f83\u9ad8\u5c42\u7ea7\u7684\u62bd\u8c61\uff0c\u800c\u53e6\u4e00\u90e8\u5206\u88ab\u964d\u4f4eIR\u5c42\u7ea7\uff0c\u5728\u540c\u4e00 IR \u4e2d\u6df7\u5408\u4e0d\u540c\u7ea7\u522b\u7684\u62bd\u8c61\u548c\u4e0d\u540c\u6982\u5ff5\u5fc5\u7136\u6210\u4e3a\u7cfb\u7edf\u7684\u5173\u952e\u5c5e\u6027\u3002\u6bd4\u5982\uff0c\u81ea\u5b9a\u4e49\u52a0\u901f\u5668\u7684\u7f16\u8bd1\u5668\u53ef\u4ee5\u5728 IR \u4e2d\u590d\u7528\u7cfb\u7edf\u5b9a\u4e49\u7684\u4e00\u4e9b\u9ad8\u7ea7\u7ed3\u6784\u548c\u62bd\u8c61\uff0c IR \u540c\u65f6\u4e5f\u53ef\u8868\u8fbe\u52a0\u901f\u5668\u7279\u6709\u7684\u57fa\u672c\u6807\u91cf/\u77e2\u91cf\u6307\u4ee4\u3002</p> </li> <li> <p>IR\u9a8c\u8bc1</p> <p>\u751f\u6001\u7cfb\u7edf\u7684\u5f00\u653e\u6027\u8981\u6c42\u6709\u5bbd\u6cdb\u7684\u9a8c\u8bc1\u673a\u5236\u3002\u9a8c\u8bc1\u548c\u6d4b\u8bd5\u4e0d\u4ec5\u5bf9\u4e8e\u68c0\u6d4b\u7f16\u8bd1\u5668\u9519\u8bef\u5f88\u6709\u7528\uff0c\u800c\u4e14\u5728\u53ef\u6269\u5c55\u7684\u7cfb\u7edf\u4e2d\uff0c\u5bf9\u9a8c\u8bc1\u65b9\u6cd5\u548c\u5de5\u5177\u5065\u58ee\u6027\u7684\u9700\u6c42\u4e5f\u5728\u4e0d\u65ad\u63d0\u9ad8\u3002\u9a8c\u8bc1\u673a\u5236\u5e94\u4f7f\u5f97\u5b9a\u4e49\u7b80\u6d01\u548c\u5b9e\u7528\uff0c\u5e76\u53ef\u4ee5\u4f5c\u4e3a\u6b63\u786e\u7ed3\u679c\u7684\u552f\u4e00\u6765\u6e90\u3002</p> <p>\u9a8c\u8bc1\u673a\u5236\u7684\u957f\u671f\u76ee\u6807\u662f\u590d\u5236\u7ffb\u8bd1\u9a8c\u8bc1[35\uff0c29\uff0c50\uff0c51]\u548c\u73b0\u4ee3\u7f16\u8bd1\u5668\u6d4b\u8bd5\u65b9\u6cd5[12]\u7684\u6210\u529f\u7ecf\u9a8c\u3002\u5728\u53ef\u6269\u5c55\u7684\u7f16\u8bd1\u5668\u751f\u6001\u7cfb\u7edf\u4e2d\uff0c\u9a8c\u8bc1\u548c\u6d4b\u8bd5\u90fd\u8fd8\u662f\u6709\u5f85\u89e3\u51b3\u7684\u4e24\u4e2a\u95ee\u9898\u3002</p> </li> <li> <p>\u58f0\u660e\u5f0f\u91cd\u5199\u6a21\u5f0f\uff08Declarative rewrite patterns\uff09</p> <p>\u5b9a\u4e49 IR modifier \u5e94\u8be5\u548c\u5b9a\u4e49 abstraction \u4e00\u6837\u7b80\u5355\uff1b\u7f16\u8bd1\u5668\u57fa\u7840\u8bbe\u65bd\u7684\u597d\u574f\u53d6\u51b3\u4e8e\u5b83\u652f\u6301\u7684\u8f6c\u6362\u3002\u901a\u7528\u8f6c\u6362\u5e94\u53ef\u5b9e\u73b0\u4e3a\u58f0\u660e\u5f0f\u8868\u8fbe\u7684\u91cd\u5199\u89c4\u5219\uff0c\u5e76\u4ee5\u673a\u5668\u53ef\u5206\u6790\u7684\u683c\u5f0f\u63a8\u7406\u51fa\u91cd\u5199\u7684\u5c5e\u6027\uff0c\u4f8b\u5982\u590d\u6742\u6027\u548c\u5b8c\u6210\u5ea6\u3002\u91cd\u5199\u7cfb\u7edf\u7684\u5065\u5168\u6027\u548c\u6548\u7387\u5f88\u9ad8\uff0c\u56e0\u6b64\u88ab\u5e7f\u6cdb\u7814\u7a76\uff0c\u5e76\u5df2\u88ab\u5e94\u7528\u4e8e\u4ece\u7c7b\u578b\u7cfb\u7edf\uff08type systems\uff09 \u5230\u6307\u4ee4\u9009\u62e9\u7684\u4f17\u591a\u7f16\u8bd1\u95ee\u9898\u3002MLIR\u7684\u76ee\u6807\u662f\u5b9e\u73b0\u524d\u6240\u672a\u6709\u7684\u53ef\u6269\u5c55\u6027\u548c\u6e10\u8fdb\u964d\u7ea7\u529f\u80fd\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bb8\u591a\u9014\u5f84\u5c06\u7a0b\u5e8f\u8f6c\u6362\u5efa\u6a21\u4e3a\u91cd\u5199\u7cfb\u7edf\u3002\u8fd9\u4e5f\u63d0\u51fa\u4e86\u5982\u4f55\u8868\u793a\u91cd\u5199\u89c4\u5219\u548c\u7b56\u7565\uff0c\u4ee5\u53ca\u5982\u4f55\u6784\u5efa\u673a\u5668\u63cf\u8ff0\u7684\u95ee\u9898\u3002\u8fd9\u91cc\u7684\u673a\u5668\u63cf\u8ff0\u5e94\u80fd\u591f\u901a\u8fc7\u591a\u4e2a\u62bd\u8c61\u7ea7\u522b\u5f15\u5bfc\u91cd\u5199\u7b56\u7565\u3002\u7cfb\u7edf\u9700\u8981\u5728\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u7684\u540c\u65f6\uff0c\u4fdd\u6301\u53ef\u6269\u5c55\u6027\u5e76\u6267\u884c\u5408\u7406\u3001\u5355\u8c03\u548c\u53ef\u590d\u5236\u7684\u884c\u4e3a\u3002</p> </li> <li> <p>\u6e90\u4f4d\u7f6e\u8ddf\u8e2a\u548c\u53ef\u8ffd\u6eaf\u6027\uff08Source location tracking and traceability\uff09</p> <p>\u64cd\u4f5c\u7684\u6765\u6e90\uff08\u5305\u62ec\u5176\u539f\u59cb\u4f4d\u7f6e\u548c\u5e94\u7528\u7684 pass \uff09\u5e94\u6613\u4e8e\u5728\u7cfb\u7edf\u4e2d\u8ffd\u6eaf\u3002\u8fd9\u662f\u4e3a\u4e86\u89e3\u51b3\u5728\u590d\u6742\u7f16\u8bd1\u7cfb\u7edf\u4e2d\u5e38\u89c1\u7684\u7f3a\u4e4f\u900f\u660e\u6027\u95ee\u9898\uff0c\u5728\u590d\u6742\u7f16\u8bd1\u7cfb\u7edf\u4e2d\uff0c\u5f88\u96be\u4e86\u89e3\u6700\u7ec8\u8868\u793a\u662f\u5982\u4f55\u4ece\u539f\u59cb\u8868\u793a\u4e2d\u6784\u9020\u51fa\u6765\u7684\u5b8c\u6574\u8fc7\u7a0b\u3002\u5728\u7f16\u8bd1\u5b89\u5168\u6027\u81f3\u5173\u91cd\u8981\u7684\u654f\u611f\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u8fd9\u662f\u4e00\u4e2a\u7a81\u51fa\u7684\u95ee\u9898\uff0c\u5728\u8fd9\u7c7b\u7a0b\u5e8f\u4e2d\uff0c\u8ddf\u8e2a\u964d\u7ea7\u548c\u4f18\u5316\u6b65\u9aa4\u662f\u8f6f\u4ef6\u8ba4\u8bc1\u7a0b\u5e8f\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206[43]\u3002\u5f53\u4f7f\u7528\u5b89\u5168\u4ee3\u7801\uff08\u4f8b\u5982\u52a0\u5bc6\u534f\u8bae\uff0c\u6216\u5bf9\u9690\u79c1\u654f\u611f\u7684\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\u7684\u7b97\u6cd5\uff09\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u7f16\u8bd1\u5668\u5e38\u4f1a\u78b0\u5230\u770b\u4f3c\u5197\u4f59\u6216\u7e41\u7410\u7684\u8ba1\u7b97\uff0c\u8fd9\u4e9b\u8ba1\u7b97\u4f1a\u5d4c\u5165\u672a\u88ab\u6e90\u7a0b\u5e8f\u7684\u529f\u80fd\u8bed\u4e49\u5b8c\u5168\u6355\u83b7\u7684\u5b89\u5168\u6027\u6216\u79c1\u6709\u5c5e\u6027\uff0c\u800c\u5b89\u5168\u4ee3\u7801\u53ef\u4ee5\u9632\u6b62\u65c1\u8def\u66b4\u9732\u6216\u52a0\u5f3a\u4ee3\u7801\u4ee5\u9632\u6b62\u7f51\u7edc\u653b\u51fb\u6216\u6545\u969c\u653b\u51fb\u3002\u4f18\u5316\u53ef\u80fd\u4f1a\u6539\u53d8\u6216\u4f7f\u6b64\u7c7b\u4fdd\u62a4\u5b8c\u5168\u5931\u6548[56]\uff1b\u8fd9\u79cd\u7f3a\u4e4f\u900f\u660e\u6027\u5728\u5b89\u5168\u7f16\u8bd1\u4e2d\u79f0\u4e3aWYSINWYX[6]\u3002\u51c6\u786e\u5730\u5c06\u9ad8\u5c42\u6b21\u4fe1\u606f\u4f20\u64ad\u5230\u8f83\u4f4e\u5c42\u7684\u4e00\u4e2a\u95f4\u63a5\u76ee\u6807\u5c31\u662f\u5e2e\u52a9\u5b9e\u73b0\u5b89\u5168\u4e14\u53ef\u8ffd\u6eaf\u7684\u7f16\u8bd1\u8fc7\u7a0b\u3002</p> </li> </ol>"},{"location":"mlc/mlir.html#3-ir","title":"3. IR \u8bbe\u8ba1\u7ec6\u8282","text":"<p>\u672c\u8282\u6839\u636e \u7b2c2\u8282 \u4e2d\u9610\u8ff0\u7684\u8bbe\u8ba1\u539f\u5219\uff0c\u4ecb\u7ecd MLIR \u4e2d IR \u7684\u8bbe\u8ba1\u7ec6\u8282\u3002</p> <ol> <li> <p>Operations</p> <p>MLIR \u7684\u8bed\u4e49\u5355\u4f4d\u662f \"operation\" \uff0c\u79f0\u4e3a Op \u3002MLIR \u7cfb\u7edf\u4e2d\uff0c\u4ece \"instruction\" \u5230 \"function\" \u518d\u5230 \"module\" \uff0c\u4e00\u5207\u90fd\u662f Op \u3002 MLIR \u6ca1\u6709\u56fa\u5b9a\u7684 Op \u96c6\u5408\uff0c\u5141\u8bb8\u5e76\u9f13\u52b1\u7528\u6237\u81ea\u5b9a\u4e49\u6269\u5c55Op\u3002\u7f16\u8bd1\u5668 pass \u4f1a\u4fdd\u5b88\u5730\u5bf9\u5f85\u672a\u77e5Op\uff0c MLIR \u652f\u6301\u901a\u8fc7\u7279\u5f81\uff08traits\uff09\u3001\u7279\u6743\u64cd\u4f5c hook \u548c\u4f18\u5316\u63a5\u53e3\u7b49\u65b9\u5f0f\u5411 pass \u63cf\u8ff0 Op \u8bed\u4e49\uff0c\u8be6\u89c1 6.1\u3002</p> <p>Op \u5177\u6709\u552f\u4e00\u7684\u64cd\u4f5c\u7801(opcode)\u3002opcode \u5b57\u9762\u4e0a\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7528\u4e8e\u6807\u8bc6\u5176 dialect \u548c\u64cd\u4f5c\u3002 Op \u53ef\u6709\u96f6\u4e2a\u6216\u591a\u4e2a\u503c\u4f5c\u4e3a\u64cd\u4f5c\u6570\u548c\u7ed3\u679c\uff0c\u5e76\u4ee5 SSA \u7684\u5f62\u5f0f\u7ef4\u62a4\u64cd\u4f5c\u6570\u548c\u7ed3\u679c\u3002\u6240\u6709\u503c\u90fd\u6709\u4e00\u4e2a\u7c7b\u578b\uff0c\u7c7b\u4f3c\u4e8e LLVM IR \u3002\u9664\u4e86\u64cd\u4f5c\u7801\u3001\u64cd\u4f5c\u6570\u548c\u7ed3\u679c\u5916\uff0cOp\u8fd8\u53ef\u80fd\u5177\u6709\u5c5e\u6027\u3001\u533a\u57df\u3001\u5757\u53c2\u6570\u548c\u4f4d\u7f6e\u4fe1\u606f\uff08Attributes, Regions, Block Arguments, and Location Information\uff09\uff0c \u56fe3 \u8bf4\u660e\u4e86\u8fd9\u4e00\u70b9\u3002</p> <p></p> <p>\u56fe4 \u8bf4\u660e\u4e86 values and Ops \uff0c<code>%</code>\u6807\u8bc6\u7b26\u8868\u793a (packs of) named values\uff0c\u5982\u679c pack \u4e2d\u6709\u591a\u4e2a\u503c\uff0c<code>:</code> \u540e\u6307\u5b9a\u5176\u4e2d\u503c\u7684\u6570\u91cf\uff08\u6ce8\uff1a\u5982 <code>%results:2</code>\uff0c\u8868\u793a\u8fd4\u56de\u503c\u67092\u4e2a\uff09\uff0c\u800c <code>#</code> \u8868\u793a\u7279\u5b9a\u503c\u3002\u5728\u4e00\u822c\u7684\u6587\u672c\u8868\u793a\u5f62\u5f0f\u4e2d\uff0c\u64cd\u4f5c\u540d\u662f\u7528\u5f15\u53f7\u62ec\u8d77\u6765\u7684\u5b57\u7b26\u4e32\uff0c\u540e\u8ddf\u62ec\u53f7\u62ec\u8d77\u6765\u64cd\u4f5c\u6570\u3002</p> <p></p> </li> <li> <p>Attributes</p> <p>MLIR attribute \u662f\u7ed3\u6784\u5316\u7684\u7f16\u8bd1\u65f6\u9759\u6001\u4fe1\u606f\uff0c\u4f8b\u5982\u6574\u6570\u5e38\u91cf\u503c\u3001\u5b57\u7b26\u4e32 \u6216 \u5e38\u91cf\u6d6e\u70b9\u503c\u5217\u8868\u3002 \u5c5e\u6027\u662f\u6709\u7c7b\u578b\u7684\uff0c\u6bcf\u4e2a Op \u5b9e\u4f8b\u90fd\u6709\u4e00\u4e2a\u5f00\u653e\u7684\u952e\u503c\u5b57\u5178\uff0c\u4ece\u5b57\u7b26\u4e32\u540d\u79f0\u5230\u5c5e\u6027\u503c\u3002 \u5728\u901a\u7528\u8bed\u6cd5\u4e2d\uff0c\u5c5e\u6027\u4f4d\u4e8e Op \u64cd\u4f5c\u6570\u53ca\u5176\u7c7b\u578b\u4e4b\u95f4\uff0c\u4f5c\u4e3a\u5927\u62ec\u53f7\u62ec\u8d77\u6765\u7684 \u9017\u53f7\u5206\u9694\u7684 \u952e\u503c\u5bf9\u5217\u8868\u3002 \u4f8b\u5982\uff0c\u56fe 4 \u4f7f\u7528\u5c5e\u6027\u5b9a\u4e49\u5df2\u77e5\u4e3a\u5e38\u91cf\u4eff\u5c04\u5f62\u5f0f (constant affine forms) \u7684\u5faa\u73af\u8fb9\u754c\uff1a{lower_bound = () -&gt; (0), step = 1 : index, upper_bound = #map3} \u5176\u4e2d <code>lower_bound</code>\u3001<code>upper_bound</code> \u548c <code>step</code> \u662f\u5c5e\u6027\u540d\u3002 <code>() -&gt; (0)</code> notation is used for inline affine forms\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u751f\u6210\u4eff\u5c04\u51fd\u6570\uff0c\u8fd4\u56de\u5e38\u91cf 0 \u503c\u3002 <code>#map3</code> \u8868\u793a\u6cd5\u7528\u4e8e\u5c5e\u6027\u522b\u540d\uff0c\u5b83\u5141\u8bb8\u9884\u5148\u5c06\u5c5e\u6027\u503c\u4e0e\u6807\u7b7e\u76f8\u5173\u8054\uff0c\u5e76\u5728\u9700\u8981\u5c5e\u6027\u503c\u7684\u4efb\u4f55\u5730\u65b9\u5f15\u7528\u8be5\u6807\u7b7e\u3002</p> <p>\u4e0e opcodes \u4e00\u6837\uff0c\u6ca1\u6709\u56fa\u5b9a\u7684\u5c5e\u6027\u96c6\u3002 \u5c5e\u6027\u4ece Op \u8bed\u4e49\u6216\u4e0e\u5b83\u4eec\u76f8\u5173\u8054\u7684\u65b9\u8a00\uff08\u7b2c 3 \u8282\uff09\u4e2d\u83b7\u53d6\u5b83\u4eec\u7684\u542b\u4e49\u3002 \u5c5e\u6027\u4e5f\u662f\u53ef\u6269\u5c55\u7684\uff0c\u5141\u8bb8\u76f4\u63a5\u5f15\u7528\u5916\u90e8\u6570\u636e\u7ed3\u6784\uff0c\u8fd9\u5bf9\u4e8e\u4e0e\u73b0\u6709\u7cfb\u7edf\u96c6\u6210\u5f88\u6709\u7528\u3002 \u4f8b\u5982\uff0c\u5c5e\u6027\u53ef\u80fd\u6307\u7684\u662f ML \u7cfb\u7edf\u4e2d\uff08\u5728\u7f16\u8bd1\u65f6\u5df2\u77e5\uff09\u6570\u636e\u5b58\u50a8\u7684\u5185\u5bb9\u3002</p> </li> <li> <p>\u4f4d\u7f6e\u4fe1\u606f</p> <p>MLIR \u63d0\u4f9b\u4f4d\u7f6e\u4fe1\u606f\u7684\u7d27\u51d1\u8868\u793a\uff0c\u5e76\u9f13\u52b1\u5728\u6574\u4e2a\u7cfb\u7edf\u4e2d\u5904\u7406\u548c\u4f20\u64ad\u6b64\u4fe1\u606f\u3002 \u5b83\u53ef\u7528\u4e8e\u4fdd\u7559\u4ea7\u751f Op \u7684\u6e90\u7a0b\u5e8f\u5806\u6808\u8ddf\u8e2a\uff0c\u4ee5\u751f\u6210\u8c03\u8bd5\u4fe1\u606f\u3002 \u5b83\u6807\u51c6\u5316\u4e86\u4ece\u7f16\u8bd1\u5668\u53d1\u51fa\u8bca\u65ad\u7684\u65b9\u5f0f\uff0c\u5e76\u88ab\u5e7f\u6cdb\u7684\u6d4b\u8bd5\u5de5\u5177\u4f7f\u7528\u3002</p> <p>\u4f4d\u7f6e\u4fe1\u606f\u4e5f\u662f\u53ef\u6269\u5c55\u7684\uff0c\u5141\u8bb8\u7f16\u8bd1\u5668\u5f15\u7528\u73b0\u6709\u7684\u4f4d\u7f6e\u8ddf\u8e2a\u7cfb\u7edf\u3001\u9ad8\u7ea7 AST \u8282\u70b9\u3001LLVM \u6837\u5f0f\u7684\u6587\u4ef6\u884c\u5217\u5730\u5740\u3001DWARF \u8c03\u8bd5\u4fe1\u606f\u6216\u9ad8\u8d28\u91cf\u5b9e\u73b0\u6240\u9700\u7684\u4efb\u4f55\u5176\u4ed6\u5185\u5bb9\u3002</p> </li> <li> <p>Regions and blocks</p> <p>Op \u7684\u4e00\u4e2a\u5b9e\u4f8b\u53ef\u80fd\u6709 a list of attached regions\u3002 \u533a\u57df\u63d0\u4f9b\u4e86 MLIR \u4e2d\u5d4c\u5957\u7ed3\u6784\u7684\u673a\u5236\uff1a\u533a\u57df\u5305\u542b\u5757\u5217\u8868\uff0c\u5757\u5305\u542b\u64cd\u4f5c\u5217\u8868\uff08\u53ef\u80fd\u5305\u542b\u533a\u57df\uff09\u3002 \u4e0e attribute \u4e00\u6837\uff0c\u533a\u57df\u7684\u8bed\u4e49\u7531\u5b83\u4eec\u6240\u9644\u52a0\u7684\u64cd\u4f5c\u5b9a\u4e49\uff0c\u4f46\u662f regions \u5185\u7684 block\uff08\u5982\u679c\u6709\u591a\u4e2a block \uff09\u5f62\u6210\u4e00\u4e2a\u63a7\u5236\u6d41\u56fe (CFG)\u3002 \u4f8b\u5982\uff0c\u56fe 4 \u4e2d\u7684 <code>affine.for</code> \u64cd\u4f5c\u662f\u4e00\u4e2a\u5faa\u73af\uff0c\u5355\u5757\u4e3b\u4f53\u4f5c\u4e3a\u4e00\u4e2a\u533a\u57df\u9644\u52a0\u5728\uff08<code>{ and }</code>\uff09\u5206\u9694\u7b26\u4e4b\u95f4\u3002 Op \u6307\u5b9a\u8de8\u533a\u57df\u7684\u63a7\u5236\u6d41\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u4e3b\u4f53\u88ab\u91cd\u590d\u6267\u884c\u76f4\u5230\u8fbe\u5230\u4e0a\u9650\u3002</p> <p>\u6bcf\u4e2a region \u7684\u4e3b\u4f53\u662f a list of blocks\uff0c\u6bcf\u4e2a\u5757\u90fd\u4ee5 terminator operation \u7ed3\u675f\u2014\u2014\u53ef\u80fd\u5c06\u63a7\u5236\u6d41\u8f6c\u79fb\u5230\u7684 successor blocks \u3002 \u6bcf\u4e2aterminator \uff08\u4f8b\u5982 \"switch\", \"conditional branch\" \u6216 \"unwind\" \uff09\u5b9a\u4e49\u4e86\u81ea\u5df1\u7684\u8bed\u4e49\u3002 \u5b83\u53ef\u80fd\u4f1a\u9009\u62e9\u5c06\u63a7\u5236\u6d41\u8f6c\u79fb\u5230\u540c\u4e00\u533a\u57df\u4e2d\u7684\u53e6\u4e00\u4e2a\u5757\uff0c\u6216\u8005\u5c06\u5176\u8fd4\u56de\u5230\u5c01\u95ed\u8be5\u533a\u57df\u7684 Op\u3002 The graph of successor \u5b9a\u4e49\u4e86\u4e00\u4e2a CFG\uff0c\u5141\u8bb8\u5728\u4e00\u4e2a\u533a\u57df\u5185\u4f7f\u7528\u6807\u51c6\u7684\u57fa\u4e8e SSA \u7684\u63a7\u5236\u6d41\u3002</p> <p>MLIR \u6ca1\u6709\u4f7f\u7528 \\(\\Phi\\) \u8282\u70b9\uff0c\u800c\u662f\u4f7f\u7528 SSA [2] \u7684 functional form\uff0c \u5176\u4e2d terminator \u5c06\u503c\u4f20\u9012\u5230\u7531 successor \u5b9a\u4e49\u7684 block arguments \u4e2d\u3002 \u6bcf\u4e2a block \u90fd\u6709\u4e00\u4e2a typed block arguments \u5217\u8868\uff08\u53ef\u80fd\u4e3a\u7a7a\uff09\u3002 terminator Ops \u7684\u8bed\u4e49\u5b9a\u4e49\u4e86\u5728\u63a7\u5236\u6743\u8f6c\u79fb\u540e block \u53c2\u6570\u5c06\u91c7\u7528\u4ec0\u4e48\u503c\u3002 \u5bf9\u4e8e\u8be5\u533a\u57df\u7684\u7b2c\u4e00\u4e2a\uff08\u5165\u53e3\uff09\u5757\uff0c\u503c\u7531\u5305\u542b Op \u7684\u8bed\u4e49\u5b9a\u4e49\u3002\u4f8b\u5982\uff0c<code>affine.for</code> \u4f7f\u7528\u5165\u53e3\u5757\u53c2\u6570 <code>\uff05arg4</code> \u4f5c\u4e3a\u5faa\u73af\u5f52\u7eb3\u53d8\u91cf\u3002</p> </li> <li> <p>Value dominance and visibility</p> <p>Ops \u53ea\u80fd\u4f7f\u7528\u8303\u56f4\u5185\u7684\u503c\uff0c\u5373\u6839\u636e SSA \u652f\u914d\u3001\u5d4c\u5957\u548c\u5c01\u95ed\u64cd\u4f5c\u5f3a\u52a0\u7684\u8bed\u4e49\u9650\u5236\u53ef\u89c1\u7684\u503c\u3002 \u5982\u679c\u503c\u9075\u5faa\u6807\u51c6\u7684 SSA \u652f\u914d\u5173\u7cfb\uff0c\u5219\u503c\u5728 CFG \u4e2d\u662f\u53ef\u89c1\u7684\uff0c\u5728\u8fd9\u79cd\u5173\u7cfb\u4e2d\uff0c\u63a7\u5236\u4fdd\u8bc1\u5728\u5230\u8fbe\u4f7f\u7528\u4e4b\u524d\u901a\u8fc7\u5b9a\u4e49\u3002</p> <p>\u57fa\u4e8e\u533a\u57df\u7684\u53ef\u89c1\u6027\u662f\u57fa\u4e8e\u7b80\u5355\u7684\u533a\u57df\u5d4c\u5957\u5b9a\u4e49\u7684\uff1a\u5982\u679c Op \u7684\u64cd\u4f5c\u6570\u5728\u5f53\u524d\u533a\u57df\u4e4b\u5916\uff0c\u90a3\u4e48\u5b83\u5fc5\u987b\u5728\u8bcd\u6cd5\u4e0a\u5b9a\u4e49\u5728\u4f7f\u7528\u533a\u57df\u4e4b\u4e0a\u548c\u4e4b\u5916\u3002 \u8fd9\u5c31\u662f\u5141\u8bb8 affine.for \u64cd\u4f5c\u4e2d\u7684 Ops \u4f7f\u7528\u5916\u90e8\u4f5c\u7528\u57df\u4e2d\u5b9a\u4e49\u7684\u503c\u7684\u539f\u56e0\u3002</p> <p>MLIR \u8fd8\u5141\u8bb8\u5c06\u64cd\u4f5c\u5b9a\u4e49\u4e3a\u4e0e\u4e0a\u9762\u9694\u79bb\uff0c\u8868\u660e\u8be5\u64cd\u4f5c\u662f\u4e00\u4e2a\u8303\u56f4\u969c\u788d\u2014\u2014\u4f8b\u5982 \u201cstd.func\u201dOp \u5b9a\u4e49\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u51fd\u6570\u5185\u7684\u64cd\u4f5c\u5f15\u7528\u51fd\u6570\u5916\u5b9a\u4e49\u7684\u503c\u662f\u65e0\u6548\u7684\u3002 \u9664\u4e86\u63d0\u4f9b\u6709\u7528\u7684\u8bed\u4e49\u68c0\u67e5\u4e4b\u5916\uff0c\u5305\u542b\u72ec\u7acb\u4e8e\u4e0a\u5c42\u64cd\u4f5c\u7684\u6a21\u5757\u53ef\u4ee5\u7531 MLIR \u7f16\u8bd1\u5668\u5e76\u884c\u5904\u7406\uff0c\u56e0\u4e3a\u6ca1\u6709 use-def \u94fe\u53ef\u4ee5\u8de8\u8d8a\u9694\u79bb\u5c4f\u969c\u3002 \u8fd9\u5bf9\u4e8e\u7f16\u8bd1\u5229\u7528\u591a\u6838\u673a\u5668\u5f88\u91cd\u8981\u3002</p> </li> <li> <p>Symbols and symbol tables</p> <p>Ops \u53ef\u4ee5\u9644\u52a0\u4e00\u4e2a\u7b26\u53f7\u8868\u3002 \u8be5\u8868\u662f\u5c06\u540d\u79f0\uff08\u8868\u793a\u4e3a\u5b57\u7b26\u4e32\uff09\u4e0e IR \u5bf9\u8c61\uff08\u79f0\u4e3a\u7b26\u53f7\uff09\u76f8\u5173\u8054\u7684\u6807\u51c6\u5316\u65b9\u6cd5\u3002 IR \u6ca1\u6709\u89c4\u5b9a\u4f7f\u7528\u4ec0\u4e48\u7b26\u53f7\uff0c\u8fd9\u53d6\u51b3\u4e8e Op \u5b9a\u4e49\u3002 \u7b26\u53f7\u5bf9\u4e8e\u4e0d\u9700\u8981\u9075\u5b88 SSA \u7684\u547d\u540d\u5b9e\u4f53\u6700\u6709\u7528\uff1a\u5b83\u4eec\u4e0d\u80fd\u5728\u540c\u4e00\u4e2a\u8868\u4e2d\u91cd\u65b0\u5b9a\u4e49\uff0c\u4f46\u53ef\u4ee5\u5728\u5b9a\u4e49\u4e4b\u524d\u4f7f\u7528\u3002 \u4f8b\u5982\uff0c\u5168\u5c40\u53d8\u91cf\u3001\u51fd\u6570\u6216\u547d\u540d\u6a21\u5757\u53ef\u4ee5\u8868\u793a\u4e3a\u7b26\u53f7\u3002 \u5982\u679c\u6ca1\u6709\u8fd9\u79cd\u673a\u5236\uff0c\u5c31\u4e0d\u53ef\u80fd\u5b9a\u4e49\uff0c\u4f8b\u5982\uff0c\u5728\u5b9a\u4e49\u4e2d\u5f15\u7528\u81ea\u8eab\u7684\u9012\u5f52\u51fd\u6570\u3002 \u5982\u679c\u9644\u6709\u7b26\u53f7\u8868\u7684 Op \u5177\u6709\u5305\u542b\u76f8\u4f3c Ops \u7684\u5173\u8054\u533a\u57df\uff0c\u5219\u53ef\u4ee5\u5d4c\u5957\u7b26\u53f7\u8868\u3002 MLIR \u63d0\u4f9b\u4e86\u4e00\u79cd\u673a\u5236\u6765\u5f15\u7528 Op \u4e2d\u7684\u7b26\u53f7\uff0c\u5305\u62ec\u5d4c\u5957\u7b26\u53f7\u3002</p> </li> <li> <p>Dialects</p> <p>MLIR \u4f7f\u7528 Dialects \u7ba1\u7406\u53ef\u6269\u5c55\u6027\uff0cDialects \u5728\u552f\u4e00\u7684\u547d\u540d\u7a7a\u95f4\u4e0b\u63d0\u4f9b Ops\u3001\u5c5e\u6027\u548c\u7c7b\u578b\u7684\u903b\u8f91\u5206\u7ec4\u3002 \u65b9\u8a00\u672c\u8eab\u4e0d\u5f15\u5165\u4efb\u4f55\u65b0\u8bed\u4e49\uff0c\u4f46\u4f5c\u4e3a\u4e00\u79cd\u903b\u8f91\u5206\u7ec4\u673a\u5236\uff0c\u53ef\u7528\u4e8e\u63d0\u4f9b\u65b9\u8a00\u901a\u7528\u64cd\u4f5c\u652f\u6301\uff08\u4f8b\u5982\uff0c\u65b9\u8a00\u4e2d\u6240\u6709\u64cd\u4f5c\u7684\u5e38\u91cf\u6298\u53e0\u884c\u4e3a\uff09\u3002 \u65b9\u8a00\u547d\u540d\u7a7a\u95f4\u5728 opcode \u4e2d\u663e\u793a\u4e3a\u4ee5\u70b9\u5206\u9694\u7684\u524d\u7f00\uff0c\u4f8b\u5982\uff0c\u56fe 4 \u4f7f\u7528\u4eff\u5c04\u548c\u6807\u51c6\u65b9\u8a00\u3002</p> <p>\u5c06 Ops\u3001\u7c7b\u578b\u548c\u5c5e\u6027\u5206\u79bb\u4e3a\u65b9\u8a00\u662f\u6982\u5ff5\u6027\u7684\uff0c\u7c7b\u4f3c\u4e8e\u8bbe\u8ba1\u4e00\u7ec4\u6a21\u5757\u5316\u5e93\u3002 \u4f8b\u5982\uff0c\u4e00\u79cd\u65b9\u8a00\u53ef\u4ee5\u5305\u542b\u7528\u4e8e\u5bf9\u786c\u4ef6\u5411\u91cf\u8fdb\u884c\u64cd\u4f5c\u7684\u64cd\u4f5c\u548c\u7c7b\u578b\uff08\u4f8b\u5982\uff0cshuffle\u3001\u63d2\u5165/\u63d0\u53d6\u5143\u7d20\u3001\u63a9\u7801\uff09\uff0c\u800c\u53e6\u4e00\u79cd\u65b9\u8a00\u53ef\u4ee5\u5305\u542b\u7528\u4e8e\u5bf9\u4ee3\u6570\u5411\u91cf\u8fdb\u884c\u64cd\u4f5c\u7684\u64cd\u4f5c\u548c\u7c7b\u578b\uff08\u4f8b\u5982\uff0c\u7edd\u5bf9\u503c\u3001\u70b9\u79ef\u7b49\uff09\u3002 \u4e24\u79cd\u65b9\u8a00\u662f\u5426\u4f7f\u7528\u76f8\u540c\u7684\u77e2\u91cf\u7c7b\u578b\u4ee5\u53ca\u8fd9\u79cd\u7c7b\u578b\u5c5e\u4e8e\u4f55\u5904\u662f\u7559\u7ed9 MLIR \u7528\u6237\u7684\u8bbe\u8ba1\u51b3\u5b9a\u3002</p> <p>\u867d\u7136\u53ef\u4ee5\u5c06\u6240\u6709\u64cd\u4f5c\u3001\u7c7b\u578b\u548c\u5c5e\u6027\u653e\u5728\u4e00\u4e2a\u65b9\u8a00\u4e2d\uff0c\u4f46\u7531\u4e8e\u5927\u91cf\u540c\u65f6\u51fa\u73b0\u7684\u6982\u5ff5\u548c\u540d\u79f0\u51b2\u7a81\u7b49\u95ee\u9898\uff0c\u5b83\u5f88\u5feb\u5c31\u4f1a\u53d8\u5f97\u96be\u4ee5\u7ba1\u7406\u3002 \u5c3d\u7ba1\u6bcf\u4e2a Op\u3001\u7c7b\u578b\u548c\u5c5e\u6027\u53ea\u5c5e\u4e8e\u4e00\u79cd\u65b9\u8a00\uff0c\u4f46 MLIR \u660e\u786e\u652f\u6301\u65b9\u8a00\u7684\u6df7\u5408\u4ee5\u5b9e\u73b0\u6e10\u8fdb\u964d\u4f4e\u3002 \u6765\u81ea\u4e0d\u540c\u65b9\u8a00\u7684\u64cd\u4f5c\u53ef\u4ee5\u968f\u65f6\u5728 IR \u7684\u4efb\u4f55\u7ea7\u522b\u5171\u5b58\uff0c\u5b83\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0d\u540c\u65b9\u8a00\u5b9a\u4e49\u7684\u7c7b\u578b\u7b49\u3002\u65b9\u8a00\u7684\u6df7\u5408\u5141\u8bb8\u66f4\u5927\u7684\u91cd\u7528\u3001\u53ef\u6269\u5c55\u6027\u5e76\u63d0\u4f9b\u7075\u6d3b\u6027\uff0c\u5426\u5219\u5c06\u9700\u8981\u5f00\u53d1\u4eba\u5458\u8bc9\u8bf8\u5404\u79cd \u4e0d\u53ef\u7ec4\u5408\u7684\u89e3\u51b3\u65b9\u6cd5\u3002</p> </li> <li> <p>Type system</p> <p>\u5982\u540cLLVM\uff0c MLIR \u4e2d\u7684\u6bcf\u4e2a\u503c\u90fd\u6709\u4e00\u4e2a\u7c7b\u578b\uff0c\u901a\u5e38\u5728 Op \u4e2d\u3001\u6216 block \u53c2\u6570\u4e2d\u6307\u5b9a\u3002 \u7c7b\u578b\u4e3a IR \u63d0\u4f9b\u7f16\u8bd1\u65f6\u8bed\u4e49\u3002 MLIR \u4e2d\u7684\u7c7b\u578b\u7cfb\u7edf\u662f\u7528\u6237\u53ef\u6269\u5c55\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u5f15\u7528\u73b0\u6709\u7684\u5916\u90e8\u7c7b\u578b\u7cfb\u7edf\uff08\u4f8b\u5982 llvm::Type \u6216 clang::Type\uff09\u3002 MLIR \u5f3a\u5236\u6267\u884c\u4e25\u683c\u7684\u7c7b\u578b\u4e00\u81f4\u6027\u68c0\u67e5\u5e76\u4e14\u4e0d\u63d0\u4f9b\u7c7b\u578b\u8f6c\u6362\u89c4\u5219\u3002 Ops \u4f7f\u7528 trailing function-like syntax \u5217\u51fa\u5b83\u4eec\u7684\u8f93\u5165\u548c\u7ed3\u679c\u7c7b\u578b\u3002 \u5728\u56fe 4 \u4e2d\uff0c<code>std.load</code> \u4ece\u5185\u5b58\u5f15\u7528\u548c\u7d22\u5f15\u7c7b\u578b\u6620\u5c04\u5230\u5b83\u52a0\u8f7d\u7684\u503c\u7684\u7c7b\u578b\u3002</p> <p>\u4ece\u7c7b\u578b\u8bba\u7684\u89d2\u5ea6\u6765\u770b\uff0cMLIR \u53ea\u652f\u6301\u975e\u4f9d\u8d56\u7c7b\u578b\uff0c\u5305\u62ec trivial\u3001parametric\u3001function\u3001sum \u548c product \u7c7b\u578b\u3002 \u867d\u7136\u53ef\u4ee5\u901a\u8fc7\u5728 Curry-Howard \u540c\u6784\u7684\u6587\u5b57\u89e3\u91ca\u4e2d\u5c06 Ops \u4e0e\u7b26\u53f7\u548c\u7528\u6237\u5b9a\u4e49\u7c7b\u578b\u7ec4\u5408\u6765\u5b9e\u73b0\u4f9d\u8d56\u7c7b\u578b\u7cfb\u7edf\uff0c\u4f46\u6b64\u7c7b\u7c7b\u578b\u5bf9 IR \u6765\u8bf4\u662f\u4e0d\u900f\u660e\u7684\u3002</p> </li> <li> <p>Standard types</p> <p>MLIR \u63d0\u4f9b\u4e00\u7ec4\u6807\u51c6\u5316\u7684\u5e38\u7528\u7c7b\u578b\uff0c\u5305\u62ec \u4efb\u610f\u7cbe\u5ea6\u6574\u6570\u3001 \u6807\u51c6\u6d6e\u70b9 \u548c \u7b80\u5355\u7684\u901a\u7528\u5bb9\u5668\u2014\u2014\u5143\u7ec4\u3001 \u591a\u7ef4\u5411\u91cf \u548c \u5f20\u91cf\u3002 \u8fd9\u4e9b\u7c7b\u578b\u53ea\u662f\u5bf9\u65b9\u8a00\u4f5c\u8005\u6709\u7528\u7684\u4fbf\u5229\uff0c\u4f46\u975e\u5fc5\u9700\u3002</p> </li> <li> <p>Functions and modules</p> <p>\u4e0e\u4f20\u7edf IR \u7c7b\u4f3c\uff0cMLIR \u901a\u5e38\u7ed3\u6784\u5316\u4e3a\u51fd\u6570\u548c module \u3002 \u7136\u800c\uff0c\u8fd9\u4e9b\u5728 MLIR \u4e2d\u4e0d\u662f\u72ec\u7acb\u7684\u6982\u5ff5\uff1a\u5b83\u4eec\u5728\u5185\u7f6e\u65b9\u8a00\u4e2d\u4f5c\u4e3a Ops \u5b9e\u73b0\u3002</p> <p>A module is an Op with a single region containing a single block\uff0c\u5e76\u7531\u4e0d\u8f6c\u79fb\u63a7\u5236\u6d41\u7684 a dummy Op \u7ec8\u6b62\u3002 \u4e00\u4e2a module \u5b9a\u4e49\u4e86\u4e00\u4e2a\u7b26\u53f7\uff0c\u53ef\u4ee5\u88ab\u5f15\u7528\u3002 \u4e0e\u4efb\u4f55\u5757\u4e00\u6837\uff0c\u5b83\u7684\u4e3b\u4f53\u5305\u542b\u4e00\u4e2a Ops \u5217\u8868\uff0c\u8fd9\u4e9b Ops \u53ef\u80fd\u662f\u51fd\u6570\u3001\u5168\u5c40\u53d8\u91cf\u3001\u7f16\u8bd1\u5668\u5143\u6570\u636e\u6216\u5176\u4ed6\u9876\u7ea7\u7ed3\u6784\u3002</p> <p>A function is an Op with a single region\uff0c\u5176\u53c2\u6570\u5bf9\u5e94\u4e8e\u51fd\u6570\u53c2\u6570\u3002 \u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7b26\u53f7\uff0c\u53ef\u4ee5\u901a\u8fc7\u540d\u5b57\u6765\u5f15\u7528\u3002 \u4f7f\u7528\u51fd\u6570\u8c03\u7528 Op \u5c06\u63a7\u5236\u6d41\u8f6c\u79fb\u5230\u51fd\u6570\u4e2d\u3002 \u4e00\u65e6\u8fdb\u5165\uff0c\u63a7\u5236\u6d41\u5c06\u9075\u5faa\u8be5\u533a\u57df\u4e2d\u5757\u7684 CFG\u3002 \"return\" \u7ec8\u6b62\u7b26\u6ca1\u6709successors\uff0c\u7ec8\u6b62\u533a\u57df\u6267\u884c\uff0c\u5c06\u63a7\u5236\u6d41\u8f6c\u79fb\u56de\u51fd\u6570\u7684\u8c03\u7528\u70b9\u3002 \"return\" Op \u64cd\u4f5c\u6570\u662f\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002</p> </li> </ol>"},{"location":"mlc/mlir.html#4-ir","title":"4. IR \u57fa\u7840\u8bbe\u65bd","text":"<p>\u9664\u4e86 IR \u672c\u8eab\uff0cMLIR \u8fd8\u63d0\u4f9b\u7528\u4e8e\u5b9a\u4e49 IR \u5143\u7d20\u7684\u57fa\u7840\u8bbe\u65bd\uff0c\u4f8b\u5982 dialects\u3001Ops\u3001pattern rewrites\u3001verification \u548c reusable passes\u3002 MLIR \u7684\u57fa\u7840\u8bbe\u65bd\u65b9\u9762\u5bf9\u4e8e\u5728\u5b9a\u4e49\u65b0\u62bd\u8c61\u548c\u4f7f\u7528 MLIR \u4f5c\u4e3a\u4f18\u5316\u5de5\u5177\u5305\u65f6\u63d0\u4f9b\u53ef\u6269\u5c55\u6027\u548c\u6613\u7528\u6027\u81f3\u5173\u91cd\u8981\u3002</p>"},{"location":"mlc/mlir.html#41-operation","title":"4.1. Operation \u63cf\u8ff0","text":"<p>MLIR \u4f7f\u7528 TableGen[47] \u89c4\u8303\u5b9a\u4e49\u64cd\u4f5c\u63cf\u8ff0\uff08Operation Descriptions, ODS\uff09\uff0c\u4ee5\u58f0\u660e\u7684\u65b9\u5f0f\u5b9a\u4e49 Op \u7684\u7ed3\u6784\u53ca\u5176\u9a8c\u8bc1\u7a0b\u5e8f\u7ec4\u4ef6\u3002 TableGen \u662f\u4e00\u79cd\u5728 LLVM \u4e2d\u5e7f\u6cdb\u4f7f\u7528\u7684\u6570\u636e\u5efa\u6a21\u5de5\u5177\uff0c\u76ee\u7684\u662f\u5e2e\u52a9\u5b9a\u4e49\u548c\u7ef4\u62a4 domain-specific \u4fe1\u606f\u7684\u8bb0\u5f55\u3002\u9009\u62e9 TableGen \u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u4e1a\u754c\u6807\u51c6\u9009\u62e9\u3002 ODS \u53ef\u4ee5\u770b\u4f5c\u662f \u4e00\u79cd\u5d4c\u5165\u5230 TableGen \u7684\u3001\u7528\u4e8e\u58f0\u660e MLIR Op \u5b9a\u4e49\u7684 EDSL\u3002\u56e0\u6b64 ODS \u8bed\u6cd5\u7531 TableGen \u89c4\u5b9a\uff0c\u4f46 MLIR \u7279\u5b9a\u7684\u8bed\u4e49\u7531 ODS \u89c4\u5b9a\u3002 ODS \u5b9a\u4e49\u6700\u7ec8\u4f1a\u8f6c\u6362\u4e3aC++\u4ee3\u7801\uff0c\u8fd9\u4e9b\u4ee3\u7801\u53ef\u4ee5\u4e0e\u7f16\u8bd1\u7cfb\u7edf\u7684\u5176\u4f59\u90e8\u5206\u4e92\u64cd\u4f5c\u3002</p> <p>LLVM-TableGen</p> <p>MLIR \u7684 ODS \u4f7f\u7528 TableGen \u7684 <code>Op</code> \u7c7b\u5bf9 Op \u5efa\u6a21\u3002\u56fe5 \u663e\u793a\u4e86 Op \u7684 ODS \u5b9a\u4e49\u793a\u4f8b\u3002</p> <ul> <li>\u6bcf\u4e2a Op \u5b9a\u4e49\u90fd\u6709\u4e00\u4e2a\u540d\u79f0\uff0c\u8be5\u540d\u79f0\u662f\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6\u7b26</li> <li>Op \u7684 trait \u5217\u8868\u63cf\u8ff0\u4e86 Op \u5c5e\u6027</li> <li>Op \u7684argument\uff08\u53c2\u6570\uff09\u5217\u8868\u6307\u5b9a Op \u7684\u64cd\u4f5c\u6570\u548c\u5c5e\u6027</li> <li>Op \u5b9a\u4e49\u4e2d\u8fd8\u6709\u4e00\u4e2a result \uff08\u7ed3\u679c\uff09\u5217\u8868</li> </ul> <p>Op \u7684\u53c2\u6570\u548c\u7ed3\u679c\u5177\u6709\u540d\u79f0\u548c\u7c7b\u578b\u7ea6\u675f\uff08\u4f8b\u5982 float \u6216 int32 \u7684\u56fa\u5b9a\u5f62\u72b6\u5f20\u91cf\uff09\u3002 Op \u5b9a\u4e49\u8fd8\u53ef\u4ee5\u6307\u5b9a\u4eba\u7c7b\u53ef\u8bfb\u7684 Op \u63cf\u8ff0\u3002\u5f53 Op \u5b9a\u4e49\u9700\u8981\u6bd4 ODS \u66f4\u7cbe\u7ec6\u7684\u63a7\u5236\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 builder\u3001printer\u3001parser\u3001verifier \u8bed\u53e5\u6ce8\u5165\u5176\u4ed6C++\u4ee3\u7801\u3002\u64cd\u4f5c trait \u53ef\u4ee5\u662f\u901a\u7528\u7684\uff0c\u4f8b\u5982 \"has no side-effects\"\uff0c \u4e5f\u53ef\u4ee5\u662f\u7279\u5b9a\u4e8e dialect \u6216 ODS \u7684\uff0c\u4f8b\u5982 \"has custom exporter\" \u3002 </p> <p>ODS\u4e2d\u7684 trait \u53ef\u4ee5\u7531\u5b9a\u4e49 trait \u884c\u4e3a\u7684 C++ \u7c7b\u652f\u6301\u3002 MLIR \u6ca1\u6709\u56fa\u5b9a\u7684 trait \u96c6\u5408\uff0c\u4f46\u662f\u6709\u4e9b trait \u5bf9 ODS \u662f\u5df2\u77e5\u7684\uff08\u4f8b\u5982\uff0c\"shape result and operand type\" \u8868\u793a\u5f53\u5b8c\u5168\u6355\u83b7\u7ed9\u5b9a\u8f93\u5165\u7c7b\u578b\u65f6\uff0c\u8f93\u51fa\u7c7b\u578b\u7684\u7ea6\u675f\uff09\uff0c\u6216\u5bf9\u4f18\u5316\u5668\u662f\u5df2\u77e5\u7684\uff08\u4f8b\u5982\uff0c\"has no side-effects\"\uff0c\u8bf7\u53c2\u9605 6.1\uff09\u3002</p> <p>\u7c7b\u578b\u7ea6\u675f\u4f1a\u68c0\u67e5 arguments/results \u7c7b\u578b\u7684\u5c5e\u6027\uff0c \u5e76\u4e14\u53ef\u7531\u7528\u6237/dialect\u6269\u5c55\u3002 MLIR \u57fa\u7840\u7ed3\u6784\u8fd8\u63d0\u4f9b\u4e86\u8bb8\u591a\u9884\u5b9a\u4e49\u7684\u7c7b\u578b\u7ea6\u675f\uff0c\u4f8b\u5982 \"any type\" \u3001\"tensor with element satisfying the given constraint\"\u3001 \"vector of given rank\" \u7b49\u3002 ODS\u6709\u9650\u5730\u652f\u6301\u4e86\u4f7f\u7528 traits \u7684\u9650\u5236\u81ea\u52a8\u63a8\u65ad\u64cd\u4f5c\u6570\u7684\u7ed3\u679c\u7c7b\u578b\u3002\u66f4\u591a\u4fe1\u606f\u53c2\u89c1 4.2</p>"},{"location":"mlc/mlir.html#42-declarative-rewrites","title":"4.2. Declarative rewrites","text":"<p>\u8bb8\u591a MLIR \u8f6c\u6362\u6d89\u53ca Op \u64cd\u4f5c\uff0c\u5c3d\u7ba1\u67d0\u4e9b\u8f6c\u6362\u9700\u8981\u5bf9 IR \u8fdb\u884c\u590d\u6742\u7684\u4fee\u6539\uff0c\u4f46\u8bb8\u591a\u5176\u5b83\u8f6c\u6362\u53ef\u4ee5\u8868\u793a\u4e3a\u5bf9 DAG defined by SSA use-def relations \u7684\u7b80\u5355\u91cd\u5199\u3002 MLIR\u63d0\u4f9b\u4e86\u4e00\u4e2a graph \u91cd\u5199\u6846\u67b6\uff0c\u5e76\u8f85\u4ee5\u58f0\u660e\u6027\u91cd\u5199\u89c4\u5219\uff08Declarative Rewrite Rule, DRR\uff09\u7cfb\u7edf\uff0c\u4f7f\u6a21\u5f0f\u8868\u8fbe\u53d8\u5f97\u7b80\u5355\u3002</p> <p>\u4e0e ODS \u76f8\u4f3c\uff0cDRR\u662f\u5d4c\u5165\u5230 TableGen \u4e2d\u7684 EDSL \u3002 DRR \u8868\u793a\u6e90\u548c\u76ee\u6807 DAG \u6a21\u5f0f\u4ee5\u53ca\u7ea6\u675f\uff08\u5305\u62ec\u52a8\u6001\u7ea6\u675f[49]\uff09\u548c\u6a21\u5f0f\u4f18\u5148\u7ea7\u7684\u6536\u76ca\u3002\u6a21\u5f0f\u53ef\u4ee5\u6355\u83b7\u548c\u91cd\u7528 Op \u7684\u53c2\u6570\u3002\u4ece\u6982\u5ff5\u4e0a\u8bb2\uff0c DRR \u8868\u793a\u5728\u7279\u5b9a\u7ea6\u675f\u4e0b DAG \u7684\u7b49\u6548\u6027\u3002\u56fe6 \u7ed9\u51fa\u4e86 DRR \u6a21\u5f0f\u7684\u793a\u4f8b\uff0c\u8be5\u6a21\u5f0f\u5c06 \u56fe5 \u4e2d\u5b9a\u4e49\u7684 Op \u8f6c\u6362\u4e3a\u7531 compare \u548c select \u7ec4\u6210\u7684\u901a\u7528\u4f4e\u5c42\u5b9e\u73b0\u3002</p> <p>DRR \u88ab\u8f6c\u6362\u4e3a C++ \u4ee3\u7801\uff0c\u53ef\u4ee5\u4f7f\u7528\u901a\u7528\u56fe\u91cd\u5199\u6846\u67b6\u5c06\u5176\u4e0e\u76f4\u63a5\u5728 C++ \u4e2d\u5b9a\u4e49\u7684\u66f4\u590d\u6742\u7684\u6a21\u5f0f\u6df7\u5408\u3002\u901a\u8fc7\u8fd9\u9879\u529f\u80fd\uff0c MLIR \u53ef\u4ee5\u4f7f\u5e38\u89c1\u7528\u4f8b\u4fdd\u6301\u7b80\u6d01\uff0c\u4e14\u4e0d\u4f1a\u9650\u5236\u6846\u67b6\u7684\u901a\u7528\u6027\u3002</p>"},{"location":"mlc/mlir.html#43-pass-manager","title":"4.3. Pass manager","text":"<p>MLIR pass \u7ba1\u7406\u5668\u4ee5\u5404\u79cd\u7c92\u5ea6\u7ec4\u7ec7\u5e76\u5904\u7406IR pass\u5e8f\u5217\uff0c\u4fdd\u8bc1pass\u7684\u9ad8\u6548\u6267\u884c\u3002\u73b0\u6709\u7f16\u8bd1\u7cfb\u7edf\u4e2d\u7684 pass \u7ba1\u7406\u901a\u5e38\u662f\u6309\u7167\u56fa\u5b9a\u7684\u7c92\u5ea6\uff08\u4f8b\u5982\uff0c\u6a21\u5757\u3001\u51fd\u6570\u6216\u5faa\u73af pass \u7ba1\u7406\u5668\uff09\u5b9a\u4e49\u7684\u3002\u4f46\u5728MLIR\u4e2d\uff0cmodule \u548c function \u5e76\u65e0\u7279\u6b8a\uff0c\u53ea\u662f\u5177\u6709\u533a\u57df\u7684 Op \uff0c \u5e76\u4e14\u6709\u591a\u79cd\u53d8\u4f53\u3002\u56e0\u6b64\uff0cMLIR pass \u7ba1\u7406\u5668\u4e5f\u4e0d\u4e13\u95e8\u9488\u5bf9\u56fa\u5b9a\u7684 Op \u96c6\u5408\uff0c\u800c\u662f\u9488\u5bf9\u4efb\u610f\u5d4c\u5957\u7ea7\u522b\u7684\u4efb\u610f Op \u3002</p> <p>Parallel compilation:</p> <p>MLIR \u7684\u4e00\u4e2a\u91cd\u8981\u9700\u6c42\u662f\u5229\u7528\u591a\u6838\u52a0\u5feb\u7f16\u8bd1\u3002pass \u7ba1\u7406\u5668\u652f\u6301\u5e76\u53d1\u904d\u5386\u548c\u4fee\u6539\u4e2d\u95f4\u8868\u793a\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7 Ops \u7684 \"\u4e0e\u4e0a\u65b9\u9694\u79bb\uff08isolated-from-above\uff09\" property \u63d0\u4f9b\u7684\u4e0d\u53d8\u91cf\u6765\u5b9e\u73b0\uff0c\u56e0\u4e3a SSA use-def \u94fe\u65e0\u6cd5\u8de8\u8d8a\u8fd9\u4e9b op \u7684\u533a\u57df\u8fb9\u754c\uff0c\u56e0\u6b64\u5177\u6709\u8fd9\u79cd\u884c\u4e3a\u7684\u64cd\u4f5c\uff08\u4f8b\u5982 \"std.func\" \u64cd\u4f5c\uff09\u5b9a\u4e49\u4e86\u53ef\u4ee5\u5e76\u884c\u5904\u7406\u7684\u533a\u57df\u6811\u3002</p> <p>\u7591\u95ee</p> <p>which is made possible by invariants provided by \u201cisolated-from-above\u201d property of operations, because the SSA use-def chains cannot cross the region boundaries of these ops</p> <p>\u4ec0\u4e48\u610f\u601d ?</p> <p>\u8fd9\u4e2a\u9700\u6c42\u4e5f\u662f MLIR \u4e0d\u5177\u6709\u6574\u4e2a module use-def \u94fe\u7684\u539f\u56e0\uff08\u8fd9\u4e0e LLVM \u76f8\u53cd\uff09\u3002\u5168\u5c40\u5bf9\u8c61\u901a\u8fc7\u7b26\u53f7\u8868\u6761\u76ee\u8fdb\u884c\u5f15\u7528\uff0c \u800c\u5e38\u91cf\u5219\u7531\u5177\u6709\u5173\u8054\u5c5e\u6027\u7684\u64cd\u4f5c\u5b9e\u73b0\u3002</p>"},{"location":"mlc/mlir.html#44-round-trippable-textual-ir-form","title":"4.4. Round-trippable textual IR form","text":"<p>MLIR \u4e2d\u7684 IR \u548c Op \u5177\u6709\u6587\u672c\u8868\u793a\u5f62\u5f0f\uff0c\u53ef\u4ee5\u5b8c\u5168\u53cd\u6620\u5185\u5b58\u4e2d\u7684 IR \u8868\u793a\uff0c\u8fd9\u5bf9\u4e8e\u8c03\u8bd5\u3001\u7406\u89e3\u8f6c\u6362\u671f\u95f4\u7684 IR \u4ee5\u53ca\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b\u81f3\u5173\u91cd\u8981\u3002 \u56fe4 \u6240\u793a\u7684\u539f\u59cb IR \u8868\u793a\u5197\u957f\u4e14\u96be\u4ee5\u7406\u89e3\uff0c\u56e0\u6b64 MLIR \u5141\u8bb8\u7528\u6237\u4e3a Op \u5b9a\u4e49\u5b9a\u5236\u7684\u6253\u5370\u548c\u89e3\u6790\u683c\u5f0f\uff0c\u8fd9\u4f7f\u5f97\u793a\u4f8b\u53ef\u4ee5\u5982 \u56fe8 \u6240\u793a\u8fdb\u884c\u6253\u5370\u548c\u89e3\u6790\uff0c\u8fd9\u66f4\u5bb9\u6613\u4f7f\u7528\u3002</p> <p>\u4e24\u79cd\u5f62\u5f0f\u53ef\u4ee5\u5b8c\u5168\u76f8\u4e92\u8f6c\u6362\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528\u6587\u672c\u5f62\u5f0f\u4f5c\u4e3a\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u5206\u522b\u6d4b\u8bd5\u6bcf\u4e2a\u7f16\u8bd1\u5668 pass \u3002 \u7531\u4e8e\u6ca1\u6709\u9690\u85cf\u72b6\u6001\uff0c\u56e0\u6b64\u8fd0\u884c\u5355\u4e2a pass \u7684\u7ed3\u679c\u4e0e\u5728\u5b8c\u6574 pass pipeline \u4e2d\u8fd0\u884c\u76f8\u540c pass \u7684\u7ed3\u679c\u76f8\u540c\u3002\u8fd9\u79cd\u65b9\u6cd5\u5bf9\u7528\u6237\u53cb\u597d\uff0c\u56e0\u4e3a\u53ef\u4ee5\u624b\u52a8\u521b\u5efa IR \u683c\u5f0f\uff0c\u5e76\u53ef\u65b9\u4fbf\u8ddf\u8e2a IR \u8f6c\u6362\u3002</p>"},{"location":"mlc/mlir.html#45","title":"4.5. \u6587\u6863","text":"<p>Dialect\u3001Op \u548c \u63a5\u53e3 \u90fd\u6709\u4ece\u5176\u5bf9\u5e94 ODS \u63cf\u8ff0\u751f\u6210\u7684\u6587\u6863\u3002 \u9664\u4e86\u6458\u8981\u548c\u66f4\u6613\u8bfb\u61c2\u7684\u63cf\u8ff0\u4e4b\u5916\uff0c\u751f\u6210\u7684\u6587\u6863\u8fd8\u5305\u62ec\u53c2\u6570\u548c\u7ed3\u679c\u7c7b\u578b\u7ea6\u675f\u3002\u7531\u4e8e\u9a8c\u8bc1\u4ee3\u7801\u548c\u6587\u6863\u4f7f\u7528\u76f8\u540c\u7684\u6765\u6e90\uff0c\u56e0\u6b64\u6587\u6863\u53ef\u4ee5\u4e0e\u8fd0\u884c\u65f6\u884c\u4e3a\u4fdd\u6301\u540c\u6b65\u3002</p> <p>MLIR-code docs</p>"},{"location":"mlc/mlir.html#46-verifiers","title":"4.6. Verifiers","text":"<p>\u9a8c\u8bc1\u5668\u7528\u4e8e\u589e\u5f3a IR \u548c Ops \u4e0d\u53d8\u5f0f\u7684\u7ed3\u6784\u6b63\u786e\u6027\uff0c\u5141\u8bb8 pass \u5047\u5b9a\u5df2\u9a8c\u8bc1\u7684 IR \u4e0d\u53d8\u5f0f\u662f\u7ecf\u8fc7\u68c0\u67e5\u7684\uff0c\u5e76\u4e14\u8fd8\u53ef\u4ee5\u7528\u4f5c\u8c03\u8bd5\u5de5\u5177\u3002\u9a8c\u8bc1\u8fc7\u7a0b\u4ee5 MLIR \u603b\u4f53\u7ed3\u6784\u5c5e\u6027\u68c0\u67e5\u5f00\u59cb\uff0c\u6bd4\u5982\uff0c\u68c0\u67e5\u7c7b\u578b\u5fc5\u987b\u5b8c\u5168\u5339\u914d\uff0c\u503c\u4ec5\u5b9a\u4e49\u4e00\u6b21\u4e14\u9075\u5b88\u652f\u914d\u89c4\u5219\u548c\u53ef\u89c1\u6027\uff0c\u7b26\u53f7\u540d\u79f0\u5728\u7b26\u53f7\u8868\u4e2d\u662f\u552f\u4e00\u7684\uff0c\u6240\u6709\u5757\u5747\u4ee5\u7ec8\u7ed3\u7b26Op\u7ed3\u5c3e\uff0c\u7b49\u7b49\u3002\u4e4b\u540e\uff0c\u5e94\u7528\u5404\u4e2aOp\u548c\u5c5e\u6027\u7684\u9a8c\u8bc1\u5668\u3002\u6bcf\u4e2aOp\u53ef\u4ee5\u5b9a\u4e49\u4e00\u7ec4\u68c0\u67e5\u7ed3\u6784\u548c\u8bed\u4e49\u6709\u6548\u6027\u89c4\u5219\u3002\u4f8b\u5982\uff0c\u4e8c\u5143Op\u4f1a\u68c0\u67e5\u662f\u5426\u6709\u4e24\u4e2a\u64cd\u4f5c\u6570\uff0c\u8bb8\u591aOp\u53ea\u63a5\u53d7\u7279\u5b9a\u7c7b\u578b\u7684\u503c\uff0c\u800c\u8bb8\u591aOp\u9700\u8981\u9644\u52a0\u7279\u5b9a\u7684\u5c5e\u6027\u6216\u533a\u57df\u3002\u540c\u6837\uff0cdialect\u5c5e\u6027\u53ea\u80fd\u5728\u7279\u5b9a\u7684Op\u4e0a\u88ab\u5141\u8bb8\u4f7f\u7528\uff0c\u6216\u8005\u901a\u8fc7\u8fd9\u4e9b\u5c5e\u6027\u5bf9\u5176\u6240\u9644\u52a0\u7684Op\u505a\u8fdb\u4e00\u6b65\u7684\u9650\u5236\u3002\u4f8b\u5982\uff0cdialect\u5c5e\u6027\u53ef\u4ee5\u8981\u6c42Op\u4ec5\u4f7f\u7528dialect\u4e2d\u5b9a\u4e49\u7684\u7c7b\u578b\uff0c\u5373\u4f7fOp\u672c\u8eab\u66f4\u901a\u7528\u3002\u9a8c\u8bc1\u5931\u8d25\u88ab\u89c6\u4e3ainvariant violation\u5e76\u4e2d\u6b62\u7f16\u8bd1\u3002</p>"},{"location":"mlc/mlir.html#5-evaluation-applications-of-mlir","title":"5. Evaluation: Applications of MLIR","text":"<p>MLIR \u662f\u4e00\u4e2a\u65e8\u5728\u6cdb\u5316\u591a\u79cd\u7f16\u8bd1\u5668\u9879\u76ee\u7684\u7cfb\u7edf\uff0c\u56e0\u6b64\u4e3b\u8981\u8bc4\u4f30\u6307\u6807\u662f\u8868\u660e\u5b83\u6b63\u5728\u88ab\u5404\u79cd\u9879\u76ee\u91c7\u7528\u548c\u4f7f\u7528\u3002 \u6211\u4eec\u63d0\u4f9b\u4e86\u793e\u533a\u6d3b\u52a8\u7684\u6458\u8981\uff0c\u5e76\u66f4\u8be6\u7ec6\u5730\u63cf\u8ff0\u4e86\u4e00\u4e9b\u7528\u4f8b\uff0c\u4ee5\u7a81\u51fa MLIR \u7684\u901a\u7528\u6027\u548c\u53ef\u6269\u5c55\u6027\uff0c\u5e76\u5c55\u793a\u5b83\u5982\u4f55\u5f88\u597d\u5730\u5b9e\u73b0\u53ef\u5b9a\u5236\u6027\u8bbe\u8ba1\u539f\u5219\u3002</p> <p>\u5982\u4eca\uff0cMLIR \u662f\u4e00\u4e2a\u4e0d\u65ad\u53d1\u5c55\u7684\u5f00\u6e90\u9879\u76ee\uff0c\u793e\u533a\u8de8\u8d8a\u5b66\u672f\u754c\u548c\u5de5\u4e1a\u754c\u3002 \u4f8b\u5982\uff0c\u5173\u4e8e\u5728\u9ad8\u6027\u80fd\u8ba1\u7b97 (HPC) \u4e2d\u4f7f\u7528 MLIR \u7684\u5b66\u672f\u7814\u8ba8\u4f1a\u6709\u6765\u81ea 16 \u6240\u5927\u5b66\u7684\u4e2a\u4eba\u53c2\u52a0\uff0c\u6d89\u53ca\u6765\u81ea 4 \u4e2a\u4e0d\u540c\u56fd\u5bb6\u7684 4 \u4e2a\u56fd\u5bb6\u5b9e\u9a8c\u5ba4\u3002 MLIR \u8fd8\u5f97\u5230\u4e86 14 \u5bb6\u8de8\u56fd\u516c\u53f8\u7684\u8ba4\u53ef\uff0c\u5728 LLVM \u5f00\u53d1\u8005\u4f1a\u8bae\u4e0a\uff0c\u8d85\u8fc7 100 \u540d\u884c\u4e1a\u5f00\u53d1\u4eba\u5458\u53c2\u52a0\u4e86\u5173\u4e8e MLIR \u7684\u5706\u684c\u4f1a\u8bae\u3002 \u793e\u533a\u91c7\u7528\u548c\u53c2\u4e0e\u662f\u53ef\u7528\u6027\u548c\u9700\u6c42\u7684\u4ee3\u7406\u5ea6\u91cf\u3002 \u8d85\u8fc7 26 \u79cd\u65b9\u8a00\u6b63\u5728\u516c\u5171\u6216\u79c1\u4eba\u5f00\u53d1\u4e2d\uff0c\u4e0d\u540c\u516c\u53f8\u7684 7 \u4e2a\u9879\u76ee\u6b63\u5728\u7528 MLIR \u66ff\u6362\u81ea\u5b9a\u4e49\u57fa\u7840\u8bbe\u65bd\u3002 \u6211\u4eec\u8ba4\u4e3a\u8fd9\u8868\u660e\u4e86\u5bf9 MLIR \u7684\u771f\u6b63\u9700\u6c42\uff0c\u5e76\u8ba4\u53ef\u4e86\u5b83\u7684\u53ef\u7528\u6027\u3002</p>"},{"location":"mlc/mlir.html#51-tensorflow-graphs","title":"5.1. TensorFlow graphs","text":"<p>\u867d\u7136\u8ba8\u8bba\u5230\u7684\u5176\u4ed6 IR \u5bf9\u4e8e\u5927\u591a\u6570\u7f16\u8bd1\u5668\u5f00\u53d1\u6765\u8bf4\u90fd\u5f88\u719f\u6089\uff0c\u4f46 MLIR \u7684\u4e00\u4e2a\u5173\u952e\u7528\u4f8b\u662f\u652f\u6301\u673a\u5668\u5b66\u4e60\u6846\u67b6\u7684\u5f00\u53d1\u3002 \u5b83\u4eec\u7684\u5185\u90e8\u8868\u793a\u901a\u5e38\u57fa\u4e8e\u5177\u6709\u52a8\u6001\u6267\u884c\u8bed\u4e49\u7684\u6570\u636e\u6d41\u56fe [53]\u3002</p> <p>TensorFlow [1] \u662f\u6b64\u7c7b\u6846\u67b6\u7684\u4e00\u4e2a\u793a\u4f8b\u3002 \u5b83\u7684\u8868\u793a\u662f\u4e00\u4e2a\u9ad8\u7ea7\u6570\u636e\u6d41\u8ba1\u7b97\uff0c\u5176\u4e2d\u8282\u70b9\u662f\u53ef\u4ee5\u653e\u7f6e\u5728\u5404\u79cd\u8bbe\u5907\u4e0a\u7684\u8ba1\u7b97\uff0c\u5305\u62ec\u7279\u5b9a\u7684\u786c\u4ef6\u52a0\u901f\u5668\u3002</p> <p>MLIR \u5728 TensorFlow \u4e2d\u7528\u4e8e\u5bf9\u8fd9\u79cd\u5185\u90e8\u8868\u793a\u8fdb\u884c\u5efa\u6a21\u5e76\u9488\u5bf9 \u56fe1 \u4e2d\u663e\u793a\u7684\u7528\u4f8b\u6267\u884c\u8f6c\u6362\uff1a\u4ece\u7b80\u5355\u7684\u4ee3\u6570\u4f18\u5316\u5230\u91cd\u5b9a\u5411\u56fe\u4ee5\u5728\u786c\u4ef6\u52a0\u901f\u5668\u7684\u6570\u636e\u4e2d\u5fc3\u96c6\u7fa4\u4e0a\u5e76\u884c\u6267\u884c\uff0c\u4ece\u964d\u4f4e\u5230\u9002\u5408\u79fb\u52a8\u90e8\u7f72\u7684\u8868\u793a\u5230 \u4f7f\u7528 XLA [57] \u7b49\u5de5\u5177\u751f\u6210\u9ad8\u6548\u7684\u672c\u673a\u4ee3\u7801\u3002 \u56fe 7 \u8bf4\u660e\u4e86 MLIR \u4e2d TensorFlow \u56fe\u7684\u8868\u793a\u3002</p>"},{"location":"mlc/mlir.html#52-polyhedral-code-generation","title":"5.2. Polyhedral code generation","text":"<p>MLIR \u7684\u6700\u521d\u52a8\u673a\u4e4b\u4e00\u662f\u63a2\u7d22 accelerators \u4e0a\u7684\u591a\u9762\u4f53\u4ee3\u7801\u751f\u6210\u3002 \u4eff\u5c04\u65b9\u8a00 ( affine dialect) \u662f\u4e00\u79cd\u7b80\u5316\u7684\u591a\u9762\u4f53\u8868\u793a\uff0c\u65e8\u5728\u5b9e\u73b0\u6e10\u8fdb\u964d\u4f4e\u3002 \u867d\u7136\u5bf9\u6b64\u5904\u8bbe\u8ba1\u70b9\u7684\u5168\u9762\u63a2\u7d22\u8d85\u51fa\u4e86\u672c\u6587\u7684\u8303\u56f4\uff0c\u4f46\u6211\u4eec\u8bf4\u660e\u4e86\u4eff\u5c04\u65b9\u8a00\u7684\u5404\u4e2a\u65b9\u9762\u4ee5\u5c55\u793a MLIR \u7684\u5efa\u6a21\u80fd\u529b\u5e76\u5c06\u4eff\u5c04\u65b9\u8a00\u4e0e\u8fc7\u53bb\u7684\u8868\u793a\u8fdb\u884c\u5bf9\u6bd4 [17\u300119\u300154\u300155\u300152] .</p> <ol> <li> <p>\u76f8\u4f3c\u4e4b\u5904</p> <p>MLIR affine dialect \u5728\u7ed3\u6784\u5316\u591a\u7ef4\u7c7b\u578b\u4e0a\u8fd0\u884c\uff0c\u7528\u4e8e\u6240\u6709\u5185\u5b58\u8bbf\u95ee\u3002 \u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u7ed3\u6784\u5316\u7c7b\u578b\u662f\u5355\u5c04\u7684\uff1a\u4fdd\u8bc1\u4e0d\u540c\u7684\u7d22\u5f15\u4e0d\u4f1a\u56e0\u6784\u9020\u800c\u6df7\u6dc6\uff0c\u8fd9\u662f\u591a\u9762\u4f53\u4f9d\u8d56\u5206\u6790\u7684\u5e38\u89c1\u5148\u51b3\u6761\u4ef6\u3002</p> <p>\u4eff\u5c04\u5efa\u6a21\u5206\u4e3a\u4e24\u90e8\u5206\u3002 \u5c5e\u6027\u7528\u4e8e\u5728\u7f16\u8bd1\u65f6\u5bf9\u4eff\u5c04\u6620\u5c04\u548c\u6574\u6570\u96c6\u5efa\u6a21\uff0cOps \u7528\u4e8e\u5bf9\u4ee3\u7801\u5e94\u7528\u4eff\u5c04\u9650\u5236\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c<code>affine.for</code> Op \u662f\u4e00\u4e2a \"for\" \u5faa\u73af\uff0c\u5176\u8fb9\u754c\u8868\u793a\u4e3a\u51fd\u6570\u4e2d\u9700\u8981\u4e0d\u53d8\u7684\u503c\u7684\u4eff\u5c04\u6620\u5c04\u3002 \u56e0\u6b64\u5faa\u73af\u5177\u6709\u9759\u6001\u63a7\u5236\u6d41\u3002 \u7c7b\u4f3c\u5730\uff0c <code>affine.if</code> \u662f\u4e00\u4e2a\u53d7\u4eff\u5c04\u6574\u6570\u96c6\u9650\u5236\u7684\u6761\u4ef6\u3002 \u5faa\u73af\u548c\u6761\u4ef6\u7684\u4e3b\u4f53\u662f\u4f7f\u7528 <code>affine.load</code> \u548c <code>affine.store</code> \u5c06\u7d22\u5f15\u9650\u5236\u4e3a\u5468\u56f4\u5faa\u73af\u8fed\u4ee3\u5668\u7684\u4eff\u5c04\u5f62\u5f0f\u7684\u533a\u57df\u3002 \u8fd9\u4f7f\u5f97\u7cbe\u786e\u7684\u4eff\u5c04\u4f9d\u8d56\u5206\u6790\u6210\u4e3a\u53ef\u80fd\uff0c\u540c\u65f6\u907f\u514d\u4e86\u4ece\u6709\u635f\u7684\u4f4e\u7ea7\u8868\u793a\u4e2d\u63a8\u65ad\u4eff\u5c04\u5f62\u5f0f\u7684\u9700\u8981\u3002</p> </li> <li> <p>\u4e0d\u540c\u4e4b\u5904</p> <p>\u4e0e\u73b0\u6709\u591a\u9762\u4f53\u6846\u67b6\u7684\u5dee\u5f02\u5f88\u591a\uff0c\u53ef\u4ee5\u6982\u62ec\u4e3a\u4ee5\u4e0b4\u70b9\uff1a</p> <ol> <li> <p>\u4e30\u5bcc\u7684\u7c7b\u578b(Rich types)\uff1aMLIR \u7ed3\u6784\u5316\u5185\u5b58\u5f15\u7528\u7c7b\u578b\u5305\u542b\u4e00\u4e2a\u8fde\u63a5\u7f13\u51b2\u533a\u7d22\u5f15\u7a7a\u95f4\u548c\u5b9e\u9645\u5730\u5740\u7a7a\u95f4\u7684\u5e03\u5c40\u56fe\u3002 \u8fd9\u79cd\u5173\u6ce8\u70b9\u5206\u79bb\u4f7f\u5faa\u73af\u548c\u6570\u636e\u8f6c\u6362\u66f4\u597d\u5730\u7ec4\u5408\uff1a\u6570\u636e\u5e03\u5c40\u7684\u66f4\u6539\u4e0d\u4f1a\u5f71\u54cd\u4ee3\u7801\uff0c\u4e5f\u4e0d\u4f1a\u6c61\u67d3\u4f9d\u8d56\u6027\u5206\u6790\u3002 \u4e4b\u524d\u5df2\u7ecf\u63a2\u7d22\u8fc7\u8fd9\u79cd\u6df7\u5408\u8f6c\u6362 [38]\uff0c\u4f46\u5e76\u4e0d\u5e38\u89c1\u3002</p> </li> <li> <p>\u6df7\u5408\u62bd\u8c61(Mix of abstractions)\uff1aMLIR \u4e2d\u7684\u4eff\u5c04\u5faa\u73af\u4f53\u53ef\u4ee5\u7528\u5bf9\u7c7b\u578b\u5316 SSA \u503c\u7684\u64cd\u4f5c\u6765\u8868\u793a\u3002 \u56e0\u6b64\uff0c\u6240\u6709\u4f20\u7edf\u7684\u7f16\u8bd1\u5668\u5206\u6790\u548c\u8f6c\u6362\u4ecd\u7136\u9002\u7528\uff0c\u5e76\u4e14\u53ef\u4ee5\u4e0e\u591a\u9762\u4f53\u8f6c\u6362\u4ea4\u9519\u3002 \u76f8\u53cd\uff0c\u591a\u9762\u4f53\u7f16\u8bd1\u5668\u7ecf\u5e38\u5c06\u8fd9\u4e9b\u7ec6\u8282\u5b8c\u5168\u62bd\u8c61\u6389\uff0c\u8fd9\u4f7f\u5f97\u591a\u9762\u4f53\u7f16\u8bd1\u5668\u96be\u4ee5\u64cd\u4f5c\uff0c\u4f8b\u5982\u5411\u91cf\u7c7b\u578b\u3002</p> </li> <li> <p>\u66f4\u5c0f\u7684\u8868\u793a\u5dee\u8ddd(Smaller representation gap)\uff1a\u591a\u9762\u4f53\u6a21\u578b\u7684\u5173\u952e\u7279\u5f81\u4e4b\u4e00\u662f\u5b83\u80fd\u591f\u8868\u793a\u7c7b\u578b\u7cfb\u7edf\u4e2d\u5faa\u73af\u8fed\u4ee3\u7684\u987a\u5e8f\u3002 \u5728\u8fd9\u4e2a\u7cfb\u7edf\u4e2d\uff0c\u5927\u91cf\u7684\u5faa\u73af\u53d8\u6362\u76f4\u63a5\u7ec4\u5408\uff0c\u53ef\u4ee5\u4f7f\u7528\u7b80\u5355\u7684\u6570\u5b66\u62bd\u8c61\u8fdb\u884c\u63a8\u7406[19]\u3002 \u7136\u800c\uff0c\u591a\u9762\u4f53\u53d8\u6362\u9700\u8981\u63d0\u5347\u5230\u4e00\u4e2a\u901a\u5e38\u4e0e\u539f\u59cb [20, 10] \u622a\u7136\u4e0d\u540c\u7684\u8868\u793a\u3002 \u6b64\u5916\uff0c\u4ece\u53d8\u6362\u7684\u591a\u9762\u4f53\u5230\u5faa\u73af\u7684\u8f6c\u6362\u5728\u8ba1\u7b97\u4e0a\u662f\u56f0\u96be\u7684 [7]\u3002 \u57fa\u4e8e MLIR \u7684\u8868\u793a\u5728\u8f83\u4f4e\u7ea7\u522b\u7684\u8868\u793a\u5468\u56f4\u7ef4\u62a4\u9ad8\u7ea7\u5faa\u73af\u7ed3\u6784\uff0c\u4ece\u800c\u6d88\u9664\u4e86\u63d0\u5347\u7684\u9700\u8981\u3002</p> </li> <li> <p>\u7f16\u8bd1\u901f\u5ea6\u662f MLIR \u7684\u4e00\u4e2a\u5173\u952e\u76ee\u6807\uff0c\u5982 4.3 \u8282\u6240\u8ff0\uff0c\u4f46\u5e76\u4e0d\u662f\u5927\u591a\u6570\u73b0\u6709\u591a\u9762\u4f53\u65b9\u6cd5\u7684\u91cd\u70b9\u3002 \u8fd9\u4e9b\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4f9d\u8d56\u4e8e\u5177\u6709\u6307\u6570\u590d\u6742\u5ea6\u7684\u7b97\u6cd5\uff1a\u4f7f\u7528\u6574\u6570\u7ebf\u6027\u89c4\u5212\u6765\u81ea\u52a8\u5bfc\u51fa\u5faa\u73af\u987a\u5e8f\uff0c\u4ee5\u53ca\u4f7f\u7528\u591a\u9762\u4f53\u626b\u63cf\u7b97\u6cd5\u5c06\u8868\u793a\u8f6c\u6362\u56de\u5faa\u73af\u3002 MLIR \u91c7\u7528\u7684\u65b9\u6cd5\u660e\u786e\u4e0d\u4f9d\u8d56\u4e8e\u591a\u9762\u4f53\u626b\u63cf\uff0c\u56e0\u4e3a\u5728 IR \u4e2d\u4fdd\u7559\u4e86\u5faa\u73af\u3002</p> </li> </ol> </li> </ol> <p>\u4eff\u5c04\u65b9\u8a00\u7684\u7ecf\u9a8c\u8868\u660e\u5b83\u5bf9\u5f88\u591a\u4ee3\u7801\u751f\u6210\u9879\u76ee\u5f88\u6709\u7528\uff0c\u5b83\u7684\u5f00\u53d1\u662f MLIR \u8bbe\u8ba1\u5b9e\u7528\u5316\u7684\u91cd\u8981\u63a2\u7d22\u3002</p>"},{"location":"mlc/mlir.html#53-fortran-ir-fir","title":"5.3. Fortran IR (FIR)","text":"<p>\u7531NVIDIA/PGI \u4e3b\u5bfc\u7684LLVM \u524d\u7aef\"flang\" \u6b63\u5728\u79ef\u6781\u5f00\u53d1\u4e2d\u3002\u548cswift, rust \u53ca\u5176\u4ed6\u8bed\u8a00\u7c7b\u4f3c\uff0cflang \u9700\u8981\u7279\u6b8a\u7684IR \u6765\u652f\u6301 \u9ad8\u6027\u80fd\u7684 fortrance codebse \u7684\u8f6c\u6362\u3002flang \u4f7f\u7528MLIR\u6765\u652f\u6301Fortran\u7279\u5b9a\u7684\u4f18\u5316\u3002\u8fd9\u4e9b\u9ad8\u7ea7\u4f18\u5316\u2014\u2014\u9ad8\u7ea7\u5faa\u73af\u4f18\u5316\uff0c\u6570\u7ec4\u62f7\u8d1d\u6d88\u9664\uff0c\u8c03\u7528\u89c4\u8303\uff0cdevirtualization\u2014\u2014\u5982\u679c\u53ea\u662f\u7528LLVM \u6765\u5b9e\u73b0\u5efa\u6a21\u662f\u975e\u5e38\u590d\u6742\u7684\u3002</p> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff0cFIR \u53ef\u4ee5\u5bf9fortran \u7684\u865a\u62df\u6d3e\u53d1\u8868(virtual dispatch table)\u5efa\u6a21\u6210\u4e00\u7b49\u6982\u5ff5\u3002</p> <p>\u5728\u7ed3\u6784\u5316\u7684IR \u4e2d\u5efa\u6a21\u8bed\u8a00\u7684\u9ad8\u7ea7\u8bed\u4e49\u7684\u80fd\u529b\u975e\u5e38\u5f3a\u5927\u5982\uff0c\u5c06\u5206\u6d3e\u8868(dispatcher table)\u5efa\u6a21\u6210\u4e00\u7b49\u516c\u6c11\u8bed\u5e8f\u662f\u5b9e\u73b0\u4e00\u4e2a\u9c81\u68d2\u7684 devirtualization pass\u3002\u5c3d\u7ba1\u8fd9\u4e5f\u53ef\u7528\u901a\u8fc7\u5b9a\u5236\u7684\u7f16\u8bd1\u5668 IR \u6765\u5b9e\u73b0\uff0cMLIR \u7684\u4f7f\u7528\u4f7f\u5f97 flang \u7684\u5f00\u53d1\u8005\u53ef\u4ee5\u5c06\u4ed6\u4eec\u7684\u5de5\u7a0b\u8d44\u6e90\u805a\u7126\u5728\u8bbe\u8ba1\u4ed6\u4eec\u7684\u9886\u57df IR \u7684\u8868\u793a\uff0c\u800c\u4e0d\u662f\u5b9e\u73b0\u57fa\u672c\u7684\u57fa\u7840\u67b6\u6784\u3002</p> <p>\u9009\u62e9 MLIR \u4e5f\u89e3\u9501\u4e86\u590d\u7528\u975e Fortron \u72ec\u6709\u7684\u65b9\u8a00\u7684\u80fd\u529b: \u8bed\u8a00\u65e0\u5173\u7684OpenMP \u65b9\u8a00\u53ef\u4ee5\u5728Fortron \u548c C \u7684\u8bed\u8a00\u524d\u7aef\u4e4b\u95f4\u5171\u4eab\u3002\u76f8\u4f3c\u7684\uff0c\u57fa\u4e8eMLIR\u901a\u8fc7\u5171\u4eab\u548c\u590d\u7528\u9762\u5411 GPU \u7684\u65b9\u8a00\u548c pass \u4f7f\u5f97\u91c7\u7528 OpanACC \u7684\u5f02\u6784 target \u53d8\u5f97\u5bb9\u6613\u3002 MLIR \u4ece\u8bbe\u8ba1\u4e4b\u5904\u5c31\u652f\u6301\u53ef\u7ec4\u5408\u7684\u65b9\u8a00\u7684\u6df7\u5408\u4f7f\u5f97\u8fd9\u79cd\u80fd\u529b\u975e\u5e38\u76f4\u63a5\u3002</p>"},{"location":"mlc/mlir.html#54-domain-specific-compilers","title":"5.4. Domain-specific compilers","text":"<p>\u4e0a\u8ff0 MLIR \u7684\u5e94\u7528\u5728\u5927\u578b\u7f16\u8bd1\u5de5\u4f5c\u6d41\u7a0b\u4e2d\uff0c\u4f46\u5b83\u4e5f\u7528\u4e8e\u4e3a\u7279\u5b9a\u7684\u5c0f\u578b\u5de5\u4f5c\u6d41\u7a0b\u6784\u5efa\u9886\u57df\u7279\u5b9a\u7684\u7f16\u8bd1\u5668\u3002 \u53ef\u91cd\u7528\u548c\u6a21\u5757\u5316\u7684\u57fa\u7840\u8bbe\u65bd\u4f7f\u8fd9\u4e9b\u4e13\u7528\u8def\u5f84\u53d8\u5f97\u53ef\u884c\u5e76\u4e14\u6784\u5efa\u8d77\u6765\u76f8\u5bf9\u4fbf\u5b9c\u3002</p> <p>\u4f18\u5316 MLIR \u6a21\u5f0f\u91cd\u5199:</p> <p>MLIR \u6709\u4e00\u4e2a\u53ef\u6269\u5c55\u7684\u6a21\u5f0f\u91cd\u5199\u7cfb\u7edf\uff0c\u5728\u7b2c 4 \u8282\u4e2d\u63cf\u8ff0\u3002\u9664\u4e86\u9759\u6001\u58f0\u660e\u7684\u6a21\u5f0f\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u62e5\u6709\u9700\u8981\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u6269\u5c55\u91cd\u5199\u6a21\u5f0f\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5141\u8bb8\u786c\u4ef6\u4f9b\u5e94\u5546\u5728\u9a71\u52a8\u7a0b\u5e8f\u4e2d\u6dfb\u52a0\u65b0\u7684\u964d\u4f4e . \u89e3\u51b3\u65b9\u6848\u662f\u5c06 MLIR \u6a21\u5f0f\u91cd\u5199\u8868\u8fbe\u4e3a MLIR \u65b9\u8a00\u672c\u8eab\uff0c\u4f7f\u6211\u4eec\u80fd\u591f\u4f7f\u7528 MLIR \u57fa\u7840\u8bbe\u65bd\u6765\u52a8\u6001\u6784\u5efa\u548c\u4f18\u5316\u9ad8\u6548\u7684\u6709\u9650\u72b6\u6001\u673a (FSM) \u5339\u914d\u5668\u548c\u91cd\u5199\u5668\u3002 \u8fd9\u9879\u5de5\u4f5c\u5305\u62ec\u5728\u5176\u4ed6\u7cfb\u7edf\u4e2d\u770b\u5230\u7684 FSM \u4f18\u5316\uff0c\u4f8b\u5982 LLVM SelectionDAG \u548c GlobalISel \u6307\u4ee4\u9009\u62e9\u7cfb\u7edf\u3002</p> <p>Lattice regression compiler:</p> <p>\u683c\u56de\u5f52\u7f16\u8bd1\u5668\u683c\u56de\u5f52 [18] \u662f\u4e00\u79cd\u4ee5\u5feb\u901f\u8bc4\u4f30\u65f6\u95f4\u548c\u53ef\u89e3\u91ca\u6027\u800c\u95fb\u540d\u7684\u673a\u5668\u5b66\u4e60\u6280\u672f\u3002 \u7f16\u8bd1\u5668\u7684\u524d\u8eab\u662f\u4f7f\u7528 C++ \u6a21\u677f\u5b9e\u73b0\u7684\u3002 \u8fd9\u5141\u8bb8\u4f7f\u7528\u5143\u7f16\u7a0b\u7f16\u5199\u9ad8\u6027\u80fd\u4ee3\u7801\uff0c\u4f46\u5728\u7aef\u5230\u7aef\u6a21\u578b\u4e0a\u8868\u8fbe\u4e00\u822c\u4f18\u5316\u5e76\u4e0d\u7b80\u5355\u3002 \u8fd9\u79cd\u7279\u6b8a\u7684\u683c\u56de\u5f52\u7cfb\u7edf\u7528\u4e8e\u5177\u6709\u6570\u767e\u4e07\u7528\u6237\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u56e0\u6b64\u6027\u80fd\u6539\u8fdb\u81f3\u5173\u91cd\u8981\u3002</p> <p>MLIR \u88ab\u7528\u4f5c\u8fd9\u4e2a\u4e13\u95e8\u9886\u57df\u7684\u65b0\u7f16\u8bd1\u5668\u7684\u57fa\u7840\uff0c\u5b83\u7531\u4e13\u95e8\u7684\u641c\u7d22\u65b9\u6cd5\u9a71\u52a8\u2014\u2014\u6709\u6548\u5730\u5bfc\u81f4\u5728\u7f16\u8bd1\u671f\u95f4\u89e3\u51b3\u673a\u5668\u5b66\u4e60\u95ee\u9898\u3002 \u6700\u7ec8\u7684\u7f16\u8bd1\u5668\u662f\u901a\u8fc7\u6295\u5165 3 \u4e2a\u4eba\u6708\u7684\u52aa\u529b\u5f00\u53d1\u7684\uff0c\u5728\u751f\u4ea7\u6a21\u578b\u4e0a\u5b9e\u73b0\u4e86\u9ad8\u8fbe 8 \u500d\u7684\u6027\u80fd\u63d0\u5347\uff0c\u540c\u65f6\u8fd8\u63d0\u9ad8\u4e86\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u7684\u900f\u660e\u5ea6\u3002</p>"},{"location":"mlc/mlir.html#6-consequences-of-the-mlir-design","title":"6. Consequences of the MLIR Design","text":"<p>MLIR\u8bbe\u8ba1\u6709\u52a9\u4e8e\u5bf9\u65b0\u8bed\u8a00\u548c\u7f16\u8bd1\u62bd\u8c61\u8fdb\u884c\u5efa\u6a21\uff0c\u540c\u65f6\u6709\u52a9\u4e8e\u91cd\u7528\u73b0\u6709\u7684\u3001\u901a\u7528\u7684\u76f8\u5173\u7f16\u8bd1\u65b9\u6cd5\u3002MLIR\u5bf9\u5f88\u591a\u95ee\u9898\u7684\u6709\u6548\u89e3\u51b3\u65b9\u6cd5\u662f \"add new ops, new types\"\uff0c \u5982\u679c\u53ef\u80fd\uff0c\u5c06\u5176\u6536\u96c6\u5230 \"a new dialect\" \u4e2d\u3002\u5bf9\u4e8e\u7f16\u8bd1\u5668\u5de5\u7a0b\u800c\u8a00\uff0c\u8fd9\u662f\u91cd\u5927\u7684\u8bbe\u8ba1\u8f6c\u53d8\uff0c\u4ea7\u751f\u4e86\u65b0\u7684\u673a\u9047\uff0c\u6311\u6218\u548c\u89c1\u89e3\u3002\u672c\u8282\u5c06\u63a2\u8ba8\u5176\u4e2d\u90e8\u5206\u89c2\u70b9\u3002</p>"},{"location":"mlc/mlir.html#61-reusable-compiler-passes","title":"6.1. Reusable Compiler Passes","text":"<p>\u5982\u679c\u4e00\u79cd IR \u6709\u8868\u793a\u591a\u4e2a\u62bd\u8c61\u7ea7\u522b\u7684\u80fd\u529b\uff0c\u90a3\u4e48\u4f1a\u81ea\u7136\u800c\u7136\u5730\u5e26\u6765\u4e00\u4e2a\u9700\u6c42\uff0c\u5373\uff0c\u7f16\u5199\u53ef\u5728\u591a\u4e2a\u62bd\u8c61\u7ea7\u522b\u5de5\u4f5c\u7684 pass \u3002\u5173\u4e8e MLIR \u7684\u4e00\u4e2a\u5e38\u89c1\u95ee\u9898\u662f\uff0c\u65e2\u7136 MLIR \u5177\u6709\u53ef\u6269\u5c55\u7684\u64cd\u4f5c\u548c\u7c7b\u578b\u7cfb\u7edf\uff0c\u90a3\u4e48\u5982\u4f55\u7f16\u5199\u7f16\u8bd1\u5668 pass \uff1f\u867d\u7136\u7f16\u8bd1\u5668 pass \u53ef\u80fd\u603b\u662f\u4ee5\u4fdd\u5b88\u3001\u6b63\u786e\u7684\u65b9\u5f0f\u5904\u7406\u672a\u77e5\u7ed3\u6784\uff0c\u4f46MLIR\u7684\u76ee\u6807\u662f\u751f\u6210\u9ad8\u6027\u80fd\u4ee3\u7801\uff0c\u4e3b\u8981\u6709\u56db\u79cd\u65b9\u6cd5\uff1a</p> <ol> <li> <p>Fundamental operation traits</p> <p>\u4e00\u4e9b \"bread and butter\" \u7f16\u8bd1\u5668 pass\uff08\u5982 \u6b7b\u4ee3\u7801\u6d88\u9664 \u548c \u516c\u5171\u5b50\u8868\u8fbe\u5f0f\u6d88\u9664 \uff09\u4f9d\u8d56\u4e8e\u5b9a\u4e49\u4e3a Op \u7279\u5f81\u7684\u7b80\u5355\u5c5e\u6027\uff08\u4f8b\u5982 \"has no side effect\" \u6216 \"is commutative\" \uff09\u3002ODS \u4e2d\u64cd\u4f5c\u7684\u5b9a\u4e49\u5141\u8bb8\u64cd\u4f5c\u7684\u5f00\u53d1\u8005\u6307\u5b9a\u8fd9\u4e9b\u7279\u5f81\uff0c\u5e76\u4e14 pass \u53ef\u4ee5\u4f7f\u7528\u6b64\u4fe1\u606f\u6765\u4fdd\u6301\u64cd\u4f5c\u5728\u8bb8\u591a\u4e0d\u540c\u62bd\u8c61\u57df\u90fd\u9002\u7528\u3002</p> <p>MLIR \u7684\u53ef\u6269\u5c55\u6027\u4f53\u73b0\u4e3a\u67d0\u4e9b\u7ed3\u6784\u5c5e\u6027\uff0c\u5176\u4e2d\u5305\u62ec\u4e0b\u8ff0\u4fe1\u606f\uff1a\u662f\u5426\u77e5\u9053\u67d0\u4e2a\u64cd\u4f5c\u662f\u63a7\u5236\u6d41\u7ec8\u6b62\u7b26\uff0c\u662f\u5426\u77e5\u9053\u67d0\u4e2a\u64cd\u4f5c\u5305\u542b\u7684\u533a\u57df\u662f isolated-from-above \u7b49\u7b49\u3002\u8fd9\u4e9b\u4fe1\u606f\u53ef\u7528\u4e8e\u51fd\u6570\u3001\u95ed\u5305\u3001\u6a21\u5757\u548c\u5176\u4ed6\u4ee3\u7801\u7ed3\u6784\u7684\u5efa\u6a21\u548c\u5904\u7406\u3002</p> </li> <li> <p>Privileged operation hooks</p> <p>While certain traits can be modeled with a single bit\uff0c \u4f46\u662f\u5176\u5b83\u5f88\u591a traits \u5219\u9700\u8981 C++ \u5b9e\u73b0\uff0c\u4f8b\u5982\u5e38\u91cf\u6298\u53e0\u903b\u8f91\u3002 MLIR \u5bf9\u9002\u7528\u4e8e\u5927\u91cfpass\u7684\u67d0\u4e9b hook \u63d0\u4f9b\u4e86\u6700\u597d\u7684\u652f\u6301\u3002\u8fd9\u4e9b hook \u53ef\u4ee5\u88ab\u5b9e\u73b0\u4e3a pre-operation \uff0c\u4e5f\u53ef\u4ee5\u5728 dialect \u5bf9\u8c61\u4e2d\u5b9e\u73b0\u3002\u540e\u4e00\u79cd\u65b9\u6cd5\u5bf9\u652f\u6301\u8bf8\u5982 TensorFlow ops \u7684\u5e38\u91cf\u6298\u53e0\u4e4b\u7c7b pass \u5f88\u65b9\u4fbf\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5f88\u5bb9\u6613\u5b9e\u73b0\u5bf9\u73b0\u6709\u903b\u8f91\u7684\u59d4\u6258\u3002</p> <p>\u5c3d\u7ba1\u5e38\u91cf\u6298\u53e0\u662f\u975e\u5e38\u91cd\u8981\u7684\u529f\u80fd\uff0c \u4f46\u66f4\u6709\u610f\u601d\u7684 hook \u662f <code>getCanonicalizationPatterns</code> \uff0c\u8fd9\u4e2a hook \u5141\u8bb8\u6307\u5b9a\u5e94\u7528\u4e8e\u64cd\u4f5c\u7684\u6298\u53e0\u6a21\u5f0f\u3002\u8fd9\u4f7f\u5f97\u91cd\u8981\u7684\u4ee3\u6570\u7b80\u5316\u5f62\u5f0f\uff08\u4f8b\u5982x \u2212 x\u21920\uff0cmin\uff08x\uff0cy\uff0cy\uff09\u2192min\uff08x\uff0cy\uff09\u7b49\uff09\u5177\u6709\u53ef\u6269\u5c55\u6027\uff0c\u5e76\u53ef\u5e2e\u52a9\u5c06\u666e\u901a\u201c\u89c4\u8303\u5316\uff08Canonicalization\uff09\u201dpass\u5e94\u7528\u5230\u6240\u6709dialect \u3002\u8fd9\u4e9b\u90fd\u4f7f\u5f97\u5355\u4e00\u7684\u53ef\u6269\u5c55\u7cfb\u7edf\u53ef\u4ee5\u5305\u542b\u50cf \"InstCombine\"\u3001 \"DAGCombine\"\u3001 \"PeepholeOptimizer\"\u3001 \"SILCombine\" \u8fd9\u7c7bpass\uff0c \u4ee5\u53ca LLVM \u751f\u6001\u7cfb\u7edf\uff08\u548c\u5176\u5b83\u7f16\u8bd1\u5668\uff09\u4e2d\u7684\u5176\u5b83\u7279\u6b8a\u7528\u9014 pass \u3002</p> </li> <li> <p>Optimization interfaces     MLIR \u7684\u4e3b\u8981\u76ee\u6807\u662f\u53ef\u6269\u5c55\u6027\uff0c\u4e0d\u4ec5\u5728\u64cd\u4f5c\u548c\u7c7b\u578b\u65b9\u9762\uff0c\u800c\u4e14\u5728\u8f6c\u6362\u65b9\u9762\u4e5f\u8981\u6709\u53ef\u6269\u5c55\u6027\u3002\u867d\u7136\u89c4\u8303\u5316\uff08canonicalization\uff09\u548c\u5e38\u91cf\u6298\u53e0\u662f\u5173\u952e\u64cd\u4f5c\uff0c\u4f46\u4ecd\u9700\u8981\u4ee5\u67d0\u4e9b\u65b9\u5f0f\u5bf9\u8bb8\u591a\u6807\u51c6\u8f6c\u6362\u8fdb\u884c\u53c2\u6570\u5316\u8bbe\u7f6e\uff0c\u624d\u80fd\u63cf\u8ff0\u8f6c\u6362\u7684\u7279\u5b9a\u5c5e\u6027\uff0c\u624d\u80fd\u5b9e\u73b0\u6210\u672c\u6a21\u578b\u7b49\u3002</p> <p>\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u662f\u79f0\u4e3a \"\u4f18\u5316\u63a5\u53e3\" \u7684\u5b50\u7cfb\u7edf\u3002\u8003\u8651\u4e00\u4e0b MLIR \u5185\u8054 pass \uff0c \u6211\u4eec\u5e0c\u671b inliner \u53ef\u4ee5\u5904\u7406 TensorFlow \u56fe\u3001Flang\u51fd\u6570\u3001\u51fd\u6570\u8bed\u8a00\u7684\u95ed\u5305\u7b49\uff0c\u4f46\u662finliner\u4e0d\u77e5\u9053\u8c03\u7528\u65b9\u662f\u4ec0\u4e48\uff0c\u751a\u81f3\u4e0d\u77e5\u9053\u88ab\u8c03\u7528\u65b9\u662f\u4ec0\u4e48\u3002inliner\u9700\u8981\u4e86\u89e3\u7684\u6838\u5fc3\u7279\u6027\u662f\uff1a</p> <ul> <li>\u5c06\u64cd\u4f5c\u5185\u8054\u5230\u7ed9\u5b9a\u533a\u57df\u662f\u5426\u6709\u6548\uff1b</li> <li>\u5982\u4f55\u5904\u7406\u5185\u8054\u540e\u7ec8\u6b62\u4e8e\u5757\u4e2d\u95f4\u7684\u7ec8\u6b62\u7b26\u64cd\u4f5c\u3002</li> </ul> <p>\u4e3a\u4e86\u4e86\u89e3\u8fd9\u4e9b\u5c5e\u6027\uff0cInliner pass \u5b9a\u4e49\u4e86 \u56fe10 \u4e2d\u7684\u63a5\u53e3\u3002\u5404\u4e2a\u64cd\u4f5c\u548c dialect \u53ef\u4ee5\u5411 MLIR \u6ce8\u518c\u8be5\u63a5\u53e3\u5728\u64cd\u4f5c\u548c dialect \u4e2d\u7684\u5b9e\u73b0\uff0c\u5e76\u4ece\u901a\u7528 Innerer pass \u4e2d\u83b7\u76ca\u3002\u5982\u679c\u67d0\u4e2a\u64cd\u4f5c\u6216 dialect \u65e0\u6cd5\u63d0\u4f9b\u63a5\u53e3\uff0c\u5219\u76f8\u5e94\u7684\u4f18\u5316 pass \u5c06\u4f1a\u4fdd\u5b88\u5730\u5bf9\u5f85\u8be5\u64cd\u4f5c\u3002\u8fd9\u79cd\u8bbe\u8ba1\u8ba9 dialect \u7684\u5f00\u53d1\u8005\u80fd\u5feb\u901f\u542f\u52a8\u5f00\u53d1\u5e76\u8fd0\u884c dialect \u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u901a\u8fc7\u5c06\u66f4\u591a\u7684\u7cbe\u529b\u6295\u5165\u63a5\u53e3\u5f00\u53d1\uff0c\u53ef\u4ee5\u4ece\u7cfb\u7edf\u4e2d\u83b7\u5f97\u66f4\u591a\u6536\u76ca\u3002</p> <p></p> </li> <li> <p>Dialect\u7279\u5b9apass</p> <p>\u6700\u540e\uff0c\u5b9a\u4e49\u7279\u5b9adialect\u53ef\u4ee5\u5b9a\u4e49\u4e13\u7528pass\uff0cMLIR\u7cfb\u7edf\u4e2d\u7684\u8fd9\u4e9bpass\u548c\u5728\u5176\u5b83\u7f16\u8bd1\u5668\u7cfb\u7edf\u4e2d\u7684pass\u4e00\u6837\u90fd\u5f88\u6709\u7528\u3002\u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u60f3\u8ba9\u4ee3\u7801\u751f\u6210\u5668\u6839\u636e\u7279\u5b9a\u7684\u673a\u5668\u7ea6\u675f\u5bf9\u673a\u5668\u6307\u4ee4\u8fdb\u884c\u81ea\u5b9a\u4e49\u8c03\u5ea6\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e13\u7528pass\u8fbe\u5230\u76ee\u7684\u3002\u8fd9\u53ef\u5f53\u4f5c\u5f00\u53d1\u65b0\u8f6c\u6362pass\u7684\u8d77\u70b9\uff0c\u4e0d\u9700\u8981\u8003\u8651pass\u7684\u901a\u7528\u6027\u3002</p> </li> </ol>"},{"location":"mlc/mlir.html#62-mixing-dialects-together","title":"6.2. Mixing dialects together","text":"<p>MLIR \u4e2d\u4e00\u4e2a\u6700\u5173\u952e\uff08\u4e5f\u662f\u6700\u96be\u7406\u89e3\uff09\u7684\u90e8\u5206\u662f\u5141\u8bb8\u5e76\u9f13\u52b1\u5c06\u6765\u81ea\u4e0d\u540c dialect \u7684\u64cd\u4f5c\u6df7\u5408\u5728\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u3002\u5c3d\u7ba1\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff08\u4f8b\u5982\uff0c\u5c06\u4e3b\u673a\u548c\u52a0\u901f\u5668\u8ba1\u7b97\u4fdd\u5b58\u5728\u540c\u4e00\u6a21\u5757\u4e2d\uff09\uff0c\u8fd9\u6837\u505a\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u4f46\u6700\u6709\u8da3\u7684\u60c5\u51b5\u662f\uff0c\u5728 MLIR \u4e2d\u53ef\u4ee5\u5c06 dialect \u76f4\u63a5\u6df7\u5408\uff08\u56e0\u4e3a\u8fd9\u6837\u53ef\u4ee5\u5b9e\u73b0\u6574\u4e2a\u7c7b\u7684\u91cd\u7528\uff09\uff0c\u8fd9\u5728\u5176\u5b83\u7cfb\u7edf\u4e2d\u662f\u89c1\u4e0d\u5230\u7684\u3002</p> <p>\u8003\u8651\u7b2c 5.2 \u8282\u4e2d\u63cf\u8ff0\u7684 <code>affine dialect</code>\u3002 \u4eff\u5c04\u63a7\u5236\u6d41\u548c\u4eff\u5c04\u6620\u5c04\u7684\u5b9a\u4e49\u4e0e\u4eff\u5c04\u533a\u57df\u4e2d\u5305\u542b\u7684\u64cd\u4f5c\u7684\u8bed\u4e49\u65e0\u5173\u3002\u5728\u6211\u4eec\u7684\u6848\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06 <code>affine dialect</code> \u4e0e <code>std dialect</code> \u7ed3\u5408\u8d77\u6765\uff0c\u4ee5\u76ee\u6807\u65e0\u5173\u7684\u5f62\u5f0f\uff08\u5982\u540cLLVM IR\uff09\u8868\u793a\u7b80\u5355\u7b97\u672f\uff0c\u4e5f\u53ef\u4ee5\u9488\u5bf9\u5185\u90e8\u52a0\u901f\u5668\uff0c\u5c06 <code>affine dialect</code> \u4e0e\u591a\u4e2a\u76ee\u6807\u76f8\u5173\u673a\u5668\u6307\u4ee4 dialect \u7ed3\u5408\u3002\u4e5f\u6709\u4eba\u5c06 <code>affine dialect</code> \u4e0e\u5176\u5b83\u95ee\u9898\u9886\u57df\u7684\u62bd\u8c61\u76f8\u7ed3\u5408\u3002</p> <p>\u91cd\u7528\u901a\u7528\u591a\u9762\u4f53\u8f6c\u6362\uff08\u4f7f\u7528Op\u63a5\u53e3\u83b7\u53d6\u7279\u5b9a\u8f6c\u6362\u4e2d\u64cd\u4f5c\u7684\u8bed\u4e49\uff09\u7684\u80fd\u529b\u662f\u5206\u89e3\u7f16\u8bd1\u5668\u57fa\u7840\u7ed3\u6784\u7684\u4e00\u79cd\u6709\u529b\u65b9\u6cd5\u3002\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f\uff0c\u53ef\u4ee5\u5728\u5404\u79cd\u6e90\u8bed\u8a00IR\u4e2d\u4f7f\u7528\u548c\u91cd\u7528 <code>OpenMP dialect</code> \u3002</p>"},{"location":"mlc/mlir.html#63-interoperability","title":"6.3. Interoperability","text":"<p>\u672c\u6587\u7684\u5de5\u4f5c\u6d89\u53ca\u4e0e\u5927\u91cf\u73b0\u6709\u7cfb\u7edf\u7684\u4e92\u64cd\u4f5c\uff0c\u4f8b\u5982\uff0cprotobuff\u683c\u5f0f\u7684\u673a\u5668\u5b66\u4e60\u56fe\u3001\u5305\u62ecLLVM IR\u5728\u5185\u7684\u7f16\u8bd1\u5668IR\u3001\u5404\u79cd\u4e13\u6709\u6307\u4ee4\u96c6\u7b49\u3002\u4efb\u4f55\u4e00\u79cd\u8868\u793a\u5f62\u5f0f\u4e0d\u53ef\u907f\u514d\u90fd\u6709\u5404\u79cd\u7f3a\u9677\uff0c\u867d\u7136\u8fd9\u4e9b\u7f3a\u9677\u5728\u67d0\u4e2a\u73b0\u6709\u7cfb\u7edf\u7684\u9002\u7528\u573a\u666f\u4e0b\u662f\u5408\u7406\u7684\uff0c\u4f46\u662fMLIR\u7684\u8868\u8fbe\u80fd\u529b\u4f7fMLIR\u6210\u4e3a\u4e00\u79cd\u66f4\u597d\u7684\u8868\u793a\u5f62\u5f0f\u3002\u56e0\u4e3aimporter\u548cexporters\u7684\u6d4b\u8bd5\u96be\u5ea6\u5f88\u5927\uff08\u6d4b\u8bd5\u7528\u4f8b\u901a\u5e38\u662f\u4e8c\u8fdb\u5236\u683c\u5f0f\uff09\uff0c\u56e0\u6b64\u6211\u4eec\u5e0c\u671b\u786e\u4fdd\u5176\u590d\u6742\u6027\u6700\u4f4e\u3002</p> <p>\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5c3d\u53ef\u80fd\u5b9a\u4e49\u4e0e\u5916\u90e8\u7cfb\u7edf\u76f4\u63a5\u76f8\u5bf9\u5e94\u7684dialect\uff0c\u4ece\u800c\u80fd\u4ee5\u4e00\u79cd\u7b80\u5355\u4e14\u53ef\u9884\u6d4b\u7684\u65b9\u5f0f\u6765\u56de\u8f6c\u6362\u8be5\u683c\u5f0f\u3002\u4e00\u65e6\u5c06IR\u5bfc\u5165MLIR\u683c\u5f0f\u4e2d\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528MLIR\u57fa\u7840\u7ed3\u6784\u4e2d\u6240\u6709\u8f6c\u6362\uff0c\u5c06\u5bfc\u5165\u7684IR\u5347\u7ea7\u6216\u964d\u7ea7\u4e3a\u67d0\u79cd\u66f4\u9002\u5408\u7684IR\u683c\u5f0f\uff0c\u5e76\u5141\u8bb8\u5bf9\u8fd9\u4e9b\u8f6c\u6362pass\u8fdb\u884c\u7c7b\u4f3c\u4e8e\u6240\u6709\u5176\u5b83MLIR pass\u7684\u6d4b\u8bd5\u3002</p> <p>\u8fd9\u7c7bdialect\u7684\u4f8b\u5b50\u5f88\u591a\uff0c\u5305\u62ec\uff1aa\uff09LLVM dialect\uff0c\u53ef\u5c06LLVM IR\u6620\u5c04\u4e3aMLIR\uff1b b\uff09TensorFlow\u7684\u56fe\u8868\u793a\u5f62\u5f0f\uff0c\u63d0\u51fa\u8fd9\u79cd\u8868\u793a\u662f\u4e3a\u4e86\u7b80\u5316TensorFlow\u4e2d\u201c\u5207\u6362\u548c\u5408\u5e76\uff08switch and merge\uff09\u201d\u8282\u70b9\u76f8\u5173\u7684\u5206\u6790\u548c\u8f6c\u6362\uff1bc \uff09\u51fd\u6570\u5f0f\u63a7\u5236\u6d41\u8fd0\u7b97\u7b26\u3002\u201cfunctional while\u201d\u548c\u201cfunctional if\u201d\u5728\u673a\u5668\u5b66\u4e60\u56fe\u4e2d\u5f88\u5e38\u89c1\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c06\u5176\u4ee3\u7801\u4e3b\u4f53\u4f5c\u4e3a\u533a\u57df\u800c\u4e0d\u662f\u5916\u8054\uff08out-of-line\uff09\u51fd\u6570\u66f4\u65b9\u4fbf\u3002</p> <p>\u8fd9\u79cd\u65b9\u6cd5\u5bf9\u6211\u4eec\u6765\u8bf4\u6548\u679c\u5f88\u597d\uff0c\u5e76\u4e14MLIR\u5de5\u5177\u5bf9\u4e8e\u7f16\u5199\u5916\u6765\u4e8c\u8fdb\u5236\u6587\u4ef6\u683c\u5f0f\u7684\u6d4b\u8bd5\u7528\u4f8b\u4e5f\u5f88\u6709\u7528\u3002</p>"},{"location":"mlc/mlir.html#64-unopinionated-design-provides-new-challenges","title":"6.4. Unopinionated design provides new challenges","text":"<p>\u867d\u7136 MLIR \u5141\u8bb8\u4eba\u4eec\u5b9a\u4e49\u51e0\u4e4e\u4efb\u610f\u7684\u62bd\u8c61\uff0c\u4f46\u5b83\u5bf9\u5e94\u8be5\u505a\u4ec0\u4e48\u63d0\u4f9b\u7684\u6307\u5bfc\u5f88\u5c11\uff1a\u5728\u5b9e\u8df5\u4e2d\u4ec0\u4e48\u66f4\u597d\u6216\u66f4\u5dee\uff1f \u6211\u4eec\u6709\u4e00\u4e9b\u5de5\u7a0b\u5e08\u548c\u7814\u7a76\u4eba\u5458\u5c06\u6280\u672f\u5e94\u7528\u4e8e\u65b0\u95ee\u9898\u9886\u57df\u7684\u7ecf\u9a8c\uff0c\u5e76\u4e14\u5df2\u7ecf\u610f\u8bc6\u5230\u7f16\u8bd1\u5668 IR \u8bbe\u8ba1\u548c\u62bd\u8c61\u8bbe\u8ba1\u7684 \u201c\u827a\u672f\u201d \u5728\u7f16\u8bd1\u5668\u548c\u8bed\u8a00\u9886\u57df\u5e76\u6ca1\u6709\u5f97\u5230\u5f88\u597d\u7684\u7406\u89e3 \u2014\u2014 \u5f88\u591a\u4eba \u5728\u65e2\u5b9a\u7cfb\u7edf\u7684\u7ea6\u675f\u4e0b\u5de5\u4f5c\uff0c\u4f46\u76f8\u5bf9\u8f83\u5c11\u7684\u4eba\u6709\u673a\u4f1a\u81ea\u5df1\u5b9a\u4e49\u62bd\u8c61\u3002</p> <p>\u8fd9\u662f\u4e00\u4e2a\u6311\u6218\uff0c\u4f46\u4e5f\u662f\u672a\u6765\u7814\u7a76\u7684\u53e6\u4e00\u7ec4\u673a\u4f1a\u3002 \u66f4\u5e7f\u6cdb\u7684 MLIR \u793e\u533a\u6b63\u5728\u901a\u8fc7\u8fd9\u4e9b\u62bd\u8c61\u8bbe\u8ba1\u6743\u8861\u5efa\u7acb\u5927\u91cf\u7684\u4e13\u4e1a\u77e5\u8bc6\uff0c\u6211\u4eec\u9884\u8ba1\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u8fd9\u5c06\u6210\u4e3a\u4e00\u4e2a\u4e30\u5bcc\u7684\u7814\u7a76\u9886\u57df\u3002</p>"},{"location":"mlc/mlir.html#65-looking-forward","title":"6.5. Looking forward","text":"<p>MLIR \u7684\u8bbe\u8ba1\u4e0e\u6211\u4eec\u4ecd\u5728\u5b66\u4e60\u7684\u5176\u4ed6\u7f16\u8bd1\u5668\u57fa\u7840\u67b6\u6784\u6709\u5f88\u5927\u4e0d\u540c\u2014\u2014\u5373\u4f7f\u5728\u6784\u5efa\u5b83\u5e76\u5c06\u5176\u5e94\u7528\u4e8e\u8bb8\u591a\u4e0d\u540c\u7684\u7cfb\u7edf\u4e4b\u540e\u4e5f\u662f\u5982\u6b64\u3002 \u6211\u4eec\u76f8\u4fe1\u8fd8\u6709\u5f88\u591a\u4e1c\u897f\u6709\u5f85\u53d1\u73b0\uff0c\u8fd8\u9700\u8981\u51e0\u5e74\u7684\u7814\u7a76\u624d\u80fd\u5b8c\u5168\u7406\u89e3\u8bbe\u8ba1\u8981\u70b9\u5e76\u5efa\u7acb\u6700\u4f73\u5b9e\u8df5\u3002 \u4f8b\u5982\uff0cout-of-tree \u65b9\u8a00\u7684\u5174\u8d77\uff0c\u4f7f\u7528 MLIR \u7684\u6e90\u8bed\u8a00\u524d\u7aef\u6570\u91cf\u7684\u589e\u52a0\uff0c\u5bf9\u62bd\u8c61\u8bed\u6cd5\u6811\u7684\u53ef\u80fd\u5e94\u7528\uff0c\u4ee5\u53ca\u5bf9\u7ed3\u6784\u5316\u6570\u636e\uff08\u5982 JSON\u3001protocol buffers \u7b49\uff09\u7684\u5e94\u7528\uff0c\u8fd9\u4e9b\u90fd\u8fd8\u5728\u8d77\u6b65\u9636\u6bb5\uff0c\u5e76\u4e14 \u6b63\u5728/\u53ef\u80fd \u4f1a\u53d1\u73b0\u6709\u8da3\u7684\u65b0\u6311\u6218\u548c\u673a\u9047\u3002</p>"},{"location":"mlc/mlir.html#7","title":"7. \u76f8\u5173\u5de5\u4f5c","text":"<p>MLIR \u662f\u4e00\u4e2a\u548c\u591a\u4e2a\u9886\u57df\u91cd\u53e0\u7684\u9879\u76ee\u3002\u5c3d\u7ba1\u628a\u6240\u6709\u7684\u8fd9\u4e9b\u57fa\u7840\u8bbe\u65bd\u7ec4\u5408\u5728\u4e00\u8d77\u65f6\u4e00\u4e2a\u8db3\u591f\u65b0\u9896\u7684\u7cfb\u7edf\uff0c\u8fd9\u4e9b\u7ec4\u4ef6\u672c\u8eab\u90fd\u53ef\u4ee5\u5728\u6587\u732e\u4e2d\u627e\u5230\u76f8\u4f3c\u70b9\u3002\u5173\u4e8eIR\u8bbe\u8ba1\u672c\u8eab\u7684\u53c2\u8003\u548c\u8ba8\u8bba\uff0c\u8bf7\u53c2\u8003\u7b2c\u4e8c\u5c0f\u8282\u3002</p> <p>MLIR \u548cLLVM \u7c7b\u4f3c\uff0c\u4f46\u662f\u548c LLVM \u81f4\u529b\u4e8e\u6807\u91cf\u4f18\u5316\u548c\u5f02\u6784\u7f16\u8bd1\u4e0d\u540c\uff0c MLIR \u65e8\u5728\u5bf9\u4f5c\u4e3a\u4e00\u7b49\u503c\u548c\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u5efa\u6a21\uff0c\u5305\u62ec\u5f20\u91cf\u4ee3\u6570\u548c\u7b97\u6cd5\uff0c\u56fe\u8868\u793a\u548c\u5f02\u6784\u7f16\u8bd1\u3002MLIR \u6df7\u642d(mix-and-match)\u4f18\u5316\u5c06\u7f16\u8bd1 pass \u89e3\u8026\u6210\u7ec4\u4ef6\uff0c\u91cd\u65b0\u5b9a\u4e49lowering\uff0ccleanup roles. \u8fd9\u4e3b\u8981\u5f52\u529f\u4e8e\u6a21\u5f0f\u91cd\u5199\u57fa\u7840\u8bbe\u65bd\uff0c\u6355\u83b7\u6210\u719f\u7684\u53d8\u6362\u5e76\u4f5c\u4e3a\u5c0f\u7684\u672c\u5730\u6a21\u5f0f\u7684\u7ec4\u5408\u5e76\u63a7\u5236\u6bcf\u4e2a\u72ec\u7acb\u7684\u7b97\u5b50\u4e0a\u5e94\u7528\u54ea\u4e2a\u6a21\u5f0f\u91cd\u5199\u3002\u5bf9\u91cd\u5199\u903b\u8f91\u7684\u81ea\u52a8\u6269\u5c55\uff0c\u5f62\u5f0f\u5316\u548c\u9a8c\u8bc1\u4f1a\u662f\u4e0b\u4e00\u6b65\u5de5\u4f5c\u7684\u91cd\u70b9\u3002\u4ece\u540e\u7aef\u6765\u770b\uff0cMLIR \u7684 DDR \u548cLLVM \u7684\u6307\u4ee4\u9009\u62e9\u903b\u8f91\u548c\u76f8\u4f3c\uff0c\u652f\u6301\u591a\u7ed3\u679c\u6a21\u5f0f\u548c\u89c4\u683c\u9650\u5236\u7684\u53ef\u6269\u5c55\u64cd\u4f5c\u3002</p> <p>\u8bb8\u591a\u7f16\u7a0b\u8bed\u8a00\u548c\u6a21\u578b\u65e8\u5728\u5728\u5904\u7406\u786c\u4ef6\u5f02\u8d28\u7279\u6027\u3002\u6700\u521d\uff0c OpenMP \u57fa\u4e8e\u65e9\u671f\u7684 StarS \u548c OpenACC \u706f\u65b9\u6848\uff0c\u63d0\u4f9b\u540c\u8d28\u7684\u7f16\u7a0b\u6a21\u578b\uff0c \u652f\u6301\u5c06\u4efb\u52a1\u548c\u5e76\u884c\u533a offload \u5230\u52a0\u901f\u5668\u3002C++ AMP\uff0cHCC \u548c SyCL \u5229\u7528\u4f20\u7edf\u7684Clang/LLVM flow \u548c\u73b0\u4ee3C++ \u63d0\u4f9b\u786c\u4ef6\u52a0\u901f\u7684\u9ad8\u7ea7\u62bd\u8c61\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6240\u6709\u7684\u8fd9\u4e9b\u4f8b\u5b50\u5f88\u5feb\u4ece\u9ad8\u7ea7\u6784\u9020\u53d8\u6210\u4f9d\u8d56\u5df2\u7ecf\u5b58\u5728\u7684\u5bbf\u4e3b\u8bed\u8a00\u4f18\u5316\u6765\u964d\u4f4e\u62bd\u8c61\u7684\u75db\u70b9\u7684\u8fd0\u884c\u65f6\u73af\u5883\u8c03\u7528\u3002\u5728\u5f02\u6784\u7f16\u8bd1\u8fc7\u7a0b\u672c\u8eab\u65b9\u9762\u7684\u5173\u6ce8\u5c31\u8981\u5c11\u5f97\u591a\u3002\u5e76\u884c\u4e2d\u95f4\u8868\u793a\u6269\u5c55\u4e86LLVM \u7684\u5730\u5740\u90e8\u5206\uff0c\u4f46\u662f\u91cd\u70b9\u5173\u6ce8\u5f02\u6784\u73af\u5883(settings)\u3002\u622a\u6b62\u5f53\u524d\u6700\u91ce\u5fc3\u52c3\u52c3\u7684\u9879\u76ee\u662f liquid metal, \u8be5\u9879\u76ee\u901a\u8fc7 DLS \u7684\u7f16\u8bd1\u6d41\u7a0b\u7684\u534f\u540c\u8bbe\u8ba1\u5c06\u6240\u7ba1\u7406\u7684\u5bf9\u8c61\u8bed\u4e49\u8f6c\u5316\u4e3a\u9759\u6001\u3001\u77e2\u91cf\u6216\u8005\u53ef\u914d\u7f6e\u7684\u786c\u4ef6\uff0c\u4f46\u662f\u5b83\u7684 Lime \u7f16\u8bd1\u5668\u7684\u5927\u91cf\u52aa\u529b\u90fd\u5728\u4e8e\u4f7f rond object \u9002\u914d square \u786c\u4ef6\u3002MLIR \u63d0\u4f9b\u53ef\u6269\u5c55\u7684\u64cd\u4f5c\u96c6\u5408\u548c\u7c7b\u578b\u62e5\u62b1\u5f02\u8d28\u7279\u6027\u7684\u9ad8\u7ea7\u8bed\u8a00\u5d4c\u5165\uff0c\u63d0\u4f9b\u516c\u5171\u7684\u57fa\u7840\u8bbe\u65bd\uff0c\u7528\u4e8e\u4ee5\u6700\u5927\u53ef\u80fd\u590d\u7528\u4e0d\u540c\u76ee\u6807\u7684\u516c\u5171\u7ec4\u4ef6\u7684\u7684\u65b9\u5f0f\uff0c\u9010\u6b65\u628a\u8fd9\u4e9b\u6784\u9020\u8fc7\u7a0b(constructs)\u9010\u6b65\u7684 lowering\u5230\u786c\u4ef6\u3002</p> <p>\u5904\u7406\u5f02\u8d28\u786c\u4ef6\u4e5f\u662f\u5143\u7f16\u7a0b\u7cfb\u7edf\u7684\u957f\u671f\u76ee\u6807\uff0c\u5c24\u5176\u662f\u591a\u9636\u6bb5\u7f16\u7a0b\u7cfb\u7edf\u3002LSM \u662f\u4e00\u4e2a SOTA \u7684\u6846\u67b6\u548c\u8fd0\u884c\u65f6\u4ee3\u7801\u751f\u6210\u5668\uff0c\u8be5\u7cfb\u7edf\u63d0\u4f9b\u4e86\u6838\u5fc3\u7ec4\u4ef6\u5e93\u7528\u4e8e\u751f\u6210\u6709\u6548\u7684\u4ee3\u7801\u548c\u548c\u57fa\u4e8escala \u7684\u5185\u5d4c DSL\u3002Delite \u652f\u6301\u5e76\u884c\u548c\u5f02\u6784\u6267\u884c\uff0c\u8fd9\u5927\u5e45\u63d0\u5347\u4e86DLS\u5f00\u53d1\u8005\u7684\u6548\u7387\u3002\u6211\u4eec\u76f8\u4fe1\u8fd9\u79cd\u901a\u8fc7\u63d0\u4f9b\u5d4c\u5165\u5f0fDSL \u7684\u9ad8\u7ea7\u62bd\u8c61\u5e76\u901a\u8fc7\u901a\u7528\u7684\u5143\u7f16\u7a0b\u6784\u9020\u5b9e\u73b0\u4f18\u5316\u7684\u65b9\u6848\u662fMLIR\u7684\u91cd\u8981\u8865\u5145\u3002</p> <p>\u66f4\u8fdb\u4e00\u6b65\u5230\u8bed\u8a00\u7684\u8bed\u6cd5\u5c42\u9762\uff0cANTLR \u662f\u4e00\u7cfb\u5217\u7684 parser \u751f\u6210\u5668\uff0c\u8fd9\u4e9b\u751f\u6210\u5668\u7b80\u5316\u4e86\u7f16\u8bd1\u5668\u524d\u7aef\u7684\u5f00\u53d1\u3002MLIR \u5f53\u524d\u4e0d\u5305\u542b\u901a\u7528\u7684 parser \u751f\u6210\uff0c\u4e0d\u5305\u542bAST \u6784\u9020\uff0c\u4e5f\u4e0d\u5305\u542b\u6a21\u578b\u529f\u80fd(modeling functionality). \u5c06MLIR\u548cANTLR\u4e4b\u7c7b\u7684\u5e93\u8fdb\u884c\u6574\u5408\u53ef\u4ee5\u6784\u5efa\u53ef\u590d\u7528\u7684\u4ece\u7528\u6237\u8f93\u5165\u5230\u4ee3\u7801\u751f\u6210\u7684\u53ef\u590d\u7528\u7684\u7f16\u8bd1\u5668\u5e93\u3002</p> <p>XLA\u3001GLOW\u3001TVM \u7b49\u7cfb\u7edf\u66f4\u591a\u7684\u5728\u673a\u5668\u5b66\u4e60\u7684\u573a\u666f\u88ab\u63d0\u53ca\uff0c\u8fd9\u4e9b\u7cfb\u7edf\u4e5f\u5f3a\u8c03\u5f02\u6784\u7684\u7f16\u8bd1\u76ee\u6807\uff0c\u4f46\u662f\u8fd9\u4e9b\u7cfb\u7edf\u4ece\u57fa\u4e8e\u56fe\u7684\u62bd\u8c61\u5230\u52a0\u901f\u5668\u7684\u77e2\u91cf\u62bd\u8c61\u66f4\u4e3a\u5177\u4f53\u3002\u6240\u6709\u7684\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u5c06MLIR \u4f5c\u4e3a\u57fa\u7840\u8bbe\u65bd\uff0c\u4f7f\u7528\u516c\u5171\u529f\u80fd\u7684\u540c\u65f6\uff0c\u91c7\u7528\u81ea\u5df1\u7684\u4ee3\u7801\u751f\u6210\u7b56\u7565\u3002\u76f8\u4f3c\u5730\uff0cHalide \u548cTVM \u7684\u5faa\u73af\u5d4c\u5957\u5143\u7f16\u7a0b\u6280\u672f\uff0cearlier look nest metaprogramming\uff0cPolyMega \u7684\u5168\u81ea\u52a8\u6d41(flow)\uff0cTensor Comprehension\uff0cStripe, Diesel\uff0cTiramisu \u548c\u5176\u5e95\u5c42\u7684\u591a\u9762\u4f53\u7f16\u8bd1\u6280\u672f\u53ef\u4ee5\u4f5c\u4e3a\u57fa\u4e8eMLIR \u7684\u7f16\u8bd1\u6846\u67b6\u7684\u4e0d\u540c\u8def\u5f84\u5171\u5b58\u3002\u5e8f\u5217\u5316\u548c\u4e92\u64cd\u4f5c\u683c\u5f0f\u5982 ONNX \u63d0\u4f9b\u4e00\u5957\u516c\u5171\u7684\u7b97\u5b50(OP)\u96c6\u5408\uff0c\u4e0d\u540c\u6846\u67b6\u5c06\u81ea\u5df1\u7684\u6a21\u578b\u6620\u5c04\u5230\u8fd9\u4e00\u5957\u96c6\u5408\u4e0a\u4ee5\u89e3\u51b3\u673a\u5668\u5b66\u4e60\u524d\u7aef\u7684\u591a\u6837\u6027\u3002ONNX \u53ef\u4ee5\u4f5c\u4e3a MLIR \u7684\u65b9\u8a00(dialect)\uff0c \u5176\u4ed6\u7b97\u5b50(OP)\u53ef\u4ee5lower \u5230\u8be5\u65b9\u8a00(dialect)\uff0c\u6216\u8005\u4ece\u8be5\u65b9\u8a00(dialect)\u751f\u6210</p> <p>\u5b89\u88c5 MLIR \u65f6\u8e29\u5751\uff1a</p> <ol> <li>\u7f16\u8bd1 MLIR \u4e2d\u7684 examples/standalone \u4f1a\u62a5\u627e\u4e0d\u5230 FileCheck \u7684\u9519\u8bef\uff0c \u89e3\u51b3\u65b9\u6cd5\u662f\u9700\u8981\u5728 build llvm\uff08\u53c2\u89c1cpp/toochain\uff09\u65f6\u52a0\u4e0a <code>-DLLVM_INSTALL_UTILS=ON</code></li> </ol>"},{"location":"mlc/paper-astitch.html","title":"Paper astitch","text":"<p>Ref: </p> <ul> <li>\u673a\u5668\u5b66\u4e60\u8bbf\u5b58\u5bc6\u96c6\u8ba1\u7b97\u7f16\u8bd1\u4f18\u5316\u6846\u67b6AStitch </li> </ul>"},{"location":"mlc/paper-astitch.html#2-background","title":"2. Background","text":"<p>DLC \u5f80\u5f80\u4f1a\u5c06\u4e0a\u5c42\u7684 DSL \u5148\u7ffb\u8bd1\u4e3a\u4e2d\u95f4\u5c42\u7684IR\uff0c\u4ee5\u65b9\u4fbf\u7f16\u8bd1\u5668\u8fdb\u884c\u5904\u7406\u3002\u6bd4\u5982\uff0c\u4e0a\u5c42\u7684\u4e00\u4e2aLayerNorm\u7b97\u5b50\uff0c\u4f1a\u88ab\u7ffb\u8bd1\u4e3a\u4e2d\u95f4\u5c42\u7684\u4e00\u4e2a\u5b50\u56fe\uff0c\u8be5\u5b50\u56fe\u5305\u542b\u5341\u591a\u4e2a\u7b97\u5b50\uff0c\u5305\u62ecAdd\u3001Sub\u3001Mul\u3001Div\u3001Reduce\u3001Broadcast \u7b49\u7c7b\u578b\u3002\u5728\u4e00\u4e2a\u597d\u7684IR\u5b9a\u4e49\u4e2d\uff0c\u8fd9\u4e9b\u201c\u539f\u5b50\u201d\u6027\u8d28\u7684\u7b97\u5b50\u53ef\u4ee5\u7ec4\u5408\u8868\u8fbe\u4efb\u610f\u7528\u6237\u5b9a\u4e49\u7684\u4e0a\u5c42\u8ba1\u7b97\u3002</p>"},{"location":"mlc/paper-cora.html","title":"THE CORA TENSOR COMPILER: COMPILATION FOR RAGGED TENSORS WITH MINIMAL PADDING","text":""},{"location":"mlc/paper-cora.html#0-abstract","title":"0. Abstract","text":"<p>DL \u7684\u8f93\u5165\u6570\u636e\u7684\u5f62\u72b6\u548c\u5927\u5c0f\u901a\u5e38\u4f1a\u6709\u6240\u4e0d\u540c\u3002 \u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u6b64\u7c7b\u6570\u636e\u53ef\u4ee5\u4f7f\u7528\u5f62\u72b6\u4e0d\u5747\u5300\u7684\u5f20\u91cf\u6216\u53c2\u5dee\u4e0d\u9f50\u7684\u5f20\u91cf\u6765\u8868\u793a\u3002 \u5bf9\u53c2\u5dee\u4e0d\u9f50\u7684\u5f20\u91cf\u7684\u6709\u6548\u6267\u884c\u7684\u652f\u6301\u6709\u9650\u4e14\u4e0d\u53ef\u79fb\u690d\uff0c\u5f53\u524d\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u901a\u5e38\u4f7f\u7528\u586b\u5145\u548c\u63a9\u7801\u7b49\u6280\u672f\u4f7f\u6570\u636e\u5f62\u72b6\u7edf\u4e00\uff0c\u7136\u540e\u5c06\u8ba1\u7b97\u4ea4\u7ed9\u4f18\u5316\u5185\u6838\u4ee5\u5b9e\u73b0\u5bc6\u96c6\u5f20\u91cf\u4ee3\u6570\u7b97\u5b50\u3002 \u7136\u800c\uff0c\u6b64\u7c7b\u6280\u672f\u4f1a\u5bfc\u81f4\u5927\u91cf\u8ba1\u7b97\u6d6a\u8d39\uff0c\u4ece\u800c\u5bfc\u81f4\u6027\u80fd\u635f\u5931\u3002 </p> <p>CORA \u7f16\u8bd1\u5668\u5728\u4e0d\u89c4\u5219\u5f20\u91cf\u4e0a\u7684\u5404\u79cd\u64cd\u4f5c\uff0c\u4ee5\u53ca\u53d8\u6362\u6a21\u578b\u7684\u7f16\u7801\u5c42\uff0c\u90fd\u80fd\u4e0e\u624b\u5de5\u4f18\u5316\u7684\u4ee3\u7801\u76f8\u5ab2\u7f8e\uff0c\u751a\u81f3\u8d85\u8fc7\u3002CORA\u8fd8\u53ef\u4ee5\u5728\u4e0d\u540c\u7684CPU\u548cGPU\u5e73\u53f0\u4e0a\u8fdb\u884c\u79fb\u690d\u548c\u4f18\u5316\u3002\u53ef\u4ee5\u5728\u8bba\u6587\u7684\u7b2c\u516d\u8282\u4e2d\u770b\u5230\u66f4\u591a\u7ec6\u8282\u3002Nvidia GPU \u4e0a\u7684 encoder \u662f PyTorch \u7684 1.6\u500d\uff1b 64 \u6838 ARM CPU \u4e0a\u8fbe\u5230\u4e86 TensorFlow \u4e2d\u7684 multi-head attention module used in transformers\u7684 1.37 \u500d\u3002</p>"},{"location":"mlc/paper-cora.html#9-conclusion","title":"9. Conclusion","text":"<p>\u672c\u6587\u4ecb\u7ecd\u4e86 CORA \u5f20\u91cf\u7f16\u8bd1\u5668\uff0c\u7528\u4e8e\u8868\u8fbe\u548c\u4f18\u5316\u53c2\u5dee\u4e0d\u9f50\u7684\u7b97\u5b50\uff0c\u4ee5\u4f7f\u7528\u7b80\u5355\u800c\u719f\u6089\u7684\u62bd\u8c61\u6765\u53ef\u79fb\u690d\u5730\u4ee5 CPU \u548c GPU \u4e3a\u76ee\u6807\u3002 CORA \u7684\u65b9\u6cd5\u4e13\u7528\u4e8e\u53c2\u5dee\u4e0d\u9f50\u7684\u5f20\u91cf\uff0c\u53ef\u51cf\u5c11\u4e0e\u63a9\u853d\u548c\u586b\u5145\u7b49\u6280\u672f\u76f8\u5173\u7684\u5f00\u9500\u3002 \u968f\u7740 DL \u5e94\u7528\u4e8e\u8d8a\u6765\u8d8a\u591a\u7684\u9886\u57df\u5e76\u4e14\u6a21\u578b\u53d8\u5f97\u8d8a\u6765\u8d8a\u8d44\u6e90\u5bc6\u96c6\uff0c\u6211\u4eec\u8ba4\u4e3a\u6709\u6548\u5730\u5904\u7406\u5728\u8bb8\u591a\u8bbe\u7f6e\u4e2d\u81ea\u7136\u51fa\u73b0\u7684\u5f62\u72b6\u52a8\u6001\u975e\u5e38\u91cd\u8981\u3002 CORA \u901a\u8fc7\u652f\u6301\u4e0d\u89c4\u5219\u5f20\u91cf\u4e0a\u7684\u9ad8\u6548\u7b97\u5b50\u6269\u5c55\u4e86\u8fc7\u53bb\u5728\u5f20\u91cf\u7f16\u8bd1\u5668\u4e0a\u7684\u5de5\u4f5c\u3002 \u6211\u4eec\u7684\u5de5\u4f5c\u4e5f\u53ef\u4ee5\u770b\u4f5c\u662f\u671d\u7740\u7edf\u4e00\u8fc7\u53bb\u5173\u4e8e\u7a00\u758f\u548c\u5bc6\u96c6\u5f20\u91cf\u7f16\u8bd1\u7684\u5de5\u4f5c\u8fc8\u51fa\u7684\u4e00\u6b65\u3002</p>"},{"location":"mlc/paper-cora.html#1-intro","title":"1. Intro","text":"<p>\u6211\u4eec\u4f7f\u7528 DL \u5904\u7406\u7684\u6570\u636e\u5927\u5c0f\u901a\u5e38\u4f1a\u6709\u6240\u4e0d\u540c\u3002 \u56fe\u50cf\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u5206\u8fa8\u7387\uff0c\u6587\u672c\u53e5\u5b50\u548c\u6587\u6863\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u957f\u5ea6\uff0c\u97f3\u9891\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u6301\u7eed\u65f6\u95f4\u3002 \u56e0\u6b64\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u6a21\u578b\u8fdb\u4e00\u6b65\u5904\u7406\u663e\u793a\u5f62\u72b6\u6216\u5f62\u72b6\u52a8\u6001\u53d8\u5316\u7684\u6b64\u7c7b\u6570\u636e\uff08Shen \u7b49\u4eba\uff0c2020 \u5e74\uff09\uff0c\u4f5c\u4e3a\u540c\u4e00\u5c0f\u6279\u91cf\u7684\u4e00\u90e8\u5206\u975e\u5e38\u91cd\u8981\u3002 \u56fe1 \u663e\u793a\u4e86\u5bf9\u6b64\u7c7b\u6570\u636e\u7684\u9010\u5143\u7d20\u64cd\u4f5c\u793a\u4f8b\uff0c\u5176\u4e2d\u5f20\u91cf A \u7684\u5185\u90e8\u7ef4\u5ea6\u7684\u5207\u7247\u5177\u6709\u53ef\u53d8\u5927\u5c0f\u3002 \u8fd9\u6837\u7684\u5f20\u91cf\u548c\u7b97\u5b50\u5206\u522b\u79f0\u4e3a ragged tensors and ragged operators \u3002 \u6ce8\u610f\u52a8\u6001\u5f62\u72b6\u5982\u4f55\u8f6c\u5316\u4e3a\u5faa\u73af L2 \u7684\u53d8\u91cf\u8fb9\u754c\uff0c\u5faa\u73af L2 \u5728\u53ef\u53d8\u5927\u5c0f\u7684\u5f20\u91cf\u5207\u7247\u4e0a\u8fed\u4ee3\u3002</p> <p>\u8fc7\u53bb\u7684\u5de5\u4f5c\u5f00\u53d1\u4e86\u624b\u52a8\u4f18\u5316\u7684\u5185\u6838\u6765\u52a0\u901f\u4e00\u4e9b\u91cd\u8981\u7684 ragged \u7a0b\u5e8f\uff0c\u4f8b\u5982\u53ef\u53d8\u7ef4\u5ea6\u7684\u6279\u91cf\u77e9\u9635\u4e58\u6cd5\u3001\u4e09\u89d2\u77e9\u9635\u4e58\u6cd5 \u548c \u5e7f\u6cdb\u4f7f\u7528\u7684 transformer \u6a21\u578b\u3002 \u7136\u800c\uff0c\u8fd9\u79cd\u624b\u52a8\u4f18\u5316\u7684\u5185\u6838\u9700\u8981\u5927\u91cf\u7684\u5f00\u53d1\u5de5\u4f5c\uff0c\u56e0\u6b64\u4ec5\u9002\u7528\u4e8e\u5c11\u6570\u7b97\u5b50\u3002 \u6b64\u5916\uff0c\u5b83\u4eec\u4e0d\u80fd\u8de8\u4e0d\u540c\u7684\u786c\u4ef6\u79fb\u690d\uff0c\u8fd9\u662f\u7531\u4e8e DL \u786c\u4ef6\u7684\u5feb\u901f\u521b\u65b0\u800c\u4ea7\u751f\u7684\u95ee\u9898\u3002</p> <p>\u867d\u7136\u4e00\u4e9b DL \u6846\u67b6\u6700\u8fd1\u5f00\u59cb\u4e3a ragged \u7b97\u5b50\u63d0\u4f9b\u652f\u6301\uff08TensorFlow \u56e2\u961f\uff0c2022 \u5e74\uff1bPyTorch \u56e2\u961f\uff0c2022 \u5e74\uff09\uff0c\u4f46\u5b83\u975e\u5e38\u6709\u9650\uff08TensorFlow \u793e\u533a\uff1bPyTorch \u793e\u533a\uff1bPyTorch \u56e2\u961f\uff09\uff0c\u5982\u7b2c 8 \u8282\u6240\u8ff0\u3002 \u56e0\u6b64\uff0c\u6846\u67b6\u901a\u5e38\u4f9d\u8d56\u4e8e\u4f9b\u5e94\u5546\u5e93\u4e2d\u5b9e\u73b0\u7684\u9ad8\u6548\u5bc6\u96c6\u5f20\u91cf\u4ee3\u6570\u5185\u6838\uff0c\u4f8b\u5982 cuDNN\u548c oneDNN (Intel) \u6216\u7531 TVM\uff08Chen \u7b49\u4eba\uff0c2018a\uff09\u7b49\u5f20\u91cf\u7f16\u8bd1\u5668\u751f\u6210\u3002 \u56e0\u6b64\uff0c\u586b\u5145\uff08\u5982\u56fe 1 \u53f3\u4e0a\u89d2\u6240\u793a\uff09\u548c masking \u901a\u5e38\u7528\u4e8e\u6d88\u9664\u53c2\u5dee\u4e0d\u9f50\u7684\u5f20\u91cf\u4e2d\u7684\u5f62\u72b6\u52a8\u6001\uff0c\u5e76\u5141\u8bb8\u4f7f\u7528\u4f9b\u5e94\u5546\u5e93\u6216\u5bc6\u96c6\u5f20\u91cf\u7f16\u8bd1\u5668 (Hug-gingFace, 2020)\u3002</p> <p>note</p> <p>Masking involves setting some tensor elements to a special value so that these elements are ignored in computations.</p> <p>\u7136\u800c\uff0c\u586b\u5145\u548c\u63a9\u7801\u4f1a\u5bfc\u81f4\u8ba1\u7b97\u6d6a\u8d39\uff0c\u56e0\u4e3a\u586b\u5145\u6216\u63a9\u7801\u6570\u636e\u70b9\u5728\u6267\u884c\u540e\u4f1a\u88ab\u4e22\u5f03\u3002 \u56fe2 \u7ed8\u5236\u4e86\u5305\u542b\u548c\u4e0d\u5305\u542b\u586b\u5145\u7684 transformer \u6a21\u578b \u7684 encoder \u5c42\u7684\u6b63\u5411\u4f20\u9012\u6240\u6d89\u53ca\u7684\u76f8\u5bf9\u8ba1\u7b97\u91cf\uff08\u4ee5 FLOPs \u8fdb\u884c\u5206\u6790\u8ba1\u7b97\uff09\u3002 \u6211\u4eec\u770b\u5230\u586b\u5145\u5bfc\u81f4\u5c42\u7684\u8ba1\u7b97\u9700\u6c42\u663e\u7740\u589e\u52a0\uff0c\u5c24\u5176\u662f\u5728\u6279\u91cf\u8f83\u5927\u7684\u60c5\u51b5\u4e0b\uff0c\u589e\u52a0\u4e86\u5927\u6a21\u578b\u7684\u672c\u5c31\u5f88\u5927\u7684\u8ba1\u7b97\u91cf\u3002</p> <p>\u56e0\u6b64\uff0c\u5f53\u524d\u7528\u4e8e\u9ad8\u6548 ragged \u7b97\u5b50\u6267\u884c\u7684\u89e3\u51b3\u65b9\u6848\u5e76\u4e0d\u4ee4\u4eba\u6ee1\u610f\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u7f16\u8bd1\u5668\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u8be5\u89e3\u51b3\u65b9\u6848\u53ef\u4ee5\u4e3a\u53c2\u5dee\u4e0d\u9f50\u7684\u7b97\u5b50\u8f7b\u677e\u4e14\u66f4\u4fbf\u643a\u5730\u751f\u6210\u7b26\u5408\u8981\u6c42\u7684\u4ee3\u7801\u3002 \u7a00\u758f \u548c \u5bc6\u96c6 \u5f20\u91cf\u7f16\u8bd1\u5668\u5df2\u5f97\u5230\u5145\u5206\u7814\u7a76\uff0c\u7531\u4e8e\u4ee5\u4e0b\u6311\u6218\uff0c\u5c06\u8fd9\u4e9b\u6280\u672f\u5e94\u7528\u4e8e\u53c2\u5dee\u4e0d\u9f50\u7684\u5f20\u91cf\u5e76\u4e0d\u7b80\u5355\uff1a</p>"},{"location":"mlc/paper-cora.html#8-related-work","title":"8. Related Work","text":"<p>Tensor Compilers: \u5728\u5f20\u91cf\u7f16\u8bd1\u5668\u65b9\u9762\u5df2\u7ecf\u5f00\u5c55\u4e86\u5927\u91cf\u5de5\u4f5c\uff0c\u4f8b\u5982 TVM\u3001Halide\u3001Tiramisu\u3001Tensor Comprehensions\u3001Fireiron \u3001Stripe\u3001AKG  \u4ee5\u53ca\u7528\u4e8e\u5bc6\u96c6\u5f20\u91cf\u7684 \u548c \u7528\u4e8e\u7a00\u758f\u5f20\u91cf\u7684\u4e00\u4e9b\u5de5\u4f5c\u3002 \u8fd9\u4e9b\u5de5\u4f5c\u4e3a CORA \u7684\u8bbe\u8ba1\u63d0\u4f9b\u4e86\u4fe1\u606f\u3002 \u6211\u4eec\u5c06\u5bc6\u96c6\u5f20\u91cf\u7f16\u8bd1\u5668\u63d0\u4f9b\u7684\u62bd\u8c61\u6cdb\u5316\u5230 ragged tensor\uff0c \u540c\u65f6\u4e3a\u540e\u8005\u542f\u7528\u9ad8\u6548\u4ee3\u7801\u751f\u6210\u3002 \u6211\u4eec\u5728 \u00a77.5 \u548c \u00a7D.4 \u4e2d\u8ba8\u8bba\uff1a \u5c3d\u7ba1\u53c2\u5dee\u4e0d\u9f50\u7684\u5f20\u91cf\u548c\u7a00\u758f\u5f20\u91cf\u4e4b\u95f4\u5b58\u5728\u76f8\u4f3c\u6027\uff0c\u4f46\u7a00\u758f\u5f20\u91cf\u7f16\u8bd1\u5668\u65e0\u6cd5\u6709\u6548\u5730\u5229\u7528\u53c2\u5dee\u4e0d\u9f50\u7684\u5f20\u91cf\u7684\u5c5e\u6027\u6765\u5b9e\u73b0\u9ad8\u6548\u6267\u884c\u3002</p> <p>\u8fc7\u53bb\u5173\u4e8e DLC \u7684\u5de5\u4f5c\u4e5f\u7740\u773c\u4e8e\u5904\u7406\u52a8\u6001\u6027\u3002 Nimble\uff08Shen \u7b49\u4eba\uff0c2020 \u5e74\uff09\u4ece\u5934\u5f00\u59cb\u5f00\u53d1\u52a8\u6001\u611f\u77e5\u7f16\u8bd1\u5668\u62bd\u8c61\u3002 \u5b83\u5bf9\u5f62\u72b6\u52a8\u6001\u7684\u5904\u7406\u4ec5\u9650\u4e8e\u5c0f\u6279\u91cf\u7684\u53d8\u5316\u3002 \u56e0\u6b64\uff0cCORA \u662f\u5bf9 Nimble \u7684\u8865\u5145\u3002 CORTEX (Fegade et al., 2021) \u5904\u7406\u9012\u5f52\u6a21\u578b\uff0c\u4e3b\u8981\u662f\u5c06\u9012\u5f52\u63a7\u5236\u6d41\u964d\u4f4e\u5230\u4e0d\u89c4\u5219\u5f20\u91cf\u4e0a\u7684\u987a\u5e8f\u63a7\u5236\u6d41\u3002 \u56e0\u6b64\uff0cCORA \u53ef\u4ee5\u7528\u4f5c\u5176\u7ba1\u9053\u7684\u4e00\u90e8\u5206\u3002 CORA \u4f7f\u7528\u672a\u89e3\u91ca\u51fd\u6570\u548c\u547d\u540d\u7ef4\u5ea6\u7684\u7075\u611f\u6765\u81ea\u4e8e\u5b83\u4eec\u5728 CORTEX \u4e2d\u7684\u4f7f\u7528\u4ee5\u53ca\u8fc7\u53bb\u5728\u7a00\u758f\u591a\u9762\u4f53\u6846\u67b6\u4e0a\u7684\u5de5\u4f5c\uff08Strout \u7b49\u4eba\uff0c2018 \u5e74\uff1bMoham madi \u7b49\u4eba\uff0c2019 \u5e74\uff1bNandy \u7b49\u4eba\uff0c2018 \u5e74\uff09\u3002 \u547d\u540d\u7ef4\u5ea6\u4e5f\u7c7b\u4f3c\u4e8e COMET \u4e2d\u7684\u7d22\u5f15\u6807\u7b7e\u3002 CORA \u5b9e\u73b0\u4e86\u4e00\u79cd\u6709\u9650\u5f62\u5f0f\u7684 hfusion \u4f18\u5316\uff0c\u8be5\u4f18\u5316\u9996\u5148\u5728 (Li et al., 2020) \u4e2d\u63d0\u51fa\uff0c\u4f5c\u4e3a\u5f20\u91cf\u7f16\u8bd1\u5668\u7684\u4e00\u90e8\u5206\u3002</p>"},{"location":"mlc/paper-cortex.html","title":"CORTEX: A COMPILER FOR RECURSIVE DEEP LEARNING MODELS","text":"<p>\u6587\u7ae0\u57fa\u4e8e TVM \u53d1\u8868\u57282021 MLSys\uff0c \u9488\u5bf9\u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u9012\u5f52\u6a21\u578b\u505a\u4e86\u4e13\u95e8\u7684\u4f18\u5316\uff0c\u540e\u7eed\u5de5\u4f5c\u6709 dietcode\u7b49</p>"},{"location":"mlc/paper-cortex.html#0","title":"0. \u6458\u8981","text":"<p>\u4f18 DL \u6a21\u578b\u4e00\u822c\u5206\u4e24\u6b65\u8fdb\u884c\u3002(i)\u9ad8\u5c42\u6b21\u7684\u56fe\u4f18\u5316\uff0c\u5982\u5185\u6838\u878d\u5408\uff1b(ii)\u4f4e\u5c42\u6b21\u7684\u5185\u6838\u4f18\u5316\uff0c\u5982 vendor \u5e93\u4e2d\u7684\u4f18\u5316\u3002\u8fd9\u79cd\u65b9\u6cd5\u5f80\u5f80\u4f1a\u7559\u4e0b\u663e\u8457\u7684\u6027\u80fd\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u9012\u5f52\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u7684\u60c5\u51b5\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u63d0\u51fa\u4e86CORTEX\uff0c\u4e00\u79cd\u57fa\u4e8e\u7f16\u8bd1\u5668\u7684\u65b9\u6cd5\uff0c\u4e3a\u9012\u5f52\u6a21\u578b\u751f\u6210\u9ad8\u6548\u7684\u4ee3\u7801\uff0c\u7528\u4e8e\u4f4e\u5ef6\u8fdf\u63a8\u7406\u3002\u6211\u4eec\u7684\u7f16\u8bd1\u5668\u65b9\u6cd5\u548c\u5bf9\u5382\u5546\u5e93\u7684\u4f4e\u4f9d\u8d56\u6027\u4f7f\u6211\u4eec\u80fd\u591f\u8fdb\u884c\u7aef\u5230\u7aef\u7684\u4f18\u5316\uff0c \u4f7f\u5f97\u63a8\u7406\u5ef6\u8fdf\u6bd4\u8fc7\u53bb\u7684\u5de5\u4f5c\u4f4e14\u500d\uff0c\u9002\u5e94\u591a\u540e\u7aef\u3002</p>"},{"location":"mlc/paper-cortex.html#1-intro","title":"1. Intro","text":"<p>DL \u5e94\u7528\u5bf9\u6a21\u578b\u7684\u63a8\u7406\u5ef6\u8fdf\u6709\u4e25\u683c\u8981\u6c42\u3002\u56e0\u6b64\uff0c\u5404\u79cd\u5404\u6837\u7684\u786c\u4ef6\uff0c\u5305\u62ecCPU\uff08Zhang\u7b49\u4eba\uff0c2018\uff09\u3001GPU\uff08Nvidia AI\uff0c2019\uff09\u548c\u4e13\u95e8\u7684\u52a0\u901f\u5668\uff08Jouppi\u7b49\u4eba\uff0c2017\uff09\uff0c\u90fd\u5728\u751f\u4ea7\u4e2d\u7528\u4e8e\u4f4e\u5ef6\u8fdf\u63a8\u7406\u3002</p> <p>\u5bf9\u4e8e\u5177\u6709\u9012\u5f52\u548c\u5176\u4ed6\u52a8\u6001\u63a7\u5236\u6d41\u7684\u6a21\u578b\u6765\u8bf4\uff0c\u52a0\u901f\u63a8\u7406\u5c24\u5176\u56f0\u96be\u3002\u4ee5\u89e3\u6790\u6811\u8868\u793a\u7684\u6587\u672c\u6570\u636e\u53ef\u4ee5\u88ab\u9001\u5165TreeLSTM\uff08Tai\u7b49\u4eba\uff0c2015\uff09\u548c MV-RNN\uff08Socher\u7b49\u4eba\uff0c2012b\uff09\u7b49\u6a21\u578b\u3002\u56fe\u50cf\u4e2d\u7684\u5c42\u6b21\u548c\u7a7a\u95f4\u5173\u7cfb\u53ef\u4ee5\u901a\u8fc7\u5c06\u5176\u5efa\u6a21\u4e3a\u6811\uff08Socher\u7b49\u4eba\uff0c2012a\uff09\u6216\u56fe\uff08Shuai\u7b49\u4eba\uff0c2015\uff09\u6765\u5b66\u4e60\u3002\u8fd9\u4e9b\u9012\u5f52\u6a21\u578b\u901a\u5e38\u662f\u4e3a\u987a\u5e8f\u6570\u636e\u8bbe\u8ba1\u7684\u6a21\u578b\u7684\u6269\u5c55\uff0c\u5982 LSTM \uff08Hochre-iter &amp; Schmidhuber, 1997\uff09\u548c GRU \uff08Cho\u7b49\u4eba\uff0c2014\uff09\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u9012\u5f52\u6a21\u578b\u5982 \u56fe1 \u6240\u793a\u3002\u6211\u4eec\u5728\u6574\u4e2a\u6587\u7ae0\u4e2d\u4f7f\u7528\u8fd9\u4e2a\u6a21\u578b\u4e3a\u4f8b\u3002</p> <p>\u8fc7\u53bb\u5173\u4e8e\u9012\u5f52\u548c\u52a8\u6001\u6a21\u578b\u7684\u5de5\u4f5c\uff0c\u5982DyNet\uff08Neubig\u7b49\u4eba\uff0c2017a;b\uff09\u3001Cavs\uff08Xu\u7b49\u4eba\uff0c2018\uff09\u548c PyTorch\uff08Paszke\u7b49\u4eba\uff0c2019\uff09\u90fd\u4f9d\u8d56\u4e8e\u7279\u5b9a\u786c\u4ef6\u3001\u9ad8\u5ea6\u4f18\u5316\u7684 vendor \u5e93\uff0c\u5982\u7528\u4e8e Nvidia GPU \u7684 cuDNN\uff08Chetlur\u7b49\u4eba\uff0c2014\uff09\u548c\u7528\u4e8e Intel CPU \u7684 MKL\uff08Intel\uff0c2020a\uff09\u3002\u5382\u5546\u5e93\u4f7f\u8fd9\u4e9b\u6846\u67b6\u80fd\u591f\u4e3a\u7528\u6237\u63d0\u4f9b\u4e00\u4e2a\u901a\u7528\u63a5\u53e3\uff0c\u5728\u8fd0\u884c\u65f6\u91c7\u7528\u4e13\u95e8\u7684\u9ad8\u6027\u80fd\u5185\u6838\u5b9e\u73b0\uff0c\u5e76\u6709\u6548\u5229\u7528\u9700\u8981\u9488\u5bf9\u7684\u5e7f\u6cdb\u7684\u540e\u7aef\u3002</p> <p>\u7136\u800c\uff0c\u5382\u5546\u5e93\u5728 model coverage \u548c development effort \u65b9\u9762\u4e0d\u7406\u60f3\u3002\u7531\u4e8e\u8fd9\u4e9b\u5e93\u662f\u9ad8\u5ea6\u4f18\u5316\u7684\uff0c\u5b9e\u73b0\u5b83\u4eec\u662f\u4e00\u4e2a\u975e\u5e38\u590d\u6742\u7684\u8fc7\u7a0b\u3002\u56e0\u6b64\uff0c\u5b83\u4eec\u53ea\u5305\u542b\u6700\u5e38\u7528\u7684\u6a21\u578b\u548c\u5185\u6838\u7684\u5b9e\u73b0\u3002\u4f8b\u5982\uff0ccuDNN \u5305\u542b LSTM \u548c GRU \u6a21\u578b\u7684\u5b9e\u73b0\uff0c\u4f46\u4e0d\u5305\u542b\u4e0d\u592a\u5e38\u7528\u7684 TreeLSTM \u548c MV-RNN \u6a21\u578b\u3002</p> <p>\u6b64\u5916\uff0c\u5382\u5546\u5e93\u4e2d\u7684\u6bcf\u4e2a\u5185\u6838\u90fd\u662f\u5355\u72ec\u4f18\u5316\u7684\u3002\u8fd9\u901a\u5e38\u6392\u9664\u4e86\u8bf8\u5982\u5185\u6838\u878d\u5408\uff08\u5c06\u591a\u4e2a\u5185\u6838\u8c03\u7528\u5408\u5e76\u4e3a\u4e00\u4e2a\u8c03\u7528\uff09\u7684\u4f18\u5316\uff0c\u800c\u8fd9\u4e9b\u4f18\u5316\u5df2\u88ab\u8bc1\u660e\u662f\u76f8\u5f53\u6709\u76ca\u7684\uff08\u5fae\u8f6f\uff0c2020\uff09\u3002 Model persistence\uff0c \u5373\u628a\u6bcf\u8f6e\u8fed\u4ee3\u4e2d\u90fd\u4f1a\u7528\u5230\u7684\u53c2\u6570\u5b58\u5728\u8bbf\u95ee\u66f4\u5feb\u7684 on-chip memory \u4e2d\u8fdb\u884c\u91cd\u7528\u662f\u53e6\u4e00\u4e2a\u91cd\u8981\u7684\u4f18\u5316\uff08Zhang\u7b49\u4eba\uff0c2018\uff1bHolmes\u7b49\u4eba\uff0c2019\uff1bDiamos\u7b49\u4eba\uff0c2016\uff09\u3002\u4f46\u5728\u4f7f\u7528\u5382\u5546\u5e93\u65f6\u5f88\u96be\u5229\u7528\u8fd9\u79cd\u91cd\u7528\uff0c\u5c24\u5176\u662f\u5728\u5177\u6709\u624b\u52a8\u7ba1\u7406\u7f13\u5b58\u7684 GPU \u7b49\u52a0\u901f\u5668\u4e0a\uff08Liu et al., 2019; Vasilache et al., 2018; Chen et al., 2018a\uff09\u3002 Nimble\uff08Shen \u7b49\u4eba\uff0c2020 \u5e74\uff09\u7b49\u6846\u67b6\u4e5f\u5728\u8fd9\u4e9b\u56f0\u5883\uff0c\u5b83\u4f9d\u8d56\u4e8e\u5355\u4e2a\u5185\u6838\u7684\u81ea\u52a8\u8c03\u6574\u5b9e\u73b0\u3002</p> <p>\u5728\u8fd9\u9879\u5de5\u4f5c\u4e2d\uff0c\u6211\u4eec\u6ca1\u6709\u4f9d\u8d56\u5382\u5546\u5e93\u6216\u81ea\u52a8\u8c03\u6574\u7684\u5185\u6838\uff0c\u800c\u662f\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u7f16\u8bd1\u5668\u7684\u65b9\u6cd5\uff0c\u8fd9\u4f7f\u5f97\u6211\u4eec\u80fd\u591f\u8fdb\u884c\u4f18\u5316\uff0c\u5982 kernel fusion \u548c model persistence \u3002 \u867d\u7136\u8fc7\u53bb\u6709\u4e00\u4e9b\u5de5\u4f5c\u53ef\u4ee5\u7f16\u8bd1\u666e\u901a\u7684\u524d\u9988\u6a21\u578b\uff0c\u4f46\u5c06\u8fd9\u79cd\u65b9\u6cd5\u5e94\u7528\u4e8e\u9012\u5f52\u6a21\u578b\u6709\u4ee5\u4e0b\u6311\u6218\uff1a</p> <ol> <li> <p>\u9012\u5f52\u63a7\u5236\u6d41\u7684\u6709\u6548\u8868\u793a\uff1a\u56fe 1 \u5c55\u793a\u4e86\u4e00\u4e2a\u5305\u542b\u52a8\u6001\u63a7\u5236\u6d41 \u53ca\u5e38\u89c4\u5f20\u91cf\u7684\u9012\u5f52\u6a21\u578b\u3002 \u6b64\u7c7b\u6a21\u578b\u9700\u8981\u4e00\u79cd IR\uff0c \u901a\u8fc7\u9012\u5f52\u63a7\u5236\u6d41\u5bf9\u5f20\u91cf\u8ba1\u7b97\u8fdb\u884c\u7f16\u8bd1\u5668\u4f18\u5316\u548c\u4ee3\u7801\u751f\u6210\u3002</p> </li> <li> <p>\u4f18\u5316\u9012\u5f52\u63a7\u5236\u6d41\uff1a\u52a0\u901f\u9012\u5f52\u6a21\u578b\u63a8\u7406\u9700\u8981\u6709\u6548\u7684\u65b9\u6cd5\u6765\u6267\u884c\u63a7\u5236\u6d41\uff0c\u4e14\u4e0d\u59a8\u788d\u5185\u6838\u878d\u5408\u7b49\u4f18\u5316\u3002</p> </li> <li> <p>\u9759\u6001\u4f18\u5316\uff1a\u52a8\u6001\u6a21\u578b\u901a\u5e38\u5728\u8fd0\u884c\u65f6\u901a\u8fc7\u6784\u5efa\u5c55\u5f00\u6240\u6709\u9012\u5f52\u7684\u6570\u636e\u6d41\u56fe\u8fdb\u884c\u4f18\u5316\uff0c\u5e76\u4f7f dynamic batching \u7b49\u4f18\u5316\u66f4\u5bb9\u6613\u3002 \u6b64\u7c7b\u4f18\u5316\u5fc5\u987b\u4ee5\u57fa\u4e8e\u7f16\u8bd1\u5668\u7684\u65b9\u6cd5\u9759\u6001\u6267\u884c\u3002</p> </li> </ol> <p>\u8003\u8651\u5230\u8fd9\u4e9b\u6311\u6218\uff0c\u6211\u4eec\u63d0\u51fa\u4e86 CORTEX(COmpiler for Recursive Tensor EXecution) \uff0c \u4e00\u4e2a\u7f16\u8bd1\u5668\u6846\u67b6\uff0c\u4f7f\u7528\u6237\u80fd\u591f\u8868\u8fbe\u8fed\u4ee3\u548c\u9012\u5f52\u6a21\u578b\uff0c\u5e76\u8de8\u4e0d\u540c\u540e\u7aef\uff08CPU \u548c GPU\uff09\u751f\u6210\u9ad8\u6548\u4ee3\u7801\u3002 \u4e3a\u4e86\u514b\u670d\u6311\u6218 C.1\uff0c\u6211\u4eec\u89c2\u5bdf\u5230\u9012\u5f52\u6a21\u578b\u4e2d\u7684\u63a7\u5236\u6d41\u901a\u5e38\u4ec5\u53d6\u51b3\u4e8e\u8f93\u5165\u6570\u636e\u7ed3\u6784\u3002 \u8fd9\u79cd\u89c1\u89e3\u4ee5\u53ca \u00a72 \u4e2d\u8ba8\u8bba\u7684\u5176\u4ed6\u4e00\u4e9b\u89c1\u89e3\uff0c\u4f7f\u6211\u4eec\u80fd\u591f\u5c06\u9012\u5f52\u8ba1\u7b97\u964d\u4f4e\u4e3a\u57fa\u4e8e\u5faa\u73af\u7684\u9ad8\u6548\u8ba1\u7b97\uff08\u5982\u56fe 2 \u6240\u793a\uff09\u3002 \u4e3a\u4e86\u514b\u670d C.2 \u548c C.3\uff0c\u6211\u4eec\u4f7f\u7528\u8c03\u5ea6\u539f\u8bed\u6765\u6267\u884c\u4f18\u5316\uff0c\u4f8b\u5982\u4e13\u4e1a\u5316\u548c\u52a8\u6001\u6279\u5904\u7406\uff08Neubig \u7b49\u4eba\uff0c2017b\uff1bLooks \u7b49\u4eba\uff0c2017\uff09\uff0c\u4ee5\u53ca\u7f16\u8bd1\u65f6\u4f18\u5316\uff0c\u4f8b\u5982 computation hoisting\uff08\u8ba1\u7b97\u63d0\u5347\uff09\u3002</p> <p>CORTEX \u57fa\u4e8e\u7f16\u8bd1\u5668\u7684\u65b9\u6cd5\u80fd\u591f\u4ee5\u7aef\u5230\u7aef\u7684\u65b9\u5f0f\u4f18\u5316\u6a21\u578b\u8ba1\u7b97\uff0c\u800c\u4e0d\u5fc5\u50cf\u4f7f\u7528\u5382\u5546\u5e93\u65f6\u90a3\u6837\u5c06 \u7b97\u5b50 \u4f5c\u4e3a\u9ed1\u7bb1\u51fd\u6570\u8c03\u7528\u3002\u8fd9\u5c31\u5b9e\u73b0\u4e86\u5e7f\u6cdb\u7684\u5185\u6838\u878d\u5408\uff08\u89c1 7.3\uff09\uff0c\u540c\u65f6\u907f\u514d\u4e86\u4e0e\u52a8\u6001\u6279\u5904\u7406\u4f18\u5316\u76f8\u5173\u7684\u4e00\u4e9b\u5f00\u9500\uff08\u89c1 7.2\uff09\u3002\u4f5c\u4e3aCORTEX\u8bbe\u8ba1\u7684\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u91cd\u7528\u4e86\u8fc7\u53bb\u5173\u4e8e\u5f20\u91cf\u7f16\u8bd1\u5668\u7684\u5de5\u4f5c\uff1a extend a tensor compiler \uff08Ragan-Kelley\u7b49\u4eba\uff0c2013\uff1bChen\u7b49\u4eba\uff0c2018a\uff1bBaghdadi\u7b49\u4eba\uff0c2019\uff1bKjolstad\u7b49\u4eba\uff0c2017\uff09\u3002\u8fd9\u4e5f\u4e3a\u901a\u8fc7 auto-tuning \uff08Mullapudi\u7b49\u4eba\uff0c2016\uff1bAdams\u7b49\u4eba\uff0c2019\uff1bChen\u7b49\u4eba\uff0c2018b\uff1bZheng\u7b49\u4eba\uff0c2020\uff09\u6765\u4f18\u5316\u8fd9\u4e9b\u6a21\u578b\u6253\u5f00\u4e86\u65b9\u4fbf\u4e4b\u95e8\u3002 table 1\u63d0\u4f9b\u4e86CORTEX\u4e0e\u9012\u5f52\u6a21\u578b\u76f8\u5173\u5de5\u4f5c\u7684\u5b9a\u6027\u6bd4\u8f83\u3002</p> <p>\u8d21\u732e\uff1a</p> <ol> <li> <p>\u6211\u4eec\u8bbe\u8ba1\u4e86CORTEX\uff0c\u4e00\u4e2a\u57fa\u4e8e\u7f16\u8bd1\u5668\u7684\u6846\u67b6\uff0c\u80fd\u591f\u5bf9\u9012\u5f52\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u7684\u4f4e\u5ef6\u8fdf\u63a8\u7406\u8fdb\u884c\u7aef\u5230\u7aef\u7684\u4f18\u5316\u548c\u9ad8\u6548\u7684\u4ee3\u7801\u751f\u6210\u3002</p> </li> <li> <p>\u4f5c\u4e3a\u8bbe\u8ba1\u7684\u4e00\u90e8\u5206\uff0c \u6211\u4eec\u6269\u5c55\u4e86\u5f20\u91cf\u7f16\u8bd1\u5668\u63d0\u4f9b\u7684\u62bd\u8c61\uff0c \u5e76\u63d0\u51fa\u4e86\u65b0\u7684\u8c03\u5ea6\u539f\u8bed \u548c \u9012\u5f52\u6a21\u578b\u7684\u4f18\u5316\u3002</p> </li> <li> <p>\u6211\u4eec\u5bf9\u6240\u63d0\u51fa\u7684\u6846\u67b6\u8fdb\u884c\u4e86\u539f\u578b\u8bbe\u8ba1\uff0c\u5e76\u9488\u5bf9\u6700\u5148\u8fdb\u7684\u9012\u5f52\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u8fdb\u884c\u4e86\u8bc4\u4f30\uff08Xu\u7b49\u4eba\uff0c2018\uff1bNeubig\u7b49\u4eba\uff0c2017a\uff1bPaszke\u7b49\u4eba\uff0c2019\uff09\uff0c\u5728 Nvidia GPU \u548c Intel \u53ca ARM CPU \u4e0a\u6709\u663e\u8457\u6027\u80fd\u63d0\u5347\uff08\u9ad8\u8fbe14\u500d\uff09\u3002</p> </li> </ol>"},{"location":"mlc/paper-cortex.html#9-conclusion","title":"9. CONCLUSION","text":"<p>\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86 CORTEX\uff0c\u4e00\u79cd\u7528\u4e8e\u4f18\u5316\u9012\u5f52\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u4ee5\u5b9e\u73b0\u5feb\u901f\u63a8\u7406\u7684\u7f16\u8bd1\u5668\u3002 CORTEX \u5b9e\u73b0\u4e86\u4ece\u9012\u5f52\u63a7\u5236\u6d41\u5230\u5f20\u91cf\u4ee3\u6570\u8ba1\u7b97\u7684\u5185\u6838\u878d\u5408\u548c\u7aef\u5230\u7aef\u4f18\u5316\u3002 \u8fd9\u4f7f CORTEX \u80fd\u591f\u663e\u8457\u964d\u4f4e\u63a8\u7406\u5ef6\u8fdf\u3002 \u8fc7\u53bb\u5173\u4e8e MLC \u4ee5\u53ca DL\u7684\u5de5\u4f5c\u8868\u660e\uff0c\u652f\u6301 ML \u6a21\u578b\u4e2d\u5404\u79cd\u52a8\u6001\u7684\u9ad8\u6548\u6267\u884c\u662f\u975e\u5e38\u53ef\u53d6\u7684\u3002 CORTEX \u8bc1\u660e\uff0c\u8fd9\u6837\u505a\u7684\u4e00\u79cd\u5bcc\u6709\u6210\u6548\u7684\u65b9\u6cd5\u662f\u5229\u7528\u8fc7\u53bb\u5728\u901a\u7528\u7f16\u8bd1\u65b9\u9762\u7684\u5de5\u4f5c\uff0c\u4f8b\u5982 \u68c0\u67e5\u5668-\u6267\u884c\u5668 \u6280\u672f \u6216 \u7a00\u758f\u591a\u9762\u4f53\u6846\u67b6\u3002 \u6211\u4eec\u8ba4\u4e3a\uff0c\u6269\u5c55\u5f53\u4eca\u4f7f\u7528\u7684\u9ad8\u5ea6\u4e13\u4e1a\u5316 ML \u6846\u67b6\u548c\u6280\u672f\u7684\u8303\u56f4\u4e5f\u5f88\u91cd\u8981\uff08\u5728\u4e0d\u635f\u5bb3\u5176\u4f18\u5316\u9759\u6001\u524d\u9988\u6a21\u578b\u7684\u80fd\u529b\u7684\u60c5\u51b5\u4e0b\uff09\uff0c\u4f8b\u5982\u6211\u4eec\u5728 ILIR \u4e2d\u6240\u505a\u7684\u3002 \u5c06\u6765\uff0c\u6211\u4eec\u5e0c\u671b (i) \u5e94\u7528\u8fd9\u4e9b\u89c1\u89e3\u6765\u5f00\u53d1\u7c7b\u4f3c\u7684\u6280\u672f\u6765\u8bad\u7ec3\u548c\u670d\u52a1\u5177\u6709\u6f5c\u5728\u975e\u9012\u5f52\u52a8\u6001\u63a7\u5236\u6d41\u7684\u6a21\u578b\uff0c\u4ee5\u53ca (ii) \u5c06 CORTEX \u96c6\u6210\u5230\u66f4\u9ad8\u7ea7\u522b\u7684\u7f16\u7a0b\u62bd\u8c61\u4e2d\u3002</p>"},{"location":"mlc/paper-cortex.html#2-overview","title":"2. OVERVIEW","text":"<p>\u9012\u5f52\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u901a\u5e38\u5728\u6267\u884c\u5f20\u91cf\u8ba1\u7b97\u65f6\u904d\u5386 recursive data structures\u3002 \u9ad8\u6548\u6267\u884c\u6b64\u7c7b\u6a21\u578b\u5177\u6709\u6311\u6218\u6027\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u52a8\u6001\u63a7\u5236\u6d41\u901a\u5e38\u4f1a\u6392\u9664\u5e38\u89c1\u7684\u4f18\u5316\uff0c \u4f8b\u5982\u5185\u6838\u878d\u5408\u3002 \u5728 CORTEX \u4e2d\uff0c\u6211\u4eec\u89c2\u5bdf\u5230\u9012\u5f52\u6a21\u578b\u4e2d\u7684\u63a7\u5236\u6d41\u901a\u5e38\u6ee1\u8db3\u67d0\u4e9b\u5c5e\u6027\uff0c\u4f7f\u6211\u4eec\u80fd\u591f\u6709\u6548\u5730\u5c06\u5176\u964d\u4f4e\u4e3a\u57fa\u4e8e\u5faa\u73af\u7684\u8fed\u4ee3\u63a7\u5236\u6d41\u3002 \u7279\u522b\u662f\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u8bb8\u591a\u9012\u5f52\u6a21\u578b\u5177\u6709\u4ee5\u4e0b\u5c5e\u6027\uff1a</p> <ol> <li>\u6240\u6709\u63a7\u5236\u6d41\u90fd\u53d6\u51b3\u4e8e\u6570\u636e\u7ed3\u6784\u7684\u8fde\u901a\u6027\uff0c\u800c\u4e0d\u662f\u52a8\u6001\u8ba1\u7b97\u7684\u6570\u636e</li> <li>\u53ef\u4ee5\u5728\u6267\u884c\u5f20\u91cf\u8ba1\u7b97\u4e4b\u524d\u8fdb\u884c\u6240\u6709\u7684\u9012\u5f52\u8c03\u7528</li> <li>\u5bf9\u6570\u636e\u7ed3\u6784\u8282\u70b9\u7684\u5b50\u8282\u70b9\u7684\u9012\u5f52\u8c03\u7528\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff1a\u4e00\u4e2a\u8c03\u7528\u7684\u53c2\u6570\u4e0d\u4f9d\u8d56\u4e8e\u5148\u524d\u8c03\u7528\u7684\u7ed3\u679c</li> </ol> <p>\u5c5e\u6027 P.1 \u610f\u5473\u7740\u6a21\u578b\u4e2d\u7684\u6240\u6709\u63a7\u5236\u6d41\u90fd\u5c01\u88c5\u5728\u8f93\u5165\u6570\u636e\u7ed3\u6784\u4e2d\u3002 \u5c5e\u6027 P.2 \u610f\u5473\u7740\u8ba1\u7b97\u53ef\u4ee5\u4ece\u6570\u636e\u7ed3\u6784\u7684\u53f6\u5b50\u5f00\u59cb\uff0c\u5411\u4e0a\u79fb\u52a8\u5230\u6839\u3002 \u5c5e\u6027 P.3 \u5141\u8bb8\u6211\u4eec\u5e76\u884c\u5904\u7406\u5144\u5f1f\u8282\u70b9\u3002 \u603b\u800c\u8a00\u4e4b\uff0c\u8fd9\u4e9b\u5c5e\u6027\u4f7f\u5f97\u4e3a\u8fd9\u4e9b\u9012\u5f52\u6a21\u578b\u8ba1\u7b97\u751f\u6210\u9ad8\u6548\u7684\u57fa\u4e8e\u5faa\u73af\u7684\u4ee3\u7801\u6210\u4e3a\u53ef\u80fd\u3002</p> <p>\u7591\u95ee</p> <p>\u5b8c\u5168\u770b\u4e0d\u61c2\u5728\u8bf4\u4ec0\u4e48\uff1f</p> <p>\u6211\u4eec\u73b0\u5728\u770b\u770b\u5229\u7528\u8fd9\u4e9b\u89c1\u89e3\u7684 CORTEX \u7684\u7f16\u8bd1\u548c\u8fd0\u884c\u65f6\u5de5\u4f5c\u6d41\u7a0b\uff08\u5982\u56fe 2 \u6240\u793a\uff09\u3002 \u7f16\u8bd1\u4eceRecursive API (RA) \u4e2d\u8868\u793a\u7684\u9012\u5f52\u6a21\u578b\u8ba1\u7b97 \u2460 \u5f00\u59cb\u3002 \u7528\u6237\u8fd8\u53ef\u4ee5\u5728\u6b64\u9636\u6bb5\u6307\u5b9a\u4e00\u4e9b\u8c03\u5ea6\u539f\u8bed \u2461 \u6765\u63a7\u5236\u5982\u4f55 lower \u9012\u5f52\u8ba1\u7b97\u3002 \u7136\u540e\uff0c\u7f16\u8bd1\u5668\u6839\u636e\u7528\u6237\u63d0\u4f9b\u7684\u8c03\u5ea6\u539f\u8bed\u751f\u6210\u4e0e\u8f93\u5165\u8ba1\u7b97\u5bf9\u5e94\u7684 Irregular Loop IR (ILIR) \u2462\u3002 ILIR \u662f\u5f20\u91cf\u7f16\u8bd1\u5668\u4f7f\u7528\u7684 IR \u7684\u6269\u5c55\uff0c\u65e8\u5728\u652f\u6301 \u95f4\u63a5\u5185\u5b58\u8bbf\u95ee \u548c \u53ef\u53d8\u5faa\u73af\u8fb9\u754c \u7b49\u529f\u80fd\u3002 \u5b83\u5b8c\u5168\u57fa\u4e8e\u5faa\u73af\u5e76\u4e14\u4e0e\u6570\u636e\u7ed3\u6784\u65e0\u5173\u3002 \u56e0\u6b64\uff0c RA lowering \u9636\u6bb5\u5c06\u6240\u6709\u9012\u5f52\u63a7\u5236\u6d41\u964d\u4f4e\u5230\u5faa\u73af \uff0c \u5e76\u5c06\u6240\u6709\u6570\u636e\u7ed3\u6784\u8bbf\u95ee\u964d\u4f4e\u5230\u8be5\u9636\u6bb5\u6f5c\u5728\u7684 \u95f4\u63a5\u5185\u5b58\u8bbf\u95ee \u3002 \u53ef\u4ee5\u5728\u6b64\u5904\u6267\u884c\u5728\u5f20\u91cf\u7f16\u8bd1\u5668\u4e2d\u6267\u884c\u7684\u5c55\u5f00\u3001tiling \u7b49\u5faa\u73af\u4f18\u5316\uff0c\u4e4b\u540e\u751f\u6210\u76ee\u6807\u7279\u5b9a\u4ee3\u7801 \u2463 \u4f5c\u4e3a ILIR \u964d\u4f4e\u7684\u4e00\u90e8\u5206\u3002</p> <p>\u7591\u95ee</p> <p>\u8fd9\u91cc\u7684 indirect memory accesses \u6307\u7684\u662f\uff1f</p> <p>\u8fd0\u884c\u65f6\u5de5\u4f5c\u6d41\u7a0b\u53cd\u6620\u4e86\u7f16\u8bd1\u671f\u95f4\u7684 lowering \u3002 \u6211\u4eec\u4ece\u6307\u9488\u94fe\u63a5\u7684\u9012\u5f52\u6570\u636e\u7ed3\u6784 \u2464 \u5f00\u59cb\uff0c\u4f8b\u5982\u94fe\u8868\u3001\u6811 \u6216 DAG\uff0c\u5c06\u5176\u964d\u4f4e\u4e3a\u6570\u7ec4 \u2465 \uff0c\u5373\u4f7f\u7528 linearizer \u6267\u884c\u7ebf\u6027\u5316\u3002 \u8fd9\u79cd\u7ebf\u6027\u5316\u4f7f\u5f97\u751f\u6210\u8fed\u4ee3\u4ee3\u7801\u904d\u5386\u6570\u636e\u7ed3\u6784\u6210\u4e3a\u53ef\u80fd\u3002 linearizer \u5fc5\u987b\u786e\u4fdd\u5728\u6267\u884c\u6b64 lowering \u65f6\u6ee1\u8db3\u6570\u636e\u7ed3\u6784\u8282\u70b9\u4e4b\u95f4\u7684\u6570\u636e\u4f9d\u8d56\u6027\u3002 \u8bf7\u6ce8\u610f\uff0c\u7ebf\u6027\u5316\u9636\u6bb5\u4e0d\u6d89\u53ca\u4efb\u4f55\u5f20\u91cf\u8ba1\u7b97\u3002 \u8fd9\u662f\u56e0\u4e3a\u5c5e\u6027 P.1 \u5141\u8bb8\u6211\u4eec\u5c06\u9012\u5f52\u63a7\u5236\u6d41\u4e0e\u5f20\u91cf\u8ba1\u7b97\u5206\u5f00\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5728\u4e3b\u673a CPU \u4e0a\u6267\u884c\u7ebf\u6027\u5316\u3002</p> <p>\u89e3\u6790\u6765\u8ba8\u8bba\u4e0a\u9762\u63d0\u5230\u7684\u6bcf\u4e2a\u7f16\u8bd1\u548c\u6267\u884c stage\u3002</p>"},{"location":"mlc/paper-cortex.html#3-recursive-api-ra","title":"3. RECURSIVE API (RA)","text":"<p>CORTEX \u9700\u8981\u7aef\u5230\u7aef\u7684\u6a21\u578b\u8ba1\u7b97\u89c6\u56fe\uff0c\u4ee5\u4fbf\u6267\u884c\u5185\u6838\u878d\u5408\u7b49\u4f18\u5316\u3002 \u56e0\u6b64\uff0c\u8f93\u5165\u7a0b\u5e8f\u9700\u8981\u5305\u542b\u6709\u5173\u6a21\u578b\u4e2d\u6267\u884c\u7684\u5f20\u91cf\u64cd\u4f5c\u7684\u8db3\u591f\u4fe1\u606f\uff0c\u4ee5\u4fbf\u5728\u964d\u4f4e\u5230 ILIR \u65f6\u542f\u7528\u8c03\u5ea6\u3002 \u56e0\u6b64\uff0cRA \u5c06\u8f93\u5165\u8ba1\u7b97\u5efa\u6a21\u4e3a\u7b97\u5b50\u7684 DAG\uff0c \u5176\u4e2d\u6bcf\u4e2a\u7b97\u5b50\u90fd\u88ab\u6307\u5b9a\u4e3a\u5faa\u73af\u5d4c\u5957\u3002 \u8fd9\u5728 Listing 1 \u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5b83\u7528 RA \u8868\u793a\u56fe 1 \u4e2d \u7684\u6a21\u578b\u3002 \u9664\u4e86 RA \u8ba1\u7b97\uff0c\u7528\u6237\u8fd8\u9700\u8981\u63d0\u4f9b\u6709\u5173\u8f93\u5165\u6570\u636e\u7ed3\u6784\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u4f8b\u5982\u6bcf\u4e2a\u8282\u70b9\u7684\u6700\u5927\u5b50\u8282\u70b9\u6570\u4ee5\u53ca\u6570\u636e\u7ed3\u6784\u7684\u7c7b\u578b\uff08\u94fe\u8868\u3001\u6811\u6216 DAG\uff09\u3002 \u6b64\u4fe1\u606f\u5728\u7f16\u8bd1\u671f\u95f4\u4f7f\u7528\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u8f7b\u677e\u9a8c\u8bc1\u3002</p>"},{"location":"mlc/paper-cortex.html#31-recursion-scheduling-primitives","title":"3.1. Recursion Scheduling Primitives","text":"<p>\u5c06\u9012\u5f52\u8ba1\u7b97\u964d\u4e3a\u5faa\u73af\u65f6\uff0c\u9700\u8981\u4fdd\u8bc1\u6570\u636e\u7ed3\u6784\u8282\u70b9\u4e4b\u95f4\u7684\u6570\u636e\u4f9d\u8d56\u5173\u7cfb\u5f97\u5230\u6ee1\u8db3\u3002 \u7531\u4e8e\u8fd9\u4e9b\u4f9d\u8d56\u6027\u901a\u5e38\u4ec5\u6307\u5b9a\u8282\u70b9\u7684\u90e8\u5206\u6392\u5e8f\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u5b89\u6392\u8ba1\u7b97\u65f6\u5177\u6709\u5f88\u5927\u7684\u81ea\u7531\u5ea6\u3002 \u4e0d\u540c\u7684\u8c03\u5ea6\u53ef\u4ee5\u63d0\u4f9b\u4e0d\u540c\u7a0b\u5ea6\u7684\u5e76\u884c\u6027\uff0c\u6216\u8005\u5141\u8bb8\u6570\u636e\u91cd\u7528\u3002 Listing 1 \u7b2c 25 \u884c\u548c\u7b2c 26 \u884c\u6307\u5b9a\u4e86\u8fd9\u4e9b\u8c03\u5ea6\u539f\u8bed\u3002\u6211\u4eec\u5efa\u8bae\u4f7f\u7528\u4ee5\u4e0b\u8c03\u5ea6\u539f\u8bed\u6765\u5229\u7528\u8fd9\u4e9b\u4f18\u5316\u673a\u4f1a\uff1a</p> <ol> <li> <p>Dynamic Batching \uff1a\u52a8\u6001\u6279\u5904\u7406\uff08Neubig et al., 2017b; Gao et al., 2018; Looks et al., 2017; Xu et al., 2018\uff09\u6d89\u53ca\u52a8\u6001\u6279\u5904\u7406\u7b97\u5b50\u4ee5\u5229\u7528\u6a21\u578b\u6279\u5904\u7406\u4e2d\u7684\u5e76\u884c\u6027 \u52a8\u6001\u63a7\u5236\u6d41\u3002 \u7531\u4e8e\u6211\u4eec\u7814\u7a76\u7684\u6a21\u578b\u4e2d\u7684\u63a7\u5236\u6d41\u4ec5\u53d6\u51b3\u4e8e\u8f93\u5165\u6570\u636e\u7ed3\u6784\uff08\u5c5e\u6027 P.1\uff09\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u7ebf\u6027\u5316\u671f\u95f4\u6267\u884c\u52a8\u6001\u6279\u5904\u7406\u3002 \u4f7f\u7528\u52a8\u6001\u6279\u5904\u7406\uff0c\u6811\u4e2d\u7684\u8282\u70b9\u4ece\u4e0a\u5230\u4e0b\u5904\u7406\uff0c\u5982\u56fe 2 \u4e2d\u7684 6 \u6240\u793a\u3002</p> </li> <li> <p>Specialization: \u9012\u5f52\u8ba1\u7b97\u5f80\u5f80\u6709\u9891\u7e41\u7684\u6761\u4ef6\u68c0\u67e5\u6765\u68c0\u67e5\u57fa\u672c\u6761\u4ef6\u3002 \u8fd9\u4e9b\u68c0\u67e5\u53ef\u80fd\u4f1a\u963b\u788d\u8ba1\u7b97\u63d0\u5347\u548c\u5e38\u91cf\u4f20\u64ad\uff08\u00a74.3\uff09\u7b49\u4f18\u5316\uff0c\u5e76\u4e14\u4f1a\u4ea7\u751f\u81ea\u5df1\u7684\u6267\u884c\u5f00\u9500\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5141\u8bb8\u7528\u6237 specialize the program for the two branches of a conditional check \u3002 listing 2 \u663e\u793a\u4e86\u4e3a\u9012\u5f52\u6a21\u578b\u751f\u6210\u7684 ILIR\u3002 \u8bf7\u6ce8\u610f\u5b83\u5982\u4f55\u4f7f\u7528\u5355\u72ec\u7684\u5faa\u73af\u5d4c\u5957\u6765\u8ba1\u7b97\u53f6\u5b50\u548c\u5185\u90e8\u8282\u70b9\uff0c\u56e0\u4e3a\u53f6\u5b50\u68c0\u67e5\u88ab\u8981\u6c42 Specialization\uff08\u6e05\u5355 1 \u4e2d\u7684\u7b2c 26 \u884c\uff09\u3002</p> <p></p> </li> <li> <p>Unrolling\uff1a \u5c55\u5f00\u9012\u5f52\u6539\u53d8\u4e86\u5904\u7406\u8282\u70b9\u7684\u987a\u5e8f\uff08\u5982\u56fe 3 \u6240\u793a\uff09\uff0c\u4f7f\u8282\u70b9\u7684\u8ba1\u7b97\u5728\u65f6\u95f4\u4e0a\u66f4\u63a5\u8fd1\u5176\u5b50\u8282\u70b9\u7684\u8ba1\u7b97\u3002 \u8fd9\u5141\u8bb8\u901a\u8fc7 fast on-chip cache \u91cd\u7528\u5b69\u5b50\u7684\u9690\u85cf\u72b6\u6001\uff0c\u800c\u4e0d\u662f\u8f83\u6162\u7684\u7247\u5916\u5185\u5b58\u3002 \u4f8b\u5982\uff0c\u5728 \u56fe3 \u4e2d\uff0c\u9012\u5f52\u8c03\u7528\u4e2d\u7684\u6bcf\u6761\u8fb9\uff08\u56fe\u4e2d\u7684\u9ec4\u8272\u6846\uff09\u90fd\u53ef\u4ee5\u8fdb\u884c\u91cd\u7528\u3002 \u5c55\u5f00\u4e5f\u4e3a\u5185\u6838\u878d\u5408\u521b\u9020\u4e86\u673a\u4f1a\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u5728\u5b50\u8ba1\u7b97\u4e2d\u878d\u5408\u7b97\u5b50\u3002</p> <p></p> </li> <li> <p>Recursive Refactoring\uff1a\u5185\u6838\u878d\u5408\u66f4\u96be\u8de8\u9012\u5f52\u8c03\u7528\u8fb9\u754c\u6267\u884c\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u91cd\u6784\u6765\u66f4\u6539\u9012\u5f52\u540e\u8fb9\u3002 \u8003\u8651\u56fe 4 \u5de6\u4fa7\u7684\u8ba1\u7b97\u3002A1\u3001A2 \u548c B \u8868\u793a\u5f20\u91cf\u7b97\u5b50\uff0c\u56e0\u6b64\u5b58\u5728\u4ece A1 \u5230 A2 \u7684\u76f8\u5173\u6027\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u9012\u5f52\u540e\u8fb9\u4ece B \u6216 A2 \u5230 A1\u3002 \u878d\u5408 A1(n) \u548c A2(n.left) \u6216 A2(n.right) \u4e2d\u7684\u5185\u6838\u4f1a\u5f88\u56f0\u96be\uff0c\u56e0\u4e3a\u5185\u6838\u4f4d\u4e8e\u9012\u5f52\u8c03\u7528\u8fb9\u754c\u3002 \u91cd\u6784\u6539\u53d8\u4e86\u8fd9\u4e2a\u8fb9\u754c\uff08backedge \u73b0\u5728\u4ece A1 \u5230 A2\uff09\u3002 \u56e0\u6b64\uff0cA1(n)\u3001A2(n.left) \u548c A2(n.right) \u73b0\u5728\u4f4d\u4e8e\u540c\u4e00\u4e2a\u8c03\u7528\u4e2d\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u878d\u5408\u3002</p> <p></p> <p>\u7591\u95ee</p> <p>\u6ca1\u770b\u660e\u767d\uff1f</p> </li> </ol>"},{"location":"mlc/paper-cortex.html#4-lowering-recursion-to-loops","title":"4. LOWERING RECURSION TO LOOPS","text":""},{"location":"mlc/paper-cortex.html#41-ra-lowering","title":"4.1. RA Lowering","text":"<p>\u4eceRA \u5230 ILIR \u7684 lowering\uff0c\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u4ece\u9012\u5f52\u5230\u8fed\u4ee3\u7684 lowering \u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5728 lowering \u8fc7\u7a0b\u4e2d\u4f7f\u6240\u6709\u7684\u4e34\u65f6\u5f20\u91cf\u663e\u6027\u5316\u3002\u4f8b\u5982\uff0c\u5728 listing 2 \u4e2d\u7684 ILIR \u4e2d\uff0c\u6211\u4eec\u660e\u786e\u5730\u521b\u5efa\u4e8610\u4e2a\u5f20\u91cf lh \u548c rh \u3002\u6211\u4eec\u8fd8\u5c06\u5f20\u91cf <code>rnn</code> \u5b9e\u4f53\u5316\uff0c\u5b83\u5b58\u50a8\u4e86\u8ba1\u7b97\u7684\u7ed3\u679c\u3002\u8fd9\u4e09\u4e2a\u5f20\u91cf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u5b58\u50a8\u4e86\u6bcf\u4e2a\u9012\u5f52\u8c03\u7528\u7684\u6570\u636e\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u76f8\u5f53\u4e8e\u6bcf\u4e2a\u6811\u8282\u70b9\u3002</p> <p>\u9012\u5f52\u91cd\u6784 \u548c \u5faa\u73af\u5c55\u5f00 \u7684\u8c03\u5ea6\u539f\u8bed\u662f\u901a\u8fc7\u5728 lowering \u4e4b\u524d\u9002\u5f53\u5730\u8f6c\u6362\u8f93\u5165 RA \u8ba1\u7b97\u6765\u5904\u7406\u7684\u3002\u7279\u6b8a\u5206\u652f\u662f\u901a\u8fc7\u751f\u6210\u4e24\u4e2a\u7248\u672c\u7684\u8ba1\u7b97\u6765\u5904\u7406\u7684\uff0c\u6bcf\u4e2a\u7248\u672c\u90fd\u662f\u9488\u5bf9\u5206\u652f\u7684\u4e00\u4e2a\u76ee\u6807\u7684\u3002 data structure linearlizer \u4e3a\u8fd9\u4e9b\u7279\u6b8a\u5206\u652f\u5212\u5206\u8282\u70b9\uff0c ILIR \u4e3a\u5404\u81ea\u7684\u8282\u70b9\u5212\u5206\u91c7\u7528\u6b63\u786e\u7684\u8ba1\u7b97\u7248\u672c\u3002 lowering \u9636\u6bb5\u4ea7\u751f\u9002\u5f53\u7684\u5faa\u73af\u5d4c\u5957\uff0c\u5bf9 data structure linearlizer \u7684\u8f93\u51fa\u8fdb\u884c\u8fed\u4ee3\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c ILIR \u5bf9\u8282\u70b9\u8fdb\u884c\u8fed\u4ee3\uff0c\u4f46\u5982\u679c\u7528\u6237\u6307\u5b9a\u4e86 dynamic batching \uff0c ILIR iterates over batches of nodes\uff08\u5982 listing 2\uff09</p>"},{"location":"mlc/paper-cortex.html#42-data-structure-linearization","title":"4.2. Data Structure Linearization","text":"<p>\u5728\u8fd0\u884c\u65f6\uff0c data structure linearlizer \u4f1a\u904d\u5386\u8f93\u5165\u7684\u7ed3\u6784\uff0c\u5e76\u5c06\u5176\u6392\u5217\u6210\u6570\u7ec4\uff0c\u4f9b\u57fa\u4e8e\u4e0b\u5c42\u5faa\u73af\u7684\u8ba1\u7b97\u8fed\u4ee3\u3002\u6211\u4eec\u7684\u8fd0\u884c\u5b9e\u4f8b\u7684\u7ebf\u6027\u5316\u5668\u7684\u4f2a\u4ee3\u7801\u663e\u793a\u5982\u4e0b\u3002</p> <p>data structure linearlizer \u662f\u5728 RA \u964d\u4f4e\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u3002\u5728\u6ca1\u6709 specialization \u548c dynamic batching \u7684\u60c5\u51b5\u4e0b\uff0c\u7ebf\u6027\u5316\u5668\u57fa\u672c\u4e0a\u8981\u50cf\u8f93\u5165\u7a0b\u5e8f\u90a3\u6837\u904d\u5386\u6570\u636e\u7ed3\u6784\uff0c\u540c\u65f6\u8ddf\u8e2a\u9047\u5230\u7684\u8282\u70b9\u7684\u987a\u5e8f\u3002\u8fd9\u79cd\u5bf9\u8282\u70b9\u7684\u6392\u5e8f\u5c06\u6ee1\u8db3\u6570\u636e\u7684\u4f9d\u8d56\u6027\uff0c\u5e76\u53ef\u5728\u5f20\u91cf\u8ba1\u7b97\u4e2d\u4f7f\u7528\u3002\u56e0\u6b64\uff0c\u5728\u8fd9\u79cd\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\uff0c data structure linearlizer \u672c\u8d28\u4e0a\u662f\u8f93\u5165\u7a0b\u5e8f\uff0c\u5265\u79bb\u4e86\u6240\u6709\u5f20\u91cf\u8ba1\u7b97\u3002\u5bf9\u4e8e\u6807\u8bb0\u4e3a specialization \u7684\u6761\u4ef6\u68c0\u67e5\uff0c\u7ebf\u6027\u5316\u5668\u5c06\u5206\u522b\u6536\u96c6\u68c0\u67e5\u7684\u4e24\u4e2a\u5206\u652f\u4e4b\u540e\u7684\u8282\u70b9\u3002\u5bf9\u4e8e dynamic batching \uff0c\u6211\u4eec\u751f\u6210\u4ee3\u7801\u6765\u904d\u5386\u6570\u636e\u7ed3\u6784\uff0c\u5e76\u8bc6\u522b\u53ef\u4ee5\u88ab\u5e76\u884c\u5904\u7406\u7684\u6279\u91cf\u8282\u70b9\u3002</p>"},{"location":"mlc/paper-cortex.html#43-computation-hoisting-and-constant-propagation","title":"4.3. Computation Hoisting and Constant Propagation","text":"<p>\u7f16\u8bd1\u5668\u5206\u6790\u548c\u79fb\u52a8\u4ee3\u7801\uff0c\u4e00\u822c\u6709\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a</p> <ol> <li>\u7f16\u8bd1\u5668\u4f1a\u5bf9\u5faa\u73af\u8fdb\u884c\u6570\u636e\u6d41\u5206\u6790\uff0c\u786e\u5b9a\u5faa\u73af\u7684\u5165\u53e3\u548c\u51fa\u53e3\uff0c\u4ee5\u53ca\u5faa\u73af\u4e2d\u7684\u53d8\u91cf\u7684\u5b9a\u4e49\u548c\u4f7f\u7528\u3002</li> <li>\u7f16\u8bd1\u5668\u4f1a\u8bc6\u522b\u51fa\u5faa\u73af\u4e0d\u53d8\u7684\u4ee3\u7801\uff0c\u5373\u5728\u5faa\u73af\u4e2d\u6bcf\u6b21\u6267\u884c\u90fd\u4e0d\u4f1a\u6539\u53d8\u7684\u4ee3\u7801\uff0c\u6bd4\u5982\u5e38\u91cf\u6216\u8005\u4e0d\u4f9d\u8d56\u4e8e\u5faa\u73af\u53d8\u91cf\u7684\u8868\u8fbe\u5f0f\u3002</li> <li>\u7f16\u8bd1\u5668\u4f1a\u68c0\u67e5\u5faa\u73af\u4e0d\u53d8\u7684\u4ee3\u7801\u662f\u5426\u6709\u526f\u4f5c\u7528\uff0c\u6bd4\u5982\u4fee\u6539\u5168\u5c40\u53d8\u91cf\u6216\u8005\u8c03\u7528\u51fd\u6570\u3002\u5982\u679c\u6709\u526f\u4f5c\u7528\uff0c\u7f16\u8bd1\u5668\u4f1a\u4fdd\u7559\u5faa\u73af\u4e0d\u53d8\u7684\u4ee3\u7801\u5728\u5faa\u73af\u5185\u90e8\uff0c\u4ee5\u4fdd\u8bc1\u7a0b\u5e8f\u7684\u8bed\u4e49\u4e0d\u53d8\u3002</li> <li>\u7f16\u8bd1\u5668\u4f1a\u628a\u6ca1\u6709\u526f\u4f5c\u7528\u7684\u5faa\u73af\u4e0d\u53d8\u7684\u4ee3\u7801\u79fb\u5230\u5faa\u73af\u5916\u9762\uff0c\u53ea\u8ba1\u7b97\u4e00\u6b21\uff0c\u7136\u540e\u628a\u7ed3\u679c\u4fdd\u5b58\u5728\u4e00\u4e2a\u53d8\u91cf\u91cc\u3002\u8fd9\u4e2a\u53d8\u91cf\u4f1a\u66ff\u6362\u5faa\u73af\u5185\u90e8\u7684\u5faa\u73af\u4e0d\u53d8\u7684\u4ee3\u7801\u3002</li> </ol> <p>\u9012\u5f52\u548c\u8fed\u4ee3\u6a21\u578b\u901a\u5e38\u4f7f\u7528\u4e00\u4e2a\u521d\u59cb\u503c\u4f5c\u4e3a base case\u3002 \u5982\u679c\u8fd9\u4e2a\u521d\u59cb\u503c\u5bf9\u6240\u6709\u7684\u53f6\u5b50\u90fd\u662f\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u5bf9\u6240\u6709\u7684\u53f6\u5b50\u90fd\u8981\u8fdb\u884c\u76f8\u540c\u7684\u8ba1\u7b97\uff0c\u8fd9\u662f\u591a\u4f59\u7684\u3002\u5f53\u964d\u4f4e\u5230 ILIR \u65f6\uff0c\u8fd9\u6837\u7684\u8ba1\u7b97\u88ab\u4ece\u9012\u5f52\u4e2d hoisted out\u3002 \u6211\u4eec\u8fd8\u7279\u522b\u4f18\u5316\u4e86\u521d\u59cb\u503c\u4e3a\u96f6\u5f20\u91cf\u65f6\u7684\u60c5\u51b5\u3002</p>"},{"location":"mlc/paper-cortex.html#5-irregular-loops-ir-ilir","title":"5. IRREGULAR LOOPS IR (ILIR)","text":"<p>\u6211\u4eec\u5df2\u7ecf\u7b80\u5355\u5730\u63d0\u5230\uff0c ILIR \u662f\u5f20\u91cf\u7f16\u8bd1\u5668\u6240\u4f7f\u7528\u7684\u7a0b\u5e8f\u8868\u793a\u6cd5\u7684\u6269\u5c55\u3002\u56e0\u6b64\uff0c\u8ba1\u7b97\u548c\u4f18\u5316\u5728 ILIR \u4e2d\u88ab\u5355\u72ec\u6307\u5b9a\u3002\u8ba1\u7b97\u88ab\u8868\u8fbe\u4e3a\u4e00\u4e2a\u7b97\u5b50\u7684DAG\uff0c\u6bcf\u4e2a\u7b97\u5b50\u90fd\u901a\u8fc7\u5438\u6536\u5148\u524d\u4ea7\u751f\u7684\u6216\u8f93\u5165\u7684\u5f20\u91cf\u6765\u4ea7\u751f\u4e00\u4e2a\u5f20\u91cf\u3002\u5728\u8c03\u5ea6\u539f\u8bed\u7684\u5e2e\u52a9\u4e0b\uff0c\u53ef\u4ee5\u8fdb\u884c\u4f18\u5316\uff0c\u5982 loop tiling, loop unrolling, vectorization \u7b49\u3002</p> <p>RA lowering \u540e\u4ea7\u751f ILIR \u3002ILIR \u662f\u57fa\u4e8e\u5faa\u73af\u548c\u6570\u636e\u7ed3\u6784\u7684 agnostic \uff0c \u8fd9\u79cd\u964d\u4f4e\u4ea7\u751f\u4e86\u95f4\u63a5\u5185\u5b58\u8bbf\u95ee\u548c\u5177\u6709\u53ef\u53d8\u5faa\u73af\u8fb9\u754c\u7684\u5faa\u73af\u3002\u8bf7\u6ce8\u610f\uff0c\u5728listing 2\u4e2d\uff0c\u7b2c 1 \u884c\u7684\u5faa\u73af\u4e2d\u7528\u4e8e\u7d22\u5f15\u5f20\u91cf rnn \u7684\u53d8\u91cf node \u662f\u5faa\u73af\u53d8\u91cf <code>n_idx</code> \u7684\u4e00\u4e2a\u975e affine \u51fd\u6570\u3002\u6b64\u5916\uff0c\u7b2c 7 \u884c\u7684\u5faa\u73af\u5728\u4e00\u6279\u8282\u70b9\u4e0a\u8fed\u4ee3\uff0c\u6709\u4e00\u4e2a\u53d8\u91cf\u8fb9\u754c\uff0c\u56e0\u4e3a\u6279\u6b21\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u957f\u5ea6\u3002\u4e3a\u4e86\u652f\u6301\u8fd9\u4e9b\u7279\u5f81\uff0c\u6211\u4eec\u7528(1)\u975eaffine\u7d22\u5f15\u8868\u8fbe\u5f0f\uff0c(2)\u5177\u6709\u53ef\u53d8\u8fb9\u754c\u7684\u5faa\u73af\uff0c\u548c(3)\u6761\u4ef6\u7b97\u5b50\u6765\u6269\u5c55\u5f20\u91cf\u7f16\u8bd1\u5668\u3002\u4e0b\u9762\u6211\u4eec\u5c06\u8fdb\u4e00\u6b65\u8be6\u7ec6\u63cf\u8ff0\u8fd9\u4e9b\u4fee\u6539\u3002</p>"},{"location":"mlc/paper-cortex.html#51-indirect-memory-accesses","title":"5.1. Indirect Memory Accesses","text":"<p>\u6211\u4eec\u5c06\u4f5c\u4e3a\u95f4\u63a5\u5185\u5b58\u8bbf\u95ee\u7684\u4e00\u90e8\u5206\u4ea7\u751f\u7684\u975eaffine\u7d22\u5f15\u8868\u8fbe\u5f0f\u8868\u793a\u4e3a\u5faa\u73af\u53d8\u91cf\u7684\u672a\u89e3\u91ca\u51fd\u6570\uff08Strout\u7b49\u4eba\uff0c2018\uff09\u3002\u95f4\u63a5\u5185\u5b58\u8bbf\u95ee\u9700\u8981\u8fdb\u4e00\u6b65\u7684\u6539\u53d8\uff0c\u8fd9\u5c06\u5728\u63a5\u4e0b\u6765\u63cf\u8ff0\u3002</p> <p>Bounds Inference: \u7f16\u8bd1\u8fc7\u7a0b\u4e2d\uff0c\u5f20\u91cf\u7f16\u8bd1\u5668\u4e3a\u8f93\u5165\u7a0b\u5e8f\u4e2d\u7684\u6240\u6709\u7b97\u5b50\u63a8\u65ad\u5faa\u73af\u8fb9\u754c\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u4ea7\u751f\u5f20\u91cf t \u7684\u7b97\u5b50\uff0c\u7f16\u8bd1\u5668\u9996\u5148\u8ba1\u7b97 t \u7684\u54ea\u4e9b\u533a\u57df\u662f\u5176\u6d88\u8d39\u8005\u9700\u8981\u7684\u3002\u7136\u540e\uff0c\u8fd9\u4e2a\u6570\u91cf\u88ab\u8f6c\u5316\u4e3a op \u7684\u5faa\u73af\u8fb9\u754c\u3002\u5728\u4f20\u7edf\u7684\u5f20\u91cf\u7f16\u8bd1\u5668\u4e2d\uff0c\u8fd9\u662f\u76f4\u63a5\u7684\uff0c\u56e0\u4e3a\u7b97\u5b50\u7684\u5faa\u73af\u548c\u76f8\u5e94\u7684\u5f20\u91cf\u5c3a\u5bf8\u4e4b\u95f4\u5b58\u5728\u7740\u4e00\u5bf9\u4e00\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\u7136\u800c\uff0cILIR\u7684\u60c5\u51b5\u5e76\u975e\u5982\u6b64\uff0c\u6b63\u5982\u6e05\u53552\u6240\u663e\u793a\u7684\u90a3\u6837\u3002\u5f20\u91cf lh\u3001 rh \u548c rnn \u5404\u6709\u4e24\u4e2a\u7ef4\u5ea6\uff0c\u4f46\u751f\u6210\u7684 ILIR \u5bf9\u5176\u76f8\u5e94\u7684\u7b97\u5b50\u90fd\u6709\u4e09\u4e2a\u5faa\u73af\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u8981\u6c42 ILIR \u660e\u786e\u8bf4\u660e\u5f20\u91cf\u5c3a\u5bf8\u4e0e\u76f8\u5e94\u7b97\u5b50\u7684\u5faa\u73af\u4e2d\u7684\u5faa\u73af\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\u8fd9\u5c06\u5728\u9644\u5f55\u7684A.2\u8282\u4e2d\u8fdb\u4e00\u6b65\u8ba8\u8bba\u3002</p> <p>Tensor Data Layouts: \u4e2d\u95f4\u5f20\u91cf\u7684\u6570\u636e\u5e03\u5c40\u7ecf\u5e38\u9700\u8981\u6539\u53d8\uff0c\u4ee5\u4fbf\u6709\u6548\u5730\u4f7f\u7528\u5185\u5b58\u5b50\u7cfb\u7edf\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u6837\u7684\u4f18\u5316\uff0cILIR\u516c\u5f00\u4e86\u6570\u636e\u5e03\u5c40\u57fa\u5143\uff0c\u5141\u8bb8\u5f20\u91cf\u5c3a\u5bf8\u88ab\u5206\u5272\u3001\u91cd\u65b0\u6392\u5e8f\u548c\u878d\u5408\uff0c\u7c7b\u4f3c\u4e8e\u76f8\u5e94\u7684\u5faa\u73af\u8f6c\u6362\u3002</p> <p>\u5f53\u4e2d\u95f4\u5f20\u91cf\u5b58\u50a8\u5728 scratchpad memory \u4e2d\u65f6\uff0c\u5982 \u56fe5 \u4e2d\u7684A1\uff0c \u7528\u975eaffine\u8868\u8fbe\u5f0f\u4e3a\u5176\u5efa\u7acb\u7d22\u5f15\u4f1a\u5bfc\u81f4\u5f20\u91cf\u7684\u7a00\u758f\u586b\u5145\u3002\u8fd9\u6837\u4e00\u4e2a\u7a00\u758f\u586b\u5145\u7684\u5f20\u91cf\u5360\u636e\u4e86\u8fc7\u591a\u7684\u5185\u5b58\uff0c\u8fd9\u662f\u6709\u95ee\u9898\u7684\uff0c\u56e0\u4e3a scratchpad memory \u5f88\u5b9d\u8d35\u3002\u8fd9\u53ef\u4ee5\u4ece \u56fe5 \u7684\u5de6\u8fb9\u5c3a\u5bf8\u770b\u51fa\uff0cA1\u7684\u4e00\u534a\u662f\u672a\u4f7f\u7528\u7684\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5faa\u73af\u8fed\u4ee3\u7a7a\u95f4\u5bf9\u5f20\u91cf\u8fdb\u884c\u7d22\u5f15\uff0c\u800c\u4e0d\u662f\u50cf \u56fe5 \u7684\u53f3\u8fb9\u90a3\u6837\u3002\u6ce8\u610f\u6211\u4eec\u73b0\u5728\u9700\u8981\u5728 scratchpad memory \u4e2d\u5206\u914d\u4e00\u4e2a\u5c0f\u5f97\u591a\u7684\u5f20\u91cf\u3002\u8fd9\u79cd\u8f6c\u6362\u4e5f\u901a\u8fc7\u5c06\u95f4\u63a5\u5185\u5b58\u8bbf\u95ee\u53d8\u6210\u4eff\u5c04\u8bbf\u95ee\u6765\u964d\u4f4e\u7d22\u5f15\u6210\u672c\u3002\u5b83\u4e5f\u88ab\u66b4\u9732\u4e3a\u4e00\u4e2a\u8c03\u5ea6\u57fa\u5143\u3002</p>"},{"location":"mlc/paper-cortex.html#52-conditional-operator","title":"5.2. Conditional Operator","text":"<p>\u4e3a\u4e86\u964d\u4f4e\u6761\u4ef6\u68c0\u67e5\uff0c\u5982\u6211\u4eec\u6a21\u578b\u4e2d\u7684 isleaf \u68c0\u67e5\uff0c\u6211\u4eec\u5728 ILIR \u4e2d\u6dfb\u52a0\u4e86\u4e00\u4e2a\u6761\u4ef6\u7b97\u5b50\u3002\u5b83\u9700\u8981\u4e24\u4e2a\u5b50\u56fe\u548c\u4e00\u4e2a\u6761\u4ef6\u68c0\u67e5\u4f5c\u4e3a\u8f93\u5165\uff0c\u5e76\u88ab\u964d\u4f4e\u4e3a\u4e00\u4e2aif\u8bed\u53e5\u3002\u5982\u679c\u7528\u6237\u6ca1\u6709\u4e13\u95e8\u7684\u53f6\u5b50\u68c0\u67e5\uff0c\u6761\u4ef6\u7b97\u5b50\u5c31\u4f1a\u5728\u6211\u4eec\u7684\u8fd0\u884c\u5b9e\u4f8b\u7684ILIR\u4e2d\u751f\u6210\u3002 \u5173\u4e8eILIR\u964d\u4f4e\u7684\u66f4\u591a\u7ec6\u8282\u4ee5\u53ca\u6211\u4eec\u5728\u5176\u4e2d\u505a\u7684\u4e00\u4e9b\u5c0f\u7684\u4f18\u5316\u53ef\u4ee5\u5728\u9644\u5f55\u4e2d\u627e\u5230\u3002</p>"},{"location":"mlc/paper-cortex.html#6-implementation","title":"6. IMPLEMENTATION","text":"<p>\u4e3a\u4e86\u8bc4\u4f30\u7684\u76ee\u7684\uff0c\u6211\u4eec\u5bf9\u666e\u901a\u60c5\u51b5\u4e0b\u7684 CORTEX pipeline \u8fdb\u884c\u4e86\u539f\u578b\u5316\u3002\u5728\u8fd9\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u8c08\u4e00\u8c08\u6709\u5173\u7684\u4e00\u4e9b\u5b9e\u73b0\u7ec6\u8282\u3002</p> <p>RA Lowering\u3002\u4f5c\u4e3aRA\u964d\u4f4e\u7684\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5df2\u7ecf\u5b9e\u73b0\u4e86\u5bf9\u52a8\u6001\u6279\u5904\u7406\u548c\u4e13\u4e1a\u5316\u7684\u652f\u6301\uff0c\u7528\u4e8e\u53f6\u5b50\u68c0\u67e5\u7684\u5e38\u89c1\u60c5\u51b5\u3002</p> <p>ILIR Lowering\u3002\u6211\u4eec\u6269\u5c55\u4e86TVM\uff08Chen\u7b49\u4eba\uff0c2018a\uff09v0.6\u3002\u6211\u4eec\u76ee\u524d\u7684\u539f\u578b\u5b9e\u73b0\u6ca1\u6709\u5bf9\u751f\u6210\u7684 ILIR \u8fdb\u884cauto-scheduling\u3002\u56e0\u6b64\uff0c\u7528\u4e8e\u8bc4\u4f30\u7684\u6a21\u578b implementations \u662f\u57fa\u4e8e\u624b\u52a8\u5b9a\u4e49\u7684\u8c03\u5ea6\u6a21\u677f\u3002\u7136\u540e\uff0c\u6211\u4eec\u901a\u8fc7\u7f51\u683c\u641c\u7d22\u8fdb\u884c  auto-tuning \uff0c \u4ee5\u641c\u7d22\u67d0\u4e9b\u8c03\u5ea6\u53c2\u6570\u3002\u4e4b\u524d\u5173\u4e8e\u81ea\u52a8\u8c03\u5ea6\u7684\u5de5\u4f5c\u662f\u5bf9\u6211\u4eec\u6280\u672f\u7684\u8865\u5145\uff0c\u5e76\u4e14\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5e94\u7528\u5230\u539f\u578b\u4e0a\u3002</p> <p>Data Structure Linearizers\u3002\u6211\u4eec\u5b9e\u65bd\u4e86\u6570\u636e\u7ed3\u6784\u7ebf\u6027\u5316\u5668\uff08\u6811\u548cDAG\u5404\u4e00\u4e2a\uff09\uff0c\u7528\u4e8e\u6211\u4eec\u7684\u8bc4\u4f30\u3002\u6211\u4eec\u5bf9\u6570\u636e\u7ed3\u6784\u8282\u70b9\u4f7f\u7528\u4e86\u4e00\u4e2a\u7f16\u53f7\u65b9\u6848\uff0c\u5728\u9644\u5f55\u7684 \u00a7B \u4e2d\u63cf\u8ff0\u4e86\u8fd9\u4e2a\u65b9\u6848\uff0c\u901a\u5e38\u53ef\u4ee5\u51cf\u5c11\u53f6\u5b50\u68c0\u67e5\u548c iterating over batches \u7684\u6210\u672c\u3002</p>"},{"location":"mlc/paper-cortex.html#7-evaluation","title":"7. EVALUATION","text":"<p>\u6211\u4eec\u73b0\u5728\u9488\u5bf9 Cavs\u3001DyNet \u548c PyTorch \u8bc4\u4f30 CORTEX\u3002 Cavs \u548c DyNet \u90fd\u662f\u5f00\u6e90\u7684\u3001\u6700\u5148\u8fdb\u7684\u9012\u5f52\u795e\u7ecf\u7f51\u7edc\u6846\u67b6\uff0c\u5e76\u4e14\u5df2\u88ab\u8bc1\u660e\u6bd4 PyTorch \u548c TensorFlow \u7b49\u901a\u7528\u6846\u67b6\u66f4\u5feb\uff08Neubig \u7b49\u4eba\uff0c2017b\uff1bXu \u7b49\u4eba\uff0c2018\uff09. \u5305\u542b PyTorch \u4ee5\u4f9b\u53c2\u8003\u3002 \u6211\u4eec\u5728 Intel \u548c ARM CPU \u4ee5\u53ca Nvidia GPU \u4e0a\u8bc4\u4f30\u8fd9\u4e9b\u7cfb\u7edf\u3002</p>"},{"location":"mlc/paper-cortex.html#8-related-work","title":"8. RELATED WORK","text":"<p>MLC\uff1a Tensor \u7f16\u8bd1\u5668\uff0c\u4f8b\u5982 TVM\u3001Halide\u3001Tiramisu\u3001Tensor Com-prehensions \u548c Taco\u3002 Taco \u652f\u6301\u7684\u7a00\u758f\u5f20\u91cf\u8ba1\u7b97\u4e0e ILIR \u4e4b\u95f4\u5b58\u5728\u76f8\u4f3c\u4e4b\u5904\uff0c\u8fd9\u5bfc\u81f4\u4e86\u76f8\u4f3c\u7684\u5b9e\u73b0\u6280\u672f\u3002 \u4f8b\u5982\uff0cthe idea of dense layouts for \u4e2d\u95f4\u5f20\u91cf(\u00a75.1) \u7c7b\u4f3c\u4e8e (Kjolstad et al., 2019) \u4e2d\u5f15\u5165\u7684 Taco \u5de5\u4f5c\u7a7a\u95f4\u7684\u6982\u5ff5\u3002 \u7136\u800c\uff0c\u66f4\u4e00\u822c\u5730\u8bf4\uff0cCORTEX \u6269\u5c55\u4e86 \u5f20\u91cf\u7f16\u8bd1\u5668 \u63d0\u4f9b\u7684\u62bd\u8c61\u4ee5\u652f\u6301\u9012\u5f52\u8ba1\u7b97\uff0c\u5e76\u4e3a\u6b64\u5f00\u53d1\u4e86\u4e13\u95e8\u7684\u4f18\u5316\u3002</p> <p>XLA (Team, 2017) \u548c Glow (Rotem et al., 2018) \u7b49 DLC \u4f18\u5316\u4e86\u9759\u6001\u524d\u9988\u6a21\u578b\uff0c\u53ef\u4ee5\u6267\u884c\u90e8\u5206\u5185\u6838\u878d\u5408\u548c\u4ee3\u7801\u751f\u6210\u3002 \u6b64\u5916\uff0c\u5728\uff08Radul \u7b49\u4eba\uff0c2020 \u5e74\uff09\u4e2d\uff0c\u4f5c\u8005\u5f00\u53d1\u4e86\u4e00\u4e9b\u6280\u672f\uff0c\u53ef\u4ee5\u5728\u4e3a XLA \u5de5\u5177\u94fe\u6267\u884c\u52a8\u6001\u6279\u5904\u7406\u65f6\u6709\u6548\u5730\u5c06\u9012\u5f52\u964d\u4f4e\u5230\u8fed\u4ee3\u63a7\u5236\u6d41\u4e2d\u3002 TensorRT\uff08NVIDIA\uff0c2020\uff09\u548c OpenVINO\uff08\u82f1\u7279\u5c14\uff0c2020b\uff09\u7b49\u63a8\u7406\u5f15\u64ce\u4f18\u5316\u63a8\u7406\u6a21\u578b\u6267\u884c\u3002 \u6211\u4eec\u5728\u672c\u6587\u4e2d\u5f00\u53d1\u7684\u6280\u672f\u53ef\u4ee5\u7528\u4f5c\u8fd9\u4e9b DLC \u548c\u4f18\u5316\u5668\u7684\u4f4e\u7ea7\u540e\u7aef\u3002 MLIR\uff08Lattner \u7b49\u4eba\uff0c2020 \u5e74\uff09\u63d0\u4f9b\u6784\u5efa DLC \u7684\u57fa\u7840\u8bbe\u65bd\uff0c\u5e76\u4e14 CORTEX \u6709\u53ef\u80fd\u4f7f\u7528 MLIR \u6784\u5efa\u3002</p> <p>Optimizing Dynamic Neural Networks\uff1a \u6709\u5927\u91cf\u5de5\u4f5c\u65e8\u5728\u4f18\u5316\u9012\u5f52\u548c\u66f4\u4e00\u822c\u7684\u52a8\u6001\u795e\u7ecf\u7f51\u7edc\u3002 \u52a8\u6001\u6279\u5904\u7406\u7684\u53d8\u4f53\u5df2\u7528\u4e8e DyNet\u3001Cavs\u3001BatchMaker\u3001TensorFlow Fold \u548c Matchbox \u7b49\u6846\u67b6\u4e2d\u3002 \u4e0e\u8fd9\u4e9b\u4e0d\u540c\uff0cCORTEX \u5728\u5f20\u91cf\u8ba1\u7b97\u4e4b\u524d\u6267\u884c\u52a8\u6001\u6279\u5904\u7406\u3002 Model persistence \u9996\u5148\u7531 Persistent RNNs \u63d0\u51fa\uff0c\u968f\u540e\u7528\u4e8e GRNN \u548c VPPS\uff0c\u5e76\u9002\u7528\u4e8e DeepCPU \u4e2d\u7684 CPU (Zhang et al., 2018) \u3002 CORTEX \u80fd\u591f\u5c06\u8fd9\u4e9b\u4f18\u5316\u6269\u5c55\u5230\u9012\u5f52\u6a21\u578b\uff0c\u5e76\u5c06\u5b83\u4eec\u5f62\u5f0f\u5316\u4e3a\u7f16\u8bd1\u5668\u4e2d\u7684\u8f6c\u6362\u539f\u8bed\u3002</p> <p>Nimble \u91c7\u7528 DLC \u6280\u672f\u4ee5\u66f4\u597d\u5730\u652f\u6301\u52a8\u6001\u6a21\u578b\u3002Janus \u63a8\u6d4b\u6027\u5730\u521b\u5efa\u4e86\u53ef\u4ee5\u4f18\u5316\u4ee5\u52a0\u901f\u52a8\u6001\u6a21\u578b\u7684\u6570\u636e\u6d41\u56fe\u3002 \u4e0e DyNet \u7c7b\u4f3c\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u8fd0\u884c\u65f6\u7684\u5f00\u9500\u3002 \u5728 (Jeong et al., 2018) \u4e2d\uff0c\u4f5c\u8005\u4f7f\u7528\u9012\u5f52\u6269\u5c55\u4e86 TensorFlow \u7684\u9759\u6001\u6570\u636e\u6d41\u56fe\u3002 \u6b64\u5916\uff0c\u867d\u7136 CORTEX \u76ee\u524d\u4e13\u6ce8\u4e8e\u975e\u5faa\u73af\u6570\u636e\u7ed3\u6784\uff0c\u4f46 ILIR \u57fa\u7840\u8bbe\u65bd\u4e5f\u53ef\u7528\u4e8e\u652f\u6301\u66f4\u591a\u56fe\u7684\u6df1\u5ea6\u5b66\u4e60\uff0c\u6b63\u5982 DGL \u6240\u652f\u6301\u7684\u90a3\u6837\uff08Wang \u7b49\u4eba\uff0c2019\uff09\u3002</p> <p>\u6b63\u5982\u6211\u4eec\u5728\u7b2c 3 \u8282\u4e2d\u770b\u5230\u7684\uff0c\u4e0e\u4e0a\u8ff0\u6846\u67b6\u76f8\u6bd4\uff0cCORTEX \u63d0\u4f9b\u4e86\u8f83\u4f4e\u7ea7\u522b\u7684\u7f16\u7a0b\u62bd\u8c61\u3002 \u6211\u4eec\u76f8\u4fe1 CORTEX \u6709\u53ef\u80fd\u7528\u4f5c\u8fd9\u4e9b\u6846\u67b6\u7684\u540e\u7aef\u3002</p> <p>Sparse Polyhedral Framework\uff1a \u7a00\u758f\u591a\u9762\u4f53\u6846\u67b6 (SPF)\uff08Strout \u7b49\u4eba\uff0c2018 \u5e74\uff1bMohammadi \u7b49\u4eba\uff0c2019 \u5e74\uff1bNandy \u7b49\u4eba\uff0c2018 \u5e74\uff09\u9488\u5bf9\u7a00\u758f\u5f20\u91cf\u8ba1\u7b97\u7684\u60c5\u51b5\u6269\u5c55\u4e86\u591a\u9762\u4f53\u6a21\u578b\u3002 CORTEX \u501f\u9274\u4e86\u8fd9\u4e9b\u4f5c\u54c1\u7684\u6280\u672f\uff0c\u4f8b\u5982\u4f7f\u7528\u672a\u89e3\u91ca\u7684\u51fd\u6570\u6765\u8868\u793a\u95f4\u63a5\u5185\u5b58\u8bbf\u95ee\u3002 CORTEX \u4e2d\u7684 data structure linearlizer \u53ef\u4ee5\u770b\u4f5c\u662f inspector-executor \u6280\u672f\u7684\u4e00\u4e2a\u5b9e\u4f8b (Agrawal et al., 1995)\u3002 \u5728 (van der Spek et al., 2010) \u4e2d\u4e5f\u63d0\u51fa\u4e86\u4f7f\u7528\u8fd9\u79cd\u6280\u672f\u6765\u964d\u4f4e\u6570\u636e\u7ed3\u6784\u3002</p>"},{"location":"mlc/paper-dietcode.html","title":"DIETCODE: AUTOMATIC OPTIMIZATION FOR DYNAMIC TENSOR PROGRAMS","text":""},{"location":"mlc/paper-dietcode.html#0-abstract","title":"0. Abstract","text":"<p>\u5c06\u73b0\u6709\u7684\u81ea\u52a8\u8c03\u5ea6\u7a0b\u5e8f\u76f4\u63a5\u5e94\u7528\u4e8e\u52a8\u6001\u5f62\u72b6\u7684\u5de5\u4f5c\u8d1f\u8f7d\u5f88\u56f0\u96be\uff0c\u56e0\u4e3a\u5f80\u5f80\u4f1a\u9700\u8981\u6781\u957f\u7684\u81ea\u52a8\u8c03\u5ea6\u65f6\u95f4\u3002</p> <p>\u6211\u4eec\u89c2\u5bdf\u5230: \u73b0\u6709\u81ea\u52a8\u8c03\u5ea6\u5668\u5904\u7406\u52a8\u6001\u5f62\u72b6\u9762\u4e34\u7684\u4e3b\u8981\u6311\u6218\u662f\u65e0\u6cd5\u4e3a\u6240\u6709\u53ef\u80fd\u7684\u5de5\u4f5c\u8d1f\u8f7d\u5f62\u72b6\u6784\u5efa\u7edf\u4e00\u7684\u641c\u7d22\u7a7a\u95f4\uff0c\u56e0\u4e3a\u641c\u7d22\u7a7a\u95f4\u662f\u4f9d\u8d56\u4e8e\u5f62\u72b6\u7684\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u63d0\u51fa\u4e86 DietCode\uff0c\u8fd9\u662f\u4e00\u79cd\u65b0\u7684\u81ea\u52a8\u8c03\u5ea6\u7a0b\u5e8f\u6846\u67b6\uff0c\u5b83\u901a\u8fc7\u6784\u5efa\u4e00\u4e2a\u5f62\u72b6\u901a\u7528\u7684\u641c\u7d22\u7a7a\u95f4\u548c cost model \u6765\u6709\u6548\u5730\u652f\u6301\u52a8\u6001\u5f62\u72b6\u7684\u5de5\u4f5c\u8d1f\u8f7d\u3002 \u5728\u8fd9\u79cd\u7ed3\u6784\u4e0b\uff0c\u6240\u6709\u5f62\u72b6\u5728\u540c\u4e00\u7a7a\u95f4\u5185\u8054\u5408\u641c\u7d22\u5e76\u5728\u81ea\u52a8\u8c03\u5ea6\u65f6\u66f4\u65b0\u76f8\u540c\u7684\u6210\u672c\u6a21\u578b\uff0c\u56e0\u6b64\u4e0e\u73b0\u6709\u7684\u81ea\u52a8\u8c03\u5ea6\u5668\u76f8\u6bd4\u6548\u7387\u66f4\u9ad8\u3002</p> <p>\u8bc4\u4f30\u8868\u660e\uff0cDietCode \u5728\u7aef\u5230\u7aef\u81ea\u52a8\u5b89\u6392\u6574\u4e2a\u6a21\u578b\u65f6\u5177\u6709\u4ee5\u4e0b\u5173\u952e\u4f18\u52bf\uff1a(1) \u5c06\u81ea\u52a8\u5b89\u6392\u65f6\u95f4\u51cf\u5c11\u4e86 5.88 \u500d\uff0c\u6bd4\u6700\u5148\u8fdb\u7684\u81ea\u52a8\u5b89\u6392\u7a0b\u5e8f\u5c11 \u5728\u5747\u5300\u91c7\u6837\u7684\u52a8\u6001\u5f62\u72b6\u4e0a\uff08\u5982\u679c\u5305\u62ec\u6240\u6709\u53ef\u80fd\u7684\u5f62\u72b6\uff0c\u4f30\u8ba1\u4e3a 94.1 \u500d\uff09\uff0c(2) \u6bd4\u81ea\u52a8\u8c03\u5ea6\u7a0b\u5e8f\u63d0\u9ad8\u4e86 69.5% \u7684\u6027\u80fd\uff0c\u6bd4\u4f9b\u5e94\u5546\u5e93\u63d0\u9ad8\u4e86 18.6%\u3002 \u6240\u6709\u8fd9\u4e9b\u4f18\u52bf\u4f7f DietCode \u6210\u4e3a\u52a8\u6001\u5f62\u72b6\u5de5\u4f5c\u8d1f\u8f7d\u7684\u9ad8\u6548\u5b9e\u7528\u89e3\u51b3\u65b9\u6848\u3002</p>"},{"location":"mlc/paper-dietcode.html#7-conclusion","title":"7. Conclusion","text":"<p>DietCode \u662f\u4e00\u79cd\u7528\u4e8e\u52a8\u6001\u5f62\u72b6\u5de5\u4f5c\u8d1f\u8f7d\u7684\u65b0\u7684\u81ea\u52a8\u8c03\u5ea6\u7a0b\u5e8f\u6846\u67b6\u3002 \u6211\u4eec\u7684\u8bc4\u4f30\u8868\u660e\uff0c\u5728 DietCode \u4e0a\u53ef\u4ee5\u5c06\u81ea\u52a8\u8c03\u5ea6\u65f6\u95f4\u663e\u7740\u51cf\u5c11 5.88 \u500d\uff08\u5982\u679c\u5305\u62ec\u6240\u6709\u53ef\u80fd\u7684\u5f62\u72b6\uff0c\u5219\u9884\u8ba1\u4e3a 94.1 \u500d\uff09\uff0c\u540c\u65f6\u5b9e\u73b0\u6bd4\u6700\u5148\u8fdb\u7684\u81ea\u52a8\u8c03\u5ea6\u9ad8\u51fa 69.5% \u7684\u6027\u80fd -\u8c03\u5ea6\u7a0b\u5e8f\uff0c\u5728\u7aef\u5230\u7aef\u7684\u5b8c\u6574\u6700\u5148\u8fdb\u7684 DNN \u6a21\u578b\u4e0a\u6bd4\u4f9b\u5e94\u5546\u5e93\u9ad8 18.6%\u3002 \u6211\u4eec\u5e0c\u671b DietCode \u5c06\u6210\u4e3a\u8fdb\u4e00\u6b65\u7814\u7a76\u5173\u952e\u673a\u5668\u5b66\u4e60\u5e94\u7528\u7684\u9ad8\u6548\u7cfb\u7edf\u8bbe\u8ba1\u7684\u9ad8\u6548\u5e73\u53f0\u3002</p>"},{"location":"mlc/paper-dietcode.html#1-intro","title":"1. Intro","text":""},{"location":"mlc/paper-disc.html","title":"DISC : A Dynamic Shape Compiler for Machine Learning Workloads","text":"<p>\u963f\u91cc\u7684\u5de5\u4f5c\uff0c\u57fa\u4e8e MLIR \u652f\u6301\u52a8\u6001\u5f62\u72b6\uff0c\u53d1\u5728 21\u5e74 EuroMLSys \u7c7b\u4f3c\u7684\u5de5\u4f5c\u6709 Nimble\uff0c Nimble \u7528\u7684\u662f VM \u65b9\u6848</p>"},{"location":"mlc/paper-disc.html#0-abstract","title":"0. Abstract","text":"<p>\u8bb8\u591a ML \u6a21\u578b\u90fd\u6709\u52a8\u6001\u5f62\u72b6\u7279\u5f81\u3002 \u7136\u800c\uff0c\u73b0\u6709\u7684 MLC \u4f18\u5316\u7cfb\u7edf\u53d7\u5230\u52a8\u6001\u5f62\u72b6\u6a21\u578b\u5e26\u6765\u7684\u5f88\u591a\u95ee\u9898\u7684\u56f0\u6270\uff0c\u5305\u62ec\u7f16\u8bd1\u5f00\u9500\u3001\u5185\u5b58\u4f7f\u7528\u3001\u4f18\u5316\u7ba1\u9053\u548c\u90e8\u7f72\u590d\u6742\u6027\u3002 \u672c\u6587\u63d0\u4f9b\u4e86DISC\uff0c\u4e00\u4e2a\u7f16\u8bd1\u5668\u7cfb\u7edf\u6765\u539f\u751f\u652f\u6301\u52a8\u6001\u5f62\u72b6\u5de5\u4f5c\u8d1f\u8f7d\u7684\u4f18\u5316\u3002 DISC \u4e30\u5bcc\u4e86\u4e00\u7ec4 IR \u4ee5\u5f62\u6210\u5b8c\u5168\u52a8\u6001\u7684\u5f62\u72b6\u8868\u793a\u3002 \u5b83\u5728\u7f16\u8bd1\u65f6\u751f\u6210\u8fd0\u884c\u65f6\u6d41\uff0c\u4ee5\u652f\u6301\u5904\u7406\u57fa\u4e8e\u52a8\u6001\u5f62\u72b6\u7684\u903b\u8f91\uff0c\u907f\u514d\u4e86\u8fd0\u884c\u65f6\u7684\u89e3\u91ca\u5f00\u9500\uff0c\u6269\u5927\u4e86\u4e3b\u673a-\u8bbe\u5907\u534f\u540c\u4f18\u5316\u7684\u673a\u4f1a\u3002 \u5b83\u901a\u8fc7\u5f62\u72b6\u4f20\u64ad\u548c\u7ea6\u675f\u6536\u96c6\u65b9\u6cd5\u89e3\u51b3\u4e86\u52a8\u6001\u5f62\u72b6\u7684\u6838\u878d\u5408\u95ee\u9898\u3002 \u8fd9\u662f\u7b2c\u4e00\u9879\u6f14\u793a\u5982\u4f55\u57fa\u4e8e MLIR \u57fa\u7840\u8bbe\u65bd\u6784\u5efa\u7aef\u5230\u7aef\u52a8\u6001\u5f62\u72b6\u7f16\u8bd1\u5668\u7684\u5de5\u4f5c\u3002 \u5b9e\u9a8c\u8868\u660e\uff0cDISC \u7684\u52a0\u901f\u6bd4 TensorFlow/PyTorch \u6700\u9ad8\u53ef\u8fbe 3.3 \u500d\uff0c\u6bd4 Nimble \u6700\u9ad8\u53ef\u8fbe 1.8 \u500d\u3002</p> <p>\u7591\u95ee</p> <p>\u4ec0\u4e48\u662f\u5728\u7f16\u8bd1\u65f6\u751f\u6210\u8fd0\u884c\u65f6\u6d41\uff1f</p>"},{"location":"mlc/paper-disc.html#7-conclusion","title":"7. Conclusion","text":"<p>DISC \u89e3\u51b3\u52a8\u6001\u5f62\u72b6\u4f18\u5316\u95ee\u9898\u3002 \u5b83\u6f14\u793a\u4e86\u5982\u4f55\u6784\u5efa\u57fa\u4e8e MLIR \u7684\u7f16\u8bd1\u5668\u7cfb\u7edf\u3002 DISC \u8865\u5145 HLO \u5f62\u6210 DHLO\u2014\u2014\u4e00\u79cd\u5b8c\u5168\u52a8\u6001\u7684\u5f62\u72b6\u8868\u793a\uff0c \u4f5c\u4e3a\u652f\u6301\u901a\u7528 ML \u6846\u67b6\u7684 hub IR\u3002 \u8fd0\u884c\u65f6\u6d41\u7a0b\uff0c\u5305\u62ec \u5f62\u72b6\u63a8\u65ad\u3001 \u7f13\u51b2\u533a\u7ba1\u7406 \u548c \u4e3b\u673a\u7aef\u63a7\u5236 \uff0c \u7531\u7f16\u8bd1\u5668\u751f\u6210\u3002 \u8fd9\u662f\u4e00\u79cd\u65e8\u5728\u51cf\u5c11\u89e3\u91ca\u5f00\u9500\u5e76\u4e30\u5bcc host-device-joint \u4f18\u5316\u673a\u4f1a\u7684\u65b0\u5c1d\u8bd5\u3002 \u901a\u8fc7 \u5f62\u72b6\u4f20\u64ad \u548c \u5f62\u72b6\u7ea6\u675f\u6536\u96c6\uff0c DISC \u5728\u6ca1\u6709\u5b8c\u6574\u5f62\u72b6\u4fe1\u606f\u7684\u60c5\u51b5\u4e0b\u5e94\u7528\u9ad8\u6548\u7684\u6838\u878d\u5408\u4f18\u5316\u3002 \u5b9e\u9a8c\u8868\u660e\uff0cDISC \u4ee5 1.8 \u500d\u7684\u52a0\u901f\u6bd4\u4f18\u4e8e\u6700\u5148\u8fdb\u7684\u89e3\u51b3\u65b9\u6848\u3002</p>"},{"location":"mlc/paper-disc.html#1-intro","title":"1. Intro","text":"<p>DL \u5de5\u4f5c\u8d1f\u8f7d\u53d7\u52a8\u6001\u5f62\u72b6\u5f71\u54cd\u6700\u5927\u7684\u64cd\u4f5c\u662f\u90a3\u4e9b\u5177\u6709\u5c0f\u89c4\u6a21\u8ba1\u7b97\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982 element-wise \u64cd\u4f5c \u548c reduction \u64cd\u4f5c\u3002 \u4f20\u7edf\u6280\u672f\uff0c\u5982 XLA[5]\uff0c\u901a\u5e38\u91c7\u7528\u878d\u5408\u65b9\u6cd5\u6765\u51cf\u5c11\u7247\u5916\u5185\u5b58\u8bbf\u95ee\u548c\u6b64\u7c7b\u64cd\u4f5c\u7684\u9891\u7e41\u5185\u6838\u542f\u52a8\u5f00\u9500\u3002 \u7136\u800c\uff0c\u73b0\u6709\u7684\u5185\u6838\u878d\u5408\u5f15\u64ce\u53ea\u80fd\u751f\u6210\u5177\u6709\u5728\u7f16\u8bd1\u671f\u95f4\u63a8\u65ad\u51fa\u7684\u9759\u6001\u5f62\u72b6\u4fe1\u606f\u7684 kernel \u3002 \u8fd9\u5bfc\u81f4\u878d\u5408\u5f15\u64ce\u5c06\u4e3a\u6bcf\u4e2a\u65b0\u51fa\u73b0\u7684\u5f62\u72b6\u7f16\u8bd1\u548c\u751f\u6210\u5185\u6838\uff0c\u5373\u4f7f\u5b83\u4eec\u4e2d\u7684\u4e00\u4e9b\u5171\u4eab\u76f8\u540c\u7684\u8ba1\u7b97\u6a21\u5f0f\u3002 \u5f53\u5f62\u72b6\u6570\u91cf\u5f88\u5927\u65f6\uff0c\u5b83\u4f1a\u5bfc\u81f4\u4e25\u91cd\u7684\u7f16\u8bd1\u5f00\u9500\u3002 \u7531\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0cXLA \u901a\u5e38\u5bf9\u52a8\u6001\u5f62\u72b6\u5de5\u4f5c\u8d1f\u8f7d\u5173\u95ed\uff0c\u4ee5\u9632\u6b62\u8d1f\u4f18\u5316\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u50cf GEMM/Conv \u8fd9\u6837\u7684\u5927\u578b\u64cd\u4f5c\u4e0d\u4f1a\u53d7\u5230\u52a8\u6001\u5f62\u72b6\u7684\u5f71\u54cd\uff0c\u56e0\u4e3a\u5b83\u4eec\u901a\u5e38\u4f1a\u901a\u8fc7\u5e93\u8c03\u7528\uff08cuDNN\u3001cuBLAS\u3001oneDNN\uff09\u800c\u4e0d\u662f\u7f16\u8bd1\u4f18\u5316\u3002 \u6211\u4eec\u5728\u672c\u6587\u4e2d\u5173\u6ce8\u5c0f\u578b\u64cd\u4f5c\u4f18\u5316\u76ee\u6807\u3002</p> <p>\u6709\u4e00\u4e9b\u57fa\u4e8e XLA \u7684\u52a8\u6001\u5f62\u72b6\u95ee\u9898\u7684\u53d8\u901a\u89e3\u51b3\u65b9\u6848\u3002 \u5f00\u53d1\u4eba\u5458\u53ea\u80fd\u5c06\u5177\u6709\u9759\u6001\u5f62\u72b6\u7684\u64cd\u4f5c\u805a\u7c7b\u4ee5\u4f9b XLA \u4f18\u5316\uff0c\u5e76\u8ba9\u5177\u6709\u52a8\u6001\u5f62\u72b6\u7279\u5f81\u7684\u64cd\u4f5c\u5728\u4e0d\u878d\u5408\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u3002 \u8fd9\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5931\u53bb\u4e86\u4f18\u5316\u673a\u4f1a\u3002 \u6b64\u5916\uff0c\u4e00\u4e9b\u5de5\u4f5c\u8d1f\u8f7d\u5728\u5b9e\u8df5\u4e2d\u53ea\u6709\u52a8\u6001\u5f62\u72b6\u7684\u64cd\u4f5c\u3002 \u53e6\u4e00\u79cd\u89e3\u51b3\u65b9\u6cd5\u662f\u4f7f\u7528\u586b\u5145\u548c\u5207\u7247\u5c06\u5f20\u91cf\u5f62\u6210\u7279\u5b9a\u5f62\u72b6\uff0c\u8fd9\u4f1a\u5f15\u5165\u5197\u4f59\u8ba1\u7b97\u5e76\u53ef\u80fd\u5bfc\u81f4\u8d1f\u4f18\u5316\u3002</p> <p>MLIR[12] \u4e3a\u65b0\u7684\u673a\u5668\u5b66\u4e60\u7f16\u8bd1\u5668\u63d0\u4f9b\u4e86\u57fa\u7840\u8bbe\u65bd\u3002 \u5b83\u4e3a\u65b0\u529f\u80fd\u5e26\u6765\u4e86\u9ad8\u6269\u5c55\u6027\u548c\u5bf9\u73b0\u6709\u4f18\u5316\u6784\u5efa\u7684\u517c\u5bb9\u6027\u3002 \u540c\u65f6\uff0c\u5176\u8bbe\u8ba1\u7406\u5ff5\u81ea\u7136\u652f\u6301\u52a8\u6001\u5f62\u72b6\u4f18\u5316\u3002 \u7136\u800c\uff0c\u5b83\u5e26\u6765\u7684\u662f\u57fa\u7840\u8bbe\u65bd\uff0c\u800c\u4e0d\u662f\u52a8\u6001\u5f62\u72b6\u95ee\u9898\u672c\u8eab\u7684\u89e3\u51b3\u65b9\u6848\u3002 Nimble[15] \u662f\u4e00\u4e2a\u57fa\u4e8e TVM \u7684\u7f16\u8bd1\u6846\u67b6\uff0c\u7528\u4e8e\u89e3\u51b3\u52a8\u6001\u5f62\u72b6\u95ee\u9898\uff0c\u5b83\u662f\u4e0e DISC \u7684\u5e76\u884c\u5de5\u4f5c\uff0cDISC \u6709\u4e00\u4e2a\u66f4\u65e9\u7684 RFC \u7248\u672c[7]\u3002 \u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7f16\u8bd1\u5668\u6846\u67b6\uff0c\u80fd\u591f\u5728\u8fd0\u884c\u65f6\u9002\u5e94\u52a8\u6001\u5f62\u72b6\u7684\u64cd\u4f5c\u3002 \u8fd0\u884c\u65f6\u63a7\u5236\u903b\u8f91\u662f\u4f5c\u4e3a VM \u7ec4\u4ef6\u9884\u5148\u6784\u5efa\u7684\u3002 Nimble \u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5b83\u5c06\u8fd0\u884c\u65f6\u63a7\u5236\u9884\u5148\u6784\u5efa\u4e3a VM\uff0c\u8fd9\u5c31\u5931\u53bb\u4e86\u63a2\u7d22\u4e3b\u673a\u8bbe\u5907\u534f\u540c\u4f18\u5316\u7684\u673a\u4f1a\u3002 \u540c\u65f6\uff0cVM \u65b9\u6cd5\u5e26\u6765\u4e86\u89e3\u91ca\u5f00\u9500\u3002</p> <p>\u6211\u4eec\u63d0\u51fa DISC\uff0c\u4e00\u79cd\u7528\u4e8e\u673a\u5668\u5b66\u4e60\u5de5\u4f5c\u8d1f\u8f7d\u7684\u52a8\u6001\u5f62\u72b6\u7f16\u8bd1\u5668\u3002 \u6211\u4eec\u57fa\u4e8e MLIR \u57fa\u7840\u8bbe\u65bd\u6784\u5efa DISC\uff0c\u4ee5\u4ece\u9ad8\u7ea7\u8bbe\u8ba1\u89d2\u5ea6\u5229\u7528\u5176\u5bf9\u52a8\u6001\u5f62\u72b6\u7684\u539f\u751f\u652f\u6301\u3002 DISC \u89e3\u51b3\u4e86\u52a8\u6001\u5f62\u72b6\u4f18\u5316\u7684\u51e0\u4e2a\u4e3b\u8981\u95ee\u9898\u3002</p> <ol> <li> <p>\u7f3a\u4e4f\u5bf9\u73b0\u6709 IR \u7684\u52a8\u6001\u5f62\u72b6\u8ba1\u7b97\u7684\u5b8c\u6574\u8868\u793a\u3002 \u8bf7\u6ce8\u610f\uff0cMLIR \u4e0d\u76f4\u63a5\u63d0\u4f9b\u52a8\u6001\u5f62\u72b6 IR \u8868\u8fbe\u5f0f\u3002 \u6211\u4eec\u4e0d\u4f1a\u4ece\u5934\u5f00\u59cb\u6784\u5efa\u4e00\u5957\u65b0\u7684 IR\uff0c\u800c\u662f\u5728 HLO \u65b9\u8a00\u7684\u57fa\u7840\u4e0a\u5f15\u5165 DHLO\uff0c\u8be5 IR \u5df2\u7ecf\u5728 XLA \u4e2d\u4f7f\u7528\u3002 \u8fd9\u79cd\u65b9\u6cd5\u4f7f\u6211\u4eec\u80fd\u591f\u91cd\u7528 XLA \u548c MLIR-HLO \u65b9\u8a00\u7684\u4e00\u4e9b\u73b0\u6709\u6784\u5efa\u5757\u3002</p> </li> <li> <p>\u6784\u5efa\u9ad8\u6548\u7684\u8fd0\u884c\u65f6\u6d41\u7a0b\u4ee5\u652f\u6301\u52a8\u6001\u5f62\u72b6\u903b\u8f91\u3002 \u6211\u4eec\u4e0d\u662f\u5728\u8fd0\u884c\u65f6\u6784\u5efa VM \u6765\u89e3\u91ca\u52a8\u6001\u5f62\u72b6\u6d41\uff0c\u800c\u662f\u5728\u7f16\u8bd1\u65f6\u5373\u65f6\u751f\u6210\u8fd0\u884c\u65f6\u6d41\u7684\u4ee3\u7801\u3002 \u8fd9\u907f\u514d\u4e86 VM \u7684\u89e3\u91ca\u5f00\u9500\u3002 \u540c\u65f6\uff0c\u8fd9\u79cd\u65b9\u6cd5\u6269\u5927\u4e86\u4e3b\u673a\u8bbe\u5907\u534f\u540c\u4f18\u5316\u7684\u673a\u4f1a\uff0c\u56e0\u4e3a DISC \u5c06\u8bbe\u5907\u8ba1\u7b97\u548c\u4e3b\u673a\u7aef\u903b\u8f91\u4e00\u8d77\u7f16\u8bd1\u3002</p> </li> <li> <p>\u5728\u4e0d\u77e5\u9053\u5b8c\u6574\u5f62\u72b6\u4fe1\u606f\u7684\u60c5\u51b5\u4e0b\u751f\u6210\u6709\u6548\u7684\u878d\u5408\u6838\u3002 \u6211\u4eec\u68c0\u67e5\u5177\u6709\u4e24\u4e2a\u6536\u96c6\u7279\u5f81\u7684\u4e24\u4e2a\u64cd\u4f5c\u7684\u5f62\u72b6\u517c\u5bb9\u6027\u3002 \u6211\u4eec\u9996\u5148\u5229\u7528\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u4e4b\u95f4\u7684\u5f62\u72b6\u4f20\u64ad\u5c5e\u6027\u6765\u878d\u5408\u76f8\u90bb\u7684\u64cd\u4f5c\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u5728\u5c06\u8ba1\u7b97\u56fe\u964d\u4f4e\u5230 DHLO \u65f6\u6536\u96c6\u5f62\u72b6\u7ea6\u675f\u3002 \u989d\u5916\u7684\u5f62\u72b6\u7ea6\u675f\u4fe1\u606f\u4f7f\u6211\u4eec\u80fd\u591f\u5f62\u6210\u66f4\u5927\u8303\u56f4\u7684\u878d\u5408\uff0c\u4ee5\u8fdb\u4e00\u6b65\u51cf\u5c11\u7247\u5916\u5185\u5b58\u8bbf\u95ee\u548c\u5185\u6838\u542f\u52a8\u5f00\u9500\u3002</p> </li> <li> <p>\u6700\u540e\uff0cDISC \u4ee5 DHLO \u4e3a\u4e2d\u5fc3\u652f\u6301\u591a\u79cd\u673a\u5668\u5b66\u4e60\u6846\u67b6\uff08TensorFlow \u548c PyTorch\uff09\u3002 \u540c\u65f6\uff0cDISC \u652f\u6301\u9759\u6001\u548c\u52a8\u6001\u4f18\u5316\u7684\u6df7\u5408\u3002 \u5f53 DISC \u53d1\u73b0\u5177\u6709\u9759\u6001\u5f62\u72b6\u7684\u5b50\u56fe\u65f6\uff0c\u5b83\u5c06\u56de\u9000\u5230\u9759\u6001\u4f18\u5316\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd\u3002</p> </li> </ol> <p>\u5b9e\u9a8c\u7ed3\u679c\u8868\u660e\uff0cDISC \u4f18\u4e8e Tensor-Flow/PyTorch\uff0c6 \u4e2a\u6d41\u884c\u6a21\u578b\u7684\u5e73\u5747\u52a0\u901f\u6bd4\u4e3a 2.27 \u500d\uff0cTransformer \u7684\u5e73\u5747\u52a0\u901f\u6bd4\u4e3a 1.8 \u500d\u3002</p> <p>\u8d21\u732e\uff1a</p> <ul> <li>\u8fd9\u662f\u7b2c\u4e00\u9879\u6f14\u793a\u5982\u4f55\u4f7f\u7528MLIR \u57fa\u7840\u7ed3\u6784\u9ad8\u6548\u5730\u6784\u5efa\u652f\u6301\u52a8\u6001\u5f62\u72b6\u7684\u7f16\u8bd1\u5668\u7684\u5de5\u4f5c\u3002</li> <li>\u5b83\u63d0\u51fa\u4e86\u4e00\u79cd\u901a\u8fc7\u8bbe\u8ba1\u5b8c\u5168\u52a8\u6001\u7684IR \u548c\u7f16\u8bd1\u65f6\u751f\u6210\u7684\u8fd0\u884c\u65f6\u6d41\u7a0b\u6765\u652f\u6301\u52a8\u6001\u5f62\u72b6\u5904\u7406\u7684\u65b9\u6cd5\u3002</li> <li>\u5b83\u89e3\u51b3\u4e86\u6ca1\u6709\u5b8c\u6574\u5f62\u72b6\u4fe1\u606f\u7684\u878d\u5408\u95ee\u9898\uff0c\u7279\u522b\u662f\u4f7f\u7528\u989d\u5916\u7684\u5f62\u72b6\u7ea6\u675f\u6536\u96c6\u65b9\u6cd5\u3002</li> <li>\u5b83\u652f\u6301\u591a\u79cd\u673a\u5668\u5b66\u4e60\u6846\u67b6\u548c\u9759\u6001/\u52a8\u6001\u4f18\u5316\u7684\u6df7\u5408\u3002</li> </ul>"},{"location":"mlc/paper-disc.html#2-background","title":"2. Background","text":"<p>\u73b0\u4ee3\u673a\u5668\u5b66\u4e60\u6a21\u578b\u7684\u8ba1\u7b97\u56fe\u7531\u8ba1\u7b97\u548c\u5185\u5b58\u5bc6\u96c6\u578b\u64cd\u4f5c\u7ec4\u6210\u3002 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06 GEMM \u548c Conv \u79f0\u4e3a\u8ba1\u7b97\u5bc6\u96c6\u578b\u8fd0\u7b97\uff0c\u5c06\u5176\u4ed6\u8fd0\u7b97\u79f0\u4e3a\u5185\u5b58\u5bc6\u96c6\u578b\u8fd0\u7b97\u3002 \u8ba1\u7b97\u5bc6\u96c6\u578b\u64cd\u4f5c\u901a\u5e38\u5728\u6d41\u884c\u7684\u673a\u5668\u5b66\u4e60\u6846\u67b6\u4e2d\u4f7f\u7528\u9884\u6784\u5efa\u5e93\u8c03\u7528\uff0c\u4f8b\u5982 cuDNN \u548c cuBLAS\u3002 \u5185\u5b58\u5bc6\u96c6\u578b\u64cd\u4f5c\u901a\u8fc7\u5177\u6709\u5185\u6838\u878d\u5408\u548c\u4ee3\u7801\u751f\u6210\u6280\u672f\u7684 MLC \u8fdb\u884c\u4f18\u5316\u3002 \u8bf7\u6ce8\u610f\uff0c\u5355\u4e2a\u5185\u5b58\u5bc6\u96c6\u578b\u64cd\u4f5c\uff08\u5982 Add \u64cd\u4f5c\uff09\u7684\u6743\u91cd\u592a\u8f7b\uff0c\u65e0\u6cd5\u4e3a\u5176\u6784\u5efa\u5e93\u3002 \u540c\u65f6\uff0c\u5185\u5b58\u5bc6\u96c6\u578b\u64cd\u4f5c\u7684\u7ec4\u5408\u5728\u4e0d\u540c\u7684\u5de5\u4f5c\u8d1f\u8f7d\u4e2d\u6709\u6240\u4e0d\u540c\uff0c\u5e76\u4e14\u4e3a\u6b64\u7c7b\u64cd\u4f5c\u9884\u6784\u5efa\u878d\u5408\u5185\u6838\u662f\u4e0d\u53ef\u884c\u7684\u3002</p> <p>\u9762\u5411\u9759\u6001\u5f62\u72b6\u7684\u7f16\u8bd1\u5668\u3002 \u6211\u4eec\u91c7\u7528 XLA[5]\uff0c\u7528\u4e8e\u5185\u5b58\u5bc6\u96c6\u578b\u64cd\u4f5c\u7684\u6700\u5148\u8fdb\u7684\u7f16\u8bd1\u5668\u4f18\u5316\u5f15\u64ce\uff0c\u6765\u89e3\u91ca\u9759\u6001\u5f62\u72b6\u7f16\u8bd1\u5668\u7684\u5de5\u4f5c\u539f\u7406\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u8ba1\u7b97\u56fe\uff0cXLA \u9996\u5148\u5c06\u5176\u8f6c\u5316\u4e3a HLO IR\u3002 \u7136\u540e\u5b83\u627e\u5230\u53ef\u4ee5\u878d\u5408\u5728\u4e00\u8d77\u7684\u64cd\u4f5c\u5e76\u751f\u6210\u878d\u5408\u5185\u6838\uff0c\u8fd9\u4e9b\u5185\u6838\u5c06\u6839\u636e\u878d\u5408\u6a21\u5f0f\u8fdb\u884c\u7f13\u5b58\u3002 \u878d\u5408\u6a21\u5f0f\u5305\u542b\u5177\u6709\u5b8c\u6574\u5f62\u72b6\u4fe1\u606f\u7684\u64cd\u4f5c\u5e8f\u5217\u3002 \u5f53 XLA \u9047\u5230\u4e00\u4e2a\u878d\u5408\u6a21\u5f0f\u65f6\uff0c\u5b83\u4f1a\u9996\u5148\u68c0\u67e5\u8fd9\u4e2a\u6a21\u5f0f\u662f\u5426\u5df2\u7ecf\u88ab\u7f13\u5b58\u4e86\u3002 \u5982\u679c\u547d\u4e2d\uff0c\u5b83\u5c06\u76f4\u63a5\u4f7f\u7528\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5426\u5219\u5b83\u5c06\u9488\u5bf9\u65b0\u6a21\u5f0f\u8fdb\u884c\u7f16\u8bd1\u5e76\u7f13\u5b58\u7f16\u8bd1\u7ed3\u679c\u3002</p> <p>\u7f3a\u4e4f\u5bf9\u52a8\u6001\u5f62\u72b6\u7684\u5173\u6ce8\u3002 XLA \u7684\u8fc7\u7a0b\u9002\u7528\u4e8e\u9759\u6001\u5f62\u72b6\u573a\u666f\uff0c\u4f46\u5bf9\u4e8e\u52a8\u6001\u5f62\u72b6\u5de5\u4f5c\u8d1f\u8f7d\u6548\u7387\u8f83\u4f4e\u3002 \u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u662f\u5177\u6709\u4e0d\u540c\u8f93\u5165/\u8f93\u51fa\u5e8f\u5217\u957f\u5ea6\u7684 Seq2seq \u6a21\u578b\u3002 \u867d\u7136\u8ba1\u7b97\u56fe\u6ca1\u6709\u53d8\u5316\uff0c\u4f46 XLA \u9700\u8981\u4e3a\u4e0d\u540c\u957f\u5ea6\u7684\u6837\u672c\u91cd\u65b0\u7f16\u8bd1\u878d\u5408\u5185\u6838\u3002 \u5f53\u5f62\u72b6\u6570\u91cf\u5f88\u5927\u65f6\uff0c\u7f16\u8bd1\u65f6\u95f4\u548c\u4e3b\u673a/\u8bbe\u5907\u5185\u5b58\u4f7f\u7528\u7f13\u5b58\u7684\u5f00\u9500\u4f7f\u5f97\u9762\u5411\u9759\u6001\u5f62\u72b6\u7684\u7f16\u8bd1\u4e0d\u53ef\u7528\u3002 \u5176\u4ed6\u906d\u53d7\u52a8\u6001\u5f62\u72b6\u95ee\u9898\u56f0\u6270\u7684\u5178\u578b\u5de5\u4f5c\u8d1f\u8f7d\u5305\u62ec\u5904\u7406\u4e0d\u540c\u56fe\u50cf\u5927\u5c0f\u7684 CV \u5de5\u4f5c\u8d1f\u8f7d\uff08\u5982\u5bf9\u8c61\u68c0\u6d4b\uff09\uff0c\u4ee5\u53ca\u4f7f\u7528 Unique[4] ops \u751f\u6210\u5177\u6709\u4e0d\u540c\u5f62\u72b6\u7684\u8f93\u51fa\u5f20\u91cf\u7684\u7a00\u758f\u5de5\u4f5c\u8d1f\u8f7d\u3002</p> <p>DISC \u751f\u6210\u9002\u5e94\u4efb\u4f55\u5373\u5c06\u51fa\u73b0\u7684\u5f62\u72b6\u7684\u878d\u5408\u5185\u6838\uff0c\u5e76\u907f\u514d\u91cd\u65b0\u7f16\u8bd1\u3002 \u57fa\u672c\u7684\u89c1\u89e3\u662f\u6211\u4eec\u4e0d\u9700\u8981\u8003\u8651\u5f62\u72b6\u4fe1\u606f\u6765\u68c0\u67e5\u4e24\u4e2a\u878d\u5408\u6a21\u5f0f\u662f\u5426\u76f8\u540c\u4ee5\u8fdb\u884c\u4ee3\u7801\u751f\u6210\u3002 \u8bf7\u6ce8\u610f\uff0cDISC \u4ec5\u9488\u5bf9\u5177\u6709\u9759\u6001 rank \u7684\u52a8\u6001\u5f62\u72b6\uff0c\u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u53d1\u73b0\u52a8\u6001 rank \u662f\u4e00\u79cd\u6d41\u884c\u7684\u884c\u4e3a\u3002</p> <p>MLIR \u57fa\u7840\u8bbe\u65bd \u6211\u4eec\u57fa\u4e8e MLIR \u57fa\u7840\u8bbe\u65bd[12]\u6784\u5efa DISC\uff0c\u65e8\u5728\u5e2e\u52a9\u6784\u5efa\u53ef\u91cd\u7528\u548c\u53ef\u6269\u5c55\u7684\u7f16\u8bd1\u5668\u57fa\u7840\u8bbe\u65bd\u3002 \u6211\u4eec\u9009\u62e9 MLIR\uff0c\u56e0\u4e3a\u5b83\u5bf9\u6269\u5c55\u662f\u5f00\u653e\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u9002\u5e94\u57fa\u4e8e\u5177\u6709\u65b9\u8a00\u8f6c\u6362\u7684\u5176\u4ed6 IR \u7684\u73b0\u6709\u4f18\u5316\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u5b83\u5141\u8bb8\u901a\u8fc7\u5c06 MLIR-HLO \u65b9\u8a00\u964d\u4f4e\u5230 HLO \u6765\u91cd\u7528 XLA \u7684\u73b0\u6709\u4f18\u5316\u7ec4\u4ef6\u3002</p> <p>MLIR \u53ea\u662f IR \u6846\u67b6\uff0c\u672c\u8eab\u4e0d\u63d0\u4f9b\u89e3\u51b3\u52a8\u6001\u5f62\u72b6\u64cd\u4f5c\u4f18\u5316\u7b49\u95ee\u9898\u7684\u65b9\u6cd5\u3002 DISC \u5c55\u793a\u4e86\u4e00\u79cd\u6784\u5efa\u5b8c\u6574\u4f18\u5316\u7cfb\u7edf\u7684\u65b9\u6cd5\uff0c\u8be5\u7cfb\u7edf\u4ee5 MLIR \u7684\u52a8\u6001\u5f62\u72b6\u5de5\u4f5c\u8d1f\u8f7d\u4e3a\u76ee\u6807\u3002</p>"},{"location":"mlc/paper-disc.html#3-overview-of-disc","title":"3. Overview of DISC","text":"<p>DISC \u7684\u7b2c\u4e00\u4e2a\u7ec4\u4ef6\u662f computation graph bridging \uff0c \u5b83\u5c06\u7528 DL \u6846\u67b6\u63cf\u8ff0\u7684\u8ba1\u7b97\u56fe\u964d\u4f4e\u5230 DISC \u4e2d\u4f7f\u7528\u7684 hub IR\uff08\u7b2c 4.1 \u8282\uff09\u3002 DISC \u8fd8\u5728\u8fd9\u4e00\u5c42\u6536\u96c6\u5f62\u72b6\u7ea6\u675f\u4fe1\u606f\uff0c\u4ee5\u5e2e\u52a9\u8fdb\u884c\u878d\u5408\u4f18\u5316\uff08\u7b2c 4.2.1 \u8282\uff09\u3002</p> <p>\u4e2d\u5fc3 IR DHLO\uff0c\u4ece HLO \u65b9\u8a00\u6269\u5c55\u800c\u6765\uff0c\u4ee5\u652f\u6301\u5b8c\u5168\u52a8\u6001\u7684\u5f62\u72b6\u3002</p> <p>\u52a8\u6001\u5f62\u72b6\u5de5\u4f5c\u8d1f\u8f7d\u7684\u57fa\u672c\u6267\u884c\u6d41\u7a0b\u662f\u5728\u6ca1\u6709\u5b8c\u6574\u5f62\u72b6\u4fe1\u606f\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u7f16\u8bd1\uff0c\u5e76\u5728\u8fd0\u884c\u65f6\u83b7\u53d6\u5f62\u72b6\u4fe1\u606f\u3002 DISC \u5728\u7f16\u8bd1\u65f6\u5c06\u5f62\u72b6\u8ba1\u7b97\u548c\u6570\u636e\u5904\u7406\u5206\u5f00\u3002 \u5b83\u7b26\u5408\u5f62\u72b6\u8ba1\u7b97\u903b\u8f91\u5e76\u5bf9\u5176\u8fdb\u884c\u4ee3\u7801\u751f\u6210\u3002 \u653e\u7f6e\u5668\u7ec4\u4ef6\u5c06\u5f62\u72b6\u8ba1\u7b97\u903b\u8f91\u653e\u5728\u4e3b\u673a\u7aef\uff0c\u5c06\u5f20\u91cf\u8ba1\u7b97\u5185\u6838\u653e\u5728\u8bbe\u5907\u7aef\u3002 \u751f\u6210\u7684\u5f62\u72b6\u63a8\u7406\u51fd\u6570\u5c06\u5728\u6267\u884c\u6a21\u578b\u65f6\u5728\u4e3b\u673a\u7aef\u5904\u7406\u3002</p> <p>\u7f13\u51b2\u533a\u7ba1\u7406\u7ec4\u4ef6\u7ba1\u7406\u8ba1\u7b97\u56fe\u4e2d\u5f20\u91cf\u7684\u7f13\u51b2\u533a\u751f\u547d\u5468\u671f\u3002 DISC \u5728\u7f16\u8bd1\u65f6\u751f\u6210\u6709\u5173\u7f13\u51b2\u533a\u5206\u914d\u3001\u91cd\u7528\u548c\u91ca\u653e\u903b\u8f91\u7684\u4ee3\u7801\uff0c\u5e76\u5728\u8fd0\u884c\u65f6\u6267\u884c\u7f16\u8bd1\u540e\u7684\u6d41\u7a0b\u3002 \u57fa\u672c\u7684\u4f18\u5316\u89c4\u5219\u662f\u4e00\u65e6\u6ca1\u6709\u7528\u6237\u5c31\u91ca\u653e\u7f13\u51b2\u533a\uff0c\u5e76\u6839\u636e\u201c\u5f62\u72b6\u517c\u5bb9\u6027\u201d\u5c3d\u53ef\u80fd\u591a\u5730\u91cd\u7528\u7f13\u51b2\u533a\u3002</p> <p>\u4e3b\u673a\u7aef\u63a7\u5236\u8d1f\u8d23\u5916\u90e8\u5e93\u964d\u7ea7\u3001\u5185\u6838\u542f\u52a8\u7ba1\u7406\u3001\u8bbe\u5907\u7ba1\u7406\u4ee5\u53ca\u7f16\u8bd1\u5f15\u64ce\u4e0eAI\u6846\u67b6\u7684\u4ea4\u4e92</p>"},{"location":"mlc/paper-disc.html#4-system-design","title":"4. System Design","text":"<p>\u52a8\u6001\u5f62\u72b6\u7f16\u8bd1\u5668\u7684\u7b2c\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5b83\u7f3a\u5c11 IR \u8868\u8fbe\u3002 \u6211\u4eec\u6269\u5c55 HLO \uff0c \u5f15\u5165 DHLO \u4f5c\u4e3a IR \u4ee5\u652f\u6301\u5b8c\u6574\u7684\u52a8\u6001\u5f62\u72b6\u7279\u5f81 (4.1)\u3002 \u4ee5 DHLO \u4f5c\u4e3a\u4e2d\u5fc3 IR\uff0cDISC \u53ef\u4ee5\u652f\u6301\u591a\u4e2a\u524d\u7aef\u548c\u540e\u7aef\uff084.4\uff09\u3002 \u4e3a\u4e86\u6ee1\u8db3\u52a8\u6001\u5f62\u72b6\u652f\u6301\u7684\u8fd0\u884c\u65f6\u8981\u6c42\uff0cDISC \u751f\u6210\u8fd0\u884c\u65f6\u6d41\uff084.2\uff09\u4ee5\u907f\u514d\u89e3\u91ca\u5f00\u9500\u3002 \u6700\u540e\uff0cDISC \u5206\u6790\u5f62\u72b6\u63d0\u793a\u4ee5\u652f\u6301\u878d\u5408\u4f18\u5316 (4.3)\u3002</p>"},{"location":"mlc/paper-disc.html#41-dhlo-ir-supplementation","title":"4.1. DHLO: IR Supplementation","text":"<p>MLIR \u57fa\u7840\u8bbe\u65bd\u7075\u6d3b\u4e14\u6613\u4e8e\u6269\u5c55\u4ee5\u652f\u6301\u591a\u79cd\u529f\u80fd\u3002 \u7136\u800c\uff0c\u5b83\u53ea\u63d0\u4f9b\u57fa\u7840\u8bbe\u65bd\u800c\u4e0d\u5177\u4f53\u65b9\u6cd5\u6765\u76f4\u63a5\u652f\u6301\u52a8\u6001\u5f62\u72b6\u3002 \u6211\u4eec\u9009\u62e9 HLO IR \u4e3a\u52a8\u6001\u5f62\u72b6\u95ee\u9898\u6784\u5efa MLIR dialect\uff0c\u56e0\u4e3a HLO \u5df2\u7ecf\u652f\u6301\u8bb8\u591a\u64cd\u4f5c\u63cf\u8ff0\u548c\u4e0d\u540c\u7684\u6846\u67b6\u3002 HLO \u662f\u4e3a\u9759\u6001\u5f62\u72b6\u7f16\u8bd1\u5668\u4f18\u5316\u800c\u8bbe\u8ba1\u7684\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u7f3a\u4e4f\u5bf9\u52a8\u6001\u5f62\u72b6\u7684\u8868\u8fbe\u80fd\u529b\u3002 \u4f5c\u4e3a\u89e3\u51b3\u65b9\u6848\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u7ec4 IR supplementation \u6269\u5c55 HLO \u5e76\u5f15\u5165 DHLO\u3002</p> <p>IR supplementation \u7684\u89c1\u89e3\u662f\u5c06\u7f16\u8bd1\u65f6\u5e38\u91cf\u6298\u53e0\u66ff\u6362\u4e3a\u8fd0\u884c\u65f6\u5f20\u91cf\u6570\u636e\u6d41\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u8981\u6269\u5c55 IR \u8868\u793a\u7684\u76ee\u6807\u64cd\u4f5c\u662f\u90a3\u4e9b\u5728 HLO \u4e2d\u5177\u6709\u5e38\u91cf\u6298\u53e0\u5c5e\u6027\u7684\u64cd\u4f5c\uff0c\u5982 slice\u3001pad\u3001broadcast \u7b49\u3002 \u5728 DHLO \u4e2d\uff0c\u6211\u4eec\u7528\u5f20\u91cf\u53c2\u6570\u66ff\u6362\u5e38\u91cf\u5c5e\u6027\u4ee5\u652f\u6301\u52a8\u6001\u5f62\u72b6\u884c\u4e3a\u3002 </p> <p>\u4ee5 slice[6] \u4e3a\u4f8b\uff0c\u5982\u56fe 2 \u6240\u793a\u3002slice op \u4ece\u7ed9\u5b9a\u8fb9\u754c\u6846\u7d22\u5f15\u7684\u8f93\u5165\u5f20\u91cf\u4e2d\u63d0\u53d6\u5b50\u5f20\u91cf\u3002 \u5728 HLO \u4e2d\uff0c\u8fb9\u754c\u6846\u7684\u7d22\u5f15\u5728\u7f16\u8bd1\u65f6\u662f\u5e38\u91cf\uff08\u56fe 2 \u4e2d\u6240\u793a\u7684 <code>start_indices</code>\u3001<code>limit_indices</code> \u548c <code>strides</code>\uff09\u3002 \u4f46\u662f\uff0c\u8fd9\u4e9b\u7d22\u5f15\u7684\u5f62\u72b6\u56e0\u52a8\u6001\u5f62\u72b6\u5de5\u4f5c\u8d1f\u8f7d\u800c\u5f02\uff0c\u5e76\u4e14\u5e38\u91cf\u6298\u53e0\u8868\u8fbe\u5f0f\u662f\u4e0d\u53ef\u884c\u7684\u3002 \u76f8\u53cd\uff0c\u6211\u4eec\u5c06\u8fb9\u754c\u6846\u7684\u7d22\u5f15\u5b9a\u4e49\u4e3a\u5207\u7247\u7684\u5f20\u91cf\u53c2\u6570\u3002 \u8fd9\u79cd\u6269\u5c55\u9002\u7528\u4e8e\u52a8\u6001\u5f62\u72b6\u573a\u666f\uff0c\u56e0\u4e3a\u5f20\u91cf\u503c\u662f\u5728\u8fd0\u884c\u65f6\u751f\u6210\u7684\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0cDHLO \u53ea\u662f\u4e00\u4e2a\u6269\u5c55\uff0c\u5e76\u4e0d\u80fd\u66ff\u4ee3\u6574\u4e2a HLO\u3002 \u7531\u4e8e\u5bf9\u4e8e\u8bb8\u591a\u64cd\u4f5c\uff0c\u5982\u5143\u7d20\u6dfb\u52a0/\u4e58\u6cd5\u7b49\uff0c\u5b83\u4eec\u5728 HLO \u4e2d\u7684\u5b9a\u4e49\u5177\u6709\u8db3\u591f\u7684\u8868\u73b0\u529b\u6765\u652f\u6301\u52a8\u6001\u5f62\u72b6\uff0c\u6211\u4eec\u5c06\u5b83\u4eec\u4fdd\u6301\u539f\u6837\u3002</p>"},{"location":"mlc/paper-disc.html#42-generated-runtime-flow","title":"4.2. Generated Runtime Flow","text":"<p>\u52a8\u6001\u5f62\u72b6\u7f16\u8bd1\u5668\u7684\u4e00\u4e2a\u6311\u6218\u662f\uff0c\u7f16\u8bd1\u662f\u4e00\u4e2a\u9759\u6001\u52a8\u4f5c\uff0c\u800c\u6211\u4eec\u7684\u76ee\u6807\u662f\u5904\u7406\u52a8\u6001\u884c\u4e3a\u3002 XLA \u9700\u8981\u5728\u7f16\u8bd1\u524d\u4e86\u89e3\u6240\u6709\u5f62\u72b6\u4fe1\u606f\uff0c \u5728\u7f16\u8bd1\u65f6\u9759\u6001\u751f\u6210\u4ee3\u7801\u5e76\u6784\u5efa\u7f13\u51b2\u533a\u7ba1\u7406 \u548c \u5185\u6838\u542f\u52a8\u5e8f\u5217\u3002 \u5982\u679c\u6ca1\u6709\u9884\u5148\u77e5\u9053\u7684\u5f62\u72b6\u4fe1\u606f\uff0c\u6b64\u7f16\u8bd1\u8fc7\u7a0b\u5c06\u4e0d\u8d77\u4f5c\u7528\u3002</p> <p>\u52a8\u6001\u5f62\u72b6\u7f16\u8bd1\u5668\u9700\u8981\u751f\u6210\u81ea\u9002\u5e94\u5904\u7406\u8fd0\u884c\u65f6\u9047\u5230\u7684\u4efb\u4f55\u5f62\u72b6\u7684\u4ee3\u7801\u3002 Nimble[15] \u8bbe\u8ba1\u4e86\u4e00\u4e2a VM \u6765\u89e3\u91ca\u5177\u6709\u52a8\u6001\u5f62\u72b6\u7684\u56fe\u5f62\u8ba1\u7b97\u7684\u8fd0\u884c\u65f6\u6d41\u7a0b\u3002 \u5b83\u89e3\u91ca\u5f20\u91cf\u5f62\u72b6\u5e76\u81ea\u9002\u5e94\u5730\u7ec4\u7ec7\u8fd0\u884c\u65f6\u903b\u8f91\u3002 DISC \u4e0d\u4f7f\u7528\u89e3\u91ca\u5668\uff0c\u800c\u662f\u7f16\u8bd1\u5e76\u751f\u6210\u4e3b\u673a\u548c\u8bbe\u5907\u7aef\u7684\u8ba1\u7b97\u4ee3\u7801\uff0c\u4ee5\u53ca\u8fd0\u884c\u65f6\u6d41\u7a0b\uff08\u7f13\u51b2\u533a\u7ba1\u7406\u3001\u5185\u6838\u542f\u52a8\u7b49\uff09\u3002 \u8fd0\u884c\u65f6\u6d41\u7a0b\u7684\u7f16\u8bd1\u5668\u65b9\u6cd5\u51cf\u5c11\u4e86 Nimble \u4e2d VM \u89e3\u91ca\u7684\u5f00\u9500\u3002</p>"},{"location":"mlc/paper-disc.html#421-adaptive-shape-inference","title":"4.2.1. Adaptive Shape Inference","text":"<p>DISC \u4e2d\u7684\u5f62\u72b6\u63a8\u65ad\u7ec4\u4ef6\u6709\u4e24\u4e2a\u9636\u6bb5\u3002 \u7b2c\u4e00\u4e2a\u662f\u5728\u4e0d\u77e5\u9053\u7279\u5b9a\u5f62\u72b6\u503c\u7684\u60c5\u51b5\u4e0b\u5728\u7f16\u8bd1\u65f6\u8bc6\u522b\u5f62\u72b6\u7ea6\u675f\u3002 \u7b2c\u4e8c\u4e2a\u662f\u53d1\u51fa\u8fd0\u884c\u65f6\u4ee3\u7801\u6765\u8ba1\u7b97\u7ed9\u5b9a\u8f93\u5165\u5f20\u91cf\u7684\u7279\u5b9a\u5f62\u72b6\u503c\u3002 \u524d\u8005\u7528\u4e8e\u4ee3\u7801\u751f\u6210\u4f18\u5316\uff0c\u540e\u8005\u7528\u4e8e\u6b63\u786e\u6267\u884c\u3002</p> <p>\u5f62\u72b6\u7ea6\u675f</p> <p>\u7f16\u8bd1\u65f6\u6ca1\u6709\u5177\u4f53\u7684\u5f62\u72b6\u503c\uff0c\u6211\u4eec\u5c31\u5931\u53bb\u4e86\u4e00\u4e9b\u4f18\u5316\u673a\u4f1a\u3002 \u8fd9\u662f\u5f53\u524d\u52a8\u6001\u5f62\u72b6\u76f8\u5173\u7f16\u8bd1\u5668\u6280\u672f\u7684\u5e38\u89c1\u95ee\u9898\u3002 DISC \u8868\u660e\uff0c\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e9b\u989d\u5916\u7684\u5f62\u72b6\u7ea6\u675f\u4fe1\u606f\u6765\u5e2e\u52a9\u751f\u6210\u9ad8\u6548\u7684\u5185\u6838\u3002</p> <p>DISC \u63a2\u7d22\u4e24\u79cd\u5f62\u72b6\u7ea6\u675f\u3002 \u7b2c\u4e00\u4e2a\u79f0\u4e3a\u7ef4\u5ea6\u5927\u5c0f\u76f8\u7b49\u7ea6\u675f\u3002 \u8fd9\u79cd\u7ea6\u675f\u63ed\u793a\u4e86\u5f20\u91cf\u7684\u67d0\u4e00\u7ef4\u5ea6\u6570\u662f\u5426\u7b49\u4e8e\u540c\u4e00\u5f20\u91cf\u7684\u53e6\u4e00\u7ef4\u6216\u53e6\u4e00\u4e2a\u5f20\u91cf\u7684\u4efb\u610f\u7ef4\u3002 \u7b2c\u4e8c\u4e2a\u79f0\u4e3a\u5f20\u91cf\u5927\u5c0f\u76f8\u7b49\u7ea6\u675f\uff0c\u5b83\u63ed\u793a\u4e86\u4e24\u4e2a\u5f20\u91cf\u662f\u5426\u5177\u6709\u76f8\u540c\u6570\u91cf\u7684\u5143\u7d20\u3002 \u8fd9\u79cd\u5f62\u72b6\u7ea6\u675f\u5728 IR \u4f18\u5316\u548c\u4ee3\u7801\u751f\u6210\u9636\u6bb5\u90fd\u5f88\u6709\u7528\u3002 IR \u4f18\u5316\u9636\u6bb5\u7684\u4e00\u4e2a\u4f18\u5316\u6848\u4f8b\u662f\uff0c\u5f53\u6211\u4eec\u77e5\u9053\u4e24\u4e2a ops \u64cd\u7eb5\u5177\u6709\u76f8\u540c\u6216\u517c\u5bb9\u5f62\u72b6\u7684\u5f20\u91cf\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u51b3\u5b9a\u5c06\u5b83\u4eec\u878d\u5408\u5728\u4e00\u8d77\u3002 \u5728\u4ee3\u7801\u751f\u6210\u9636\u6bb5\uff0c\u8fd9\u4e9b\u7ea6\u675f\u53ef\u4ee5\u5b9e\u73b0\u66f4\u79ef\u6781\u7684\u7d22\u5f15\u8ba1\u7b97\u7b80\u5316\u3002</p> <p>\u7591\u95ee</p> <p>\u5728 Nimble \u4e2d\u7f3a\u5c11\u8fd9\u79cd\u7ea6\u675f\u4fe1\u606f\uff0c \u56e0\u6b64\u963b\u6b62\u4e86\u8fdb\u4e00\u6b65\u4f18\u5316\uff1f</p> <p>DISC \u4ece\u4e24\u4e2a\u6765\u6e90\u6536\u96c6\u5f62\u72b6\u7ea6\u675f\u3002 \u5728\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u63a8\u65ad\u7531 DHLO \u64cd\u4f5c\u8bed\u4e49\u6355\u83b7\u7684\u5f62\u72b6\u7ea6\u675f\u3002 \u4f8b\u5982\uff0c <code>TransposeOp</code> \u7684\u8f93\u5165\u5f20\u91cf\u548c\u8f93\u51fa\u5f20\u91cf\u5e94\u5177\u6709\u76f8\u540c\u7684\u5f20\u91cf\u5927\u5c0f\u3002 \u7c7b\u4f3c\u5730\uff0c\u6839\u636e op \u5b9a\u4e49\uff0cAddOp \u7684\u8f93\u5165\u5f20\u91cf\u548c\u8f93\u51fa\u5f20\u91cf\u5e94\u8be5\u5177\u6709\u76f8\u540c\u7684\u5f62\u72b6\u3002 \u5728\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4ece\u6846\u67b6\u4e2d\u6536\u96c6\u9ad8\u7ea7\u64cd\u4f5c\u6355\u83b7\u7684\u5f62\u72b6\u7ea6\u675f\uff0c\u5e76\u5c06\u8fd9\u4e9b\u4fe1\u606f\u6ce8\u5165\u8ba1\u7b97\u56fe\u6865\u63a5\u4e2d\u7684 DHLO\u3002 \u4ee5Tensorflow\u4e2d\u7684 <code>SplitOp</code> \u4e3a\u4f8b\u3002 \u5b83\u6cbf\u4e00\u4e2a\u7ef4\u5ea6\u5747\u5300\u5730\u5212\u5206\u4e00\u4e2a\u5f20\u91cf\uff0c\u8fd9\u610f\u5473\u7740\u8be5\u8fd0\u7b97\u7684\u6240\u6709\u8f93\u51fa\u90fd\u5177\u6709\u76f8\u540c\u7684\u5f62\u72b6\u3002 \u4e00\u4e2a <code>TF.SplitOp</code> \u4f1a\u88ab\u964d\u7ea7\u4e3a\u591a\u4e2a\u72ec\u7acb\u7684 <code>DHLO.SliceOp</code> \uff0c\u5b83\u4eec\u5b9e\u9645\u4e0a\u5177\u6709\u76f8\u540c\u7684\u5f62\u72b6\u3002 \u7136\u800c\uff0c\u8fd9\u79cd\u4fe1\u606f\u5728\u6ca1\u6709\u660e\u786e\u7684\u5f62\u72b6\u7ea6\u675f\u7684\u60c5\u51b5\u4e0b\u88ab\u964d\u4f4e\u5230 DHLO \u540e\u4f1a\u4e22\u5931\u3002</p> <p>Shape calculation </p> <p>\u4e0e\u9759\u6001\u5f62\u72b6\u7f16\u8bd1\u5668\u53ea\u9700\u8981\u81ea\u5df1\u751f\u6210\u5e38\u91cf\u6298\u53e0\u5f62\u72b6\u4fe1\u606f\u7684\u8ba1\u7b97\u4ee3\u7801\u4e0d\u540c\uff0cDISC \u5206\u522b\u751f\u6210\u5f62\u72b6\u63a8\u7406\u548c\u6838\u8ba1\u7b97\u5b50\u56fe\u7684\u4ee3\u7801\u3002 \u5f62\u72b6\u8ba1\u7b97\u8ba1\u7b97\u662f\u8f7b\u91cf\u7ea7\u7684\uff0cDISC\u5c06\u5176\u653e\u5728\u4e3b\u673a\u7aef\uff08CPU\uff09\uff0c\u800c\u5b50\u56fe\u64cd\u4f5c\u5f20\u91cf\u653e\u5728\u8bbe\u5907\u7aef\uff08GPU\uff09\u3002 \u5e03\u5c40\u903b\u8f91\u4e0e Nimble[15] \u7c7b\u4f3c\u3002 \u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0cDISC \u91c7\u7528\u7f16\u8bd1\u7684\u65b9\u5f0f\u5c06\u8ba1\u7b97\u3001\u5f62\u72b6\u63a8\u65ad\u548c\u653e\u7f6e\u903b\u8f91\u7684\u4ee3\u7801\u4e00\u8d77\u751f\u6210\uff0c\u800c\u4e0d\u662f\u50cf Nimble \u90a3\u6837\u4f7f\u7528\u9884\u5148\u6784\u5efa\u7684 VM \u89e3\u91ca\u5668\u6765\u8fdb\u884c\u8fd0\u884c\u65f6\u63a7\u5236\u3002 \u8fd9\u907f\u514d\u4e86\u989d\u5916\u7684\u89e3\u91ca\u5f00\u9500\u3002 \u540c\u65f6\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5e26\u6765\u4e86\u4e3b\u673a\u7aef\u548c\u8bbe\u5907\u7aef\u8054\u5408\u4f18\u5316\u7684\u673a\u4f1a\u3002</p>"},{"location":"mlc/paper-disc.html#422-dynamic-buffer-management","title":"4.2.2. Dynamic Buffer Management","text":"<p>\u901a\u8fc7\u53d1\u51fa\u7684\u4ee3\u7801\u5728\u8fd0\u884c\u65f6\u8ba1\u7b97\u6bcf\u4e2a\u7f13\u51b2\u533a\u7684\u5f62\u72b6\uff0cDISC \u901a\u8fc7\u53d1\u51fa <code>alloc</code> \u548c <code>dealloc</code> \u6307\u4ee4\u6765\u52a8\u6001\u7ba1\u7406\u7f13\u51b2\u533a\u3002 \u5bf9\u4e8e\u65e8\u5728\u51cf\u5c11\u7f13\u51b2\u533a\u5206\u914d\u5f00\u9500\u7684\u7f13\u51b2\u533a\u4f18\u5316\u7684\u8003\u8651\uff0c\u6211\u4eec\u91c7\u7528\u4e24\u79cd\u65b9\u6cd5\uff1a</p> <ol> <li>\u57fa\u4e8eIR\u4e2d\u7684\u5f62\u72b6\u7ea6\u675f\uff0c\u8fdb\u884c\u7f13\u51b2\u533a\u6d3b\u6027\u5206\u6790\u548c\u4f18\u5316\uff1b</li> <li>\u4f7f\u7528 cached allocator \u964d\u4f4e <code>alloc</code> \u548c <code>dealloc</code> \uff0c\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\u8fd9\u662f TensorFlow/PyTorch \u63d0\u4f9b\u7684\u5206\u914d\u5668\u3002</li> </ol>"},{"location":"mlc/paper-disc.html#423-host-side-control","title":"4.2.3. Host-side Control","text":"<p>\u4e3b\u673a\u7aef\u4ee3\u7801\u5728\u7edf\u4e00\u7684\u7f16\u8bd1\u5668\u6d41\u7a0b\u4e2d\u53d1\u51fa\uff0c\u4ece\u800c\u53ef\u4ee5\u5728\u540e\u7eed pass \u8fdb\u884c\u8054\u5408\u4f18\u5316\u3002 \u9664\u4e86\u5f62\u72b6\u8ba1\u7b97\uff0c\u8fd8\u5305\u62ec\u542f\u52a8\u7ef4\u5ea6\u8ba1\u7b97\u3001\u5185\u6838\u542f\u52a8\u3001\u4f9b\u5e94\u5546\u5e93\u8c03\u7528\u548c\u8bbe\u5907\u7ba1\u7406\u6307\u4ee4\uff0c\u5982\u521d\u59cb\u5316\u3001\u540c\u6b65\u3001cubin \u52a0\u8f7d\u7b49\u3002</p>"},{"location":"mlc/paper-disc.html#43-fusion-and-code-generation","title":"4.3. Fusion and Code Generation","text":"<p>\u5185\u5b58\u7ed1\u5b9a\u64cd\u4f5c\u7684\u5185\u6838\u878d\u5408\u662f\u5f53\u524d DLC \u7684\u4e3b\u8981\u4f18\u5316\u4e4b\u4e00\u3002 \u4e00\u79cd\u5e38\u89c1\u7684\u878d\u5408\u7b56\u7565\u662f\u5141\u8bb8\u5c06\u5177\u6709\u76f8\u540c\u6570\u91cf\u5143\u7d20\u7684\u5185\u5b58\u7ed1\u5b9a\u64cd\u4f5c\u878d\u5408\u5728\u4e00\u8d77\u3002 \u4f46\u662f\uff0c\u5bf9\u4e8e\u52a8\u6001\u5f62\u72b6\u573a\u666f\uff0c\u5728\u7f16\u8bd1\u65f6\u4e0d\u77e5\u9053\u8981\u5904\u7406\u7684\u5f20\u91cf\u5f62\u72b6\u3002 \u786e\u5b9a\u54ea\u4e9b\u64cd\u4f5c\u53ef\u4ee5\u878d\u5408\u5728\u4e00\u8d77\u4ee5\u83b7\u5f97\u6027\u80fd\u4f18\u52bf\u5e76\u975e\u6613\u4e8b\u3002</p> <p>Shape hints collection \u6211\u4eec\u901a\u8fc7\u4e24\u4e2a\u63d0\u793a\u786e\u5b9a\u4e24\u4e2a\u64cd\u4f5c\u662f\u5426\u5177\u6709\u76f8\u540c\u7684\u5f62\u72b6\u3002 \u7b2c\u4e00\u4e2a\u662f\u5f62\u72b6\u4f20\u64ad\u3002 \u4f8b\u5982 Add op \u7684\u64cd\u4f5c\u6570\u5fc5\u987b\u4e0e Add \u7684\u6d88\u8d39\u8005\u5177\u6709\u76f8\u540c\u7684\u5f20\u91cf\u5f62\u72b6\u3002 DISC \u7ef4\u62a4\u4e00\u4e2a\u8868\u6765\u6307\u793a\u6bcf\u4e2a\u64cd\u4f5c\u7684\u4f20\u64ad\u5c5e\u6027\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u67d0\u4e9b\u64cd\u4f5c\u53ef\u80fd\u5177\u6709\u76f8\u540c\u7684\u5f62\u72b6\u4f20\u64ad\u5c5e\u6027\uff0c\u4f8b\u5982 Add \u548c Sub\u3002 \u6211\u4eec\u6839\u636e\u8868\u4e2d\u7684\u5f62\u72b6\u4f20\u64ad\u5c5e\u6027\u5bf9\u64cd\u4f5c\u8fdb\u884c\u5206\u7c7b\uff0c\u4ee5\u907f\u514d\u91cd\u590d\u679a\u4e3e\u3002 \u7b2c\u4e8c\u4e2a\u662f\u5f62\u72b6\u7ea6\u675f DISC \u6536\u96c6\uff0c\u5982 4.2.1. \u8282\u6240\u8ff0\u3002 </p> <p>Shape-adaptive fusion configuration \u5bf9\u4e8e\u5185\u5b58\u7ed1\u5b9a\u6a21\u5f0f\u7684\u878d\u5408\u4ee3\u7801\u751f\u6210\uff0c\u6211\u4eec\u503e\u5411\u4e8e\u9009\u62e9\u5bf9\u5404\u79cd\u5f62\u72b6\u53cb\u597d\u7684\u6a21\u677f\uff0c\u4f8b\u5982\u7ecf\u5178\u7684\u5faa\u73af\u878d\u5408\u548c\u4ee5 reduce \u64cd\u4f5c\u4e3a root \u7684\u8f93\u5165\u878d\u5408\u3002 \u7136\u800c\uff0c\u4e3a\u4e86\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd\uff0c\u4ecd\u7136\u6709\u4e00\u4e9b\u65b9\u9762\u9700\u8981\u5bf9\u4e0d\u540c\u7684\u8fd0\u884c\u65f6\u5f62\u72b6\u505a\u51fa\u4e0d\u540c\u7684\u53cd\u5e94\uff0c\u6bd4\u5982\u542f\u52a8\u7ef4\u5ea6\u7684\u9009\u62e9\u3001\u662f\u5426\u8fdb\u884c\u5faa\u73af\u77e2\u91cf\u5316\u52a0\u8f7d/\u5b58\u50a8\u7684\u51b3\u5b9a\uff0c\u4ee5\u53ca\u662f\u5426\u9700\u8981\u9690\u5f0f\u5e7f\u64ad\u7b49\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u65b9\u9762\uff0c\u6211\u4eec \u751f\u6210\u4e0d\u540c\u7248\u672c\u7684\u5185\u6838\uff0c\u5e76\u4ece\u4e3b\u673a\u7aef\u751f\u6210\u9009\u62e9\u903b\u8f91\uff0c\u4ee5\u4fbf\u5728\u8fd0\u884c\u65f6\u4e3a\u6bcf\u4e2a\u4f20\u5165\u7684\u5f62\u72b6\u542f\u52a8\u9002\u5f53\u7684\u5185\u6838\u3002</p>"},{"location":"mlc/paper-disc.html#44-multiple-framework-support","title":"4.4. Multiple Framework Support","text":"<p>DISC \u80fd\u591f\u670d\u52a1\u4e8e\u591a\u79cd DL \u6846\u67b6\uff0c\u5982 TensorFlow\u3001PyTorch \u7b49\u3002 \u540c\u65f6\uff0c\u9759\u6001\u548c\u52a8\u6001\u5f62\u72b6\u7f16\u8bd1\u5668\u90fd\u53ef\u4ee5\u964d\u4f4e\u5b83\u3002 \u6211\u4eec\u4f7f\u7528 DHLO \u4f5c\u4e3a hub IR \u5c06\u4e0d\u540c\u7684\u90e8\u5206\u8fde\u63a5\u5728\u4e00\u8d77\u3002 \u8fd9\u4e2a\u4e2d\u95f4\u5c42\u7b80\u5316\u4e86\u9002\u914d\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0cDISC \u4e0d\u4f1a\u5c06\u6240\u6709\u8ba1\u7b97\u56fe\u964d\u4f4e\u5230\u52a8\u6001\u5f62\u72b6\u7f16\u8bd1\u5668\u3002 \u76f8\u53cd\uff0c\u5f53\u5f62\u72b6\u5728\u7f16\u8bd1\u65f6\u5df2\u77e5\u6216\u5f62\u72b6\u6570\u91cf\u53ef\u63a5\u53d7\u65f6\uff0c\u5b83\u4f1a\u5c06\u8ba1\u7b97\u56fe\u964d\u4f4e\u4e3a\u9759\u6001\u5f62\u72b6\u7f16\u8bd1\u5668\u3002 \u8fd9\u662f\u56e0\u4e3a\u9759\u6001\u5f62\u72b6\u7f16\u8bd1\u5668\u5f15\u64ce\u901a\u5e38\u53ef\u4ee5\u901a\u8fc7\u4e30\u5bcc\u7684\u4fe1\u606f\u83b7\u5f97\u6bd4\u52a8\u6001\u5f62\u72b6\u7f16\u8bd1\u5668\u66f4\u597d\u7684\u6027\u80fd\u3002</p>"},{"location":"mlc/paper-disc.html#45-static-shape-library-support","title":"4.5. Static Shape Library Support","text":"<p>\u5bf9\u4e8e\u8ba1\u7b97\u5bc6\u96c6\u578b\u64cd\u4f5c\uff0c\u4e0d\u540c\u7684\u5f62\u72b6\u53ef\u80fd\u9700\u8981\u4e0d\u540c\u7684\u4f18\u5316\u6765\u5b9e\u73b0\u6700\u4f73\u6027\u80fd\u3002 Nimble[15] \u9009\u62e9\u5728\u4e00\u7ec4\u56fa\u5b9a\u5f62\u72b6\u4e0b\u8c03\u6574\u5185\u6838\u3002 \u5185\u6838\u4fdd\u8bc1\u53ef\u4ee5\u5728\u5176\u4ed6\u5f62\u72b6\u4e0a\u5de5\u4f5c\uff0c\u4f46\u6027\u80fd\u53ef\u80fd\u4e0d\u662f\u6700\u597d\u7684\u3002 \u4e3a\u4e86\u5e73\u8861\u52a8\u6001\u6027\u548c\u6027\u80fd\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u4e00\u4e2a\u63a5\u53e3\u6765\u6839\u636e\u4e0d\u540c\u7684\u8fd0\u884c\u65f6\u5f62\u72b6\u4ece\u5e93\u4e2d\u9009\u62e9\u6700\u4f73\u5185\u6838\u3002 \u8be5\u5e93\u5305\u542b\u4f9b\u5e94\u5546\u5e93\uff08\u4f8b\u5982 cuBLAS/cuDNN\uff09 \u548c \u9488\u5bf9\u6bcf\u79cd\u5f62\u72b6\u624b\u52a8\u8c03\u6574\u7684\u9884\u751f\u6210\u5185\u6838\u3002</p>"},{"location":"mlc/paper-disc.html#5-evaluation","title":"5. Evaluation","text":""},{"location":"mlc/paper-disc.html#52-comparing-with-nimble","title":"5.2. Comparing with Nimble","text":"<p>\u6211\u4eec\u7528 Transformer \u4e0e Nimble \u8fdb\u884c\u6bd4\u8f83\u3002 \u88682 \u663e\u793a\u4e86\u8ba1\u7b97\u5bc6\u96c6\u578b\u64cd\u4f5c\u3001\u5185\u5b58\u5bc6\u96c6\u578b\u64cd\u4f5c\u548c CPU \u65f6\u95f4\u7684\u6027\u80fd\u5206\u89e3\u3002 \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u5728 Nimble \u5b9e\u73b0\u4e2d\u4f7f\u7528 <code>cuDNN</code>/<code>cuBLAS</code> \u5e93\u8c03\u7528\u6765\u8fdb\u884c\u8ba1\u7b97\u5bc6\u96c6\u578b\u64cd\u4f5c\uff0c\u800c\u4e0d\u662f\u5185\u6838\u8c03\u4f18\uff0c\u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u627e\u5230 Nimble \u62a5\u544a\u4e2d\u63cf\u8ff0\u7684\u8ba1\u7b97\u5bc6\u96c6\u578b\u64cd\u4f5c\u8c03\u5ea6\u7684\u5f00\u6e90\u4ee3\u7801\u3002</p> <p>\u5b83\u8868\u660e DISC \u4ec5\u5bf9\u5185\u5b58\u5bc6\u96c6\u578b\u64cd\u4f5c\u5b9e\u73b0\u4e86 2.61 \u500d\u7684\u52a0\u901f\uff0c\u8fd9\u662f\u6574\u4f53\u52a0\u901f\u7684\u4e3b\u8981\u539f\u56e0\u4e4b\u4e00\u3002 DISC \u7684\u4f18\u52bf\u5728\u4e8e\uff0c\u5b83\u4ece \u5f62\u72b6\u4f20\u64ad \u548c \u5f62\u72b6\u7ea6\u675f \u4e2d\u6536\u96c6\u5f62\u72b6\u63d0\u793a\uff0c\u4ee5\u5e2e\u52a9\u8fdb\u884c\u6709\u6548\u7684\u878d\u5408\u3002 \u5f62\u72b6\u81ea\u9002\u5e94\u878d\u5408\u914d\u7f6e\u7b56\u7565\u8fdb\u4e00\u6b65\u6709\u52a9\u4e8e\u6574\u4f53\u6027\u80fd\u3002</p> <p>DISC \u7684\u53e6\u4e00\u4e2a\u4f18\u52bf\u662f\u4f4e\u5f00\u9500\u7684\u8fd0\u884c\u65f6\u6d41\u7a0b\u3002 \u88682 \u663e\u793a DISC \u7684 CPU \u65f6\u95f4\u4ec5\u4e3a Nimble \u7684 36.6%\u3002 CPU \u65f6\u95f4\u7684\u4e00\u5c0f\u90e8\u5206\u51cf\u5c11\u6765\u81ea\u5185\u6838\u542f\u52a8\u7684\u51cf\u5c11\uff0c\u56e0\u4e3a DISC \u7528\u5230\u7684\u5185\u6838\u603b\u6570\u7565\u6709\u51cf\u5c11(\u88683)\u3002 \u4e3b\u8981\u539f\u56e0\u6765\u81ea\u4e8e\uff0c DISC \u901a\u8fc7\u4e3b\u673a\u548c\u8bbe\u5907\u534f\u540c\u4f18\u5316\u751f\u6210\u66f4\u9ad8\u6548\u7684\u8fd0\u884c\u65f6\u6d41\u7a0b\u3002</p>"},{"location":"mlc/paper-disc.html#53-gap-to-static-optimization","title":"5.3. Gap to Static Optimization","text":"<p>DISC \u53ef\u4ee5\u81ea\u52a8\u56de\u9000\u5230\u9759\u6001\u7f16\u8bd1\u5668\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd\u3002 \u4e3a\u4e86\u8bc4\u4f30\u4f7f\u7528\u9759\u6001\u7f16\u8bd1\u5668\u7684\u52a8\u6001\u7f16\u8bd1\u5668\u7684\u6027\u80fd\uff0c\u6211\u4eec\u7981\u7528\u56de\u9000\u529f\u80fd\uff0c\u5e76\u6bd4\u8f83\u9759\u6001\u548c\u52a8\u6001\u7f16\u8bd1\u5668\u4e0e\u9759\u6001\u8f93\u5165\u7684 3 \u4e2a\u5178\u578b\u5de5\u4f5c\u8d1f\u8f7d\u7684\u6027\u80fd\u3002</p> <p>\u5b83\u8868\u660e\uff0c\u4e0e\u9759\u6001\u4f18\u5316\u76f8\u6bd4\uff0cDISC \u5e73\u5747\u5b9e\u73b0\u4e86 85% \u7684\u6027\u80fd\uff0c\u8303\u56f4\u4ece 74.5% \u5230 91.4%\u3002 \u5dee\u8ddd\u7684\u539f\u56e0\u4e4b\u4e00\u662f\u5b83\u7f3a\u4e4f\u4e00\u4e9b\u6ca1\u6709\u5f62\u72b6\u4fe1\u606f\u7684\u878d\u5408\u4f18\u5316\u673a\u4f1a\uff08\u4f8b\u5982\u66f4\u79ef\u6781\u7684\u56fe\u5f62\u4f18\u5316\u3001\u878d\u5408\u51b3\u7b56\u548c\u4ee3\u7801\u751f\u6210\u7b56\u7565\u7b49\uff09\uff0c\u5373\u4f7f\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528 DISC \u6536\u96c6\u4e86\u5f62\u72b6\u63d0\u793a\u3002</p>"},{"location":"mlc/paper-disc.html#6-related-work","title":"6. Related Work","text":"<p>\u6709\u8bb8\u591a\u5de5\u4f5c\u5c06 \u5185\u6838\u878d\u5408\u4f18\u5316 \u5e94\u7528\u4e8e ML \u4e2d\u7684\u5c0f\u578b\u5185\u6838\u3002 XLA[5] \u5c06\u5185\u6838\u4e0e\u4e00\u7ec4\u64cd\u4f5c\u89c4\u5219\u5373\u65f6\u878d\u5408\uff0c\u5305\u62ec \u9010\u5143\u7d20\u64cd\u4f5c \u548c \u7ea6\u7b80\u64cd\u4f5c\u3002 <code>FusionStitching</code>[19] \u6269\u5c55\u4e86 JIT \u878d\u5408\u7684\u76ee\u6807\u8303\u56f4\uff0c\u5728\u64cd\u4f5c\u4e4b\u95f4\u91cd\u7528\u4e2d\u95f4\u503c\u3002 \u4e00\u4e9b\u4e3b\u8981\u9488\u5bf9\u5927\u578b\u8ba1\u7b97\u5bc6\u96c6\u578b\u64cd\u4f5c\u7684\u4f5c\u54c1[9,11,17,18]\u4e5f\u5177\u6709\u9488\u5bf9\u5c0f\u5185\u6838\u7684\u878d\u5408\u80fd\u529b\u3002 \u8fd9\u4e9b\u6280\u672f\u9002\u7528\u4e8e\u9759\u6001\u5f62\u72b6\u573a\u666f\uff0c\u5e76\u4e14\u5728\u52a8\u6001\u5f62\u72b6\u5de5\u4f5c\u8d1f\u8f7d\u4e2d\u4f1a\u4ea7\u751f\u66f4\u4e25\u91cd\u7684\u7f16\u8bd1\u5f00\u9500\u3002</p> <p>\u60f0\u6027\u7f16\u8bd1 [2,14] \u5728\u672a\u77e5\u5f62\u72b6\u6709\u9650\u662f\u53ef\u4ee5\u7528\u6765\u51cf\u5c11\u7f16\u8bd1\u5f00\u9500\u3002 \u7136\u800c\uff0c\u5b83\u5931\u53bb\u4e86\u90e8\u5206\u6838\u878d\u5408\u4f18\u5316\u7684\u673a\u4f1a\uff0c\u5e76\u4e14\u5728\u672a\u77e5\u5f62\u72b6\u8fc7\u591a\u65f6\u65e0\u6cd5\u5e94\u7528\u3002</p> <p>Nimble[15] \u901a\u8fc7\u6784\u5efa\u57fa\u4e8e TVM \u7684\u7f16\u8bd1\u5668\u7cfb\u7edf\u89e3\u51b3\u4e86\u52a8\u6001\u5f62\u72b6\u95ee\u9898\u3002 \u5b83\u63d0\u51fa\u4e86\u4e00\u79cd\u5728\u8fd0\u884c\u65f6\u89e3\u91ca\u52a8\u6001\u5f62\u72b6\u5904\u7406\u6d41\u7a0b\u7684 VM \u65b9\u6cd5\u3002 \u76f8\u53cd\uff0cDISC \u5728\u7f16\u8bd1\u65f6\u751f\u6210\u8fd0\u884c\u65f6\u6d41\u4ee5\u907f\u514d\u89e3\u91ca\u5f00\u9500\uff0c\u5e76\u63d0\u4f9b\u66f4\u591a\u4e3b\u673a\u8bbe\u5907\u534f\u540c\u4f18\u5316\u7684\u673a\u4f1a\u3002 \u540c\u65f6\uff0c\u4e0e Nimble \u76f8\u6bd4\uff0cDISC \u66f4\u6ce8\u91cd\u5185\u5b58\u5bc6\u96c6\u578b\u878d\u5408\u3002</p> <p>IREE[1] \u662f\u4e00\u79cd\u57fa\u4e8e\u5f00\u6e90 MLIR \u7684\u7aef\u5230\u7aef\u7f16\u8bd1\u5668\uff0c\u53ef\u5c06 ML \u6a21\u578b\u964d\u4f4e\u4e3a\u9488\u5bf9\u5f02\u6784\u786c\u4ef6\u52a0\u901f\u5668\u7684\u5b9e\u65f6\u79fb\u52a8/\u8fb9\u7f18\u63a8\u7406\u4f18\u5316\u7684\u7edf\u4e00 IR\u3002 IREE \u4e3a\u7f16\u8bd1\u540e\u7684 ML \u6a21\u578b\u63d0\u4f9b\u4e86\u7075\u6d3b\u7684\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u4ecd\u5904\u4e8e\u65e9\u671f\u9636\u6bb5\u3002</p>"},{"location":"mlc/paper-freetensor.html","title":"FreeTensor: A Free-Form DSL with Holistic Optimizations for Irregular Tensor Programs","text":""},{"location":"mlc/paper-freetensor.html#0-abstract","title":"0. Abstract","text":"<p>\u5f20\u91cf\u7a0b\u5e8f\u5728\u8bb8\u591a\u9886\u57df\u90fd\u6709\u91cd\u8981\u7528\u9014\u3002 PyTorch\u3001TensorFlow \u548c JAX \u7b49\u73b0\u6709\u6846\u67b6\u91c7\u7528\u57fa\u4e8e \u7b97\u5b50 \u7684\u65b9\u5f0f\u6765\u7b80\u5316\u7f16\u7a0b\u3001\u63d0\u9ad8\u6027\u80fd\u5e76\u6267\u884c\u81ea\u52a8\u5fae\u5206\u3002 \u7136\u800c\uff0c\u968f\u7740\u5f20\u91cf\u7a0b\u5e8f\u7684\u5feb\u901f\u53d1\u5c55\uff0c\u57fa\u4e8e\u7b97\u5b50\u7684\u7f16\u7a0b\u7531\u4e8e\u5f15\u5165\u4e86\u5927\u91cf\u7684\u5197\u4f59\u8ba1\u7b97\u6216\u5185\u5b58\u8bbf\u95ee\u800c\u5bf9\u4e0d\u89c4\u5219\u6a21\u5f0f (irregular patterns) \u663e\u793a\u51fa\u663e\u7740\u7684\u5c40\u9650\u6027\u3002</p> <p>\u6211\u4eec\u63d0\u51fa\u4e86 FreeTensor\uff0c\u4e00\u79cd free-form \u7684 DSL\uff0c \u5b83\u901a\u8fc7\u5f15\u5165\u7ec6\u7c92\u5ea6\u63a7\u5236\u6d41\u6765\u652f\u6301\u5197\u4f59\u907f\u514d\u7f16\u7a0b\u3002 \u901a\u8fc7\u90e8\u5206\u8bc4\u4f30\u3001\u4f9d\u8d56\u611f\u77e5\u8f6c\u6362\u548c\u7ec6\u7c92\u5ea6\u81ea\u52a8\u5fae\u5206\u7b49\u4f18\u5316\uff0cFreeTensor \u80fd\u591f\u5728 CPU \u548c GPU \u4e0a\u751f\u6210\u9ad8\u6027\u80fd\u5f20\u91cf\u7a0b\u5e8f\u3002 \u5b9e\u9a8c\u8868\u660e\uff0c\u5bf9\u4e8e\u5178\u578b\u7684\u4e0d\u89c4\u5219\u5f20\u91cf\u7a0b\u5e8f\uff0c\u5728\u6ca1\u6709\u5fae\u5206\u7684\u60c5\u51b5\u4e0b\uff0c\u73b0\u6709\u5f20\u91cf\u7f16\u7a0b\u6846\u67b6\u7684\u52a0\u901f\u9ad8\u8fbe 5.10 \u500d\uff08\u5e73\u5747 2.08 \u500d\uff09\uff0c\u5fae\u5206\u540e\u9ad8\u8fbe 127.74 \u500d\uff08\u5e73\u5747 36.26 \u500d\uff09\u3002</p> <p>\u7591\u95ee</p> <p>\u4ec0\u4e48\u662f\u4e0d\u89c4\u5219\u6a21\u5f0f irregular patterns \uff1f</p>"},{"location":"mlc/paper-freetensor.html#8-conclusion","title":"8. Conclusion","text":"<p>\u6211\u4eec\u63d0\u51fa\u4e86 FreeTensor\uff0c\u4e00\u79cd\u7528\u4e8e\u4e0d\u89c4\u5219\u5f20\u91cf\u7a0b\u5e8f\u7684free-form DSL\u3002 FreeTensor \u901a\u8fc7\u542f\u7528\u7ec6\u7c92\u5ea6\u63a7\u5236\u6d41\u6765\u652f\u6301\u7c92\u5ea6\u65e0\u5173\u7684 tensor \u8fd0\u7b97\uff0c\u5e76\u96c6\u6210\u4e86\u4e00\u7cfb\u5217\u4f18\u5316\uff0c\u5305\u62ec\u90e8\u5206\u6c42\u503c\u3001\u4f9d\u8d56\u611f\u77e5\u8f6c\u6362 \u548c \u81ea\u52a8\u4ee3\u7801\u751f\u6210\uff0c\u4ee5\u751f\u6210\u9002\u7528\u4e8e\u4e0d\u540c\u67b6\u6784\u7684\u9ad8\u6027\u80fd\u4ee3\u7801\u3002 FreeTensor \u8fd8\u652f\u6301\u7ec6\u7c92\u5ea6\u81ea\u52a8\u5fae\u5206\u4ee5\u751f\u6210\u9ad8\u6548\u7684\u68af\u5ea6\u7a0b\u5e8f\u3002 \u5b9e\u9a8c\u8868\u660e\uff0c\u5728\u6ca1\u6709\u5fae\u5206\u7684\u60c5\u51b5\u4e0b\uff0c\u73b0\u6709\u5f20\u91cf\u7f16\u7a0b\u6846\u67b6\u7684\u52a0\u901f\u9ad8\u8fbe 5.10\u00d7\uff08\u5e73\u5747 2.08\u00d7\uff09\uff0c\u5fae\u5206\u540e\u9ad8\u8fbe 127.74\u00d7\uff08\u5e73\u5747 36.26\u00d7\uff09\u3002</p>"},{"location":"mlc/paper-freetensor.html#1-intro","title":"1. Intro","text":"<p>\u5f20\u91cf\u7a0b\u5e8f\u5e7f\u6cdb\u5e94\u7528\u4e8e\u4e0d\u540c\u9886\u57df\uff0c\u5305\u62ec\u6df1\u5ea6\u5b66\u4e60\u3001\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u3001\u79d1\u5b66\u8ba1\u7b97\u7b49\u3002 \u4f18\u5316\u5f20\u91cf\u7a0b\u5e8f\u81f3\u5173\u91cd\u8981\uff0c\u56e0\u4e3a\u5f20\u91cf\u7a0b\u5e8f\u901a\u5e38\u5728\u9700\u8981\u5927\u89c4\u6a21\u5e76\u884c\u5904\u7406\u7684\u6570\u5343\u4e2a\u5143\u7d20\u4e0a\u8fd0\u884c\u624d\u80fd\u5b9e\u73b0\u9ad8\u6027\u80fd\u3002 \u7136\u800c\uff0c\u8fd9\u79cd\u8de8\u5404\u79cd\u67b6\u6784\u7684\u4f18\u5316\u4e0d\u4ec5\u9700\u8981\u5927\u91cf\u7684\u4eba\u529b\uff0c\u8fd8\u9700\u8981\u7b97\u6cd5\u548c\u67b6\u6784\u65b9\u9762\u7684\u4e13\u4e1a\u77e5\u8bc6\u3002</p> <p>\u5927\u591a\u6570\u73b0\u6709\u7684\u5f20\u91cf\u7f16\u7a0b\u6846\u67b6\uff0c\u90fd\u5c06\u5178\u578b\u7684\u5f20\u91cf\u8ba1\u7b97\u5c01\u88c5\u5230 \u7b97\u5b50 \u4e2d\uff0c\u4f8b\u5982\u77e9\u9635\u4e58 \u548c \u5377\u79ef\u3002 \u5728\u8fd9\u4e9b\u6846\u67b6\u4e2d\uff0c\u7b97\u5b50\u7ecf\u8fc7\u624b\u5de5\u9ad8\u5ea6\u4f18\u5316\u4ee5\u5b9e\u73b0\u9ad8\u6027\u80fd\uff0c\u5e76\u901a\u8fc7 cuDNN\u3001cuBLAS \u6216 Intel MKL \u7b49\u5e93\u63d0\u4f9b\u7ed9\u7528\u6237\u3002</p> <p>\u8fd9\u79cd\u57fa\u4e8e\u7b97\u5b50\u7684\u6846\u67b6\u53ef\u4ee5\u8986\u76d6\u67d0\u4e9b\u786c\u4ef6\u4e0a\u7684\u5e38\u89c1 tensor program\uff0c \u4f46\u4ecd\u6709\u91cd\u5927\u7684\u6027\u80fd\u6311\u6218\u5c1a\u672a\u89e3\u51b3\u3002 \u7531\u4e8e\u5927\u591a\u6570\u4f18\u5316\u90fd\u662f\u5728\u7b97\u5b50\u5185\u90e8\u5b8c\u6210\u7684\uff0c\u56e0\u6b64\u4f20\u7edf\u4e0a\uff0c\u7528\u6237\u9700\u8981\u5c06\u4e00\u4e2a\u7b97\u5b50\u5e94\u7528\u4e8e tensor \u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u5e76\u5c06\u591a\u4e2a\u7b97\u5b50\u94fe\u63a5\u8d77\u6765\u624d\u80fd\u5b9e\u73b0\u4e00\u4e2a\u7a0b\u5e8f\u3002 \u7136\u800c\uff0c\u968f\u7740\u6a21\u578b\u7684\u89c4\u6a21\u8d8a\u6765\u8d8a\u5927\uff0c\u6700\u8fd1\u7684\u6a21\u578b\u503e\u5411\u4e8e\u5728\u5f20\u91cf\u7684\u4e00\u90e8\u5206\u4e0a\u8fdb\u884c\u8ba1\u7b97\u4ee5\u8282\u7701\u8ba1\u7b97\u91cf\u3002 \u4e3a\u4e86\u4f7f\u7528\u57fa\u4e8e\u7b97\u5b50\u7684\u6846\u67b6\u6765\u8868\u8fbe\u6b64\u7c7b\u6a21\u578b\uff0c\u5f20\u91cf\u9700\u8981\u6765\u56de\u8f6c\u6362\uff0c\u5f15\u5165\u5927\u91cf\u7684\u8ba1\u7b97\u548c\u8bbf\u5bf8\u5f00\u9500\u3002</p> <p>\u6211\u4eec\u4ee5 Longformer \u6a21\u578b [8] \u4e3a\u4f8b\uff0c\u5982\u56fe 1(a) \u6240\u793a\u3002 \u4e0e\u4f20\u7edf\u6ce8\u610f\u529b\u4f7f\u7528\u6240\u6709 token \u8ba1\u7b97\u76f8\u5173\u6027\u4e0d\u540c\uff0cLongformer \u8ba1\u7b97\u8ddd\u79bb\u4e0d\u5927\u4e8e\u9608\u503c\u7684\u6210\u5bf9\u9644\u8fd1 token \u7684\u76f8\u5173\u6027\uff0c\u56e0\u6b64\u5b83\u80fd\u591f\u5904\u7406\u66f4\u957f\u7684\u5e8f\u5217\u3002 \u9644\u8fd1 token \u7684\u8303\u56f4\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u6ed1\u52a8\u7a97\u53e3\u3002 \u5178\u578b\u7684\u57fa\u4e8e\u7b97\u5b50\u7684\u6846\u67b6\u7684\u4e00\u79cd\u5e38\u89c1\u5b9e\u73b0\u662f\u9996\u5148\u6cbf\u6ed1\u52a8\u7a97\u53e3\u586b\u5145\u548c\u590d\u5236\u7279\u5f81\u77e9\u9635 Q\uff0c\u5982\u56fe 1(b) \u6240\u793a\uff0c\u76f8\u5e94\u7684\u4ee3\u7801\u5982\u56fe 1(c) \u6240\u793a\u3002 \u7531\u4e8e\u5f20\u91cf Q \u88ab\u590d\u5236\u6ed1\u52a8\u7a97\u53e3\u5927\u5c0f\u6298\u53e0\uff0c\u56e0\u6b64\u5f15\u5165\u4e86\u663e\u7740\u7684\u5185\u5b58\u5197\u4f59\u3002</p> <p>\u8fd9\u79cd\u7c7b\u578b\u7684\u5f20\u91cf\u7a0b\u5e8f\u5728\u65b0\u5174\u7684\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u4e2d\u8d8a\u6765\u8d8a\u666e\u904d\u3002 \u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u79f0\u5b83\u4eec\u4e3a\u4e0d\u89c4\u5219\u5f20\u91cf\u7a0b\u5e8f\u3002 \u4e0e\u5e38\u89c1\u7684\u5f20\u91cf\u7a0b\u5e8f\u76f8\u6bd4\uff0c\u6b64\u7c7b\u7a0b\u5e8f\u901a\u5e38\u5177\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a 1. \u7ec6\u7c92\u5ea6\u64cd\u4f5c\u3002 \u9700\u8981\u3001\u4f7f\u7528\u548c\u91cd\u7528\u7684\u6570\u636e\u4e0d\u5728\u4e00\u4e2a\u6574\u4f53\u5f20\u91cf\u7ea7\u522b\uff0c\u800c\u662f\u7531\u4e0a\u4e0b\u6587\u51b3\u5b9a\u7684\u3002 2. \u591a\u79cd\u64cd\u4f5c\u7684\u7ec4\u5408\u3002 \u8fd9\u4e9b\u5f20\u91cf\u7a0b\u5e8f\u901a\u5e38\u9700\u8981\u7ec4\u5408\u591a\u4e2a\u5f20\u91cf\u64cd\u4f5c\u6765\u5b9e\u73b0\u76f8\u5e94\u7684\u529f\u80fd\u3002</p> <p>\u5c3d\u7ba1\u7528\u6237\u53ef\u4ee5\u5728\u57fa\u4e8e\u7b97\u5b50\u7684\u6846\u67b6\u4e2d\u4f7f\u7528\u81ea\u5b9a\u4e49\u7b97\u5b50\uff0c\u4f46\u76ee\u524d\u7684\u6846\u67b6\u4ec5\u63d0\u4f9b\u6709\u9650\u7684\u8868\u8fbe\u529b\u6765\u652f\u6301\u4e0d\u89c4\u5219\u5f20\u91cf\u7a0b\u5e8f\u3002 \u4f8b\u5982\uff0cJAX \u548c PyTorch \u4e2d\u7684 <code>vmap</code> \u652f\u6301\u8fed\u4ee3\u5f20\u91cf\u5e76\u5c06\u64cd\u4f5c\u5e94\u7528\u4e8e\u5b83\u7684\u6bcf\u4e2a\u90e8\u5206\uff0c\u4f46\u8fed\u4ee3\u5e94\u8be5\u662f\u65e0\u4f9d\u8d56\u7684\u3002 TVM [12] \u5b8c\u5168\u5efa\u7acb\u5728\u81ea\u5b9a\u4e49 \u7b97\u5b50 \u4e4b\u4e0a\uff0c\u4f46\u6bcf\u4e2a \u7b97\u5b50 \u90fd\u4ec5\u9650\u4e8e\u5b8c\u7f8e\u5d4c\u5957\u7684\u5faa\u73af\uff0c\u5916\u4fa7\u662f\u65e0\u4f9d\u8d56\u5faa\u73af\uff0c\u5185\u4fa7\u662f reduce \u5faa\u73af\u3002 \u7531\u4e8e\u8fd9\u4e9b\u9650\u5236\uff0c\u7528\u6237\u4ecd\u7136\u4e0d\u5f97\u4e0d\u5f15\u5165\u5197\u4f59\u7684\u7b97\u5b50\u3002</p> <p>\u7591\u95ee</p> <p>TVM [12] \u5b8c\u5168\u5efa\u7acb\u5728\u81ea\u5b9a\u4e49 \u7b97\u5b50 \u4e4b\u4e0a\uff0c\u4f46\u6bcf\u4e2a \u7b97\u5b50 \u90fd\u4ec5\u9650\u4e8e\u5b8c\u7f8e\u5d4c\u5957\u7684\u5faa\u73af\uff0c\u5916\u4fa7\u662f\u65e0\u4f9d\u8d56\u5faa\u73af\uff0c\u5185\u4fa7\u662f reduce \u5faa\u73af?</p> <p>\u8fd9\u91cc\u662f\u4ec0\u4e48\u610f\u601d\uff1f</p> <p>\u5728\u5b9e\u8df5\u4e2d\uff0c\u5f53\u96be\u4ee5\u7528\u57fa\u4e8e\u7b97\u5b50\u7684\u6846\u67b6\u6765\u8868\u8fbe\u5f20\u91cf\u7a0b\u5e8f\u65f6\uff0c\u7528\u6237\u4ecd\u7136\u53ef\u4ee5\u7528\u901a\u7528\u7684\u7f16\u7a0b\u8bed\u8a00\uff08\u5982 Python \u548c C++\uff09\u8868\u8fbe\u8ba1\u7b97\u3002 \u4e3b\u8981\u539f\u56e0\u662f\u6b64\u7c7b\u8bed\u8a00\u4e2d\u7684\u7ec6\u7c92\u5ea6\u63a7\u5236\u6d41\u53ef\u4ee5\u8f7b\u677e\u6d88\u9664\u5197\u4f59\u3002 \u5728\u8fd9\u9879\u5de5\u4f5c\u4e2d\uff0c\u6211\u4eec\u79f0\u8fd9\u6837\u7684\u7a0b\u5e8f\u4e3a\u81ea\u7531\u5f62\u5f0f\u7684\u5f20\u91cf\u7a0b\u5e8f\u3002 \u7136\u800c\uff0c\u5982\u679c\u4e0d\u4ed4\u7ec6\u4f18\u5316\uff0c\u8fd9\u6837\u7684\u7a0b\u5e8f\u6027\u80fd\u4f1a\u4e0d\u597d\u3002 \u5fc5\u987b\u4e3a\u6bcf\u4e2a\u786c\u4ef6\u540e\u7aef\u624b\u52a8\u5b8c\u6210\u7279\u5b9a\u4e8e\u4f53\u7cfb\u7ed3\u6784\u7684\u4f18\u5316\uff0c\u4f8b\u5982\u7f13\u5b58\u6216 scratchpad memory\uff08SPM\uff09\u7684\u5e76\u884c\u5316\u548c\u663e\u5f0f\u5229\u7528\u3002 \u6b64\u5916\uff0c\u5178\u578b\u5f20\u91cf\u5e94\u7528\u4e2d\u6240\u9700\u7684\u81ea\u52a8\u5fae\u5206 automatic differentiation (AD) \u52a0\u5267\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002 \u539f\u7a0b\u5e8f\u548c\u5b83\u7684\u68af\u5ea6\u5e94\u8be5\u5206\u5f00\u5b9e\u73b0\u3002 Julia [9] \u7b49\u901a\u7528\u7f16\u7a0b\u8bed\u8a00\u63d0\u4f9b\u4e86\u4e00\u79cd\u4e0e\u5f20\u91cf\u4ea4\u4e92\u548c\u8ba1\u7b97\u68af\u5ea6\u7684\u7b80\u5355\u65b9\u6cd5\u3002 \u7136\u800c\uff0c\u5bf9\u5b83\u4eec\u8fdb\u884c\u4f18\u5316\u4ecd\u7136\u662f\u4e00\u9879\u8270\u5de8\u7684\u4efb\u52a1\u3002</p> <p>\u4e3a\u4e86\u5e94\u5bf9\u8fd9\u4e00\u6311\u6218\uff0c\u6211\u4eec\u63d0\u51fa FreeTensor\uff0c\u8fd9\u662f\u4e00\u79cd\u7528\u4e8e\u5f20\u91cf\u7a0b\u5e8f\u7684\u907f\u514d\u5197\u4f59\u7684 DSL\u3002 \u4e0e\u73b0\u6709\u5de5\u4f5c\u4e0d\u540c\uff0c\u6211\u4eec\u5f15\u5165\u7ec6\u7c92\u5ea6\u5f20\u91cf\u64cd\u4f5c\u4ee5\u51cf\u5c11\u5197\u4f59\u8ba1\u7b97\u548c\u5185\u5b58\u8bbf\u95ee\uff0c\u540c\u65f6\u5c06\u5f20\u91cf\u4fdd\u6301\u4e3a\u4e00\u7b49\u516c\u6c11\u4ee5\u4fdd\u6301\u7f16\u7a0b\u7b80\u5355\u6027\u3002 \u4e3a\u4e86\u5206\u6790\u7ec6\u7c92\u5ea6\u63a7\u5236\u6d41\u5f15\u5165\u7684\u590d\u6742\u4f9d\u8d56\uff0c FreeTensor \u7f16\u8bd1\u5668\u5229\u7528\u591a\u9762\u4f53\u6280\u672f\u8fdb\u884c\u81ea\u52a8\u5206\u6790\uff0c\u56e0\u6b64\u6211\u4eec\u5e94\u7528\u4e86\u4e00\u7cfb\u5217\u4f18\u5316\uff0c\u5305\u62ec\u5e76\u884c\u5316\u3001\u5faa\u73af\u8f6c\u6362\u548c\u5185\u5b58\u5c42\u6b21\u8f6c\u6362\u6765\u751f\u6210 \u9ad8\u6027\u80fd\u4ee3\u7801\u3002 \u6b64\u5916\uff0c\u7531\u4e8e\u5fae\u5206\u5728\u5f20\u91cf\u7a0b\u5e8f\u4e2d\u81f3\u5173\u91cd\u8981\uff0c\u56e0\u6b64 FreeTensor \u652f\u6301\u7ec6\u7c92\u5ea6\u81ea\u52a8\u5fae\u5206\uff0c\u5e76\u901a\u8fc7\u4f18\u5316\u6765\u901a\u8fc7\u5b58\u50a8\u6216\u91cd\u65b0\u8ba1\u7b97\u4e2d\u95f4\u5f20\u91cf\u4e4b\u95f4\u7684\u5e73\u8861\u6765\u51cf\u5c11\u5185\u5b58\u5197\u4f59\u3002</p> <p>\u8d21\u732e\uff1a</p> <ul> <li>\u63d0\u51fa\u4e00\u79cd\u540d\u4e3a FreeTensor \u7684 Free-form \u7684 DSL\uff0c\u5b83\u901a\u8fc7\u63d0\u4f9b\u7c92\u5ea6\u65e0\u5173(granularity-oblivious)\u7684\u5f20\u91cf\u64cd\u4f5c\u6765\u652f\u6301\u907f\u514d\u5197\u4f59\u7684\u5f20\u91cf\u7f16\u7a0b\u3002</li> <li>\u5728 FreeTensor \u4e2d\u63d0\u4f9b\u7f16\u8bd1\u4f18\u5316\u4ee5\u751f\u6210\u9ad8\u6548\u7684\u5f20\u91cf\u7a0b\u5e8f\uff0c\u5305\u62ec\u5bf9\u5177\u6709\u9012\u5f52\u7684 dimension-free \u7a0b\u5e8f\u7684 \u90e8\u5206\u6c42\u503c\u3001\u5bf9\u7ec6\u7c92\u5ea6\u63a7\u5236\u6d41\u7684\u4f9d\u8d56\u611f\u77e5\u8f6c\u6362 \u4ee5\u53ca \u9488\u5bf9\u4e0d\u540c\u4f53\u7cfb\u7ed3\u6784\u7684\u81ea\u52a8\u4ee3\u7801\u751f\u6210\u3002</li> <li>\u652f\u6301\u7ec6\u7c92\u5ea6\u81ea\u52a8\u5fae\u5206 combined with efficient selective intermediate tensor materialization\u3002</li> <li>\u8bc4\u4f30\u8868\u660e\uff0c\u4e0e\u73b0\u6709\u7684\u5f20\u91cf\u7f16\u7a0b\u6846\u67b6\u76f8\u6bd4\uff0cFreeTensor \u5728\u65e0\u5fae\u5206\u7684\u60c5\u51b5\u4e0b\u5b9e\u73b0\u4e86\u9ad8\u8fbe 5.10 \u500d\u7684\u52a0\u901f\u6bd4\uff08\u5e73\u5747 2.08 \u500d\uff09\uff0c\u5bf9\u4e8e\u5178\u578b\u7684\u4e0d\u89c4\u5219\u5f20\u91cf\u7a0b\u5e8f\u5728\u6709\u5fae\u5206\u7684\u60c5\u51b5\u4e0b\u5b9e\u73b0\u4e86\u9ad8\u8fbe 127.74 \u500d\u7684\u52a0\u901f\u6bd4\uff08\u5e73\u5747 36.26 \u500d\uff09 .</li> </ul> <p>\u672c\u6587\u7684\u5176\u4f59\u90e8\u5206\u5b89\u6392\u5982\u4e0b\u3002 \u7b2c 2 \u8282\u7528\u4e00\u4e2a\u8be6\u7ec6\u7684\u4f8b\u5b50\u63cf\u8ff0\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002 \u7b2c 3 \u8282\u548c\u7b2c 4 \u8282\u63cf\u8ff0\u4e86\u6211\u4eec\u5728 FreeTensor \u4e2d\u7684 DSL \u548c\u4ee3\u7801\u751f\u6210\ud83d\udca1\u3002 \u7b2c 5 \u8282\u89e3\u51b3\u4e86 AD \u4e2d\u7684\u6027\u80fd\u95ee\u9898\u3002 \u7b2c 6 \u8282\u8bc4\u4f30 FreeTensor \u7684\u6027\u80fd\u3002 \u7b2c 7 \u8282\u8ba8\u8bba\u4e86\u4e00\u4e9b\u76f8\u5173\u5de5\u4f5c\u3002 \u7b2c 8 \u8282\u603b\u7ed3\u4e86\u672c\u6587\u3002</p>"},{"location":"mlc/paper-freetensor.html#2-background-and-motivation","title":"2. Background and Motivation","text":""},{"location":"mlc/paper-freetensor.html#21-background","title":"2.1. Background","text":"<p>\u73b0\u6709\u7684\u5f20\u91cf\u7f16\u7a0b\u6846\u67b6\uff0c\u5305\u62ec TensorFlow [3]\u3001PyTorch [29]\uff0c\u5c06\u5f20\u91cf\u7a0b\u5e8f\u8868\u793a\u4e3a\u5bf9\u9ad8\u5ea6\u4f18\u5316\u7684\u5e93\u7684\u8c03\u7528\uff0c\u5305\u62ec cuDNN [15]\u3001cuBLAS [16] \u548c Intel MKL [26]\u3002 \u7531\u4e8e\u5f20\u91cf\u7a0b\u5e8f\u7684\u5feb\u901f\u53d1\u5c55\u9700\u8981\u8bb8\u591a\u65b0\u7684\u7b97\u5b50\uff0c\u56e0\u6b64\u63d0\u51fa\u4e86\u50cf TVM [12] \u8fd9\u6837\u7684\u4ee3\u7801\u751f\u6210\u6846\u67b6\u6765\u51cf\u5c11\u4eba\u5de5\u5de5\u4f5c\u3002</p> <p>\u7136\u800c\uff0c\u8fd9\u4e9b\u6846\u67b6\u7f3a\u4e4f\u5bf9\u65b0\u5174\u7684\u4e0d\u89c4\u5219\u5f20\u91cf\u7a0b\u5e8f\u7684\u6709\u6548\u652f\u6301\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u5177\u6709\u5bf9\u5b8c\u6574\u5f20\u91cf\u8fdb\u884c\u90e8\u5206\u64cd\u4f5c\u6216\u590d\u6742\u63a7\u5236\u4f9d\u8d56\u7684\u7279\u70b9\u3002 \u4e3a\u4e86\u8fce\u5408\u5f53\u524d\u7684\u6846\u67b6\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u4e2d\u5f15\u5165\u4e86\u5197\u4f59\u8ba1\u7b97\u548c\u5185\u5b58\u8bbf\u95ee\u3002 \u5c3d\u7ba1\u50cf Julia [9] \u8fd9\u6837\u7684\u901a\u7528\u7f16\u7a0b\u8bed\u8a00\u53ef\u4ee5\u90e8\u5206\u6d88\u9664\u8fd9\u4e9b\u5197\u4f59\uff0c\u4f46\u7531\u4e8e\u7f3a\u4e4f\u9886\u57df\u77e5\u8bc6\uff0c\u5b83\u4eec\u4ecd\u7136\u65e0\u6cd5\u751f\u6210\u9ad8\u6027\u80fd\u4ee3\u7801\u3002</p>"},{"location":"mlc/paper-freetensor.html#22-motivating-example","title":"2.2. Motivating Example","text":"<p>\u6211\u4eec\u4ee5\u56fe 2 \u4e2d\u7684 SubdivNet [19] \u4e3a\u4f8b\u6765\u8bf4\u660e\u73b0\u6709\u6846\u67b6\u7684\u5c40\u9650\u6027\u4ee5\u53ca FreeTensor \u7684\u5de5\u4f5c\u539f\u7406\u3002 SubdivNet \u7684\u4e3b\u8981\u7ec4\u6210\u90e8\u5206\u662f mesh \u4e0a\u7684\u591a\u91cd\u5377\u79ef\u3002 \u7c7b\u4f3c\u4e8e\u4f20\u7edf\u5377\u79ef\u7ed3\u5408\u6bcf\u4e2a\u50cf\u7d20\u53ca\u5176\u76f8\u90bb\u50cf\u7d20\u7684\u7279\u5f81\uff0cSubdivNet \u4e2d\u7684\u7f51\u683c\u5377\u79ef\u7ed3\u5408\u6bcf\u4e2a face \u53ca\u5176\u76f8\u90bb faces \u7684\u7279\u5f81\u3002 \u4e3a\u4e86\u514b\u670d faces \u4e4b\u95f4\u7684\u987a\u5e8f\u4e0d\u53d8\u6027\uff0cSubdivNet \u5f15\u5165\u4e86\u5faa\u73af\u5dee\u5206\u8ba1\u7b97\uff0c\u5982\u56fe 2(a) \u7684\u7ea2\u6846\u6240\u793a\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u4e2d\u5fc3\u9762 \\(e_i\\)\uff0c \u901a\u8fc7\u90bb\u63a5\u6570\u7ec4\u627e\u5230\u5176\u4e09\u4e2a\u90bb\u9762\\(e_j\\)\u3001 \\(e_{j+1}\\) \u548c \\(e_{j+2}\\) \u7684\u7279\u5f81\u5411\u91cf\uff0c \u5faa\u73af\u8ba1\u7b97\u5b83\u4eec\u7684\u5dee\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7279\u5f81\u5411\u91cf \\(e_j\\)\u3001 \\(e_{j+1}\\) \u548c \\(e_{j+2}\\) \u88ab\u83b7\u53d6\u5e76\u9488\u5bf9\u4e2d\u592e face \u4f7f\u7528\uff0c\u4f46\u5982\u679c\u6ca1\u6709\u989d\u5916\u7684\u7d22\u5f15\u8bbf\u95ee\uff0c\u5219\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u5176\u4ed6\u4e2d\u592e face \u91cd\u7528\u3002 \u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u5e94\u8be5\u5355\u72ec\u521b\u5efa\u548c\u4f7f\u7528\uff0c\u800c\u4e0d\u662f\u5728\u6bcf\u6b21\u8ba1\u7b97\u4e4b\u524d\u90fd\u4ece\u4e2d\u592e\u9762\u5468\u56f4\u6536\u96c6\u3002</p> <p>\u7136\u800c\uff0c\u57fa\u4e8e \u7b97\u5b50 \u7684\u6846\u67b6\u4e2d\u7684\u5178\u578b\u5b9e\u73b0\u9700\u8981\u5171\u540c\u64cd\u4f5c\u8fd9\u4e9b\u6570\u636e\uff0c\u5982\u56fe 2(b) \u6240\u793a\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u5982\u56fe2(c)\u6240\u793a\uff0c\u8be5\u7a0b\u5e8f\u7684Pytorch\u5b9e\u73b0\u5305\u62ec\u4ee5\u4e0b\u6b65\u9aa4\uff1a</p> <ul> <li>\u7b2c 1 \u6b65\uff1a\u4f9d\u6b21\u8c03\u7528 <code>flatten</code>\u3001 <code>index_select</code> \u548c <code>reshape</code>\uff0c\u6784\u9020\u4e00\u4e2a3-D \u5f20\u91cf <code>(adj_feat)</code> \u6765\u5b58\u50a8\u76f8\u90bb\u9762\u7684\u7279\u5f81\u3002 \u7ed3\u679c\u5f20\u91cf <code>adj_feat[i, j, k]</code> \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u5b58\u50a8\u4e86\u7b2c i \u4e2a face \u7684 \u7b2c j \u4e2a \u90bb\u5c45 feature \u7684\u7b2c k \u4e2a\u56e0\u5b50\u3002</li> <li>\u7b2c 2 \u6b65\uff1a\u5bf9 <code>adj_feat</code> \u5f20\u91cf\u8fdb\u884c\u5207\u7247\uff0c\u5bf9\u5176\u91cd\u65b0\u6392\u5e8f\uff0c\u7136\u540e\u8fde\u63a5\uff0c\u73b0\u5728\u9762 \\(e_{j+1}\\) \u4e0e\u539f\u59cb\u9762 \\(e_j\\) \u5177\u6709\u76f8\u540c\u7684\u7d22\u5f15\u3002</li> <li>\u7b2c 3 \u6b65\uff1a\u505a\u4e00\u4e2a\u51cf\u6cd5\u5e76\u8ba1\u7b97\u5b83\u4eec\u7684\u7edd\u5bf9\u503c\uff0c\u6700\u540e\u6c42\u548c\u3002</li> </ul> <p>\u5c3d\u7ba1\u6bcf\u4e2a\u7b97\u5b50\u90fd\u53d7\u76ca\u4e8e\u4f9b\u5e94\u5546\u63d0\u4f9b\u7684\u5e93\u4e2d\u9ad8\u5ea6\u4f18\u5316\u7684\u672c\u673a\u4ee3\u7801\uff0c\u4f46\u6bcf\u4e2a\u4e2d\u95f4\u503c\u90fd\u5e94\u5b58\u50a8\u4e3a\u5168\u5c3a\u5bf8\u5f20\u91cf\uff0c\u5982\u56fe 2(b) \u6240\u793a\u3002 \u8fd9\u5f15\u5165\u4e86\u663e\u8457\u7684\u5185\u5b58\u8bbf\u95ee\u5197\u4f59\uff1a\u5f20\u91cf <code>adj_feat</code> \u7684\u5927\u5c0f\u4e3a <code>n_faces * 3 * n_feat</code>\uff0c\u8fd9\u6bd4\u8f93\u5165\u548c\u8f93\u51fa\u5f20\u91cf\u5927\u5f97\u591a\uff0c\u5e76\u4e14\u4f1a\u4ea7\u751f\u5de8\u5927\u7684\u5185\u5b58\u8bbf\u95ee\u5f00\u9500\u3002 \u6b64\u5916\uff0c\u8fd8\u5305\u62ec\u5197\u4f59\u7b97\u5b50 <code>flatten</code>\u3001 <code>index_select</code>\u3001<code>reshape</code> \u548c <code>cat</code> \uff0c\u5b83\u4eec\u4ec5\u7528\u4e8e\u91cd\u65b0\u6392\u5217\u73b0\u6709\u6570\u636e\uff0c\u4f46\u4e0d\u6267\u884c\u6709\u610f\u4e49\u7684\u8ba1\u7b97\u3002</p> <p>\u5373\u4f7f TVM \u652f\u6301\u9ad8\u5ea6\u81ea\u5b9a\u4e49\u7684\u7b97\u5b50\uff0c\u5f20\u91cf\u4e0a\u7684\u95f4\u63a5\u7d22\u5f15\u4ecd\u7136\u963b\u6b62\u5b83\u5728\u4e0d\u7ec4\u5408\u4f20\u7edf\u7b97\u5b50\u7684\u60c5\u51b5\u4e0b\u8868\u793a\u7a0b\u5e8f\uff0c\u5982\u56fe 2(b) \u6240\u793a\u3002 \u50cf Julia \u8fd9\u6837\u7684\u901a\u7528\u7f16\u7a0b\u8bed\u8a00\u80fd\u591f\u5728\u7ec6\u7c92\u5ea6\u63a7\u5236\u6d41\u4e2d\u8868\u793a\u8fd9\u79cd\u60c5\u51b5\u3002 \u4f46\u662f\uff0c\u5b83\u9700\u8981\u5927\u91cf\u7684\u624b\u52a8\u4f18\u5316\u548c\u5e76\u884c\u5316\u3002</p>"},{"location":"mlc/paper-freetensor.html#23-challenge-of-freetensor","title":"2.3. Challenge of FreeTensor","text":"<p>\u4e3a\u4e86\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\uff0c\u6211\u4eec\u91c7\u7528\u7ec6\u7c92\u5ea6\u7684\u63a7\u5236\u6d41\u907f\u514d\u5197\u4f59\u5185\u5b58\u8bbf\u95ee\uff0c\u5982\u56fe 3(b) \u6240\u793a\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u8fed\u4ee3\u6bcf\u4e2a face i \u53ca\u5176\u90bb\u5c45 j\uff0c\u5e76\u76f4\u63a5\u4ece\u8f93\u5165\u5f20\u91cf e \u4e2d\u7d22\u5f15\u7b2c j \u548c (j+1) \u4e2a\u9762\u3002 \u4e4b\u540e\u8fdb\u884c\u7ec6\u7c92\u5ea6\u7684\u5f20\u91cf\u8fd0\u7b97\u8ba1\u7b97\u5dee\u503c\uff0c\u7ed3\u679c\u76f4\u63a5\u7d2f\u52a0\u5230\u4e00\u4e2a\u5f20\u91cf y\u3002 \u8fd9\u91cc\uff0c\\(e_j\\)\u3001\\(e_{j+1}\\) \u548c \\(e_{j+2}\\) \u662f\u5355\u72ec\u7684\u5f20\u91cf\uff0c\u5982\u56fe 3(a) \u6240\u793a\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5f20\u91cf\u64cd\u4f5c\u90fd\u662f\u7ec6\u7c92\u5ea6\u7684\u5e76\u5355\u72ec\u6267\u884c\u3002</p> <p>FreeTensor \u91c7\u7528\u8fd9\u79cd\u7ec6\u7c92\u5ea6\u7684\u65b9\u6cd5\u6765\u64cd\u4f5c\u6bcf\u4e2a\u5f20\u91cf\u3002 \u4e0e\u57fa\u4e8e \u7b97\u5b50 \u7684\u5b9e\u73b0\u76f8\u6bd4\uff0cFreeTensor \u4e2d\u7684\u7a0b\u5e8f\u4ee5\u6309\u9700\u65b9\u5f0f\u8bbf\u95ee\u5f20\u91cf\u5143\u7d20\uff0c\u6ca1\u6709\u591a\u4f59\u7684\u64cd\u4f5c\u6765\u9884\u5148\u91cd\u65b0\u6392\u5217\u5b83\u4eec\u3002 \u7136\u800c\uff0cFreeTensor \u5e26\u6765\u7684\u590d\u6742\u63a7\u5236\u6d41\u7ed9\u9ad8\u6548\u4ee3\u7801\u751f\u6210\u5e26\u6765\u4e86\u91cd\u5927\u6311\u6218\u3002 \u6211\u4eec\u5728\u8fd9\u91cc\u603b\u7ed3\u4e86\u4e3b\u8981\u6311\u6218\u3002</p> <ul> <li> <p>\u5b58\u5728\u4f9d\u8d56\u6027\u7684\u4f18\u5316\u3002 FreeTensor \u5f15\u5165\u7684\u7ec6\u7c92\u5ea6\u63a7\u5236\u6d41\u4f7f\u5f97\u9ad8\u6548\u4ee3\u7801\u751f\u6210\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\u3002 \u6211\u4eec\u5e0c\u671b FreeTensor \u65e0\u9700\u592a\u591a\u624b\u52a8\u64cd\u4f5c\u5373\u53ef\u81ea\u52a8\u751f\u6210\u9ad8\u6027\u80fd\u4ee3\u7801\u3002 \u7136\u800c\uff0c\u590d\u6742\u7684\u63a7\u5236\u548c\u6570\u636e\u4f9d\u8d56\u963b\u788d\u4e86\u8f6c\u6362\u3002</p> </li> <li> <p>\u590d\u6742\u63a7\u5236\u6d41\u7684\u9ad8\u6548\u81ea\u52a8\u5fae\u5206\u3002 \u5177\u6709\u590d\u6742\u63a7\u5236\u6d41\u7684\u7a0b\u5e8f\u7684\u81ea\u52a8\u5fae\u5206 (AD) \u4f1a\u8fdb\u4e00\u6b65\u5f15\u5165\u5927\u91cf\u5197\u4f59\uff0c\u8fd9\u62b5\u6d88\u4e86\u81ea\u7531\u683c\u5f0f\u8bed\u8a00\u63d0\u4f9b\u7684\u597d\u5904\u3002 \u5982\u4f55\u8bbe\u8ba1\u9ad8\u6027\u80fd\u7684AD\u673a\u5236\u66f4\u5177\u6311\u6218\u6027\u3002</p> </li> </ul>"},{"location":"mlc/paper-freetensor.html#3-free-form-dsl","title":"3. Free-Form DSL","text":"<p>\u672c\u8282\u4ecb\u7ecd\u6211\u4eec\u5982\u4f55\u4e3a\u4e0d\u89c4\u5219\u5f20\u91cf\u7a0b\u5e8f\u8bbe\u8ba1 Free-Form DSL\u3002 \u4f5c\u4e3a\u5f20\u91cf\u7a0b\u5e8f\u7684 DSL\uff0c\u5f20\u91cf\u88ab\u89c6\u4e3a\u7b80\u5316\u7f16\u7a0b\u7684\u4e00\u7b49\u516c\u6c11\u3002 \u4e3a\u4e86\u652f\u6301\u5bf9\u90e8\u5206\u5f20\u91cf\u7684\u64cd\u4f5c\u4ee5\u6d88\u9664\u5197\u4f59\u8ba1\u7b97\u548c\u5185\u5b58\u8bbf\u95ee\uff0cFreeTensor \u901a\u8fc7\u5f15\u5165\u7ec6\u7c92\u5ea6\u63a7\u5236\u6d41\u548c\u90e8\u5206\u5f20\u91cf\u7d22\u5f15\u6765\u652f\u6301\u4efb\u4f55\u7c92\u5ea6\u7684\u5f20\u91cf\u64cd\u4f5c\u3002 \u6b64\u5916\uff0c\u4e3a\u4e86\u751f\u6210\u9ad8\u6027\u80fd\u4ee3\u7801\uff0cFreeTensor \u4e3a\u7528\u6237\u63d0\u4f9b\u4e86\u989d\u5916\u7684\u5143\u4fe1\u606f\u548c\u7f16\u7a0b\u6307\u5bfc\uff0c\u4ee5\u8f85\u52a9\u5e95\u5c42\u7f16\u8bd1\u3002 \u672c\u8282\u7684\u5176\u4f59\u90e8\u5206\u5c06\u8be6\u7ec6\u8bf4\u660e\u4e0a\u8ff0\u8bbe\u8ba1\u3002</p>"},{"location":"mlc/paper-freetensor.html#31-tensors-as-first-class-citizens","title":"3.1. Tensors as First-Class Citizens","text":"<p>\u5f20\u91cf\u5b9a\u4e49\u3002 FreeTensor \u5c06\u5f20\u91cf\u89c6\u4e3a\u4e00\u7b49\u516c\u6c11\u4ee5\u51cf\u8f7b\u7f16\u7a0b\u96be\u5ea6\u3002 \u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u5f20\u91cf\uff08\u5404\u79cd\u5143\u7d20\u7c7b\u578b\uff09\u662f FreeTensor \u4e2d\u7684\u4e3b\u8981\u6570\u636e\u7c7b\u578b\u3002 \u6211\u4eec\u79f0\u7ef4\u5ea6\u4e3a \\(N\\) \u7684\u5f20\u91cf\u4e3a \\(N-D\\) \u5f20\u91cf\uff0c\u6807\u91cf\u88ab\u89c6\u4e3a 0-D \u5f20\u91cf\u3002 \u5f20\u91cf\u5b58\u50a8\u5728\u7d27\u51d1\u7684\u5185\u5b58\u5e03\u5c40\u4e2d\uff0c\u4e00\u65e6\u521b\u5efa\u5f20\u91cf\u5f62\u72b6\u5c31\u4e0d\u53ef\u6539\u53d8\u3002 \u4e3a\u4e86\u4fdd\u8bc1\u5f20\u91cf\u4e4b\u95f4\u6ca1\u6709\u91cd\u53e0\uff0c\u5f20\u91cf\u6309\u503c\u8fdb\u884c\u590d\u5236\u3002 \u5f20\u91cf\u5143\u7d20\u53ef\u4ee5\u662f\u4efb\u4f55\u57fa\u672c\u6807\u91cf\u6570\u636e\u7c7b\u578b\uff0c\u5305\u62ec \u6574\u6570\u3001\u5355/\u53cc/\u534a\u6d6e\u70b9\u6570\u7b49\uff0c\u6db5\u76d6\u4e86\u5178\u578b\u5f20\u91cf\u7a0b\u5e8f\u7684\u9700\u6c42\u3002</p> <p>\u5f20\u91cf\u7d22\u5f15\u3002 \u56fe 4 \u663e\u793a\u4e86 FreeTensor \u5982\u4f55\u5b9a\u4e49\u548c\u7d22\u5f15\u5f20\u91cf\u3002 \u5f20\u91cf\u53ef\u4ee5\u5b9a\u4e49\u5728\u4e0d\u540c\u7684\u8bbe\u5907\u4e0a\uff0c\u5305\u62ec CPU\u3001GPU \u7b49\u3002FreeTensor \u63d0\u4f9b\u4e86\u7528\u6237\u53cb\u597d\u7684 NumPy [18] \u98ce\u683c\u7684\u7d22\u5f15\u89c4\u5219\uff0c\u80fd\u591f\u7d22\u5f15\u5f20\u91cf\u4e2d\u7684\u4efb\u4f55\u5b50\u533a\u57df\u3002 \u8fd9\u79cd\u7d22\u5f15\u89c4\u5219\u5141\u8bb8\u7528\u6237\u5bf9 \u90e8\u5206\u5f20\u91cf \u8fdb\u884c\u7d22\u5f15\uff0c\u4ece\u800c\u7075\u6d3b\u5730\u652f\u6301\u5bf9 \u90e8\u5206\u5f20\u91cf \u7684\u64cd\u4f5c\uff0c\u4ee5\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u8ba1\u7b97\u548c\u5185\u5b58\u8bbf\u95ee\u3002</p> <p>FreeTensor \u7684 DSL \u4e2d\u7684\u6240\u6709\u64cd\u4f5c\uff0c\u5305\u62ec\u7b97\u672f\u8fd0\u7b97\u7b26\uff08<code>+</code>\u3001<code>-</code>\u3001<code>*</code>\u3001<code>/</code> \u7b49\uff09\u3001\u5185\u7f6e\u51fd\u6570\uff08sum\u3001abs \u7b49\uff09\u548c\u51fd\u6570\u8c03\u7528\uff0c\u90fd\u76f4\u63a5\u5728\u5f20\u91cf\u4e0a\u6267\u884c\u3002 \u7136\u540e\u5c06\u8fd9\u4e9b\u64cd\u4f5c\u964d\u4f4e\u4e3a\u9ad8\u6027\u80fd\u672c\u673a\u4ee3\u7801\uff0c\u8fd9\u5c06\u5728\u7b2c 4 \u8282\u4e2d\u4ecb\u7ecd\u3002</p>"},{"location":"mlc/paper-freetensor.html#32-granularity-oblivious-tensor-operations","title":"3.2. Granularity-Oblivious Tensor Operations","text":"<p>\u7531\u4e8e\u4e0d\u89c4\u5219\u5f20\u91cf\u7a0b\u5e8f\u901a\u5e38\u64cd\u4f5c\u5f20\u91cf\u7684\u4e00\u90e8\u5206\u800c\u4e0d\u662f\u6574\u4e2a\u5f20\u91cf\u4ee5\u8282\u7701\u8ba1\u7b97\u91cf\uff0c\u56e0\u6b64\u652f\u6301\u90e8\u5206\u5f20\u91cf\u64cd\u4f5c\u662f\u5fc5\u8981\u7684\u3002 \u4f20\u7edf\u7684\u57fa\u4e8e\u7b97\u5b50\u7684\u6846\u67b6\u7684\u7528\u6237\u88ab\u671f\u671b\u8c03\u7528\u5c3d\u53ef\u80fd\u7c97\u7c92\u5ea6\u7684\u7b97\u5b50\u3002 \u5982\u7b2c 2 \u8282\u6240\u8ff0\uff0c\u4f7f\u7528\u6b64\u7c7b\u5f20\u91cf\u7b97\u5b50\u5b9e\u73b0\u4e0d\u89c4\u5219\u5f20\u91cf\u7a0b\u5e8f\u5c06\u5e26\u6765\u5927\u91cf\u8ba1\u7b97\u548c\u8bbf\u5b58\u5197\u4f59\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5728 FreeTensor \u4e2d\u5f15\u5165\u4e86 Granularity-Oblivious Tensor Operations\uff0c\u4ee5\u63d0\u4f9b\u7f16\u5199\u907f\u514d\u5197\u4f59\u7684\u5f20\u91cf\u7a0b\u5e8f\u7684\u80fd\u529b\u3002</p> <p>\u4e3a\u4e86\u5b9e\u73b0 Granularity-Oblivious \u7684\u5f20\u91cf\u64cd\u4f5c\uff0c\u6211\u4eec\u5728 DSL \u4e2d\u5f15\u5165\u4e86\u4ee5\u4e0b\u8bed\u4e49\uff1a\u6574\u6570\u8303\u56f4\u7684 for \u5faa\u73af\u3001\u5206\u652f \u548c \u59cb\u7ec8\u5185\u8054\u7684\u51fd\u6570\u8c03\u7528\u3002 \u6211\u4eec\u5c06\u5728\u7b2c 4 \u8282\u4e2d\u8be6\u7ec6\u89e3\u91ca\u4e3a\u4ec0\u4e48\u8981\u5f15\u5165\u8fd9\u4e9b\u5173\u952e\u7279\u6027\u3002\u501f\u52a9\u8fd9\u4e9b\u8bed\u4e49\uff0cFreeTensor \u53ef\u4ee5\u652f\u6301\u4efb\u4f55\u7c92\u5ea6\u7684\u5f20\u91cf\u64cd\u4f5c\u3002 \u56fe 5 \u663e\u793a\u4e86\u5982\u4f55\u4f7f\u7528 FreeTensor \u5b9e\u73b0\u56fe 1 \u4e2d\u7684 Longformer \u793a\u4f8b\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f7f\u7528 for \u5faa\u73af <code>j</code> \u6cbf\u8f93\u5165\u5e8f\u5217\u8fdb\u884c\u8fed\u4ee3\uff0c\u5e76\u4f7f\u7528\u5faa\u73af <code>k</code> \u6cbf\u6ed1\u52a8\u7a97\u53e3\u8fdb\u884c\u8fed\u4ee3\u3002 K \u7684\u5143\u7d20\u76f4\u63a5\u901a\u8fc7\u7d22\u5f15 <code>j+k</code> \u8bbf\u95ee\uff0c\u65e0\u9700\u4e8b\u5148\u590d\u5236\u6574\u4e2a\u5f20\u91cf\u3002</p> <p>FreeTensor \u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u79f0\u4e3a <code>libop</code> \u7684\u5f20\u91cf\u7b97\u5b50\u5e93\uff0c\u652f\u6301 element-wise operations, reductions, matrix multiplications \u7b49\u7b80\u5355\u7b97\u5b50 \u548c softmax \u7b49\u590d\u6742\u7b97\u5b50\u3002 \u6211\u4eec\u5728\u7eaf DSL \u4ee3\u7801\u4e2d\u5b9e\u73b0 <code>libop</code>\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u6620\u5c04\u5230\u672c\u673a\u4ee3\u7801\u5b9e\u73b0\u3002 \u5728\u7f16\u8bd1\u65f6\uff0c\u5bf9 libop \u7684\u51fd\u6570\u8c03\u7528\u5c06\u4f5c\u4e3a\u5d4c\u5957\u5faa\u73af\u5b8c\u5168\u5185\u8054\uff0c\u7136\u540e\u4e0e\u7a0b\u5e8f\u7684\u5176\u4f59\u90e8\u5206\u4e00\u8d77\u4f18\u5316\u3002 \u4f8b\u5982\uff0c\u56fe 3(b) \u4e2d\u7684 tensorwise zeros\u3001abs\u3001- \u548c += \u90fd\u662f\u7531 <code>libop</code> \u63d0\u4f9b\u7684\u3002</p> <p>note</p> <p>libop: \u7c7b\u4f3c TOPI \u4e4b\u4e8e TE\uff1f</p>"},{"location":"mlc/paper-freetensor.html#33-dimension-free-programming","title":"3.3. Dimension-Free Programming","text":"<p>\u5f20\u91cf\u7ef4\u6570\u662f\u5f20\u91cf\u8ba1\u7b97\u7684\u5173\u952e\u5c5e\u6027\uff0c\u5f20\u91cf\u7a0b\u5e8f\u7684\u5927\u591a\u6570\u64cd\u4f5c\u90fd\u4e0e\u56f4\u7ed5\u5f20\u91cf\u7ef4\u6570\u7684\u53d8\u6362\u5bc6\u5207\u76f8\u5173\u3002 \u6211\u4eec\u5728\u5f20\u91cf\u7684\u5143\u6570\u636e\u4e2d\u8bb0\u5f55\u4e0e\u7ef4\u5ea6\u76f8\u5173\u7684\u5c5e\u6027\uff0c\u5b83\u4e5f\u4eab\u6709\u4e00\u6d41\u7684\u652f\u6301\u3002 \u53ef\u4ee5\u5206\u522b\u4f7f\u7528 <code>.ndim</code>\u3001<code>.shape</code>\u3001<code>.dtype</code> \u548c <code>.mtype</code> \u5c5e\u6027\u8bbf\u95ee \u7ef4\u5ea6\u3001\u5f62\u72b6\u3001\u5143\u7d20\u7c7b\u578b\u548c\u8bbe\u5907\u653e\u7f6e\u3002 \u7279\u522b\u662f\uff0c\u5f20\u91cf\u5f62\u72b6\u4fdd\u6301\u5176\u8868\u8fbe\u5f62\u5f0f\u3002 \u4f8b\u5982\uff0c\u5c06 \\(N\\times 2\\) \u7684\u4e8c\u7ef4\u5f20\u91cf A \u5c55\u5e73\u4e3a\u4e00\u7ef4\u5f20\u91cf B \u540e\uff0c\u6211\u4eec\u77e5\u9053 B \u7684\u957f\u5ea6\u5e94\u8be5\u662f \\(2N\\) \uff0c\u800c\u4e0d\u662f Any\u3002 \u6211\u4eec\u53ef\u4ee5\u5b89\u5168\u5730\u65ad\u8a00 \\(2N\\) \u662f\u5076\u6570\u5e76\u5c06 B \u91cd\u5851\u56de \\(N\\times 2\\) \u5f62\u72b6\u3002</p> <p>\u5728 FreeTensor \u4e2d\uff0c\u6211\u4eec\u7528\u6709\u9650\u9012\u5f52\u8868\u8fbe\u5bf9\u4efb\u610f\u7ef4\u5ea6\u7684\u8ba1\u7b97\u3002 \u56fe6 \u7ed9\u51fa\u4e86\u5982\u4f55\u4f7f\u7528\u6709\u9650\u9012\u5f52\u7f16\u5199 Dimension-Free \u5f20\u91cf\u7a0b\u5e8f\u7684\u793a\u4f8b\u3002 \u5982 \u56fe6(a) \u6240\u793a\uff0c\u5982\u679c\u5728\u7f16\u5199\u5f20\u91cf\u7a0b\u5e8f\u65f6\u65e0\u6cd5\u786e\u5b9a\u5f20\u91cf\u7684\u5f62\u72b6\uff0c\u7528\u6237\u5c06\u65e0\u6cd5\u7f16\u5199\u7b80\u5355\u7684\u5d4c\u5957\u5faa\u73af\u7a0b\u5e8f\uff0c\u8fd9\u4f1a\u5e26\u6765\u5f88\u5927\u7684\u7f16\u7a0b\u590d\u6742\u5ea6\u3002 \u5728 FreeTensor \u4e2d\uff0c\u6211\u4eec\u5efa\u8bae\u7528\u6237\u4f7f\u7528\u6709\u9650\u9012\u5f52\u7f16\u5199\u5177\u6709\u672a\u786e\u5b9a\u7ef4\u5ea6\u7684\u5f20\u91cf\u7a0b\u5e8f\uff0c\u5982 \u56fe6(b) \u6240\u793a\u3002 \u8fd9\u79cd\u9012\u5f52\u5c06\u8fdb\u4e00\u6b65\u6269\u5c55\u4e3a\u5728\u7f16\u8bd1\u65f6\u4f7f\u7528 \u90e8\u5206\u6c42\u503c \u7684\u5d4c\u5957\u5faa\u73af\uff0c\u8fd9\u5c06\u5728\u7b2c 4.1 \u8282\u4e2d\u8bf4\u660e\u3002</p>"},{"location":"mlc/paper-freetensor.html#4-generating-high-performance-code","title":"4. Generating High Performance Code","text":"<p>FreeTensor \u5141\u8bb8\u7528\u6237\u7f16\u5199\u65e0\u5197\u4f59\u8ba1\u7b97\u6216\u5185\u5b58\u8bbf\u95ee\u7684\u5f20\u91cf\u7a0b\u5e8f\u3002 DSL \u7f16\u5199\u7684\u7a0b\u5e8f\u5c06\u88ab\u89e3\u6790\u4e3a stack-scoped AST\uff0c\u4f5c\u4e3a FreeTensor \u7684IR\uff0c\u4ee5\u6267\u884c\u8fdb\u4e00\u6b65\u7684\u4f18\u5316\u5e76\u751f\u6210\u9ad8\u6027\u80fd\u7684 native code\u3002 \u901a\u8fc7\u8fd9\u79cd\u8bbe\u8ba1\uff0c\u6bcf\u4e2a\u5f20\u91cf\u4ec5\u5728\u5176\u5b9a\u4e49\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u5b58\u5728\uff0c\u79f0\u4e3a <code>TensorDef</code> \u8282\u70b9\u3002 stack-scoped \u7684\u9650\u5236\u4e3a IR \u8f6c\u6362\u5e26\u6765\u4e86\u663e\u8457\u7684\u7b80\u5316\uff1a</p> <ol> <li>\u80fd\u591f\u5728\u4e0d\u7834\u574f allocation-freeing pair \u7684\u60c5\u51b5\u4e0b\u8f6c\u6362 AST\uff1b</li> <li>\u901a\u8fc7\u5c06\u4e00\u4e2a\u5f20\u91cf\u7684\u751f\u547d\u5468\u671f\u9650\u5236\u5728\u4e00\u4e2a\u5b50\u6811\u4e0a\uff0c\u53ef\u4ee5\u6d88\u9664\u5927\u90e8\u5206\u4f9d\u8d56\u5206\u6790\u4e2d\u7684\u5047\u4f9d\u8d56\u3002</li> </ol> <p>\u7591\u95ee</p> <p>\u8fd9\u91cc\u6240\u8bf4\u7684\u4f9d\u8d56\u5206\u6790\u4e2d\u7684\u5047\u4f9d\u8d56\u662f\uff1f</p> <p>\u53ef\u80fd\u9700\u8981\u5177\u4f53\u4e86\u89e3\u4e00\u4e0b\u7f16\u8bd1\u4f18\u5316\u8fc7\u7a0b\u4e2d\u7684\u4f9d\u8d56\u5206\u6790\u662f\u600e\u4e48\u505a\u7684\u3002</p> <p>\u56fe7 \u663e\u793a\u4e86 <code>LongformerFwd</code> \u51fd\u6570\u7684 AST\uff0c\u5176\u4ee3\u7801\u5728 \u56fe5 \u4e2d\u3002\u6211\u4eec\u5185\u8054\u6240\u6709\u51fd\u6570\u8c03\u7528\u4ee5\u6267\u884c\u8de8\u51fd\u6570\u7684\u6574\u4f53\u4f18\u5316\u3002 \u56fe8 \u663e\u793a\u4e86 \u56fe5 \u4e2d\u793a\u4f8b\u7684\u7ed3\u679c\u7a0b\u5e8f\u3002\u4e4b\u540e\uff0c\u6211\u4eec\u5bf9 AST \u8fdb\u884c\u4e86\u591a\u6b21\u4f18\u5316\u3002</p>"},{"location":"mlc/paper-freetensor.html#41-partial-evaluation-for-dimension-free-programming","title":"4.1. Partial Evaluation for Dimension-Free Programming","text":"<p>\u5982 3.3 \u8282\u6240\u8ff0\uff0c\u7528\u6237\u53ef\u4ee5\u7f16\u5199\u5177\u6709\u6709\u9650\u9012\u5f52\u7684\u51fd\u6570\u3002 FreeTensor \u901a\u8fc7\u6839\u636e\u5f20\u91cf\u7684\u5143\u6570\u636e\u5bf9\u7a0b\u5e8f \u90e8\u5206\u6c42\u503c \u6765\u652f\u6301\u8fd9\u79cd\u7279\u6027\u3002 \u901a\u8fc7\u4f7f\u7528\u5143\u6570\u636e\u4e3a\u5f20\u91cf\u63d0\u4f9b\u4e00\u6d41\u7684\u652f\u6301\uff0c\u7a0b\u5e8f\u4e2d\u6240\u6709\u5f20\u91cf\u7684\u7ef4\u6570\u5728\u7f16\u8bd1\u65f6\u90fd\u662f\u5df2\u77e5\u7684\uff0c\u8fd9\u4f7f\u5f97\u5bf9\u7528\u9012\u5f52\u5b9e\u73b0\u7684\u4e00\u822c\u7ef4\u6570\u7a0b\u5e8f\u5e94\u7528 \u90e8\u5206\u6c42\u503c \u6210\u4e3a\u53ef\u80fd\u3002</p> <p>\u6211\u4eec\u4ee5 \u56fe6(b) \u4e2d\u7684\u4ee3\u7801\u4e3a\u4f8b\u6765\u8bf4\u660e\u8bc4\u4f30\u8fc7\u7a0b\uff0c\u5982 \u56fe9 \u6240\u793a\u3002\u56fe9(a) \u662f\u539f\u59cb\u7a0b\u5e8f\uff0c\u5e26\u6709\u9012\u5f52\u51fd\u6570\u8c03\u7528 add\u3002 \u5047\u8bbe A \u662f\u4e00\u4e2a 3-D \u5f20\u91cf\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u7f16\u8bd1\u5668\u77e5\u9053 <code>if</code> \u6761\u4ef6\u603b\u662f\u5047\u7684\uff0c\u6240\u4ee5 <code>if</code> \u5206\u652f\u4e2d\u7684\u6240\u6709\u8bed\u53e5\u90fd\u4f1a\u88ab\u4e22\u5f03\uff0c\u800c <code>else</code> \u5206\u652f\u4e2d\u7684\u8bed\u53e5\u5c06\u59cb\u7ec8\u88ab\u6267\u884c\u3002 \u7136\u540e\u8bc4\u4f30\u6700\u540e\u4e00\u884c\u7684\u51fd\u6570\u8c03\u7528 add\uff0c\u751f\u6210\u5982 \u56fe9(b) \u6240\u793a\u7684\u4f18\u5316\u7a0b\u5e8f\u3002 \u7136\u540e\u7f16\u8bd1\u5668\u91cd\u590d\u56fe 9(b) \u4e2d\u7684\u8fd9\u79cd \u90e8\u5206\u6c42\u503c \u8fc7\u7a0b\u3002 \u8bf7\u6ce8\u610f\uff0c<code>A[i]</code> \u662f\u4e00\u4e2a\u4e8c\u7ef4\u5f20\u91cf\u3002 \u6700\u540e\uff0c\u5e94\u7528 \u90e8\u5206\u6c42\u503c \u540e\u7684\u6700\u7ec8\u7a0b\u5e8f\u5982\u56fe 9(c) \u6240\u793a\uff0c\u5176\u4e2d\u9012\u5f52\u51fd\u6570\u8c03\u7528\u8f6c\u6362\u4e3a\u5d4c\u5957\u5faa\u73af\u3002</p>"},{"location":"mlc/paper-freetensor.html#42-dependence-aware-transformation","title":"4.2. Dependence-Aware Transformation","text":"<p>\u5185\u8054\u540e\uff0c\u6211\u4eec\u9700\u8981\u5bf9 AST \u6267\u884c\u4e00\u7cfb\u5217\u8f6c\u6362\uff0c\u4ee5\u4ece FreeTensor IR \u751f\u6210\u9ad8\u6548\u4ee3\u7801\u3002 \u6211\u4eec\u4e3a\u5404\u79cd\u4f18\u5316\u5e94\u7528\u4e86\u4e30\u5bcc\u7684\u8f6c\u6362\u96c6\u5408\uff0c\u5305\u62ec\u5faa\u73af\u8f6c\u6362\u3001\u5e76\u884c\u5316\u3001\u5185\u5b58\u5c42\u6b21\u7ed3\u6784\u3001\u5185\u5b58\u5e03\u5c40\u7b49\uff0c\u5982\u8868 1 \u6240\u793a\u3002\u8fd9\u4e9b\u8f6c\u6362\u7c7b\u4f3c\u4e8e Halide [31] \u548c TVM \u7684\u8c03\u5ea6\u4f18\u5316 [12]\uff0c\u4f46\u7ec6\u7c92\u5ea6\u7684\u63a7\u5236\u6d41\u7a0b\u5bf9\u5982\u4f55\u6b63\u786e\u5e94\u7528\u8fd9\u4e9b\u8f6c\u6362\u5e26\u6765\u4e86\u91cd\u5927\u6311\u6218\u3002 \u4f8b\u5982\uff0cTVM \u4ec5\u652f\u6301\u5bf9\u5b8c\u7f8e\u5d4c\u5957\u5faa\u73af\u7684\u8f6c\u6362\uff0c\u8fd9\u610f\u5473\u7740\u8f6c\u6362\u65f6\u4e0d\u9700\u8981\u8003\u8651\u590d\u6742\u7684\u4f9d\u8d56\u5173\u7cfb\u3002 </p> <p>note</p> <p>\u5b8c\u7f8e\u5d4c\u5957\u5faa\u73af\u6307 \u5faa\u73af\u4f53\u4ec5\u5728\u6700\u5185\u5c42\u5faa\u73af</p> <p>\u7136\u800c\uff0c\u5728\u5e94\u7528\u7ec6\u7c92\u5ea6\u63a7\u5236\u6d41\u4e4b\u540e\uff0c\u5f15\u5165\u4e86\u590d\u6742\u7684\u4f9d\u8d56\u3002 \u4ecd\u7136\u4ee5 \u56fe8 \u4e3a\u4f8b\uff0c\u5728\u7b2c4\u300113\u300116\u884c\u878d\u5408\u5faa\u73af\u53ef\u4ee5\u5e26\u6765\u66f4\u597d\u7684\u5c40\u90e8\u6027\u3002 \u878d\u5408\u7b2c 4 \u884c\u548c\u7b2c 13 \u884c\u7684\u5faa\u73af\u662f\u53ef\u80fd\u7684\uff0c\u4f46\u878d\u5408\u7b2c 13 \u884c\u548c\u7b2c 16 \u884c\u7684\u5faa\u73af\u662f\u4e0d\u6b63\u786e\u7684\uff0c\u56e0\u4e3a\u540e\u8005\u4f9d\u8d56\u524d\u8005\u4ea7\u751f\u7684 <code>dot_max</code> \u3002 \u878d\u5408\u7a0b\u5e8f\u5982 \u56fe10 \u6240\u793a\uff0c\u5176\u4e2d\u5c06\u504f\u79fb\u91cf \"+w\" \u5e94\u7528\u4e8e\u8fed\u4ee3\u5668 k\uff0c\u4ee5\u4f7f\u7d22\u5f15\u4fdd\u6301\u4e00\u81f4\u3002</p> <p>\u7531\u4e8e\u4f9d\u8d56\u5173\u7cfb\u51b3\u5b9a\u4e86\u8f6c\u6362\u662f\u5426\u6b63\u786e\uff0c\u56e0\u6b64 FreeTensor \u5728\u5e94\u7528\u8f6c\u6362\u4e4b\u524d\u6267\u884c\u4f9d\u8d56\u6027\u5206\u6790\u3002 \u4e0e\u57fa\u4e8e\u7b97\u5b50\u7684\u6846\u67b6\u4e0d\u540c\uff0c\u6211\u4eec\u9700\u8981\u4ee5 instance-of-statement-wise \u7cbe\u5ea6\u800c\u4e0d\u662fstatement-wise \u7cbe\u5ea6\u6765\u5206\u6790\u7a0b\u5e8f\uff0c\u5176\u4e2d instance-of-statement \u662f\u6307\u7279\u5b9a\u5faa\u73af\u8fed\u4ee3\u4e2d\u7684\u8bed\u53e5\u3002 \u8fd9\u610f\u5473\u7740\u4f20\u7edf\u7684\u6570\u636e\u6d41\u56fe\u7ea7\u5206\u6790\u5bf9\u4e8e FreeTensor \u6765\u8bf4\u662f\u4e0d\u591f\u7684\u3002</p> <p>\u5173\u4e8e\u5982\u4f55\u4ee5 instance-of-statement \u7684\u7cbe\u5ea6\u5206\u6790\u4f9d\u8d56\u5173\u7cfb\u4ee5\u53ca\u5982\u4f55\u5728\u7ed9\u5b9a\u4f9d\u8d56\u5173\u7cfb\u7684\u60c5\u51b5\u4e0b\u6307\u5bfc\u7a0b\u5e8f\u8f6c\u6362\uff0c\u5df2\u7ecf\u6709\u5f88\u591a\u7814\u7a76\u3002 [28] \u548c [4] \u4e2d\u603b\u7ed3\u4e86\u65e9\u671f\u7814\u7a76\u3002 \u540e\u6765\u5f15\u5165\u4e86\u591a\u9762\u4f53\u5206\u6790\u7684\u6570\u5b66\u7406\u8bba\u7cfb\u7edf\u5730\u5206\u6790\u76f8\u5173\u6027\uff0c\u5e76\u8bbe\u8ba1\u4e86\u591a\u4e2a\u591a\u9762\u4f53\u5206\u6790\u6c42\u89e3\u5668\u6765\u5b9e\u73b0\u5206\u6790\u7684\u81ea\u52a8\u5316\u3002 \u7ed9\u5b9a\u5b9a\u4e49\u4e3a Presburger \u516c\u5f0f\u7684\u5185\u5b58\u8bbf\u95ee\uff0c\u53ef\u4ee5\u901a\u8fc7\u6c42\u89e3\u5b83\u4eec\u7684\u65b9\u7a0b\u548c\u4e0d\u7b49\u5f0f\u6765\u5bfc\u51fa\u4f9d\u8d56\u5173\u7cfb [40]\u3002 \u591a\u9762\u4f53\u5206\u6790\u7406\u8bba\u548c\u6c42\u89e3\u5668\u7684\u8457\u4f5c\u5305\u62ec Omega [30]\u3001PolyLib [23]\u3001PPL [6] \u548c isl [39]\u3002</p> <p>\u5728 FreeTensor \u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 isl \u8fdb\u884c\u4f9d\u8d56\u5206\u6790\uff0c\u5e76\u5728\u6211\u4eec\u7684 IR \u4e2d\u5b9e\u73b0 [28] \u548c [4] \u4e2d\u8ba8\u8bba\u7684\u4f9d\u8d56\u611f\u77e5\u7a0b\u5e8f\u8f6c\u6362\u7684\u60f3\u6cd5\u3002 \u5728\u672c\u8282\u7684\u5176\u4f59\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u8bf4\u660e FreeTensor \u5982\u4f55\u91c7\u7528\u8fd9\u4e9b\u6280\u672f\u6765\u6267\u884c\u4f9d\u8d56\u611f\u77e5\u8f6c\u6362\uff0c\u5305\u62ec\u5faa\u73af\u8f6c\u6362\u3001\u5e76\u884c\u5316\u8f6c\u6362\u548c\u5185\u5b58\u8f6c\u6362\u3002</p>"},{"location":"mlc/paper-freetensor.html#421","title":"4.2.1. \u5faa\u73af\u53d8\u6362","text":"<p>\u4ee5 \u56fe11 \u4e2d\u7684\u7a0b\u5e8f\u4e3a\u4f8b\u3002 (2) \u548c (1) \u4e4b\u95f4\u5b58\u5728\u5148\u5199\u540e\u8bfb (RAW) \u4f9d\u8d56\u5173\u7cfb\uff0c(3) \u548c (1) \u4e4b\u95f4\u5b58\u5728 RAW \u4f9d\u8d56\u5173\u7cfb\u3002 \u5728\u8f6c\u6362\u5faa\u73af\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4fdd\u6301\u4e24\u8005\u7684\u4f9d\u8d56\u6027\u3002 \u5728\u591a\u9762\u4f53\u5206\u6790\u4e2d\uff0c\u6bcf\u4e2a\u5185\u5b58\u8bbf\u95ee (1)\u3001(2) \u6216 (3) \u90fd\u5b9a\u4e49\u4e3a\u81ea\u8fed\u4ee3\u7a7a\u95f4\\(\\mathbb{Z}^{(N\u22122)\\times (M\u22122)}\\) \u5230\u6570\u7ec4\u7d22\u5f15\u7a7a\u95f4\\(Z^{N\\times M}\\) \u7684\u6620\u5c04\uff0c\u63cf\u8ff0\u54ea\u4e2a\u5728\u8fed\u4ee3\u4e2d\u8bbf\u95ee\u6570\u7ec4\u54ea\u4e2a\u7d22\u5f15\uff1a</p> <p>\\(M_{(1)} = \\{(i,j)\\rightarrow (i+1,j): 1\\leq i &lt; N-1, 1\\leq j &lt; M-1\\}\\) \\(M_{(2)} = \\{(i,j)\\rightarrow (i-1,j+1): 1\\leq i &lt; N-1, 1\\leq j &lt; M-1\\}\\) \\(M_{(3)} = \\{(i,j)\\rightarrow (i-1,j-1): 1\\leq i &lt; N-1, 1\\leq j &lt; M-1\\}\\)</p> <p>\u901a\u8fc7\u4f7f\u7528 <code>isl</code> \u7ec4\u5408\u8fd9\u4e9b\u6620\u5c04\uff0c\u6211\u4eec\u63a8\u65ad(2) \u548c (1) \u4e4b\u95f4\u7684\u539f\u59cb\u4f9d\u8d56\u5173\u7cfb\u4e3a\uff1a</p> \\[ \\begin{align*} M_{(2)\\rightarrow (1)} &amp;=\\{\\mathbf{p}\\rightarrow \\mathbf{q}: \\exists \\mathbf{r}: (\\mathbf{p}\\rightarrow \\mathbf{r})\\in M_{(1)} \\wedge (\\mathbf{q}\\rightarrow \\mathbf{r}\\in M_{(2)}\\wedge \\mathbf{p}&gt;_{lex} \\mathbf{q}) \\}\\\\ &amp;=\\{(i,j)\\rightarrow (i-2,j+1): 1\\leq i &lt; N-1, 1\\leq j &lt; M-1\\} \\end{align*} \\] <p>\u5176\u4e2d &gt;\ud835\udc59\ud835\udc52\ud835\udc65 \u8868\u793a\u5b57\u5178\u5e8f\u66f4\u5927\uff0c\u2227 \u8868\u793a\u903b\u8f91\u4e0e\u3002</p> <p>\u4ece \\(M_{(2)\\rightarrow (1)}\\) \uff0c\u6211\u4eec\u77e5\u9053 (1) \u5728 i \u4e2d\u5e94\u8be5\u6bd4 (2) \u665a 2 \u6b21\u8fed\u4ee3\uff0c\u5728 j \u4e2d\u5e94\u8be5\u65e9 1 \u6b21\u8fed\u4ee3\u3002 \u6211\u4eec\u5728\u8f6c\u6362\u5faa\u73af\u65f6\u4fdd\u7559\u6b64\u9650\u5236\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u4e0d\u80fd\u5bf9\u8fd9\u4e24\u4e2a\u5faa\u73af\u91cd\u65b0\u6392\u5e8f\uff0c\u5426\u5219\u8be5\u8bed\u53e5\u5c06\u8bbf\u95ee\u4e00\u4e2a\u5c1a\u672a\u8ba1\u7b97\u7684\u5143\u7d20\u3002 (3) \u548c (1) \u4e4b\u95f4\u4f9d\u8d56\u5173\u7cfb\u7684\u9650\u5236\u662f\u76f8\u4f3c\u7684\u3002</p> <p>\u4e3a\u4e86\u66f4\u5177\u4f53\u5730\u89e3\u91ca\u4f9d\u8d56\u6027\u5982\u4f55\u9650\u5236\u5faa\u73af\u8f6c\u6362\uff0c\u6211\u4eec\u4ee5 \u56fe12 \u4e2d\u7684\u793a\u4f8b\u4e3a\u4f8b\uff0c\u8ba8\u8bba\u662f\u5426\u53ef\u4ee5\u5728\u5d4c\u5957\u5faa\u73af\u4e0a\u5e94\u7528\u91cd\u65b0\u6392\u5e8f\u8f6c\u6362\u3002</p> <ul> <li>\u5bf9\u56fe 12(a) \u4e2d\u7684\u7a0b\u5e8f\u5e94\u7528\u91cd\u65b0\u6392\u5e8f\u662f\u6b63\u786e\u7684\uff0c\u56e0\u4e3a\u6cbf\u7740\u6bcf\u4e2a\u5faa\u73af\u7684\u53cd\u5411\u65b9\u5411\u6ca1\u6709\u4f9d\u8d56\u6027\u3002</li> <li>\u5bf9\u56fe 12(b) \u4e2d\u7684\u7a0b\u5e8f\u5e94\u7528\u91cd\u65b0\u6392\u5e8f\u662f\u4e0d\u6b63\u786e\u7684\uff0c\u56e0\u4e3a\u5b58\u5728\u4f9d\u8d56\u5173\u7cfb \\((\ud835\udc56, \ud835\udc40 \u2212 1) \u2192 (\ud835\udc56 + 1, 0)\\)</li> <li>\u5bf9\u56fe 12(c) \u4e2d\u7684\u7a0b\u5e8f\u5e94\u7528\u91cd\u65b0\u6392\u5e8f\u662f\u6b63\u786e\u7684\uff0c\u56e0\u4e3a\u52a0\u6cd5\u4ea4\u6362\u5f8b\u5141\u8bb8\u6211\u4eec\u4ee5\u4efb\u4f55\u987a\u5e8f\u5c06 <code>b[i,j]</code> \u8fd8\u539f\u4e3a a\u3002 FreeTensor \u5f15\u5165\u4e86\u4e00\u4e2a <code>ReduceTo</code> \u8282\u70b9\u6765\u5904\u7406\u4efb\u4f55\u7c7b\u4f3c <code>a=a+b</code> \u7684\u8bed\u53e5\uff0c<code>ReduceTo</code> \u8282\u70b9\u4e4b\u95f4\u7684\u4efb\u4f55 <code>WAW</code> \u4f9d\u8d56\u90fd\u53ef\u4ee5\u5ffd\u7565\u3002</li> <li>\u5bf9\u56fe 12(d) \u4e2d\u7684\u7a0b\u5e8f\u5e94\u7528\u91cd\u65b0\u6392\u5e8f\u662f\u6b63\u786e\u7684\uff0c\u56e0\u4e3a\u5177\u6709 WAW \u76f8\u5173\u6027\u7684 t \u662f\u9519\u8bef\u7684\u76f8\u5173\u6027\u3002 FreeTensor \u7684\u6808\u8303\u56f4 AST \u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8fc7\u6ee4\u6389\u9519\u8bef\u7684\u4f9d\u8d56\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5f20\u91cf t \u5b58\u5728 WAW \u76f8\u5173\u6027 (\ud835\udc561, \ud835\udc571, \ud835\udc581) \u2192 (\ud835\udc562, \ud835\udc572, \ud835\udc582)\u3002 \u7531\u4e8e t \u7684\u751f\u547d\u5468\u671f\u5728\u5faa\u73af j \u5185\uff0cFreeTensor \u5bf9 t \u7684\u4f9d\u8d56\u6267\u884c\u6295\u5f71 {(\ud835\udc56, \ud835\udc57, \ud835\udc58) \u2192 (\ud835\udc58) : \ud835\udc56, \ud835\udc57, \ud835\udc58 \u2208 Z}\uff0c\u5bfc\u81f4\u4f9d\u8d56 (\ud835\udc581) \u2192 (\ud835\udc582) . \u56e0\u6b64\uff0cFreeTensor \u53ef\u4ee5\u5bf9\u5faa\u73af i \u548c j \u5e94\u7528\u91cd\u65b0\u6392\u5e8f\u53d8\u6362\u3002</li> </ul>"},{"location":"mlc/paper-freetensor.html#422","title":"4.2.2. \u5e76\u884c\u5316\u8f6c\u6362","text":"<p>\u5e76\u884c\u5316\u8f6c\u6362\u5bf9\u4e8e\u9ad8\u6027\u80fd\u4ee3\u7801\u751f\u6210\u81f3\u5173\u91cd\u8981\u3002 \u5e76\u884c\u5316\u8f6c\u6362\u7684\u6311\u6218\u4e0d\u4ec5\u6765\u81ea\u7ec6\u7c92\u5ea6\u63a7\u5236\u6d41\u5f15\u5165\u7684\u590d\u6742\u4f9d\u8d56\u6027\uff0c\u8fd8\u6765\u81ea\u4e0d\u540c\u786c\u4ef6\u67b6\u6784\u4e0a\u7684\u5404\u79cd\u5e76\u884c\u6a21\u578b\u3002 \u6211\u4eec\u4ee5\u56fe 13 \u4e2d\u7684\u793a\u4f8b\u6765\u8bf4\u660e FreeTensor \u5982\u4f55\u5e94\u7528\u5e76\u884c\u5316\u8f6c\u6362\u3002</p> <ul> <li>\u56fe 13(a) \u663e\u793a\u4e86\u4e00\u4e2a\u6ca1\u6709\u4f9d\u8d56\u6027\u7684\u53ef\u5e76\u884c\u5316\u7a0b\u5e8f\u3002</li> <li>\u56fe 13(b) \u663e\u793a\u4e86\u4e00\u4e2a\u5177\u6709\u8de8\u7ebf\u7a0b\u4f9d\u8d56\u6027\u7684\u4e0d\u53ef\u5e76\u884c\u5316\u793a\u4f8b\u3002</li> <li>\u5728\u56fe13(c)\u4e2d\uff0c\u662f\u5426\u53ef\u4ee5\u5e94\u7528\u5e76\u884c\u5316\u8f6c\u6362\u4e0e\u5177\u4f53\u7684\u5e76\u884c\u6a21\u578b\u548c\u5185\u5b58\u5c42\u6b21\u6709\u5173\u3002 \u4f8b\u5982\uff0c\u5982\u679c b \u662f\u7ebf\u7a0b\u672c\u5730\u7684\uff0c\u5219\u5faa\u73af i \u65e0\u6cd5\u5e76\u884c\u5316\uff0c\u56e0\u4e3a b \u4ec5\u5728\u5176\u4e2d\u4e00\u4e2a\u7ebf\u7a0b\u4e0a\u53ef\u89c1\uff1b \u4f46\u662f\u5982\u679c b \u5b58\u50a8\u5728\u5171\u4eab\u5185\u5b58\u4e2d\uff0c\u5219\u53ef\u4ee5\u5e76\u884c\u5316\u6b64\u5faa\u73af\uff0c\u56e0\u4e3a b \u5728\u6240\u6709\u7ebf\u7a0b\u4e0a\u90fd\u662f\u53ef\u89c1\u7684\u3002</li> <li>\u56fe 13(d) \u663e\u793a\u4e86\u4e00\u4e2a reduce \u4ee5\u53ca\u76f8\u540c\u7684\u7d22\u5f15\uff0c\u53ef\u4ee5\u4f7f\u7528\u5e76\u884c reduce \u7b97\u6cd5\u3002</li> <li>\u56fe 13(e) \u663e\u793a\u4e86\u968f\u673a\u8bbf\u95ee reduce \uff0c\u5b83\u53ef\u4ee5\u4f7f\u7528\u539f\u5b50\u6307\u4ee4\u5e76\u884c\u5316\u3002</li> </ul>"},{"location":"mlc/paper-freetensor.html#423","title":"4.2.3. \u5185\u5b58\u8f6c\u6362","text":"<p>\u9700\u8981\u5e94\u7528\u4e24\u79cd\u7c7b\u578b\u7684\u5185\u5b58\u8f6c\u6362\uff1a\u5185\u5b58\u5e03\u5c40\u4f18\u5316\u548c\u5185\u5b58\u5c42\u6b21\u7ed3\u6784\u4f18\u5316\u3002 \u5185\u5b58\u5e03\u5c40\u8f6c\u6362\u901a\u8fc7\u91cd\u65b0\u6392\u5e8f\u5f20\u91cf\u4e2d\u7684\u5143\u7d20\u6765\u5e2e\u52a9\u6539\u5584\u6570\u636e\u8bbf\u95ee\u4e2d\u7684\u7a7a\u95f4\u5c40\u90e8\u6027\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 (\ud835\udc41 \u00d7 \ud835\udc40) \u5f62\u5f20\u91cf\u8f6c\u7f6e\u4e3a (\ud835\udc40 \u00d7 \ud835\udc41 ) \u5f62\uff0c\u8fd9\u6837 \ud835\udc41 \u7ef4\u5c31\u53ef\u4ee5\u8fde\u7eed\u8fed\u4ee3\u3002</p> <p>\u4e0d\u540c\u4e8e TVM \u4e2d\u901a\u8fc7\u6539\u53d8 \u7b97\u5b50 \u7684\u7ec4\u5408\u6765\u6267\u884c\u5185\u5b58\u5e03\u5c40\u4f18\u5316\u7684\u8bbe\u8ba1\uff0c\u6211\u4eec\u5c06\u8fd9\u4e9b\u4f18\u5316\u5b9e\u73b0\u4e3a\u7ec6\u7c92\u5ea6\u7684 AST \u8f6c\u6362\uff0c\u8fd9\u63d0\u4f9b\u4e86\u66f4\u591a\u4e0e\u5176\u4ed6\u8f6c\u6362\u4e00\u8d77\u6267\u884c\u6574\u4f53\u4f18\u5316\u7684\u673a\u4f1a\u3002 \u5185\u5b58\u5c42\u6b21\u7ed3\u6784\u8f6c\u6362\u6709\u52a9\u4e8e\u5728\u5904\u7406\u5668\u4e0a\u4f7f\u7528\u9ad8\u901f\u7f13\u5b58\u548c\u6682\u5b58\u5668\u5185\u5b58\u3002</p> <p>\u7591\u95ee</p> <p>\u8fd9\u91cc\u9700\u8981\u53bb\u4e86\u89e3 TVM \u4e2d \u7684\u5185\u5b58\u5e03\u5c40\u4f18\u5316\u5177\u4f53\u600e\u4e48\u505a\u7684\uff0c\u627e\u4e00\u4e2a\u4f8b\u5b50\uff1f</p> <p><code>cache</code> \u548c <code>cache_reduce</code> transformations \u5c06\u65b0\u5f20\u91cf\u5f15\u5165 AST\uff0c\u6211\u4eec\u5fc5\u987b\u63a8\u65ad\u5b83\u4eec\u7684\u5927\u5c0f\u3002 \u5bf9\u4e8e \u56fe14(b) \u4e2d\u7684\u7a0b\u5e8f\uff0c\u95ee\u9898\u662f\u5982\u4f55\u63a8\u65ad\u65b0\u5f15\u5165\u7684\u5f20\u91cf <code>a.cache</code> \u7684\u5f62\u72b6\u4e3a M \u5e76\u4e14 c[j] \u6620\u5c04\u5230 a[i+j]\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5206\u6790\u4e86\u5f20\u91cf\u7684\u6bcf\u4e2a\u7d22\u5f15\u7684\u4e0b\u754c\u548c\u4e0a\u754c\uff0c\u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\u662fi+j\u3002 0\u3001i\u3001i+j\u90fd\u662fi+j\u7684\u4e0b\u754c\uff0cn+m-2\u3001i+m-1\u3001i+j\u90fd\u662f\u5b83\u7684\u4e0a\u754c\u3002 \u6211\u4eec\u9075\u5b88\u6240\u6709\u8fd9\u4e9b\u754c\u9650\u3002 \u7531\u4e8e\u6211\u4eec\u5728\u5916\u5faa\u73af\u548c\u5185\u5faa\u73af\u4e4b\u95f4\u8fdb\u884c cache \uff0c \u5176\u4e2d\u8fed\u4ee3\u5668 i \u5df2\u5b9a\u4e49\u4f46 j \u672a\u5b9a\u4e49\uff0c\u56e0\u6b64\u6211\u4eec\u5bfb\u627e\u6700\u7d27\u7684\u8fb9\u754c\uff0c\u5373 <code>[i, i+m-1]</code>\uff0c\u6216 <code>[i, i+m)</code>. \u56e0\u6b64\uff0c\u6211\u4eec\u77e5\u9053\u6211\u4eec\u6b63\u5728\u5c06 <code>a[i:i+m]</code> \u7f13\u5b58\u5230 m \u5f62\u5f20\u91cf <code>a.cache</code> \u4e2d\u3002</p>"},{"location":"mlc/paper-freetensor.html#43-code-generation","title":"4.3. Code Generation","text":"<p>\u6211\u4eec\u63d0\u4f9b\u7684\u6240\u6709\u8f6c\u6362\u90fd\u66b4\u9732\u7ed9\u7528\u6237\u3002 \u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a API \u6765\u67e5\u8be2\u7a0b\u5e8f\u4e2d\u7684\u8bed\u53e5\u4ee5\u5e94\u7528\u8f6c\u6362\u3002 \u6211\u4eec\u8fd8\u8ba4\u8bc6\u5230\uff0c\u4f7f\u7528\u8fd9\u4e9b\u8f6c\u6362\u4f18\u5316\u7a0b\u5e8f\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u4e13\u4e1a\u77e5\u8bc6\uff0c\u5e76\u4e14\u5927\u591a\u6570\u7528\u6237\u53ef\u80fd\u671f\u671b\u81ea\u52a8\u7b56\u7565\u6765\u5e94\u7528\u8fd9\u4e9b\u8f6c\u6362\u3002 FreeTensor \u5b9e\u73b0\u4e86\u57fa\u4e8e\u89c4\u5219\u7684\u81ea\u52a8\u8f6c\u6362\u7b56\u7565\u7684\u539f\u578b\u6765\u5e94\u5bf9\u6b64\u7c7b\u6311\u6218\u3002 \u6211\u4eec\u76ee\u524d\u5b9e\u65bd 6 \u79cd pass \u4ee5\u5c1d\u8bd5\u5e94\u7528\u8f6c\u6362\u3002 \u8fd9\u4e9b pass \u7531\u8003\u8651\u7279\u5b9a\u67b6\u6784\u7684\u542f\u53d1\u5f0f\u65b9\u6cd5\u9a71\u52a8\uff0c\u5e76\u9010\u4e00\u8c03\u7528\u3002 \u591a\u4e8f\u4e86 4.2 \u8282\u4e2d\u7684\u4f9d\u8d56\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u79ef\u6781\u5730\u5c1d\u8bd5\u8f6c\u6362\u800c\u4e0d\u7528\u62c5\u5fc3\u5b83\u4eec\u7684\u6b63\u786e\u6027\u3002  passes \u5305\u62ec\uff1a</p> <ol> <li><code>auto_fuse</code> \uff1a\u5c1d\u8bd5\u4f7f\u7528\u878d\u5408\u9644\u8fd1\u7684\u5faa\u73af\u4ee5\u589e\u52a0\u5c40\u90e8\u6027\u3002 \u53ef\u80fd\u9700\u8981\u542f\u7528 swap \u7b49\u8f6c\u6362\u6765\u542f\u7528 fuse\u3002</li> <li><code>auto_vectorize</code> \uff1a\u627e\u5230\u4e00\u4e9b\u8fde\u7eed\u8bbf\u95ee\u6570\u636e\u7684\u5faa\u73af\uff0c\u4f7f\u7528\u5faa\u73af\u8f6c\u6362\u5c06\u5b83\u4eec\u91cd\u65b0\u6392\u5e8f\u4e3a\u6700\u5185\u5c42\u5faa\u73af\uff0c\u7136\u540e\u5411\u91cf\u5316\u6216\u5e76\u884c\u5316\u8be5\u5faa\u73af\u3002</li> <li><code>auto_parallelize</code> \uff1a\u7528 merge \u8f6c\u6362\u5408\u5e76\u4e00\u4e9b\u5916\u5c42\u5faa\u73af\uff0c\u7136\u540e\u7528 parallelize \u8f6c\u6362\u7ed1\u5b9a\u5230\u7ebf\u7a0b\u4e0a\u3002 \u5bf9\u4e8e\u50cf GPU \u8fd9\u6837\u5177\u6709\u591a\u7ea7\u5e76\u884c\u6027\u7684\u540e\u7aef\uff0c\u6211\u4eec\u5728\u7ed1\u5b9a\u5b83\u4eec\u4e4b\u524d\u4f7f\u7528 split \u62c6\u5206\u5faa\u73af\u3002</li> <li><code>auto_mem_type</code> \uff1a\u5c1d\u8bd5\u5c06\u5f20\u91cf\u653e\u7f6e\u5728\u5c3d\u53ef\u80fd\u9760\u8fd1\u5904\u7406\u5668\u7684\u4f4d\u7f6e\u3002 \u5bc4\u5b58\u5668\u4f18\u4e8e scratch-pad memory\uff0c\u540e\u8005\u53c8\u4f18\u4e8e main memory\u3002</li> <li><code>auto_use_lib</code> \uff1a\u5c1d\u8bd5 \u8c03\u7528\u5916\u90e8\u5e93\u3002 \u53ef\u80fd\u9700\u8981\u542f\u7528 fission \u7b49\u8f6c\u6362\u6765\u542f\u7528 \u8be5 pass\u3002</li> <li><code>auto_unroll</code> \uff1a\u5c55\u5f00\u975e\u5e38\u77ed\u7684\u5faa\u73af\uff0c\u4e3a\u540e\u7aef\u7f16\u8bd1\u5668\u91ca\u653e\u4f18\u5316\u673a\u4f1a\u3002</li> </ol> <p>\u5bf9\u4e8e\u4efb\u4f55\u7528\u6237\u7a0b\u5e8f\uff0c\u8fd9\u4e9b\u8fc7\u7a0b\u4f1a\u81ea\u52a8\u8c03\u7528\uff0c\u4f46\u7528\u6237\u53ef\u4ee5\u81ea\u7531\u8986\u76d6\u5b83\u4eec\u5e76\u624b\u52a8\u5e94\u7528\u5176\u4ed6\u8f6c\u6362\u3002 \u9664\u4e86\u8fd9\u4e9b\u57fa\u672c\u7b56\u7565\u4e4b\u5916\uff0c\u6211\u4eec\u6b63\u5728\u7814\u7a76\u7c7b\u4f3c\u4e8e Ansor [44] \u7684\u673a\u5668\u5b66\u4e60\u5f15\u5bfc\u89e3\u51b3\u65b9\u6848\uff0c\u8fd9\u5c06\u662f\u6211\u4eec\u672a\u6765\u7684\u5de5\u4f5c\u3002</p> <p>\u6211\u4eec\u5728\u8f6c\u6362\u540e\u5bf9 AST \u8fdb\u884c\u8fdb\u4e00\u6b65\u4f18\u5316\uff0c\u5305\u62ec\u7b80\u5316\u6570\u5b66\u8868\u8fbe\u5f0f\u3001\u5408\u5e76\u6216\u5220\u9664\u5197\u4f59\u5185\u5b58\u8bbf\u95ee\u4ee5\u53ca\u5220\u9664\u5197\u4f59\u5206\u652f\u3002 \u6211\u4eec\u8fd8\u6267\u884c\u4e00\u4e9b\u7279\u5b9a\u4e8e\u540e\u7aef\u7684\u540e\u5904\u7406\uff0c\u5305\u62ec\u63d2\u5165\u7ebf\u7a0b\u540c\u6b65\u8bed\u53e5\u3001\u751f\u6210\u5e76\u884c\u7f29\u51cf\u8bed\u53e5\u4ee5\u53ca\u8ba1\u7b97\u6682\u5b58\u5668\u4e2d\u5f20\u91cf\u7684\u504f\u79fb\u91cf\u3002</p> <p>\u4e4b\u540e\uff0c\u6211\u4eec\u4ece AST \u751f\u6210 OpenMP \u6216 CUDA \u4ee3\u7801\uff0c\u5e76\u8c03\u7528\u4e13\u7528\u540e\u7aef\u7f16\u8bd1\u5668\uff08\u5982 gcc \u6216 nvcc\uff09\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u4f4e\u7ea7\u4f18\u5316\u548c\u672c\u673a\u4ee3\u7801\u751f\u6210\u3002 \u4e00\u4e2aDSL\u51fd\u6570\u6700\u7ec8\u88ab\u7f16\u8bd1\u4e3a\u5171\u4eab\u5e93\uff0c\u53ef\u4ee5\u4ecePython\u4e2d\u52a8\u6001\u52a0\u8f7d\u8fd0\u884c\u3002</p>"},{"location":"mlc/paper-freetensor.html#5-automatic-differentiation","title":"5. Automatic Differentiation","text":"<p>note</p> <p>\u6682\u65f6\u8df3\u8fc7\u8fd9\u4e00\u8282</p>"},{"location":"mlc/paper-freetensor.html#51-fine-grained-automatic-differentiation","title":"5.1. Fine-Grained Automatic Differentiation","text":"<p>\u5f20\u91cf\u5e94\u7528\u9700\u8981\u81ea\u52a8\u5fae\u5206 (AD)\u3002 AD \u5e2e\u52a9\u7528\u6237\u4ece\u539f\u59cb\u7a0b\u5e8f\u751f\u6210\u68af\u5ea6\u7a0b\u5e8f\uff0c\u5176\u4e2d\u68af\u5ea6\u7a0b\u5e8f\u7528\u4e8e\u8ba1\u7b97\u6bcf\u4e2a\u8f93\u5165\u76f8\u5bf9\u4e8e\u7a0b\u5e8f\u8f93\u51fa\u7684\u68af\u5ea6\u3002 \u68af\u5ea6\u7a0b\u5e8f\u7531\u6b63\u5411\u4f20\u64ad\u548c\u53cd\u5411\u4f20\u64ad\u7ec4\u6210\u3002 \u6b63\u5411\u4f20\u9012\u8ba1\u7b97\u8f93\u51fa\uff0c\u540c\u65f6\u5728\u6267\u884c\u671f\u95f4\u4fdd\u7559\u4e00\u4e9b\u4e2d\u95f4\u5f20\u91cf\u3002 \u5411\u540e\u4f20\u9012\u8ba1\u7b97\u68af\u5ea6\u5e76\u91cd\u7528\u524d\u5411\u4f20\u9012\u4fdd\u7559\u7684\u4e2d\u95f4\u5f20\u91cf\u3002</p> <p>\u53d7 Enzyme [27] \u548c Zygote [20] \u7684\u542f\u53d1\uff0c\u6211\u4eec\u8bbe\u8ba1\u4e86\u4e00\u79cd\u901a\u7528 AD\uff0c\u80fd\u591f\u533a\u5206 FreeTensor \u5f15\u5165\u7684\u7ec6\u7c92\u5ea6\u63a7\u5236\u6d41\u3002 \u56fe 15(b) \u7ed9\u51fa\u4e86\u4ece\u56fe 15(a) \u4e2d\u7684\u539f\u59cb\u7a0b\u5e8f\u751f\u6210\u7684\u53cd\u5411\u4f20\u64ad\u793a\u4f8b\u3002 \u6211\u4eec\u8bb0\u4f4f\uff0c\u5fae\u5206\u7a0b\u5e8f\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7 FreeTensor \u8fdb\u884c\u4f18\u5316\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5c06 AD \u8bbe\u8ba1\u4e3a AST \u7684 pass \u3002 \u751f\u6210\u7684\u7a0b\u5e8f\u4e5f\u662f\u4e00\u4e2a AST\uff0c\u4eab\u6709\u4e0e\u539f\u59cb\u7a0b\u5e8f\u76f8\u540c\u7684\u4f18\u5316\u673a\u4f1a\u3002</p> <p>\u963b\u788d\u4f18\u5316\u5fae\u5206\u7a0b\u5e8f\u7684\u95ee\u9898\u4e4b\u4e00\u5728\u4e8e\u4e2d\u95f4\u5f20\u91cf\u3002 \u5728 AD \u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u4e9b\u4e2d\u95f4\u5f20\u91cf\u5e94\u8be5\u5728\u524d\u5411\u4f20\u9012\u4e2d\u5177\u4f53\u5316\uff0c\u7136\u540e\u5728\u53cd\u5411\u4f20\u9012\u4e2d\u53d6\u56de\u3002</p> <p>\u5728\u67d0\u4e9b\u6587\u732e\u4e2d\uff0c\u6b64\u8fc7\u7a0b\u4e5f\u79f0\u4e3a\u68c0\u67e5\u70b9\u6216\u5c06 tensor \u4fdd\u5b58\u5230 tape \u4e2d\u3002 \u4f46\u662f\uff0c\u4e00\u4e2a\u4e2d\u95f4\u5f20\u91cf\u5728\u7a0b\u5e8f\u4e2d\u53ef\u80fd\u4f1a\u88ab\u591a\u6b21\u5199\u5165\uff0c\u56e0\u6b64\u5fc5\u987b\u5c06\u5176\u5177\u4f53\u5316\u4e3a\u591a\u4e2a\u7248\u672c\u3002 \u4f8b\u5982\uff0c\u56fe 15(a) \u4e2d\u7684\u6807\u91cf t\uff08\u88ab\u89c6\u4e3a 0-D \u5f20\u91cf\uff09\u5c06\u5728\u5176\u7b2c i \u4e2a\u5206\u914d\u540e\u5728\u7248\u672c i \u4e2d\u88ab\u5177\u4f53\u5316\u3002 \u4e00\u4e9b\u73b0\u6709\u7684\u4f5c\u54c1\u5982 Tangent [36] \u548c Zygote [20] \u5728\u8fd0\u884c\u65f6\u7ef4\u62a4\u4e00\u4e2a\u7248\u672c\u53f7\uff0c\u8fd9\u963b\u788d\u4e86\u8fdb\u4e00\u6b65\u7684\u5e76\u884c\u5316\u3002 \u76f8\u53cd\uff0c\u6211\u4eec\u5206\u6790\u4e86 FreeTensor \u4e2d\u7684\u7b26\u53f7\u7248\u672c\u53f7\uff0c\u7c7b\u4f3c\u4e8e Enzyme [27]\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u5229\u7528\u591a\u9762\u4f53\u5206\u6790\uff0c\u6211\u4eec\u5bfb\u627e\u5bf9 t \u7684 WAR \u4f9d\u8d56\uff0c\u5176\u4e2d\u6bcf\u4e2a WAR \u4f9d\u8d56\u5bf9\u5e94\u4e00\u4e2a\u7248\u672c\u3002 \u56e0\u6b64\uff0c\u7248\u672c\u53f7\u5728\u7f16\u8bd1\u65f6\u4f5c\u4e3a\u7b26\u53f7\u8868\u8fbe\u5f0f\u5df2\u77e5\uff0c\u8fd9\u6709\u52a9\u4e8e\u8fdb\u4e00\u6b65\u5e76\u884c\u5316\u3002</p>"},{"location":"mlc/paper-freetensor.html#52-selective-intermediate-tensor-materialization","title":"5.2. Selective Intermediate Tensor Materialization","text":"<p>\u5728\u56fe 15 \u4e2d\uff0c <code>t</code> \u5b58\u50a8\u5728\u539f\u59cb\u7a0b\u5e8f\u4e2d\uff0c\u76f4\u5230\u4e0e <code>t.tape</code> \u4e00\u8d77\u91cd\u590d\u4f7f\u7528\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c <code>t</code> \u662f\u4e00\u4e2a\u6807\u91cf\uff0c\u53ef\u80fd\u5b58\u50a8\u5728\u7f13\u5b58\u751a\u81f3\u5bc4\u5b58\u5668\u4e2d\u3002 \u7136\u800c\uff0c\u968f\u7740\u6bcf\u6b21\u8fed\u4ee3 i \u66f4\u65b0 t\uff0c\u524d\u5411\u4f20\u9012\u5c06\u5177\u4f53\u5316\u5176\u6240\u6709\u7248\u672c\u4ee5\u4f9b\u5c06\u6765\u4f7f\u7528\u3002 \u56e0\u6b64\uff0ct \u7684\u5177\u4f53\u5316\u5f20\u91cf\uff0c\u5373 <code>t.tape</code>\uff0c\u5177\u6709\u8f83\u5927\u7684\u5f62\u72b6 n\uff0c\u8fd9\u5728\u5185\u5b58\u5360\u7528\u548c\u5185\u5b58\u4f7f\u7528\u65b9\u9762\u90fd\u4f1a\u4ea7\u751f\u5f88\u5927\u7684\u5f00\u9500\u3002</p> <p>\u76f8\u53cd\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8ba1\u7b97 t \u53ea\u9700\u8981\u5bf9 a[i] \u548c b[i] \u8fdb\u884c\u4e00\u6b21\u52a0\u6cd5\u548c\u4e24\u6b21\u8bbf\u95ee\uff0c\u5176\u4e2d a[i] \u548c b[i] \u88ab\u5f88\u597d\u5730\u7f13\u5b58\uff0c\u56e0\u4e3a\u5b83\u5728\u8ba1\u7b97 a \u65f6\u5171\u4eab\u3002 grad[i] \u548c b.grad[i]\u3002 \u53d7\u5148\u524d\u63d0\u51fa\u7684\u7528\u4e8e\u51cf\u5c11\u57fa\u4e8e\u7b97\u5b50\u7684\u6846\u67b6\u7684\u5185\u5b58\u4f7f\u7528\u7684\u91cd\u65b0\u8ba1\u7b97\u65b9\u6cd5\u7684\u542f\u53d1 [13]\uff0c\u6211\u4eec\u63d0\u51fa\u4e86\u4e00\u79cd\u7528\u4e8e\u4e2d\u95f4\u5f20\u91cf\u7269\u5316\u7684\u9009\u62e9\u6027\u7b56\u7565\u3002</p> <p>\u6211\u4eec\u65b9\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\u6211\u4eec\u5c06\u786e\u5b9a\u4e2d\u95f4\u5f20\u91cf\u662f\u5728\u7f16\u8bd1\u65f6\u5177\u4f53\u5316\u8fd8\u662f\u91cd\u65b0\u8ba1\u7b97\u3002 \u6211\u4eec\u5e73\u8861\u7269\u5316\u548c\u91cd\u65b0\u8ba1\u7b97\u4e4b\u95f4\u7684\u5f00\u9500\uff0c\u5e76\u9009\u62e9\u5408\u9002\u7684\u7b56\u7565\u3002 \u5bf9\u4e8e\u56fe15\u6240\u793a\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u5bf9\u5176\u975e\u5bc6\u96c6\u8ba1\u7b97\u91c7\u7528\u91cd\u8ba1\u7b97\u7b56\u7565\u3002 \u751f\u6210\u7684\u7a0b\u5e8f\u5982\u56fe 15(c) \u6240\u793a\u3002 \u5c06\u5f20\u91cf\u5177\u4f53\u5316\u7684\u5f00\u9500\u53d6\u51b3\u4e8e\u5f20\u91cf\u6709\u591a\u5c11\u4e2a\u7248\u672c\u3002 \u56fe 15 \u4e2d\u7684 t \u66f4\u65b0\u4e86 n \u6b21\uff0c\u56e0\u6b64\u5b83\u5fc5\u987b\u5728 n \u4e2a\u7248\u672c\u4e2d\u5177\u4f53\u5316\uff0c\u7531\u4e8e\u6211\u4eec\u7684\u7b26\u53f7\u7248\u672c\u53f7\u5206\u6790\uff0c\u7248\u672c\u53f7\u5728\u7f16\u8bd1\u65f6\u662f\u5df2\u77e5\u7684\u3002</p>"},{"location":"mlc/paper-freetensor.html#6-evaluation","title":"6. Evaluation","text":"<p>...</p>"},{"location":"mlc/paper-freetensor.html#7-related-works","title":"7. Related Works","text":"<p>\u57fa\u4e8e\u7b97\u5b50\u7684\u6846\u67b6\u3002 \u6709\u591a\u4e2a\u57fa\u4e8e\u7b97\u5b50\u7684\u6846\u67b6\uff0c\u5305\u62ec Chainer [34]\u3001PyTorch [29]\u3001MXNet [11]\u3001TensorFlow [3]\u3001JAX [17] \u548c TVM [12]\u3002 Chainer \u548c PyTorch \u4f5c\u4e3a\u9ad8\u6027\u80fd\u5f20\u91cf\u7b97\u5b50\u5e93\u8fd0\u884c\uff0c\u53ef\u4ee5\u4ece Python \u547d\u4ee4\u5f0f\u8c03\u7528\u3002 MXNet \u548c TensorFlow \u5c06\u7a0b\u5e8f\u8f6c\u6362\u4e3a\u6570\u636e\u6d41\u56fe\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u4ee3\u8868\u5bf9\u5e93\u4e2d\u5f20\u91cf\u7b97\u5b50\u7684\u8c03\u7528\u3002 \u53ef\u4ee5\u5728\u6267\u884c\u524d\u5bf9\u56fe\u8fdb\u884c\u4f18\u5316\u3002 JAX \u901a\u8fc7\u5f15\u5165 JIT \u6765\u4f18\u5316\u590d\u6742\u6216\u52a8\u6001\u7a0b\u5e8f\uff0c\u4ece\u800c\u6539\u8fdb\u4f18\u5316\u3002 TVM \u901a\u8fc7\u5f15\u5165 \u8ba1\u7b97-\u8c03\u5ea6 \u7f16\u7a0b\u6a21\u578b\u652f\u6301\u9ad8\u5ea6\u5b9a\u5236\u7684\u7b97\u5b50\uff0c\u7528\u6237\u9996\u5148\u6307\u5b9a\u8ba1\u7b97\u7684\u6570\u5b66\u5b9a\u4e49\uff0c\u7136\u540e\u4f7f\u7528\u663e\u5f0f\u6216\u673a\u5668\u5b66\u4e60\u5f15\u5bfc\u7684\u8f6c\u6362\u5bf9\u5176\u8fdb\u884c\u4f18\u5316 [14]\u3002</p> <p>XLA [1]\u3001TensorRT [2]\u3001TASO [21]\u3001Rammer [24] \u548c PET [42] \u901a\u8fc7 re-combining \u5f20\u91cf\u7b97\u5b50\u6765\u4f18\u5316\u5f20\u91cf\u7a0b\u5e8f\u3002 \u4e0e\u8fd9\u4e9b\u5de5\u4f5c\u76f8\u6bd4\uff0c\u6211\u4eec\u4e00\u5f00\u59cb\u5c31\u5c3d\u91cf\u4e0d\u5f15\u5165\u592a\u591a\u7684\u7b97\u5b50\u3002</p> <p>\u57fa\u4e8e\u591a\u9762\u4f53\u5206\u6790\u7684\u7f16\u8bd1\u5668\u3002 \u591a\u4e2a\u7f16\u8bd1\u5668\u91c7\u7528\u57fa\u4e8e\u591a\u9762\u4f53\u5206\u6790\u7684\u4f18\u5316\u3002 Pluto [10]\u3001PPCG [41] \u548c CHiLL [32] \u6b63\u5728\u4f18\u5316 C \u8bed\u8a00\u901a\u7528\u7a0b\u5e8f\u7684\u7f16\u8bd1\u5668\u3002 PPCG \u8bbe\u8ba1\u4e00\u4e2a\u5206\u6790\u6210\u672c\u6a21\u578b\u5e76\u901a\u8fc7\u6c42\u89e3\u4e00\u4e2a\u5206\u6790\u6a21\u578b\u6765\u6267\u884c\u4f18\u5316\uff0c\u800c CHiLL \u5219\u5728\u591a\u9762\u4f53\u5206\u6790\u7684\u6307\u5bfc\u4e0b\u5b9e\u73b0\u7528\u6237\u6307\u5b9a\u7684\u8f6c\u6362\u3002</p> <p>Tensor Comprehensions [37] \u548c Tiramisu [5] \u5c06\u591a\u9762\u4f53\u5206\u6790\u5f15\u5165\u5230\u5f20\u91cf\u7a0b\u5e8f\u4e2d\u3002 \u4ed6\u4eec\u901a\u8fc7\u4f7f\u7528\u591a\u9762\u4f53\u5206\u6790\u4f18\u5316\u73b0\u6709\u7684\u7b97\u5b50\u6765\u6539\u8fdb\u57fa\u4e8e\u7b97\u5b50\u7684\u6846\u67b6\u3002 \u6211\u4eec\u91c7\u7528\u591a\u9762\u4f53\u5206\u6790\u6765\u6307\u5bfc\u6211\u4eec\u5bf9\u7528\u6237\u5b9a\u4e49\u7684\u4e0d\u89c4\u5219\u5f20\u91cf\u7a0b\u5e8f\u8fdb\u884c AST \u8f6c\u6362\u3002</p> <p>\u901a\u7528\u7f16\u7a0b\u8bed\u8a00\u4e2d\u9762\u5411\u5f20\u91cf\u7684\u8bbe\u8ba1\u3002 \u901a\u7528\u7f16\u7a0b\u8bed\u8a00\u4e5f\u6709\u4e00\u4e9b\u6539\u8fdb\uff0c\u4ee5\u66f4\u597d\u5730\u652f\u6301\u5f20\u91cf\u3002 Julia [9] \u63d0\u4f9b\u4e86\u5bf9\u5f20\u91cf\u7684\u6709\u6548\u652f\u6301\uff0c\u5176\u4e2d\u5bf9\u5f20\u91cf\u64cd\u4f5c\u7684\u8fde\u7eed\u8c03\u7528\u53ef\u4ee5\u81ea\u52a8\u4e0e\u5b8f\u878d\u5408\u3002 Triton [33] \u6539\u8fdb\u4e86 CUDA \u5e76\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5e73\u94fa\u7f16\u7a0b\u6a21\u578b\uff0c\u7528\u4e8e\u5728 GPU \u4e0a\u5b9e\u73b0\u5f20\u91cf\u8fd0\u7b97\u3002</p> <p>\u81ea\u52a8\u5fae\u5206\u3002 \u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u81ea\u52a8\u5fae\u5206 [7, 35]\u3002 \u5927\u591a\u6570\u57fa\u4e8e\u7b97\u5b50\u7684\u6846\u67b6\u5b9e\u73b0\u7684 AD \u90fd\u662f\u57fa\u4e8e\u56fe\u7684\uff0c\u5176\u4e2d\u4e00\u4e2a\u8282\u70b9\u4ee3\u8868\u5bf9\u5f20\u91cf\u8fd0\u7b97\u5e93\u7684\u8c03\u7528\uff0c\u4e00\u6761\u8fb9\u4ee3\u8868\u4e00\u4e2a\u5f20\u91cf [25, 29]\u3002 AD \u8fc7\u7a0b\u5c06\u6240\u6709\u8282\u70b9\u66ff\u6362\u4e3a\u5176\u68af\u5ea6\u5bf9\u5e94\u7269\uff0c\u5e76\u4f7f\u7528\u94fe\u5f0f\u6cd5\u5219\u53cd\u8f6c\u56fe\u7684\u987a\u5e8f\u3002</p> <p>Tangent [36]\u3001Myia [35]\u3001Enzyme [27] \u548c Zygote [20] \u901a\u8fc7\u76f4\u63a5\u53d8\u6362 IR \u4e3a\u4e00\u822c\u5f20\u91cf\u7a0b\u5e8f\u5b9e\u73b0 AD\u3002 \u6211\u4eec\u5728 FreeTensor \u4e2d\u91c7\u7528\u4e86\u8fd9\u79cd\u6280\u672f\uff0c\u5e76\u8fdb\u4e00\u6b65\u89e3\u51b3\u4e86\u5b83\u7684\u6027\u80fd\u95ee\u9898\u3002</p>"},{"location":"mlc/paper-nimble.html","title":"Nimble: Efficiently Compiling Dynamic Neural Networks for Model  Inference","text":"<p>\u6587\u7ae0\u53d1\u8868\u57282021 MLSys\uff0c \u65e8\u5728\u89e3\u51b3\u6a21\u578b\u7f16\u8bd1\u4e2d\u52a8\u6001\u5f62\u72b6\u7684\u95ee\u9898\uff08\u5bf9\u5e94\u5230 TVM \u7684\u4ee3\u7801\u91cc\u5373 <code>Any</code> Expr\uff09\uff0c\u4ecb\u7ecd\u4e86\u5f15\u5165 <code>Any</code> \u9047\u5230\u7684\u7c7b\u578b\u63a8\u65ad\u3001\u4ee3\u7801\u751f\u6210\uff0c\u591a\u540e\u7aef\u652f\u6301\u7b49\u6311\u6218\u4ee5\u53ca\u76f8\u5e94\u7684\u89e3\u51b3\u65b9\u6cd5</p> <p>\u540e\u7eed\u5de5\u4f5c\u6709 cortex\uff0c dietcode\u7b49</p>"},{"location":"mlc/paper-nimble.html#0","title":"0. \u6458\u8981","text":"<p>\u73b0\u4ee3\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u8d8a\u6765\u8d8a\u591a\u5730\u5229\u7528\u63a7\u5236\u6d41\u3001\u52a8\u6001\u6570\u636e\u7ed3\u6784\u548c\u52a8\u6001\u5f20\u91cf\u5f62\u72b6\u3002 \u73b0\u6709\u7684\u6df1\u5ea6\u5b66\u4e60\u7cfb\u7edf\u4fa7\u91cd\u4e8e\u4f18\u5316\u548c\u6267\u884c\u9759\u6001\u795e\u7ecf\u7f51\u7edc\uff0c \u4f18\u5316\u52a8\u6001\u795e\u7ecf\u7f51\u7edc\u6bd4\u9759\u6001\u795e\u7ecf\u7f51\u7edc\u66f4\u5177\u6311\u6218\u6027\uff0c \u5fc5\u987b\u8003\u8651\u6240\u6709\u53ef\u80fd\u7684\u6267\u884c\u8def\u5f84\u548c\u5f20\u91cf\u5f62\u72b6\u3002 \u672c\u6587\u63d0\u51fa\u4e86 Nimble\uff0c\u8fd9\u662f\u4e00\u79cd\u9ad8\u6027\u80fd\u4e14\u7075\u6d3b\u7684\u7cfb\u7edf\uff0c\u7528\u4e8e\u5728\u591a\u4e2a\u5e73\u53f0\u4e0a\u4f18\u5316\u3001\u7f16\u8bd1\u548c\u6267\u884c\u52a8\u6001\u795e\u7ecf\u7f51\u7edc\u3002 Nimble \u901a\u8fc7\u5f15\u5165\u52a8\u6001\u7c7b\u578b\u7cfb\u7edf\u3001\u4e00\u7ec4\u9762\u5411\u52a8\u6001\u7684\u4f18\u5316\u548c\u8f7b\u91cf\u7ea7\u865a\u62df\u673a\u8fd0\u884c\u65f6\u6765\u5904\u7406\u6a21\u578b\u52a8\u6001\u3002 \u6211\u4eec\u7684\u8bc4\u4f30\u8868\u660e\uff0c\u5728 Intel CPU\u3001ARM CPU \u548c Nvidia GPU \u7b49\u786c\u4ef6\u5e73\u53f0\u4e0a\uff0cNimble \u7684\u6027\u80fd\u6bd4\u73b0\u6709\u7684\u52a8\u6001\u795e\u7ecf\u7f51\u7edc\u89e3\u51b3\u65b9\u6848\u9ad8\u51fa 20 \u500d\u3002</p>"},{"location":"mlc/paper-nimble.html#7-conclusion","title":"7. Conclusion","text":"<p>\u672c\u6587\u63d0\u51fa\u4e86 Nimble\uff0c\u4e00\u79cd\u9488\u5bf9\u52a8\u6001\u795e\u7ecf\u7f51\u7edc\u7684\u7aef\u5230\u7aef\u7f16\u8bd1\u5668\u548c\u8fd0\u884c\u65f6\u89e3\u51b3\u65b9\u6848\u3002 Nimble \u662f\u7b2c\u4e00\u4e2a\u652f\u6301\u52a8\u6001\u795e\u7ecf\u7f51\u7edc\u7684 DLC\uff0c\u901a\u8fc7\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u548c\u53ef\u79fb\u690d\u7684\u57fa\u4e8e VM \u7684\u8fd0\u884c\u65f6\u5728\u591a\u4e2a\u5e73\u53f0\u4e0a\u6267\u884c\u7f16\u8bd1\u6a21\u578b\u3002 \u5b9e\u9a8c\u7ed3\u679c\u8868\u660e\uff0c\u4e0e\u6700\u5148\u8fdb\u7684\u6280\u672f\u76f8\u6bd4\uff0cNimble \u5728\u591a\u4e2a\u5e73\u53f0\u4e0a\u6709\u6548\u5730\u6267\u884c\u4e86\u6d41\u884c\u7684\u52a8\u6001\u6a21\u578b\uff0c\u5177\u6709\u66f4\u597d\u7684\u6027\u80fd\u548c\u66f4\u5e7f\u6cdb\u7684\u8986\u76d6\u8303\u56f4\u3002 \u672a\u6765\u7684\u5de5\u4f5c\u5305\u62ec\u5728\u65b0\u5174 DL \u52a0\u901f\u5668\u4e0a\u542f\u7528\u52a8\u6001\u6a21\u578b\u63a8\u7406\u548c\u52a8\u6001\u6a21\u578b\u7684\u9ad8\u6027\u80fd\u8bad\u7ec3\u3002</p>"},{"location":"mlc/paper-nimble.html#1-intro","title":"1. Intro","text":"<p>\u968f\u7740\u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u5e94\u7528\u7a0b\u5e8f\u53d8\u5f97\u65e0\u5904\u4e0d\u5728(ubiquitous)\uff0c\u7528\u4e8e\u4f18\u5316\u3001\u6267\u884c\u548c\u90e8\u7f72\u6b64\u7c7b\u5e94\u7528\u7a0b\u5e8f\u7684\u7cfb\u7edf\u4e5f\u53d8\u5f97\u65e0\u5904\u4e0d\u5728\u3002 \u8bb8\u591a\u7cfb\u7edf\u7814\u7a76\u9879\u76ee\u4e13\u6ce8\u4e8e\u63d0\u9ad8 DL \u7814\u7a76\u4eba\u5458\u5728\u5404\u79cd\u5e73\u53f0\u4e0a\u751f\u6210\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u5b50\u96c6\u7684\u6027\u80fd\u3002 \u8fd9\u4e9b\u6a21\u578b\u8868\u793a\u4e3a\u9759\u6001\u6570\u636e\u6d41\u56fe\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8f93\u5165\u548c\u8f93\u51fa\uff08\u5373 tensor\uff09\u7684\u5927\u5c0f\u662f\u5148\u9a8c\u5df2\u77e5\u7684\uff0c\u786e\u4fdd\u6267\u884c\u8def\u5f84\u5728\u6bcf\u6b21\u8c03\u7528\u65f6\u4fdd\u6301\u4e0d\u53d8\uff0c\u6211\u4eec\u5c06\u8fd9\u79cd\u79f0\u4e3a\u9759\u6001\u6a21\u578b\u3002 \u795e\u7ecf\u7f51\u7edc\uff0c\u5c24\u5176\u662f NLP \u7684\u8fdb\u6b65\uff0c\u5728\u6a21\u578b\u4e2d\u5f15\u5165\u4e86\u66f4\u591a\u52a8\u6001\u6027\uff1a \u63a7\u5236\u6d41\u3001\u52a8\u6001\u6570\u636e\u7ed3\u6784 \u548c \u52a8\u6001\u5f62\u72b6\u3002 \u6211\u4eec\u5c06\u8868\u73b0\u51fa\u8fd9\u4e9b\u884c\u4e3a\u7684\u6a21\u578b\u79f0\u4e3a\u52a8\u6001\u6a21\u578b\u3002</p> <p>\u968f\u7740\u52a8\u6001\u6a21\u578b\u7684\u6210\u719f\u5e76\u7ee7\u7eed\u4ece\u7814\u7a76\u8f6c\u5411\u751f\u4ea7\uff0c\u5b83\u9700\u8981\u4e00\u4e2a\u9ad8\u6548\u7684\u8de8\u5e73\u53f0\u63a8\u7406\u7cfb\u7edf\u3002 \u8fd9\u5bf9\u6df1\u5ea6\u5b66\u4e60\u4ece\u4e1a\u8005\u63d0\u51fa\u4e86\u65b0\u7684\u6311\u6218\uff0c\u56e0\u4e3a\u52a8\u6001\u6a21\u578b\u5f15\u5165\u4e86\u4f9d\u8d56\u4e8e\u8f93\u5165\u7684\u56fe\u62d3\u6251\u7ed3\u6784\uff0c\u6253\u7834\u4e86\u73b0\u6709\u7684\u7cfb\u7edf\u5047\u8bbe\u5e76\u4f7f\u4e3a\u7eaf\u9759\u6001\u6570\u636e\u6d41\u56fe\u8bbe\u8ba1\u7684\u4f18\u5316\u65e0\u6548\u3002 \u7136\u800c\uff0c\u6ca1\u6709\u73b0\u6709\u7684\u89e3\u51b3\u65b9\u6848\u6ee1\u8db3\u8fd9\u4e9b\u8981\u6c42\u3002</p> <p>\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u662f\u6269\u5c55\u73b0\u6709\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u3002 \u7136\u800c\uff0c\u6846\u67b6\u9488\u5bf9\u8bad\u7ec3\u505a\u4e86\u5f88\u591a\u4f18\u5316\uff0c\u5728\u63a8\u7406\u65b9\u9762\u6709\u4e00\u5b9a\u9650\u5236\uff0c\u4e14\u4f9d\u8d56\u7b2c\u4e09\u65b9\u7b97\u5b50\u52a0\u901f\u5e93(\u5982 OpenBLAS\u3001cuDNN \u548c oneDNN)\uff0c\u7b97\u5b50\u5e93\u7684\u53d1\u5c55\u65e0\u6cd5\u9002\u5e94\u52a8\u6001\u6a21\u578b\u9700\u8981\u7684\u5927\u91cf\u5177\u6709\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u548c\u5f62\u72b6\u7684\u7b97\u5b50\u3002</p> <p>\u53e6\u4e00\u79cd\u65b9\u6848\u662f\u4f7f\u7528 \u6df1\u5ea6\u5b66\u4e60\u7f16\u8bd1\u5668(DLC) \u5bf9\u795e\u7ecf\u7f51\u7edc\u8fdb\u884c\u7aef\u5230\u7aef\u4f18\u5316\uff0c\u5982 XLA(XLA \u56e2\u961f\uff0c2017 \u5e74)\u3001 Glow(Rotem \u7b49\u4eba, 2018)\u3001 TVM(Chen \u7b49\u4eba\uff0c2018) \u548c MLIR(Lattner \u7b49\u4eba\uff0c2021)\u3002 DLC \u4e0d\u540c\u4e8e\u4f20\u7edf\u7684 DL \u6846\u67b6\uff0c\u5c06\u6267\u884c\u5206\u4e3a\u7f16\u8bd1\u9636\u6bb5\u548c\u8fd0\u884c\u65f6\u9636\u6bb5\u3002 \u7f16\u8bd1\u9636\u6bb5\u652f\u6301\u56fe\u5f62\u7ea7\u522b\u7684\u6574\u4f53\u6a21\u578b\u4f18\u5316\uff0c\u4ee5\u53ca\u9488\u5bf9\u591a\u4e2a\u786c\u4ef6\u5e73\u53f0\u7684\u5de5\u4f5c\u8d1f\u8f7d\u7279\u5b9a\u5185\u6838\u4ee3\u7801\u751f\u6210\uff0c\u800c\u8fd0\u884c\u65f6\u6267\u884c\u7f16\u8bd1\u540e\u7684\u6a21\u5757\u3002</p> <p>\u7136\u800c\uff0c\u7531\u4e8e\u7f3a\u4e4f\u5bf9\u52a8\u6001\u7684\u652f\u6301\uff0c DLC \u4e3b\u8981\u9650\u4e8e\u9759\u6001\u6a21\u578b\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u4e3a\u4e86\u7f16\u8bd1\u548c\u6267\u884c\u52a8\u6001\u6a21\u578b\uff0c\u7cfb\u7edf\u9700\u8981 \u4e00\u4e2a\u53ef\u4ee5\u9759\u6001\u8868\u793a\u52a8\u6001\u6784\u9020\u7684 IR \uff0c \u4e00\u4e2a\u53ef\u4ee5\u4e3a\u52a8\u6001\u53d8\u5316\u7684\u6570\u636e\u5f62\u72b6\u751f\u6210 kernel \u7684\u4ee3\u7801\u751f\u6210\u5668\uff0c \u4ee5\u53ca\u4e00\u4e2a\u52a8\u6001\u5904\u7406\u6267\u884c\u4e0e kernel dispatch \u7684\u8fd0\u884c\u65f6\u3002 \u6b64\u5916\uff0c\u52a8\u6001\u7279\u5b9a\u7684\u4f18\u5316\uff0c\u4f8b\u5982\u52a8\u6001\u5185\u5b58\u89c4\u5212\uff0c\u9759\u6001\u4f18\u5316\u52a8\u6001\u5206\u914d\u7684\u8fc7\u7a0b\uff0c\u5bf9\u4e8e\u5b9e\u73b0\u7406\u60f3\u7684\u6027\u80fd\u662f\u5fc5\u8981\u7684\u3002 \u5f53\u524d\u7684 DLC \u4e2d\u4e0d\u5b58\u5728\u8fd9\u4e9b\u529f\u80fd\u3002</p> <p>\u4e3a\u6b64\uff0c\u6211\u4eec\u63d0\u51fa Nimble\uff0c\u8fd9\u662f\u4e00\u79cd\u9ad8\u6027\u80fd\u7684\u4fbf\u643a\u5f0f\u7cfb\u7edf\uff0c\u7528\u4e8e\u5728\u591a\u4e2a\u5e73\u53f0\u4e0a\u7f16\u8bd1\u3001\u4f18\u5316\u548c\u6267\u884c\u52a8\u6001\u795e\u7ecf\u7f51\u7edc\u3002 \u636e\u6211\u4eec\u6240\u77e5\uff0c\u8fd9\u662f\u7b2c\u4e00\u6b21\u5c1d\u8bd5\u4ece compiler \u7684\u89d2\u5ea6\u7cfb\u7edf\u5730\u5904\u7406\u52a8\u6001\u6a21\u578b\u3002 \u9996\u5148\uff0c\u6211\u4eec\u5f15\u5165\u7c7b\u578b\u7cfb\u7edf\u6269\u5c55\u6765\u5904\u7406\u7ef4\u5ea6\u672a\u77e5\u7684\u6570\u636e\uff0c\u901a\u8fc7\u4f7f\u7528 Any \u5bf9\u5f62\u72b6\u6267\u884c\u7c7b\u578b\u68c0\u67e5\u548c\u63a8\u7406\u3002 \u5176\u6b21\uff0c\u6211\u4eec\u8bbe\u8ba1\u4e86\u51e0\u79cd\u7279\u5b9a\u4e8e\u52a8\u6001\u6a21\u578b\u7684\u4f18\u5316\uff0c\u5305\u62ec\u52a8\u6001\u5f62\u72b6\u611f\u77e5\u4ee3\u7801\u751f\u6210\u3001\u5185\u5b58\u89c4\u5212\u548c\u8bbe\u5907\u653e\u7f6e\u3002 \u7b2c\u4e09\uff0c\u6211\u4eec\u63d0\u51fa\u4e86\u4e00\u4e2a\u57fa\u4e8e\u865a\u62df\u673a (VM) \u7684\u8fd0\u884c\u65f6\uff0c\u5b83\u5c06\u72ec\u7acb\u4e8e\u5e73\u53f0\u7684\u63a7\u5236\u903b\u8f91\u548c\u4f9d\u8d56\u4e8e\u5e73\u53f0\u7684\u5185\u6838\u5b9e\u73b0\u5206\u79bb\uff0c\u4ee5\u5b9e\u73b0\u53ef\u79fb\u690d\u3001\u8f7b\u91cf\u7ea7\uff0c\u6700\u91cd\u8981\u7684\u662f\uff0c\u80fd\u591f\u6267\u884c\u52a8\u6001\u6a21\u578b\u3002 \u5bf9 LSTM\uff08Hochreiter &amp; Schmidhuber\uff0c1997\uff09\u3001Tree-LSTM\uff08Tai \u7b49\u4eba\uff0c2015\uff09\u548c BERT\uff08Devlin \u7b49\u4eba\uff0c2018\uff09\u7684\u8bc4\u4f30\u8868\u660e\uff0c\u4e0e\u6700\u4f73\u89e3\u51b3\u65b9\u6848\u76f8\u6bd4\uff0c\u5728\u4e91\u7aef\uff08Intel CPU \u548c Nvidia GPU\uff09\u548c\u8fb9\u7f18\uff08ARM CPU\uff09\u7684\u4e3b\u6d41\u786c\u4ef6\u5e73\u53f0\u4e0a\uff0c Nimble \u5c06\u5ef6\u8fdf\u964d\u4f4e\u4e86 1.05 \u500d\u81f3 19.9 \u500d \u3002</p> <p>\u7efc\u4e0a\u6240\u8ff0\uff0c\u672c\u6587\u6709\u4ee5\u4e0b\u4e09\u4e2a\u6838\u5fc3\u8d21\u732e\uff1a</p> <ul> <li>\u63d0\u51fa\u5e76\u6784\u5efa\u4e00\u4e2a\u7aef\u5230\u7aef\u7cfb\u7edf\uff0c\u5b9e\u73b0\u8de8\u591a\u4e2a\u786c\u4ef6\u5e73\u53f0\u7684\u9ad8\u6548\u52a8\u6001\u6a21\u578b\u63a8\u7406\uff0c\u5305\u62ec\u5bf9\u7ed3\u679c\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5\u7684\u5b9e\u8bc1\u7814\u7a76\uff1b</li> <li>\u8bbe\u8ba1\u591a\u79cd\u7f16\u8bd1\u548c\u4f18\u5316\u6280\u672f\uff0c\u5305\u62ec\u52a8\u6001\u7c7b\u578b\u7cfb\u7edf\u3001\u5185\u5b58\u89c4\u5212 pass\u3001\u7528\u4e8e\u653e\u7f6e\u8ba1\u7b97\u548c\u6570\u636e\u7684\u5f02\u6784\u653e\u7f6e\u673a\u5236\uff0c\u53ca\u7b26\u53f7\u5185\u6838\u4ee3\u7801\u751f\u6210\u548c\u57fa\u4e8e\u5f62\u72b6\u7684\u8c03\u5ea6\u7b97\u6cd5\uff1b</li> <li>\u8bbe\u8ba1\u548c\u5b9e\u73b0\u57fa\u4e8e\u5f20\u91cf\u7684VM\uff0c\u5177\u6709\u72ec\u7acb\u4e8e\u5e73\u53f0\u7684\u6307\u4ee4\u96c6\uff0c\u4ee5\u9ad8\u6548\u7075\u6d3b\u5730\u8de8\u5e73\u53f0\u6267\u884c\u52a8\u6001\u6a21\u578b\u3002</li> </ul> <p>\u5269\u4f59\u90e8\u5206\u7ed3\u6784\u5982\u4e0b\uff1a \u7b2c 2 \u8282\u56de\u987e\u4e86\u73b0\u6709 DLC \u7684\u5c40\u9650\u6027\uff0c\u5e76\u5bf9 Nimble \u8fdb\u884c\u4e86\u6982\u8ff0\u3002 \u7b2c 3 \u8282\u4ecb\u7ecd\u4e86 Nimble \u7f16\u8bd1\u6d41\u7a0b\u7684\u8bbe\u8ba1\u548c\u5b9e\u73b0\uff0c\u968f\u540e\u662f\u7b2c 4 \u8282\u4e2d\u57fa\u4e8e VM \u7684\u8fd0\u884c\u65f6\u3002\u7b2c 5 \u8282\u63d0\u4f9b\u4e86\u5728\u4e0d\u540c\u786c\u4ef6\u5e73\u53f0\u4e0a\u4f7f\u7528\u5404\u79cd\u6a21\u578b\u7684\u8bc4\u4f30\u7ed3\u679c\u3002 \u7b2c 6 \u8282\u6db5\u76d6\u76f8\u5173\u5de5\u4f5c\uff0c\u7b2c 7 \u8282\u603b\u7ed3\u672c\u6587\u3002</p>"},{"location":"mlc/paper-nimble.html#2-challenges-and-our-approach","title":"2. CHALLENGES AND OUR APPROACH","text":""},{"location":"mlc/paper-nimble.html#21-dlc","title":"2.1. DLC \u7684\u5c40\u9650","text":"<p>\u7531\u4e8e\u7f3a\u5c11\u4ee5\u4e0b\u7279\u5b9a\u4e8e\u52a8\u6001\u7684\u529f\u80fd\uff0c\u5f53\u524d\u7684 DLC \u65e0\u6cd5\u5f88\u597d\u5730\u5904\u7406\u52a8\u6001\u6a21\u578b:</p> <ol> <li> <p>An IR for representing dynamism. \u5bf9\u9759\u6001\u6a21\u578b\u6267\u884c data type and shape inference \u975e\u5e38\u7b80\u5355\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u7f16\u8bd1\u671f\u95f4\u5df2\u77e5\u5e76\u4e14\u5728\u8fd0\u884c\u65f6\u4fdd\u6301\u4e0d\u53d8\u3002 \u7136\u800c\uff0c\u8f93\u5165\u5f20\u91cf\u7684\u5f62\u72b6\u5728\u52a8\u6001\u6a21\u578b\u4e2d\u7684\u4e0d\u540c\u8f93\u5165\u6837\u672c\u4e4b\u95f4\u53ef\u80fd\u53d8\u5316\u5f88\u5927\u3002 \u63a7\u5236\u6d41\u7ed3\u6784\u7684\u51fa\u73b0\u4f7f\u8fd9\u4e2a\u95ee\u9898\u8fdb\u4e00\u6b65\u590d\u6742\u5316\uff0c\u56e0\u4e3a\u4e0d\u540c\u7684\u6267\u884c\u8def\u5f84\u53ef\u4ee5\u53d1\u51fa\u622a\u7136\u4e0d\u540c\u7684\u6570\u636e\u3002 \u56e0\u6b64\uff0c\u5b8c\u5168\u9759\u6001\u7684 IR \u4e0d\u8db3\u4ee5\u5e94\u5bf9\u8fd9\u4e9b\u6a21\u578b\u7684\u52a8\u6001\u7279\u6027\u3002</p> </li> <li> <p>A set of dynamic-oriented optimizations. \u73b0\u6709\u7684 DLC \uff0c\u4f8b\u5982 TVM (Chen et al., 2018a) \u548c Glow (Rotem et al., 2018) \u671f\u671b\u6bcf\u6b21\u4f18\u5316\u7684\u9759\u6001\u8f93\u5165\u3002 \u6bcf\u4e2a\u5f20\u91cf\u7684\u5185\u5b58\u7a7a\u95f4\u90fd\u662f\u9884\u5148\u5206\u914d\u7684\uff0c\u5b83\u4eec\u7684\u751f\u547d\u5468\u671f\u662f\u4f7f\u7528\u4e13\u7528\u4f18\u5316 pass \u786e\u5b9a\u7684\u3002 \u5b83\u4eec\u8fd8\u786e\u4fdd\u4e86\u6574\u4e2a\u6a21\u578b\u7684\u5747\u5300\u6267\u884c\uff0c\u56e0\u4e3a\u6240\u6709\u5185\u6838\u90fd\u5728\u540c\u4e00\u8bbe\u5907\u4e0a\u6267\u884c\u3002 \u7136\u800c\uff0c\u5f53\u51fa\u73b0\u52a8\u6001\u65f6\uff0c\u63a7\u5236\u6d41\u4e0d\u540c\u6267\u884c\u8def\u5f84\u53ef\u80fd\u9700\u8981\u4e0d\u540c\u6570\u91cf\u7684\u5185\u5b58\uff0c\u5e76\u4e14\u5728\u8fd0\u884c\u524d\u5927\u5c0f\u4e0d\u786e\u5b9a\u3002 \u56e0\u6b64\uff0c\u53ef\u80fd\u4f1a\u5f15\u5165\u67d0\u4e9b IR \u8282\u70b9\u6765\u5e2e\u52a9\u8fd0\u884c\u65f6\u7c7b\u578b\u63a8\u65ad\u548c\u5185\u5b58\u5206\u914d\u3002 \u8fd9\u4e9b\u8282\u70b9\u4e2d\u7684\u64cd\u4f5c\u672c\u8d28\u4e0a\u5bf9 CPU \u66f4\u53cb\u597d\uff0c\u5982\u679c\u653e\u7f6e\u4e0d\u5f53\u4f1a\u5bfc\u81f4\u4e25\u91cd\u7684\u6027\u80fd\u95ee\u9898 \uff08\u5bf9\u5e94\u6587\u7ae0\u4e2d\u63d0\u7684 \"\u5f02\u6784\u8bbe\u5907\u653e\u7f6e\u673a\u5236\" \uff09\u3002</p> <p>\u7591\u95ee</p> <p>\"The operations in these nodes are intrinsically more CPU friendly\" \u4ec0\u4e48\u610f\u601d\uff1f</p> </li> <li> <p>A symbolic kernel code generator. \u4ee3\u7801\u751f\u6210\uff08codegen\uff09\u8d1f\u8d23\u4e3a\u7b97\u5b50\u751f\u6210\u9ad8\u6027\u80fd\u7684\u53ef\u6267\u884c\u5185\u6838\u3002 \u6700\u8fd1\u7684\u7814\u7a76\uff08TVM 2018; Flextensor 2020; Adams et al., 2019; Ansor 2020a\uff09\u5728\u591a\u540e\u7aef\u9759\u6001\u5f62\u72b6\u7684\u5185\u6838\u6027\u80fd\u65b9\u9762\u53d6\u5f97\u4e86\u4ee4\u4eba\u77a9\u76ee\u7684\u6210\u679c\u3002 \u5c3d\u7ba1\u5982\u6b64\uff0c\u5177\u6709\u7b26\u53f7\u5f62\u72b6\u7684\u4ee3\u7801\u751f\u6210\u4e2d\u7684\u6311\u6218\u4ecd\u5728\u63a2\u7d22\u3002 \u5728\u5e94\u7528\u540c\u4e00\u7ec4\u5faa\u73af\u4f18\u5316\u540e\uff0c\u5982\u679c\u5faa\u73af\u8fb9\u754c\u5904\u7406\u4e0d\u5f53\uff0c\u4f7f\u7528\u7b26\u53f7\u5f62\u72b6\u751f\u6210\u7684\u5185\u6838\u4ecd\u7136\u53ef\u80fd\u8868\u73b0\u4e0d\u4f73\u3002 \u540c\u65f6\uff0c\u968f\u7740\u641c\u7d22\u7a7a\u95f4\u5448\u6307\u6570\u589e\u957f\uff0c\u7b26\u53f7\u5f62\u72b6\u8bbe\u7f6e\u4e0b\u7684\u5185\u6838\u8c03\u6574\u53d8\u5f97\u66f4\u5177\u6311\u6218\u6027\u3002</p> <p>note</p> <p>\u5173\u4e8e\u5177\u6709\u7b26\u53f7\u5f62\u72b6\u7684\u4ee3\u7801\u751f\u6210\uff0c TVM\u76f8\u5173\u7684\u540e\u7eed\u5de5\u4f5c\u6709 CORTEX\uff0c CORA\uff0c DietCode \u7b49\u3002</p> </li> <li> <p>A light-weight and cross-platform runtime. \u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0c\u9759\u6001\u6a21\u578b\u7684\u8fd0\u884c\u65f6\u53ef\u4ee5\u7b80\u5355\u5730\u8bbe\u8ba1\u4e3a\u4e00\u4e2a\u987a\u5e8f\u6267\u884c\u5668\uff0c\u5b83\u6309\u62d3\u6251\u987a\u5e8f\u904d\u5386\u8f93\u5165\u6570\u636e\u6d41\u56fe\uff0c\u4e00\u4e2a\u4e00\u4e2a\u5730\u8c03\u7528\u64cd\u4f5c\u7b26\u3002 \u7136\u800c\uff0c\u52a8\u6001\u6a21\u578b\u7684\u6267\u884c\u8def\u5f84\u53ef\u80fd\u53ea\u5728\u8fd0\u884c\u65f6\u624d\u77e5\u9053\uff0c\u5e76\u4e14\u67d0\u4e9b\u7b97\u5b50\u7684\u5185\u6838\u5fc5\u987b\u6839\u636e\u8fd0\u884c\u65f6\u786e\u5b9a\u7684\u6570\u636e\u5f62\u72b6\u8fdb\u884c\u8c03\u5ea6\uff0c\u4f7f\u5f97\u7b80\u5355\u7684\u56fe\u904d\u5386\u8fd0\u884c\u65f6\u4e0d\u591f\u7528\u3002</p> </li> </ol>"},{"location":"mlc/paper-nimble.html#22","title":"2.2. \u6211\u4eec\u7684\u65b9\u6848","text":"<p>Nimble \u7684\u8bbe\u8ba1\u76ee\u6807\uff1a</p> <ol> <li>\u652f\u6301\u52a8\u6001\u6a21\u578b. Nimble \u7684\u76ee\u6807\u6a21\u578b\u5177\u6709\u6240\u6709\u7c7b\u578b\u7684\u52a8\u6001\u6027\uff0c\u5305\u62ec\u63a7\u5236\u6d41\u3001\u52a8\u6001\u6570\u636e\u7ed3\u6784\u548c\u5404\u79cd\u6570\u636e\u5f62\u72b6\u3002</li> <li>\u53ef\u79fb\u690d\u4e14\u8f7b\u91cf. Nimble \u751f\u6210\u7684\u6a21\u5757\u5e94\u8be5\u53ef\u4ee5\u5728\u4e91\u7aef\uff08\u9ad8\u7aef CPU \u548c GPU\uff09\u548c\u8fb9\u7f18\uff08\u4f4e\u529f\u8017 CPU \u548c GPU\uff09\u7684\u591a\u4e2a\u5e73\u53f0\u4e0a\u6267\u884c\u3002 \u8fd0\u884c\u65f6\u5e94\u8be5\u8db3\u591f\u8f7b\uff0c\u4ee5\u5728\u5177\u6709\u6700\u5c0f\u8ba1\u7b97\u80fd\u529b\u548c\u5185\u5b58\u5bb9\u91cf\u7684\u8bbe\u5907\u4e0a\u8fd0\u884c\u3002</li> <li>\u6027\u80fd\u8868\u73b0\u826f\u597d. Nimble \u5e94\u8be5\u5728\u8de8\u5e73\u53f0\u52a8\u6001\u7684\u80cc\u666f\u4e0b\u8868\u73b0\u51fa\u8272\u3002</li> </ol> <p>\u56fe 1 \u663e\u793a\u4e86 Nimble \u67b6\u6784\u3002 \u7531\u4e24\u4e2a\u4e3b\u8981\u7ec4\u4ef6\u7ec4\u6210\uff0c\u5373\u7f16\u8bd1\u5668\u548c\u8fd0\u884c\u65f6\u3002 Nimble \u91c7\u7528\u4e3b\u6d41 DL \u6846\u67b6\u683c\u5f0f\u7684\u6a21\u578b\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u7edf\u4e00\u7684 IR \uff0c\u7136\u540e\u5c06 IR \u4f18\u5316\u5e76\u7f16\u8bd1\u4e3a\u5305\u542b \u5e73\u53f0\u65e0\u5173\u5b57\u8282\u7801 \u548c \u5e73\u53f0\u76f8\u5173\u5185\u6838\u4ee3\u7801 \u7684\u53ef\u6267\u884c\u6587\u4ef6 \uff0c\u6700\u540e\u52a0\u8f7d\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u5728\u57fa\u4e8e VM \u7684\u8fd0\u884c\u65f6\u4e2d\u6267\u884c\u3002 \u5b57\u8282\u7801\u7531 Nimble \u7684\u8fd0\u884c\u65f6\u89e3\u91ca\u5668\u6267\u884c\uff0c\u53ef\u8de8\u5e73\u53f0\u5171\u4eab\u3002 \u8fd9\u79cd\u8bbe\u8ba1\u6709\u6548\u5730\u4f7f\u6211\u4eec\u80fd\u591f\u53ea\u7ef4\u62a4\u4e00\u4e2a\u7248\u672c\u7684\u6267\u884c\u903b\u8f91\uff0c\u800c\u66f4\u591a\u5730\u5173\u6ce8\u6027\u80fd\u5173\u952e\u7684\u7b97\u5b50\u5185\u6838\u3002 \u5185\u6838\u9488\u5bf9\u7279\u5b9a\u786c\u4ef6\u5e73\u53f0\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u4ee5\u5b9e\u73b0\u9ad8\u6027\u80fd\u3002</p> <p>\u4e3a\u4e86\u63d0\u9ad8\u6027\u80fd\uff0c\u7f16\u8bd1\u5668\u4e2d\u5f15\u5165\u4e86\u5404\u79cd\u5206\u6790\u548c\u4f18\u5316\u6280\u672f\u3002 \u9996\u5148\uff0c\u8bbe\u8ba1\u4e86 a set of IR extensions \u6765\u8868\u793a\u52a8\u6001\u5f62\u72b6 \u548c \u52a8\u6001\u5206\u914d\uff0c \u7528\u4e8e\u52a8\u6001\u7a0b\u5e8f\u884c\u4e3a\u7684\u9759\u6001\u4f18\u5316\uff08\u7b2c 3.1 \u8282\uff09\u3002 \u5176\u6b21\uff0c\u5f62\u72b6\u51fd\u6570\u9644\u52a0\u5230\u7b97\u5b50\u4ee5\u52a8\u6001\u8ba1\u7b97\u8f93\u51fa\u5f62\u72b6\u5e76\u5728\u8fd0\u884c\u65f6\u6267\u884c\u7c7b\u578b\u68c0\u67e5\uff08\u7b2c 3.2 \u8282\uff09\u3002 \u7b2c\u4e09\uff0c\u91c7\u7528\u5185\u5b58\u89c4\u5212\u4f18\u5316\u6765\u51cf\u5c11\u5185\u5b58\u6d88\u8017\u91cf\uff08\u7b2c 3.3 \u8282\uff09\u3002 \u7b2c\u56db\uff0c\u5f02\u6784\u8bbe\u5907\u653e\u7f6e\u673a\u5236\u65e8\u5728\u5c06 IR \u8282\u70b9\u653e\u7f6e\u5728 \"\u6700\u4f73\" \u8bbe\u5907\u4e0a\uff0c\u4ee5\u51cf\u5c11\u6602\u8d35\u7684\u8de8\u8bbe\u5907\u6570\u636e\u4f20\u8f93\u548c\u540c\u6b65\uff08\u7b2c 3.4 \u8282\uff09\u3002 \u6700\u540e\uff0c\u7f16\u8bd1\u5668\u5177\u6709\u4e00\u4e2a\u80fd\u591f\u4e13\u95e8\u5316\u67d0\u4e9b\u53ef\u80fd\u5f62\u72b6\u7684\u4ee3\u7801\u751f\u6210\u5668\uff08\u7b2c 3.5 \u8282\uff09\u3002 \u4e00\u65e6\u7f16\u8bd1\u4e86\u5177\u6709\u52a8\u6001\u884c\u4e3a\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u57fa\u4e8e VM \u7684\u8fd0\u884c\u65f6\u5c31\u53ef\u4ee5\u4f7f\u7528 \u52a8\u6001\u5185\u6838\u8c03\u5ea6\u52a0\u8f7d \u548c \u89e3\u91ca\u5b83\uff08\u7b2c 4 \u8282\uff09\u3002 \u6211\u4eec\u5c06\u5728\u540e\u7eed\u90e8\u5206\u8be6\u7ec6\u4ecb\u7ecd\u8fd9\u4e9b\u529f\u80fd\u7684\u8bbe\u8ba1\u548c\u5b9e\u73b0\u3002</p>"},{"location":"mlc/paper-nimble.html#3-compiler-support-for-dynamism","title":"3. COMPILER SUPPORT FOR DYNAMISM","text":"<p>\u963b\u6b62\u73b0\u6709 DLC \u5904\u7406 DYNAMISM \u7684\u4e00\u4e2a\u5173\u952e\u6311\u6218\u662f\u7f3a\u4e4f\u7edf\u4e00\u7684\u52a8\u6001\u8868\u793a\u3002 \u4f8b\u5982\uff0c\u73b0\u6709 IR(\u5982 TVM)\u7684\u4f18\u5316\u548c\u8fd0\u884c\u65f6\u59cb\u7ec8\u5047\u5b9a\u5b58\u5728\u9759\u6001\u5f62\u72b6\u4fe1\u606f\u3002 \u8fd9\u4e9b\u5047\u8bbe\u4e3a\u52a8\u6001\u4f18\u5316\u5e26\u6765\u4e86\u76f8\u5f53\u591a\u7684\u6311\u6218\u3002</p> <p>\u4e3a\u4e86\u5904\u7406\u52a8\u6001\u6027\uff0c\u6211\u4eec\u8bbe\u8ba1\u4e86\u4e00\u7ec4 IR \u6269\u5c55\uff0c\u5b83\u66b4\u9732\u4f18\u5316\u52a8\u6001\u7a0b\u5e8f\u6240\u9700\u7684\u57fa\u672c\u8bed\u4e49\u3002 Nimble \u5728 TVM(0.6 \u7248) \u4e0a\u5b9e\u73b0\uff0c\u4ee5\u5229\u7528\u5176\u4ece\u5404\u79cd DL \u6846\u67b6\u5230 TVM IR \u7684\u524d\u7aef\u8f6c\u6362\u5668\u3002 TVM \u7684\u524d\u7aef\u51cf\u8f7b\u4e86\u5bf9\u524d\u7aef\u7279\u5b9a\u7ec6\u8282\u7684\u9700\u6c42\uff0c\u4f7f\u6211\u4eec\u7684\u5de5\u4f5c\u80fd\u591f\u4e13\u6ce8\u4e8e IR \u6269\u5c55 \u548c \u4f18\u5316\u7b49\u8d21\u732e\u3002 \u8981\u4f7f\u7528 Nimble\uff0c\u53ea\u9700\u4e3a\u5176\u63d0\u4f9b\u4e00\u4e2a\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u8fdb\u884c\u7f16\u8bd1\uff0c\u7136\u540e\u8fdb\u884c\u63a8\u7406\u3002 Nimble \u9002\u7528\u4e8e\u5176\u4ed6\u7f16\u8bd1\u5668\u5de5\u4f5c\u3002</p> <p>\u672c\u8282\u63cf\u8ff0\u6211\u4eec\u5982\u4f55\u5c06\u6807\u51c6 TVM \u7a0b\u5e8f\u8f6c\u6362\u4e3a\u6211\u4eec\u7684\u52a8\u6001\u65b9\u8a00\uff0c\u4ee5\u4fbf\u8f7b\u677e\u5730\u5c06\u9759\u6001\u4f18\u5316\u5e94\u7528\u4e8e\u52a8\u6001\u7a0b\u5e8f\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u4f20\u7edf\u7f16\u8bd1\u5668\u4f18\u5316\u4e2d\u6240\u505a\u7684\u90a3\u6837\u3002 \u7279\u522b\u662f\uff0c\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u7f16\u8bd1\u52a8\u6001\u6a21\u578b\u6240\u9700\u7684\u4e09\u4e2a\u5173\u952e\u7ec4\u4ef6\uff1a</p> <ol> <li>\u4e00\u4e2a\u6269\u5c55\u7684\u7c7b\u578b\u7cfb\u7edf\uff0c\u53ef\u4ee5\u5bf9\u52a8\u6001\u5f62\u72b6\u8fdb\u884c\u9759\u6001\u8ddf\u8e2a</li> <li>\u4e00\u7cfb\u5217\u4f7f\u52a8\u6001\u8f93\u51fa\u5f62\u72b6\u3001\u5206\u914d\u548c\u8bbe\u5907\u5e03\u5c40\u660e\u786e\u7684\u4f18\u5316\u8fc7\u7a0b</li> <li>\u4e00\u7ec4\u4ee3\u7801\u751f\u6210\u6280\u672f\uff0c\u7528\u4e8e\u751f\u6210\u5177\u6709\u52a8\u6001\u8f93\u5165\u548c\u8f93\u51fa\u5f62\u72b6\u7684\u5185\u6838\u4ee3\u7801</li> </ol>"},{"location":"mlc/paper-nimble.html#31-typing","title":"3.1. Typing","text":"<p>DLC \u4f7f\u7528\u7c7b\u578b\u7cfb\u7edf\u6765\u8868\u793a\u3001\u68c0\u67e5\u548c\u63a8\u65ad\u5f20\u91cf\u7684\u6570\u636e\u7c7b\u578b\u548c\u5f62\u72b6\u3002 \u5728\u67d0\u4e9b\u6846\u67b6\u548c\u7f16\u8bd1\u5668\u4e2d\uff0c\u8fd9\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4\uff0c\u5f62\u72b6\u63a8\u65ad\u548c\u6570\u636e\u7c7b\u578b\u63a8\u65ad\u3002 TVM \u540c\u65f6\u6267\u884c\u8fd9\u4e24\u79cd\u5f62\u5f0f\uff0c\u5e76\u5c06\u5b83\u4eec\u79f0\u4e3a\u7c7b\u578b\u63a8\u65ad\uff08Relay 2019\uff09\uff0c\u6211\u4eec\u5c06\u5728\u672c\u8282\u4e2d\u4f7f\u7528\u8fd9\u4e2a\u672f\u8bed\u3002</p> <p>Tensor Type \u7531 n \u7ef4\u5f62\u72b6\uff08\u5b9a\u4e49\u4e3a\u63cf\u8ff0\u5f20\u91cf\u7ef4\u5ea6\u7684\u6574\u6570\u5143\u7ec4\uff09\u548c\u6570\u636e\u7c7b\u578b\uff08\u4f8b\u5982 float32 \u6216 int64\uff09\u6307\u5b9a\u3002 \u5f53\u524d\u7684\u6df1\u5ea6\u5b66\u4e60 IR \u4ec5\u5728\u7f16\u8bd1\u65f6\u77e5\u9053\u5f20\u91cf\u5f62\u72b6\u7684\u6240\u6709\u7ef4\u5ea6\u65f6\u624d\u652f\u6301\u4ee3\u7801\u751f\u6210\uff0c\u5373\u9759\u6001\u5f62\u72b6\u5bf9\u4e8e\u7c7b\u578b\u63a8\u65ad\u548c\u68c0\u67e5\u662f\u5f3a\u5236\u6027\u7684\u3002</p> <p>\u5728\u52a8\u6001\u6a21\u578b\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u8bb8\u591a\u6570\u636e\u5f62\u72b6\u53ea\u80fd\u5728\u8fd0\u884c\u65f6\u786e\u5b9a\u3002 \u4e3a\u4e86\u652f\u6301\u52a8\u6001\u6570\u636e\u5f62\u72b6\uff0cNimble \u5f15\u5165\u4e86\u4e00\u4e2a\u540d\u4e3a <code>Any</code> \u7684\u7279\u6b8a\u7ef4\u5ea6\u6765\u8868\u793a\u9759\u6001\u672a\u77e5\u7ef4\u5ea6\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5f20\u91cf\u7c7b\u578b\u8868\u793a\u4e3a <code>Tensor[(1, 10, Any), float32]</code>\uff0c\u5176\u4e2d\u8be5\u5f20\u91cf\u4e2d\u7b2c\u4e09\u7ef4\u7684\u5927\u5c0f\u672a\u77e5\uff0c\u800c\u5176\u4ed6\u4e24\u4e2a\u7ef4\u5ea6\u5177\u6709\u5177\u4f53\u503c\u3002 JANUS (Jeong \u7b49\u4eba\uff0c2019) \u4f7f\u7528\u7c7b\u4f3c\u7684\u8868\u793a\u6cd5\u6765\u8868\u793a\u52a8\u6001\u7ef4\u5ea6\uff0c\u4f46\u4ec5\u7528\u4e8e\u7c7b\u578b\u7edf\u4e00\uff0c\u800c Nimble \u6269\u5c55\u7c7b\u578b\u63a8\u65ad\u4ee5\u5904\u7406 <code>Any</code>\uff0c\u5982\u4e0b\u6240\u8ff0:</p> <p>Operator Type Relation \u7c7b\u578b\u5173\u7cfb\u63cf\u8ff0\u7b97\u5b50\u8f93\u5165\u548c\u8f93\u51fa\u7c7b\u578b\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 TVM \u7684\u7c7b\u578b\u7cfb\u7edf\u4f9d\u8d56\u4e8e\u7c7b\u578b\u5173\u7cfb(Relay\u7684\u8bba\u6587\u4e2d\u6709\u66f4\u8be6\u7ec6\u7684\u4f8b\u5b50) \u6765\u63a8\u65ad\u548c\u53cc\u5411\u4f20\u64ad\u6574\u4e2a\u7f51\u7edc\u4e2d\u7b97\u5b50\u7684\u8f93\u5165\u548c\u8f93\u51fa\u4e4b\u95f4\u7684\u7c7b\u578b\u548c\u5f62\u72b6\u5173\u7cfb\u3002</p> <p>\u5fc5\u987b\u6cdb\u5316\u7c7b\u578b\u5173\u7cfb\u624d\u80fd\u6b63\u786e\u5904\u7406\u52a8\u6001\u5f62\u72b6\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6ca1\u6709\u9002\u5f53\u7684\u7c7b\u578b\u7cfb\u7edf\u652f\u6301\uff0c\u4e00\u4e2a\u5728\u6bcf\u6b21\u5faa\u73af\u8fed\u4ee3\u4e2d\u6539\u53d8 tensor\u5f62\u72b6 \u7684\u7a0b\u5e8f\uff08\u8bb8\u591a NLP \u6a21\u578b\u7684\u89e3\u7801\u5668\u4e2d\u90fd\u5b58\u5728\u8fd9\u79cd\u60c5\u51b5\uff09\u662f\u4e0d\u53ef\u80fd\u8fdb\u884c\u7c7b\u578b\u5316\u548c\u7f16\u8bd1\u7684\u3002 \u901a\u8fc7 Any \u7684\u5f15\u5165\uff0c\u6211\u4eec\u80fd\u591f\u6539\u8fdb\u73b0\u6709\u7684\u7c7b\u578b\u5173\u7cfb\u4ee5\u652f\u6301\u52a8\u6001\u6a21\u578b\u3002</p> <p>\u8fd9\u91cc\u6709\u4e24\u79cd\u52a8\u6001\u7c7b\u578b\u5173\u7cfb\u7684\u7279\u5b9a\u60c5\u51b5\uff1a \u7b2c\u4e00\u79cd\u662f \u8f93\u51fa shape \u53d6\u51b3\u4e8e \u8f93\u5165 tensor \u7684\u7b97\u5b50\uff0c\u4f8b\u5982 <code>arange</code> \u548c <code>unique</code> \uff0c \u5c06\u4f7f\u7528 Any \u6765\u63cf\u8ff0\u8fd9\u4e9b\u5f62\u72b6\u3002  \u53e6\u4e00\u79cd\u662f\uff0c\u5f53\u8f93\u5165\u5f62\u72b6\u5305\u542b Any \u7ef4\u5ea6\u65f6\uff0c\u7c7b\u578b\u5173\u7cfb\u9700\u8981\u5c06 Any \u6b63\u786e\u5730\u4f20\u64ad\u5230\u8f93\u51fa\u7c7b\u578b\uff0c\u5e76\u5728\u5fc5\u8981\u65f6\u653e\u5bbd\u9759\u6001\u60c5\u51b5\u4e0b\u7684\u7c7b\u578b\u7ea6\u675f\u3002 \u4f8b\u5982\uff0c\u5177\u6709 Any \u7684\u4e24\u4e2a\u7ef4\u5ea6\u4e4b\u95f4\u7684 broadcast \u7c7b\u578b\u5173\u7cfb(\u5728\u672c\u4f8b\u5b50\u4e2d\u5373 \u8f93\u5165tensor shape \u548c\u8f93\u51fa tensor shape)\u7684\u89c4\u5219\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u52a8\u6001\u5f62\u72b6\u7684\u5b58\u5728\uff0c\u8fd9\u4e9b\u7c7b\u578b\u5173\u7cfb\u89c4\u5219\u4e0d\u80fd\u518d\u6392\u9664\u7f16\u8bd1\u65f6\u7684\u6240\u6709\u7c7b\u578b\u9519\u8bef\u3002 \u4f8b\u5982\uff0c\u5bf9\u4e8e\u4e0a\u9762\u663e\u793a\u7684\u7b2c\u4e8c\u6761\u89c4\u5219\uff0c\u5f53 Any \u5728\u8fd0\u884c\u65f6\u65e2\u4e0d\u662f 1 \u4e5f\u4e0d\u662f d \u65f6\uff0c\u5b83\u5c31\u8fdd\u53cd\u4e86\u5e7f\u64ad\u7c7b\u578b\u7ea6\u675f\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u91c7\u7528\u6e10\u8fdb\u5f0f\u7c7b\u578b\uff08Siek &amp; Taha\uff0c2006\uff09\u65b9\u6cd5\uff0c\u5e76\u5728 Any \u88ab\u5177\u4f53\u503c\u5b9e\u4f8b\u5316\u540e\u5728\u8fd0\u884c\u65f6\u4fdd\u7559\u67d0\u4e9b\u7c7b\u578b\u68c0\u67e5\uff08\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u89c1\u7b2c 3.2 \u8282\uff09\u3002 \u53ef\u4ee5\u4f7f\u7528\u66f4 advanced \u7684\u7c7b\u578b\u7cfb\u7edf\u6765\u6d88\u9664\u8fd9\u4e9b\u9519\u8bef\uff0c\u4f46\u4f1a\u589e\u52a0\u590d\u6742\u6027\u3002</p> <p>Type Inference <code>Any</code> \u7ef4\u5ea6\u7684\u4e00\u4e2a\u8b66\u544a\u662f\u672a\u77e5\u7ef4\u5ea6\u5c06\u5728\u7c7b\u578b\u63a8\u65ad\u671f\u95f4\u4f20\u64ad\uff0c\u4ece\u800c\u51cf\u5c11\u5f62\u72b6\u7279\u5316\u7684\u673a\u4f1a\u3002 \u4e3a\u4e86\u9650\u5236\u4f7f\u7528 Any \u7ef4\u5ea6\u5f15\u5165\u7684\u7cbe\u5ea6\u635f\u5931\uff0c\u6211\u4eec\u5728\u7c7b\u578b\u7cfb\u7edf\u4e2d\u5f15\u5165\u4e86 \u5b50\u7c7b\u578b sub-shaping \u3002 \u4e0e\u6d41\u884c\u7f16\u7a0b\u8bed\u8a00\u4e2d\u4f7f\u7528\u7684\u5b50\u7c7b\u578b\u975e\u5e38\u76f8\u4f3c (Liskov &amp; Wing, 1994; Amadio &amp; Cardelli, 1993)\uff0c\u6211\u4eec\u7684\u7c7b\u578b\u7cfb\u7edf\u6269\u5c55 \u4f7f\u5177\u6709\u5177\u4f53\u7ef4\u5ea6\u7684\u503c\u6210\u4e3a\u5177\u6709\u52a8\u6001\u7ef4\u5ea6\u7684\u5f20\u91cf\u7c7b\u578b\u7684\u6709\u6548\u5b50\u7c7b\u578b \u3002 \u4f8b\u5982 <code>Tensor[(128, 128), f32]</code> \u662f <code>Tensor[(any, 128), f32]</code> \u7684\u6709\u6548\u5b50\u7c7b\u578b\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u4f7f\u7528\u7a0b\u5e8f\u5206\u6790\u6765\u68c0\u6d4b\u548c\u5220\u9664\u4e0d\u5fc5\u8981\u7684\u52a8\u6001\uff0c\u901a\u8fc7\u4f20\u8fbe\u53ef\u7528\u4e8e\u4e0b\u6e38\u7f16\u8bd1\u7684\u989d\u5916\u5f62\u72b6\u4fe1\u606f\u3002 \u6211\u4eec\u5728\u4e24\u4e2a\u5173\u952e\u70b9\u4e0a\u8fd9\u6837\u505a\uff1a\u9996\u5148\uff0c\u6211\u4eec\u4f7f\u7528\u4e8c\u6b21\u5f62\u72b6\u5206\u6790\u7528\u9759\u6001\u5c3a\u5bf8\u6539\u8fdb\u4efb\u4f55\u9519\u8bef\u7684\u52a8\u6001\u5c3a\u5bf8\uff1b \u5176\u6b21\uff0c\u5728 codegen \u4e2d\uff0c \u6211\u4eec\u4f7f\u7528\u5355\u4e2a\u53d8\u91cf\u7ef4\u5ea6\u4f5c\u4e3a\u7b49\u6548\u7684\u52a8\u6001\u7ef4\u5ea6\u3002</p>"},{"location":"mlc/paper-nimble.html#32-shape-function","title":"3.2. Shape Function","text":"<p>Any \u7ef4\u5ea6\u7684\u5f15\u5165\u4f7f\u5f97\u73b0\u6709 DLC \u91c7\u7528\u7684\u9884\u5206\u914d\u673a\u5236\u5931\u6548\u3002 \u73b0\u5728\u6211\u4eec\u73b0\u5728\u5fc5\u987b\u5728\u8ba1\u7b97\u7684\u540c\u65f6\u8ddf\u8e2a\u9700\u8981\u5206\u914d\u7684\u5185\u5b58\u3002 \u6b64\u5916\uff0c\u7531\u4e8e\u52a8\u6001\u5f20\u91cf\u5f62\u72b6\u7684\u5f15\u5165\uff0c\u9759\u6001\u7c7b\u578b\u68c0\u67e5\u73b0\u5728\u65e0\u6cd5\u6d88\u9664\u7f16\u8bd1\u65f6\u7684\u6240\u6709\u7c7b\u578b\u9519\u8bef\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5f62\u72b6\u51fd\u6570 shape function \u6765\u8ba1\u7b97\u5b58\u50a8\u5206\u914d\u7684\u8f93\u51fa\u5f62\u72b6\uff0c\u5e76\u6839\u636e\u6bcf\u4e2a\u7b97\u5b50\u7684\u8bed\u4e49\u9a8c\u8bc1\u7c7b\u578b\u5173\u7cfb\u3002 \u5f62\u72b6\u51fd\u6570\u5728\u7ed3\u6784\u4e0a\u7c7b\u4f3c\u4e8e 3.1 \u8282\u4e2d\u63cf\u8ff0\u7684\u7c7b\u578b\u5173\u7cfb\uff0c\u4f46\u5b58\u5728\u4e8e\u8fd0\u884c\u65f6\u800c\u4e0d\u662f\u7f16\u8bd1\u65f6\u3002 \u5b83\u652f\u6301\u7f16\u8bd1\u8f93\u51fa\u5f62\u72b6\u7684\u8ba1\u7b97\u5e76\u5c06\u5176\u5d4c\u5165\u5230\u7a0b\u5e8f\u4e2d\u3002</p> <p>\u6839\u636e\u7b97\u5b50\u7684\u7279\u70b9\uff0c\u6211\u4eec\u5c06\u5f62\u72b6\u51fd\u6570\u5206\u4e3a\u4e09\u79cd\u4e0d\u540c\u7684\u6a21\u5f0f\uff1a\u6570\u636e\u72ec\u7acb\u3001\u6570\u636e\u76f8\u5173\u548c\u4e0a\u754c\u3002 </p> <ol> <li>Data independent \u5f62\u72b6\u51fd\u6570\u7528\u4e8e\u8f93\u51fa\u5f62\u72b6\u4ec5\u53d6\u51b3\u4e8e\u8f93\u5165\u5f62\u72b6\u7684\u7b97\u5b50\uff0c\u4f8b\u5982\u666e\u901a\u4e8c\u7ef4\u5377\u79ef\u3002 </li> <li>Data dependent \u5f62\u72b6\u51fd\u6570\u9700\u8981\u5177\u4f53\u7684\u8f93\u5165\u503c\u6765\u8ba1\u7b97\u8f93\u51fa\u5f62\u72b6\u3002 \u4f8b\u5982\uff0carange \u7684\u8f93\u51fa\u5f62\u72b6\u53d6\u51b3\u4e8e start\u3001stop \u548c step \u7684\u503c\u3002 </li> <li>\u6b64\u5916\uff0c\u8fd8\u6709\u67d0\u4e9b\u7b97\u5b50\uff0c\u4f8b\u5982 Non Maximum Suppression (nms)\uff0c\u8ba1\u7b97\u8f93\u51fa\u5f62\u72b6\u7684\u590d\u6742\u6027\u4e0e\u6267\u884c\u7b97\u5b50\u672c\u8eab\u7684\u590d\u6742\u6027\u76f8\u5f53\u3002 \u4e3a\u4e86\u907f\u514d\u5197\u4f59\u8ba1\u7b97\uff0c\u6211\u4eec\u4f7f\u7528 upper bound \u5f62\u72b6\u51fd\u6570\u6765\u5feb\u901f\u4f30\u8ba1\u8f93\u51fa\u7684\u4e0a\u9650\u5f62\u72b6\u3002 \u6211\u4eec\u8981\u6c42\u6b64\u7c7b\u7b97\u5b50\u5c06\u8f93\u51fa\u5f62\u72b6\u4e0e\u8f93\u51fa\u503c\u4e00\u8d77\u8fd4\u56de\uff0c \u4ee5\u4fbf\u4e3a\u8f93\u51fa\u5f20\u91cf\u786e\u5b9a\u8f93\u51fa\u5f62\u72b6\u548c\u5185\u5b58\u5e03\u5c40\u3002</li> </ol> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728\u5b58\u5728\u52a8\u6001\u5f62\u72b6\u51fd\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u7279\u522b\u6ce8\u610f\u7b97\u5b50\u878d\u5408\u3002 \u7b97\u5b50\u878d\u5408\u51cf\u5c11\u4e86\u4e0d\u5fc5\u8981\u7684\u5185\u5b58\u526f\u672c\u5e76\u6539\u5584\u4e86\u7f13\u5b58\u5c40\u90e8\u6027\uff0c\u662f\u6027\u80fd\u4f18\u5316\u7684\u5173\u952e\u6280\u672f\u3002 \u5f53\u6240\u6709\u5f62\u72b6\u51fd\u6570\u90fd Data independent \u65f6\uff0c\u7f16\u8bd1\u5668\u53ef\u4ee5\u5c06\u57fa\u672c\u7b97\u5b50\u7684\u5f62\u72b6\u51fd\u6570\u8fde\u8d77\u6765\u5f62\u6210\u590d\u5408\u7b97\u5b50\u7684\u5f62\u72b6\u51fd\u6570\u3002 \u7136\u800c\uff0c\u5177\u6709\u6570\u636e\u4f9d\u8d56\u6216\u4e0a\u9650\u5f62\u72b6\u51fd\u6570\u7684\u57fa\u672c\u7b97\u5b50\u4e0d\u80fd\u4e0e\u5176\u4ed6\u7b97\u5b50\u878d\u5408\uff0c\u5373\uff0c\u5c06\u5176\u4ed6\u7b97\u5b50\u7684\u8f93\u51fa\u4f5c\u4e3a\u5176\u8f93\u5165\u878d\u5408\u5728\u4e00\u8d77\uff0c\u56e0\u4e3a\u5f62\u72b6\u51fd\u6570\u9700\u8981\u8bbf\u95ee\u590d\u5408\u4e2d\u7684\u4e2d\u95f4\u7ed3\u679c\u7b97\u5b50\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u660e\u786e\u5b9a\u4e49\u4e86\u878d\u5408\u7b56\u7565\u4ee5\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u3002</p> <p>note</p> <p>\u4e3a\u4e86\u5f15\u5165\u52a8\u6001\u5f62\u72b6\u9700\u8981\u6539\u52a8\u7684\u5730\u65b9\u539f\u6765\u6709\u8fd9\u4e48\u591a\u3002\u4e0d\u4ec5\u8981\u5f15\u5165\u8fd0\u884c\u65f6\u7c7b\u578b\u68c0\u67e5\uff0c\u7c7b\u578b\uff08\u5f62\u72b6\uff09\u63a8\u65ad\uff0c\u8fd8\u8981\u5f15\u5165\u76f8\u5e94\u7684\u52a8\u6001\u5185\u5b58\u5206\u914d\u673a\u5236\uff0c\u751a\u81f3\u7b97\u5b50\u878d\u5408\u7b56\u7565\u90fd\u8981\u56e0\u4e3a\u52a8\u6001\u7684\u5f15\u5165\u800c\u53d7\u5230\u9650\u5236\u3002\u6709\u4e00\u4e24\u4e2a\u4f8b\u5b50\u8868\u793a\u5177\u4f53\u5982\u4f55\u505a\u5417\uff08\u6bd4\u65b9\u8bf4\u54ea\u4e9b\u7b97\u5b50\u878d\u5408\u7b56\u7565\u4f1a\u53d7\u5230\u5177\u4f53\u600e\u4e48\u6837\u7684\u9650\u5236\uff09\uff1f</p>"},{"location":"mlc/paper-nimble.html#33-memory-planning","title":"3.3. Memory Planning","text":"<p>\u8bb8\u591a DLC \u4f7f\u7528\u9759\u6001\u5185\u5b58\u89c4\u5212\u5f62\u5f0f\uff0c\u5c06\u5185\u5b58\u5408\u5e76\u4e3a\u8fde\u7eed\u7684\u5757\u5e76\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u5206\u914d\u3002 \u5bf9\u4e8e GPU \u7b49\u8bbe\u5907\uff0c\u8fd9\u4e9b\u4f18\u5316\u5bf9\u4e8e\u51cf\u5c11\u5185\u5b58\u788e\u7247\u548c\u786e\u4fdd\u5206\u914d\u4e0d\u4f1a\u5f71\u54cd\u5185\u6838\u6027\u80fd\u81f3\u5173\u91cd\u8981\u3002 \u73b0\u6709\u7684 DLC IR \u5c06\u5185\u5b58\u5206\u914d\u9690\u85cf\u5728 \u51fd\u6570\u5f0f \u63a5\u53e3\u540e\u9762\uff0c\u6bcf\u4e2a\u7b97\u5b50\u90fd\u5728\u5176\u4e2d\u9690\u5f0f\u5206\u914d\u5176\u8f93\u51fa\u5b58\u50a8\u3002 \u5728\u6267\u884c\u524d\uff0c\u7cfb\u7edf\u4f1a\u5728\u6570\u636e\u6d41\u56fe\u4e0a\u6267\u884c\u9759\u6001\u5185\u5b58\u89c4\u5212\uff0c\u4ece\u800c\u5b9e\u73b0\u8f93\u51fa\u7f13\u51b2\u533a\u7684\u9ad8\u6548\u9884\u5206\u914d\u3002 \u7531\u4e8e\u5185\u5b58\u5206\u914d\u7684\u8fd9\u79cd \"out-of-band\" \u7684\u6027\u8d28\uff0c\u81ea\u5b9a\u4e49\u3001\u4fee\u6539\u6216\u4e0e\u5176\u4ed6 pass \u7ec4\u5408\u5185\u5b58\u4f18\u5316\u5177\u6709\u6311\u6218\u6027\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u9700\u8981\u4e3a\u5f02\u6784\u6267\u884c\u8c03\u6574\u5185\u5b58\u5206\u914d\uff0c\u5219\u9700\u8981\u5bf9\u8fd0\u884c\u65f6\u8fdb\u884c\u4fee\u6539\u3002 TVM \u7684 <code>graph_executor</code> \u5c31\u662f\u9759\u6001\u5185\u5b58\u89c4\u5212\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002 \u7531\u4e8e\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u7684\u7c97\u7c92\u5ea6\u5185\u5b58\u8bed\u4e49\uff0c\u4e0e\u4f20\u7edf\u7684\u7f16\u8bd1\u5668\u4e0d\u540c\uff0c\u5185\u5b58\u4f18\u5316\u5fc5\u987b\u5728\u9002\u5f53\u7684\u9ad8\u62bd\u8c61\u7ea7\u522b\u8fdb\u884c\u3002 \u73b0\u6709\u5de5\u4f5c\u6ca1\u6709\u63d0\u4f9b\u5bf9\u52a8\u6001\u5185\u5b58\u5206\u914d\u6267\u884c\u9759\u6001\u4f18\u5316\u7684\u660e\u786e\u9014\u5f84\u3002</p> <p>\u4e3a\u4e86\u6267\u884c\u6211\u4eec\u6240\u8bf4\u7684\u201c\u52a8\u6001\u5185\u5b58\u89c4\u5212\u201d\uff0c\u6211\u4eec\u6269\u5c55\u4e86 TVM \u4ee5\u5c06\u5176 IR \u4e0e\u9690\u5f0f\u5185\u5b58\u5206\u914d\u8f6c\u6362\u4e3a \u5177\u6709\u663e\u5f0f\u7f13\u51b2\u533a\u5206\u914d\u548c\u64cd\u4f5c\u7684 IR\u3002 \u6b64\u8f6c\u6362\u7684\u5173\u952e\u662f\u51fd\u6570\u8c03\u7528\u7ea6\u5b9a\u7684\u66f4\u6539\uff1a \u6bcf\u4e2a\u7b97\u5b50\u73b0\u5728\u90fd\u660e\u786e\u5730\u83b7\u53d6\u5176\u8f93\u51fa\u3002 \u8fd9\u4e2a\u8f6c\u6362\u4f7f\u5f97\u8ddf\u8e2a\u548c\u4f18\u5316 IR \u4e2d\u7684\u52a8\u6001\u5185\u5b58\u5206\u914d\u6210\u4e3a\u53ef\u80fd\u3002 \u4e3a\u4e86\u6267\u884c\u6b64\u4f18\u5316\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u56db\u4e2a\u65b0\u7684 IR \u6784\u9020: 1. <code>invoke_mut(op, inputs, outputs)</code> \u5c06\u8f93\u51fa\u4f5c\u4e3a\u53ef\u53d8\u8f93\u5165\u8f93\u51fa\u53c2\u6570 2. <code>alloc_storage(size, alignment, device)</code> \u5206\u914d\u7279\u5b9a\u5927\u5c0f\u7684\u5185\u5b58\u533a\u57df 3. <code>alloc_tensor(storage, offset, shape, dtype, attrs)</code> \u5728\u7279\u5b9a\u7684\u5b58\u50a8\u504f\u79fb\u5904\u5206\u914d\u4e00\u4e2a\u5177\u6709\u5f62\u72b6\u548c\u6570\u636e\u7c7b\u578b\u7684\u5f20\u91cf 4. <code>kill(tensor)</code> \u5728\u5b83\u7684\u5f15\u7528\u8ba1\u6570\u5f52\u96f6\u4e4b\u524d\uff0c \u63d0\u524d\u91ca\u653e\u4e00\u4e2a\u5f20\u91cf</p> <p>\u6211\u4eec\u901a\u8fc7\u8f6c\u6362\u5355\u4e2a\u9759\u6001\u5f62\u72b6\u64cd\u4f5c\uff08\u4f8b\u5982\u5e7f\u64ad\u52a0\u6cd5\uff09\u7684\u793a\u4f8b\u6765\u8bf4\u660e\u8fd9\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002 \u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c<code>Tensor&lt;d1, ..., dn&gt;</code> \u662f\u5f62\u72b6\u4e3a <code>(d1, ..., dn)</code> \u7684\u5305\u542b\u6d6e\u70b9\u503c\u7684\u5f20\u91cf\u7684\u7b80\u5199\u3002</p> <p>\u8be5\u4ee3\u7801\u5c06 <code>add</code> \u8f6c\u6362\u4e3a\u4ee5\u4e0b\u52a8\u4f5c\uff1a \u9996\u5148\u4ece\u504f\u79fb\u91cf\u4e3a\u96f6\u7684\u540e\u5907\u5b58\u50a8\u4e2d\u5206\u914d\u4e00\u4e2a\u8f93\u51fa\u5f20\u91cf\uff0c\u7136\u540e\u8c03\u7528 <code>invoke_mut</code>\u3002 \u51fa\u4e8e\u7a7a\u95f4\u539f\u56e0\uff0c\u6211\u4eec\u5728\u9644\u5f55 A \u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u793a\u4f8b\uff0c\u5b83\u8bf4\u660e\u4e86\u5f53\u7b97\u5b50\u5177\u6709\u52a8\u6001\u6574\u5f62\u8f93\u5165\u65f6\u5982\u4f55\u5904\u7406\u5185\u5b58\u5206\u914d\u3002 \u5173\u952e\u7684\u89c1\u89e3\u662f\u5c06\u5185\u5b58\u5206\u914d\u7684\u6982\u5ff5\u5185\u5316\u5230 IR \u4e2d\uff0c\u4ece\u800c\u5728\u5b58\u5728 control \u548c\u52a8\u6001\u5f62\u72b6\u7684\u60c5\u51b5\u4e0b\u5b9e\u73b0\u9759\u6001\u548c\u52a8\u6001\u5206\u914d\u7684\u9759\u6001\u4f18\u5316\u3002 \u73b0\u5728\u6240\u6709\u5206\u914d\u5728 IR \u4e2d\u90fd\u662f\u663e\u5f0f\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u52a8\u6001\u7a0b\u5e8f\u7684\u9759\u6001\u60c5\u51b5\u4e0b\u63d0\u4f9b\u7c7b\u4f3c\u7684\u4f18\u5316\uff0c\u4f8b\u5982\u6211\u4eec\u5df2\u7ecf\u5b9e\u73b0\u4e86\u5b58\u50a8\u5408\u5e76 pass \u4ee5\u5c06\u5b58\u50a8\u5206\u7ec4\u5230\u4e00\u4e2a\u66f4\u5927\u7684\u533a\u57df\uff0c\u8fd9\u5141\u8bb8\u5c06\u591a\u4e2a\u5f20\u91cf\u5206\u914d\u590d\u7528\u5230\u5355\u5757\u5b58\u50a8\u3002 \u53ef\u4ee5\u4f7f\u7528\u5982 liveness analysis and graph coloring algorithm \u7b49\u66f4\u8fdb\u4e00\u6b65\u7684\u4f18\u5316\u7b97\u6cd5\u4ee5\u91cd\u7528\u5b58\u50a8\u3002</p> <p>\u7591\u95ee</p> <p>\u56fe\u7740\u8272\u7b97\u6cd5\u5728\u8fd9\u91cc\u7684\u5e94\u7528\uff1f</p>"},{"location":"mlc/paper-nimble.html#34-heterogeneous-device-placement","title":"3.4. Heterogeneous Device Placement","text":"<p>\u5982 3.2 \u8282\u6240\u8ff0\uff0c\u5f62\u72b6\u51fd\u6570\u5728\u8fd0\u884c\u65f6\u6267\u884c\u4ee5\u8ba1\u7b97\u7b97\u5b50\u7684\u8f93\u51fa\u5f62\u72b6\u3002 \u8fd9\u4e9b\u51fd\u6570\u5e94\u8be5\u5728 CPU \u4e0a\u6267\u884c\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u8f93\u51fa\u7528\u4e8e\u8ba1\u7b97\u5206\u914d\u5185\u5b58\u7684\u5927\u5c0f\u3002 \u5728\u5f02\u6784\u6267\u884c\u7684\u60c5\u51b5\u4e0b\uff08\u5373 CPU \u548c GPU\uff09\uff0c\u5fc5\u987b\u5c0f\u5fc3\u5730\u5c06 IR \u8282\u70b9\u7684\u6267\u884c\u653e\u7f6e\u5230\u9002\u5f53\u7684\u8bbe\u5907\u4e0a\u3002 \u5426\u5219\uff0c\u5982\u679c\u5f62\u72b6\u51fd\u6570\u548c\u5185\u6838\u7684\u8f93\u5165\u9700\u8981\u4ece GPU \u590d\u5236\u6216\u590d\u5236\u5230 GPU\uff0c\u5219\u6570\u636e\u4f20\u8f93\u548c\u8bbe\u5907\u540c\u6b65\u7684\u5927\u91cf\u5f00\u9500\u5c06\u4f1a\u53d1\u751f\u3002 \u4e3a\u4e86\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u6027\u80fd\u635f\u5931\uff0c\u6211\u4eec\u5206\u6790\u7a0b\u5e8f\u4ee5\u5c06\u5b50\u8868\u8fbe\u5f0f\u653e\u7f6e\u5728\u6700\u5408\u9002\u7684\u8bbe\u5907\u4e0a\u3002</p> <p>\u6211\u4eec\u5f15\u5165\u4e86 a unification based analysis \uff0c \u7528\u4e8e\u6839\u636e\u5148\u524d\u7684\u8ba1\u7b97\u5185\u6838\u8c03\u5ea6\u8ba1\u7b97\u6b63\u786e\u7684\u8bbe\u5907\u653e\u7f6e\u548c\u5206\u914d\u3002 \u6211\u4eec\u8bbe\u5907\u5206\u6790\u7684\u76ee\u6807\u662f\u6b63\u786e\u5206\u914d\u6bcf\u4e2a IR \u8282\u70b9\uff0c\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u8de8\u8bbe\u5907 copy \u7684\u6570\u91cf\u3002 \u6211\u4eec\u5f15\u5165 <code>DeviceDomain</code> \u7684\u6982\u5ff5\u6765\u8868\u793a\u8bbe\u5907\u7684\u57df\uff0c \u5305\u62ec\u6e90\u548c\u76ee\u6807\u3002 IR \u4e2d\u7684\u6bcf\u4e2a\u8868\u8fbe\u5f0f\u9ed8\u8ba4\u4e3a\u7a7a\u57df\uff0c\u8fd9\u610f\u5473\u7740\u5bf9\u5176\u8bbe\u5907\u653e\u7f6e\u6ca1\u6709\u9650\u5236\u3002 \u6b64\u5916\uff0c\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684 IR \u7ed3\u6784 <code>device_copy</code> \u4ee5\u4fc3\u8fdb Nimble \u8fd0\u884c\u65f6\u7684\u5f02\u6784\u6267\u884c\u3002 \u5b83\u4ee3\u8868\u4e0d\u540c\u8bbe\u5907\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\uff0c\u5e76\u5728\u5f3a\u5236\u6267\u884c\u8de8\u8bbe\u5907\u6570\u636e\u590d\u5236\u65f6\u63d2\u5165\u3002 \u6211\u4eec\u7684\u5206\u6790\u88ab\u5236\u5b9a\u4e3a\u4e00\u7ec4\u63cf\u8ff0\u8bbe\u5907\u7ea6\u675f\u5982\u4f55\u6d41\u52a8\u7684\u8bbe\u5907\u653e\u7f6e\u89c4\u5219(\u5b8c\u6574\u7684\u89c4\u5219\u96c6\u53ef\u4ee5\u5728\u9644\u5f55 B \u4e2d\u627e\u5230)\uff0c\u7136\u540e\u6211\u4eec\u4f7f\u7528 unification \uff08\u4e00\u79cd\u7c7b\u578b\u63a8\u65ad\u548c\u7f16\u8bd1\u5668\u4e2d\u5e38\u89c1\u7684\u6280\u672f\uff09\u6765\u8ba1\u7b97\u7cbe\u786e\u7684\u8bbe\u5907\u653e\u7f6e\u3002 \u56fe 2 \u63cf\u8ff0\u4e86\u5206\u914d\u548c\u4f20\u64ad\u8bbe\u5907\u7c7b\u578b\u7684\u89c4\u5219\u7684\u4e00\u4e9b\u8981\u70b9:</p> <ol> <li>shape function \u7684\u8f93\u5165\u548c\u8f93\u51fa\u90fd\u5206\u914d\u7ed9 CPU</li> <li><code>device_copy</code> \u7684\u8f93\u51fa\u5206\u914d\u7ed9\u590d\u5236\u5230\u7684\u8bbe\u5907</li> <li><code>invoke_mut</code> \u7684\u6240\u6709\u53c2\u6570\u90fd\u5e94\u8be5\u6709\u76f8\u540c\u7684\u8bbe\u5907\u57df</li> </ol> <p>\u57fa\u4e8e\u8fd9\u4e9b\u89c4\u5219\uff0c\u6211\u4eec\u4f7f\u7528 \u5e76\u67e5\u96c6 \u6765\u53cc\u5411\u4f20\u64ad\u548c\u7edf\u4e00\u6bcf\u4e2a IR \u8282\u70b9\u7684\u8bbe\u5907\u653e\u7f6e\u3002 \u6211\u4eec\u5f15\u5165 <code>union(s, t)</code> \u548c <code>find(s)</code> \u4e24\u4e2a\u64cd\u4f5c\u6765\u5b9e\u73b0\u6574\u4e2a\u7a0b\u5e8f\u4e2d <code>DeviceDomain</code> \u7684\u7edf\u4e00\u3002 <code>union(s,t)</code> \u5f53\u8bbe\u5907\u7c7b\u578b\u5339\u914d\u65f6\uff0c\u5c06 s \u548c t \u7684\u7b49\u4ef7\u8bbe\u5907\u57df\u5408\u5e76\u4e3a\u4e00\u4e2a\u7b49\u4ef7\u57df\u3002 <code>find(s)</code> \u8fd4\u56de s \u6240\u5c5e\u8bbe\u5907\u57df\u7684\u4ee3\u8868\u3002 \u5e94\u7528\u8fd9\u4e24\u4e2a\u64cd\u4f5c\uff0c\u76f4\u5230\u6240\u6709 IR \u8282\u70b9\u90fd\u88ab annotated \u4e3a\u6b62\u3002 \u5982\u679c\u5bf9\u8bbe\u5907\u57df\u6ca1\u6709\u7ea6\u675f\uff0c\u6211\u4eec\u5c06 compilation target (i.e., GPU) \u5206\u914d\u7ed9\u5b83\u4ee5\u652f\u6301\u66f4\u597d\u7684\u5185\u6838\u6027\u80fd\u3002 \u5f02\u6784\u8bbe\u5907\u653e\u7f6e\u7684\u7ed3\u679c\u7531\u5185\u5b58\u89c4\u5212\u548c\u5f62\u72b6\u51fd\u6570\u63d2\u5165\u7ec4\u6210\uff0c\u4ece\u800c\u8fbe\u5230\u6b63\u786e\u5730\u653e\u7f6e\u5206\u914d\u3002</p>"},{"location":"mlc/paper-nimble.html#35-symbolic-codegen","title":"3.5. Symbolic Codegen","text":"<p>DLC \u5728\u591a\u4e2a\u5e73\u53f0\u4e0a\u5c55\u793a\u4e86\u4e0e\u624b\u52a8\u8c03\u6574\u5185\u6838\u76f8\u6bd4\u5177\u6709\u7ade\u4e89\u529b\u7684\u6027\u80fd\u3002 \u6700\u8fd1\u7684\u8d8b\u52bf\u662f\u5e94\u7528 ML-Based \u641c\u7d22\u6765\u8fdb\u4e00\u6b65\u51cf\u5c11\u6216\u6d88\u9664\u590d\u6742\u7684\u624b\u52a8\u6027\u80fd\u8c03\u6574\uff0c\u4f7f\u7528 template based\uff08Auto-TVM\uff0c2018b\uff1bFlexTensor\uff0c2020b\uff09\u6216 search based (Halide auto-tuner\uff0c2019\uff1b Ansor\uff0c2020a) \u65b9\u6cd5\u3002 \u7136\u800c\uff0c\u73b0\u6709\u5de5\u4f5c\u4e13\u6ce8\u4e8e\u9759\u6001\u5f62\u72b6\uff0c\u5728 \u7b26\u53f7 \u6216 \u52a8\u6001\u5f62\u72b6 \u65b9\u9762\u5b58\u5728\u4e0d\u8db3\u3002 \u5173\u4e8e\u7b26\u53f7\u5f62\u72b6\u7684\u4ee3\u7801\u751f\u6210\uff0c\u5b58\u5728\u4e24\u4e2a\u56fa\u6709\u7684\u6311\u6218\uff1a</p> <ul> <li>\u5728\u5e94\u7528\u76f8\u540c\u7684\u8c03\u5ea6\u65f6\uff0c\u5982\u4f55\u4f7f\u4f7f\u7528\u7b26\u53f7\u5f62\u72b6\u751f\u6210\u7684\u5185\u6838\u4e0e\u4f7f\u7528\u9759\u6001\u5f62\u72b6\u751f\u6210\u7684\u5185\u6838\u5177\u6709\u76f8\u540c\u7684\u6027\u80fd\uff1f</li> <li>\u5982\u4f55\u6269\u5c55\u57fa\u4e8e\u673a\u5668\u5b66\u4e60\u7684\u65b9\u6cd5\u6765\u8c03\u6574\u5177\u6709\u7b26\u53f7\u5f62\u72b6\u7684\u5185\u6838\uff1f</li> </ul> <p>\u5faa\u73af\u5e76\u884c\u548c\u5faa\u73af\u5206\u5757(tiling)\u662f\u5e38\u89c1\u7684\u4f18\u5316\u6280\u672f\uff0c\u5b83\u4eec\u901a\u8fc7\u5b9e\u73b0\u6570\u636e\u8bbf\u95ee\u6a21\u5f0f\u6765\u5229\u7528\u591a\u6838\u529f\u80fd\uff0c\u8fd9\u4e9b\u6a21\u5f0f\u5bf9 CPU \u548c GPU \u90fd\u5177\u6709\u5185\u5b58\u5c42\u6b21\u7ed3\u6784\u611f\u77e5\u80fd\u529b\u3002 \u7136\u800c\uff0c\u8fd9\u4e9b\u6280\u672f\u7684\u7ec4\u5408\u4f1a\u5bfc\u81f4\u590d\u6742\u7684 loop boundary conditions\u3002 \u5728\u9759\u6001\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e\u8fd9\u4e9b conditions \u59cb\u7ec8\u6210\u7acb\uff0c\u4ece\u800c\u6d88\u9664\u963b\u788d\u8fdb\u4e00\u6b65\u4f18\u5316\uff08\u5982 unrolling\uff09\u7684\u68c0\u67e5\u3002 \u4f46\u5728\u6267\u884c\u7b26\u53f7\u4ee3\u7801\u751f\u6210\u65f6\uff0c \u5982\u679c\u5904\u7406\u4e0d\u5f53\uff0c\u9650\u5236\u6761\u4ef6\uff08\u8fb9\u754c\uff09\u68c0\u67e5\u5c06\u4fdd\u7559\u4e0b\u6765\uff0c\u5bfc\u81f4\u6027\u80fd\u4e0d\u4f73\u3002</p> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u6839\u636e\u5e73\u94fa\u56e0\u5b50\u7684\u6b8b\u5dee\u6a21\u751f\u6210\u591a\u4e2a\u5185\u6838\uff0c\u7136\u540e\u5728\u8fd0\u884c\u65f6\u6839\u636e\u5b9e\u9645\u5f62\u72b6\u8fdb\u884c\u8c03\u5ea6\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u7b26\u53f7\u7ef4\u5ea6 \\(x\\) is tiled by a factor of 8\uff0c\u7136\u540e\u6211\u4eec\u5c06\u751f\u6210\u7684\u5185\u6838\u590d\u5236 8 \u6b21\uff0c\u5e76\u5728\u6bcf\u6b21\u590d\u5236\u4e2d\u5c06\u7b26\u53f7\u53d8\u91cf \\(x\\) \u66ff\u6362\u4e3a \\(8k+r\\)\uff0c\u5176\u4e2d \\(k = \\lfloor x/8\\rfloor\\) \uff0c \\(r \\in [0..7]\\) \u3002 \u901a\u8fc7\u5c06\u6b64\u6280\u672f\u4e0e\u589e\u5f3a\u7684\u7b26\u53f7\u8868\u8fbe\u5f0f\u7b80\u5316 Pass \u7ed3\u5408\u4f7f\u7528\uff0c\u6211\u4eec\u53ef\u4ee5\u6d88\u9664\u5927\u591a\u6570\u8fb9\u754c\u68c0\u67e5\uff0c \u4ee5\u5b9e\u73b0\u4e0e\u4f7f\u7528\u5355\u4e2a\u9759\u6001\u5f62\u72b6\u7f16\u8bd1\u7684\u5185\u6838\u51e0\u4e4e\u76f8\u540c\u7684\u6027\u80fd\u3002 \u6700\u540e\uff0c\u6211\u4eec\u81ea\u52a8\u751f\u6210\u4e00\u4e2a\u8c03\u5ea6\u51fd\u6570\uff0c\u6839\u636e\u6b8b\u5dee\u8c03\u7528\u76f8\u5e94\u7684\u5185\u6838\u3002 \u6b64\u5916\uff0c\u8c03\u5ea6\u529f\u80fd\u53ef\u4ee5\u6269\u5c55\u4e3a\u8c03\u7528\u7f16\u8bd1\u5668\u751f\u6210\u7684\u5185\u6838\u6216\u7b2c\u4e09\u65b9\u5e93\uff0c\u4ee5\u5206\u6790\u7ed3\u679c\u4e2d\u901f\u5ea6\u66f4\u5feb\u7684\u4e3a\u51c6\u3002 \u4e0e\u6574\u4f53\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u76f8\u6bd4\uff0c\u589e\u52a0\u7684\u5185\u6838\u5927\u5c0f\u76f8\u5bf9\u8f83\u5c0f\u3002 \u5728\u8d44\u6e90\u6781\u5176\u6709\u9650\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u751f\u6210\u6bd4\u5e73\u94fa\u56e0\u5b50\u66f4\u5c11\u7684\u5185\u6838\u6570\uff0c\u6216\u8005\u964d\u4f4e\u5e73\u94fa\u56e0\u5b50\u4ee5\u5728\u4ee3\u7801\u5927\u5c0f\u548c\u6027\u80fd\u4e4b\u95f4\u627e\u5230\u53ef\u63a5\u53d7\u7684\u6743\u8861\u3002</p> <p>\u57fa\u4e8e\u673a\u5668\u5b66\u4e60\u7684\u8c03\u4f18\u7684\u4e00\u4e2a\u5df2\u77e5\u95ee\u9898\u662f\u9700\u8981\u5f88\u957f\u65f6\u95f4\uff08\u901a\u5e38\u662f\u6570\u5c0f\u65f6\uff09\u624d\u80fd\u627e\u5230\u5355\u4e2a\u5185\u6838\u7684\u6700\u4f73\u8c03\u5ea6\u3002 </p> <p>note</p> <p>\u8fd9\u91cc\u540e\u7eed\u5de5\u4f5c\u6709 MSRA \u7684 ROLLER OSDI-2022 \u7b49\u3002</p> <p>\u5f53\u6d89\u53ca\u5230\u7b26\u53f7\u5f62\u72b6\u65f6\uff0c\u5982\u679c\u6211\u4eec\u7b80\u5355\u5730\u9488\u5bf9\u6bcf\u4e2a\u53ef\u80fd\u7684\u5f62\u72b6\u8fdb\u884c tuning\uff0c \u8c03\u6574\u65f6\u95f4\u53ef\u80fd\u4f1a\u6210\u500d\u589e\u52a0\u3002 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u6269\u5c55\u4e86\u7b26\u53f7\u5f62\u72b6\u7684\u57fa\u4e8e\u6a21\u677f\u7684\u8c03\u6574\u65b9\u6cd5\uff0c\u4f7f\u8c03\u6574\u65f6\u95f4\u4e0d\u90a3\u4e48\u957f\u3002 \u57fa\u4e8e\u6a21\u677f\u7684\u8c03\u4f18\u65b9\u6cd5\u91c7\u7528\u4eba\u5de5\u5b9a\u4e49\u7684\u4ee3\u7801\u6a21\u677f\u548c\u641c\u7d22\u7a7a\u95f4\uff0c \u5e76\u4f7f\u7528\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u5728\u641c\u7d22\u7a7a\u95f4\u5185\u641c\u7d22\u6700\u4f73\u914d\u7f6e\u3002 \u6211\u4eec\u89c2\u5bdf\u5230\uff0c \u4e00\u79cd\u5f62\u72b6\u7684\u826f\u597d\u914d\u7f6e\u901a\u5e38\u5728\u5176\u4ed6\u5f62\u72b6\u4e0a\u8868\u73b0\u826f\u597d\u3002 \u57fa\u4e8e\u8fd9\u4e00\u89c2\u5bdf\uff0c\u6211\u4eec\u8bbe\u8ba1\u4e86\u4ee5\u4e0b\u673a\u5236\u6765\u8c03\u6574\u5185\u6838\u7684\u7b26\u53f7\u5f62\u72b6\uff1a</p> <ol> <li>\u9996\u5148\u7528\u8db3\u591f\u5927\u7684\u503c\uff08\u4f8b\u598264\uff09\u66ff\u6362\u7b26\u53f7\u7ef4\u5ea6\uff0c\u4ee5\u4fbf\u641c\u7d22\u7a7a\u95f4\u53ef\u4ee5\u8986\u76d6\u5927\u591a\u6570\u53ef\u80fd\u6027\uff0c\u5e76\u5728\u9759\u6001\u5f62\u72b6\u4e0a\u8fd0\u884c\u8c03\u6574\u7b97\u6cd5\u8fdb\u884c\u8db3\u591f\u6b21\u6570\u7684\u8fed\u4ee3\u3002</li> <li>\u9009\u62e9\u524d k \u4e2a\u914d\u7f6e\uff0c\u5c06\u5b83\u4eec\u5e94\u7528\u4e8e\u5176\u4ed6\u5f62\u72b6\u7684\u9009\u62e9\uff0c\u5e76\u8bc4\u4f30\u5b83\u4eec\u7684\u6027\u80fd\u3002</li> <li>\u9009\u62e9\u5728\u5148\u524d\u8bc4\u4f30\u7684\u5f62\u72b6\u4e2d\u5e73\u5747\u8868\u73b0\u6700\u597d\u7684\u914d\u7f6e\u3002</li> </ol> <p>\u6839\u636e\u7ecf\u9a8c\uff0c\u6211\u4eec\u53d1\u73b0 k = 100 \u6db5\u76d6\u4e86\u5176\u4ed6\u5f62\u72b6\u7684\u5927\u90e8\u5206\u6700\u4f73\u914d\u7f6e\u3002 \u5f53\u524d\u6d41\u884c\u7684\u52a8\u6001\u6a21\u578b\u901a\u5e38\u53ea\u9700\u8981\u5177\u6709\u4e00\u4e2a\u7b26\u53f7\u53d8\u91cf\u7684\u5185\u6838\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5728\u5176\u4ed6\u5f62\u72b6\u7684\u4ea4\u53c9\u8bc4\u4f30\u4e2d\u9009\u62e9\u4e86\u81f3\u591a \\(2^{256}\\)\u3002 \u5982\u679c\u6709\u591a\u4e2a\u7b26\u53f7\u53d8\u91cf\uff0c\u5219\u53ef\u80fd\u9700\u8981\u4e00\u79cd\u66f4\u590d\u6742\u7684\u9009\u62e9\u65b9\u6cd5\u6765\u9650\u5236 \u6b65\u9aa4 2 \u7684\u8bc4\u4f30\u65f6\u95f4\u3002\u6211\u4eec\u5c06\u6b64\u7559\u7ed9\u672a\u6765\u7684\u5de5\u4f5c\u3002 \u6b64\u5916\uff0c\u5982\u679c\u5de5\u4f5c\u8d1f\u8f7d\u5206\u5e03\u5df2\u77e5\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 \u6b65\u9aa4 3 \u4e2d\u8c03\u6574\u5df2\u77e5\u5f62\u72b6\u7684\u6743\u91cd\u3002</p> <p>\u7591\u95ee</p> <p>\u8fd9\u51e0\u53e5\u6ca1\u770b\u61c2\uff1f</p>"},{"location":"mlc/paper-nimble.html#4-virtual-machine","title":"4. VIRTUAL MACHINE","text":"<p>\u73b0\u6709 DLC \u7684\u4f20\u7edf\u8fd0\u884c\u65f6 naively \u6309\u62d3\u6251\u987a\u5e8f\u9010\u4e2a\u6267\u884c\u6a21\u578b\u7b97\u5b50\uff0c\u8fd9\u4e0d\u9002\u7528\u4e8e\u6267\u884c\u52a8\u6001\u6a21\u578b\u7684\u7f16\u8bd1\u6a21\u5757\u3002 \u9700\u8981\u4e00\u4e2a\u66f4\u667a\u80fd\u3001\u66f4\u5f3a\u5927\u7684\u6267\u884c\u5f15\u64ce\u6765\u5904\u7406 \u63a7\u5236\u6d41 \u6267\u884c\u903b\u8f91\uff0c\u5e76\u76f8\u5e94\u5730\u8c03\u5ea6\u4e0d\u540c\u7684\u5185\u6838\u3002 \u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e9b\u76ee\u6807\u5e76\u53ef\u79fb\u690d\u5230\u4e0d\u540c\u7684\u5e73\u53f0\uff0c\u6211\u4eec\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u4e86\u4e00\u4e2a\u57fa\u4e8e\u865a\u62df\u673a (VM) \u7684\u8fd0\u884c\u65f6\u3002</p> <p>\u5728 Nimble \u4e2d\uff0c\u6211\u4eec\u5c06\u4e00\u4e2a\u52a8\u6001\u6a21\u578b\u7f16\u8bd1\u6210\u4e00\u4e2a VM \u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u4e0e\u5e73\u53f0\u65e0\u5173\u7684\u5b57\u8282\u7801 \u548c \u4e0e\u5e73\u53f0\u76f8\u5173\u7684\u5185\u6838\u4ee3\u7801\u3002 \u5b57\u8282\u7801\u7531\u4e00\u7cfb\u5217\u6307\u793a\u5185\u6838\u8c03\u7528\u987a\u5e8f\u548c\u63a7\u5236\u6d41\u6267\u884c\u903b\u8f91\u7684\u6307\u4ee4\u7ec4\u6210\u3002 \u8fd9\u79cd\u8bbe\u8ba1\u8865\u5145\u4e86\u4f20\u7edf\u8fd0\u884c\u65f6\u6267\u884c\u9ad8\u5ea6\u4f18\u5316\u5185\u6838\u4f46\u4e0d\u76f4\u63a5\u5904\u7406\u5185\u6838\u4e4b\u95f4\u7f16\u6392\u7684\u80fd\u529b\u3002</p> <p>VM \u6307\u4ee4\u96c6\u7684\u8bbe\u8ba1 is motivated by the simple observation that kernel execution dominates neural network execution time \u3002 \u5b83\u4e0e\u4f20\u7edf\u8bed\u8a00\u865a\u62df\u673a\u622a\u7136\u4e0d\u540c\uff0c\u4f20\u7edf\u8bed\u8a00\u865a\u62df\u673a\u5305\u542b\u8bb8\u591a\u6267\u884c\u5f88\u5c11\u5de5\u4f5c\u7684\u6307\u4ee4\uff0c\u5bfc\u81f4 profile \u51fa\u6765\u6bcf\u6761\u6307\u4ee4\u7684\u6267\u884c\u65f6\u95f4\u90fd\u5f88\u9ad8\u3002 \u800c\u6211\u4eec\u7684 ISA \u7531 CISC-style instructions \u6784\u6210\uff0c\u6bcf\u6761\u6307\u4ee4\u5bf9\u5e94\u4e8e\u5f20\u91cf\u4e0a\u7684\u539f\u59cb IR \u8868\u8fbe\u5f0f\uff0c\u4f8b\u5982\u5206\u914d\u548c\u5185\u6838\u8c03\u7528\uff0c \u8fd9\u53cd\u8fc7\u6765\u53ef\u80fd\u5bf9\u5e94\u4e8e\u6267\u884c\u591a\u4e2a \"\u4f4e\u7ea7\" \u64cd\u4f5c\u3002 \u4f8b\u5982\uff0c<code>LoadConst idx, $reg</code> \u5177\u6709\u591a\u79cd\u5bfb\u5740\u6a21\u5f0f\uff0c\u56e0\u4e3a\u5b83\u9996\u5148\u8bfb\u53d6 <code>idx</code>\uff0c\u7136\u540e\u5c06\u6570\u636e\u4ece \u5e38\u91cf\u6c60 \u52a0\u8f7d\u5230 <code>$reg</code>\u3002 \u5b8c\u6574\u7684\u6307\u4ee4\u96c6\u5217\u8868\u53ef\u4ee5\u5728\u9644\u5f55 C \u4e2d\u627e\u5230\u3002 \u6211\u4eec\u81ea\u7136\u5730\u9009\u62e9\u4e86\u57fa\u4e8e\u5bc4\u5b58\u5668\u7684\u865a\u62df\u673a\u8bbe\u8ba1\u4ee5\u83b7\u5f97\u7d27\u51d1\u7684\u5b57\u8282\u7801\uff0c\u4fbf\u4e8e\u7528\u6237\u9605\u8bfb\u548c\u4fee\u6539\u3002 \u6211\u4eec\u63d0\u4f9b\u4e86\u65e0\u9650\u7ec4\u865a\u62df\u5bc4\u5b58\u5668\u7684\u62bd\u8c61\uff0c\u56e0\u4e3a\u5b83\u663e\u8457\u7b80\u5316\u4e86\u4f18\u5316\u548c\u5206\u914d\uff08\u7c7b\u4f3c\u4e8e SSA\uff09\uff0c\u5e76\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u4e86\u5feb\u901f\u539f\u578b\u8bbe\u8ba1\u548c\u4fee\u6539\u7684\u6982\u5ff5\u969c\u788d\u3002</p> <p>\u6307\u4ee4\u4f7f\u7528\u5305\u542b\u64cd\u4f5c\u7801\u548c\u6570\u636e\u6709\u6548\u8d1f\u8f7d\u7684\u4f20\u7edf\u6807\u8bb0\u8054\u5408\u8868\u793a\u3002 \u8fd9\u79cd\u8868\u793a\u53ef\u4ee5\u5b9e\u73b0\u9ad8\u6548\u7684\u5e8f\u5217\u5316\u4ee5\u53ca\u6307\u4ee4\u89e3\u7801\u548c\u5206\u6d3e\u3002 \u7531\u4e8e\u5728\u6307\u4ee4\u4e2d\u5305\u542b\u53ef\u53d8\u5927\u5c0f\u7684\u64cd\u4f5c\u6570\uff08\u4f8b\u5982\u6570\u636e\u5f62\u72b6\uff09\uff0cNimble \u4f7f\u7528\u53ef\u53d8\u957f\u5ea6\u6307\u4ee4\u683c\u5f0f\u3002</p> <p>\u5728\u6211\u4eec\u4ece\u7f16\u8bd1\u9636\u6bb5\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u540e\uff0c\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u89e3\u91ca\u5668\u6765\u52a0\u8f7d\u5b83\u3002 \u5f53\u6267\u884c\u5f00\u59cb\u65f6\uff0c\u89e3\u91ca\u5668\u8fd0\u884c\u4e00\u4e2a\u8c03\u5ea6\u5faa\u73af\uff0c\u68c0\u67e5\u64cd\u4f5c\u7801\u5e76\u6267\u884c\u9002\u5f53\u7684\u903b\u8f91\uff0c\u7136\u540e\u91cd\u590d\u3002 \u7531\u4e8e\u6211\u4eec\u7684\u6307\u4ee4\u662f\u7c97\u7c92\u5ea6\u7684\uff08\u5373\uff0c\u5b83\u4eec\u53ef\u4ee5\u88ab\u89c6\u4e3a\u8d85\u7ea7\u6307\u4ee4\uff09\uff0c \u8c03\u5ea6\u5faa\u73af\u751f\u6210\u7684\u5206\u652f\u6570\u4f4e\u4e8e\u4f20\u7edf\u7f16\u7a0b\u8bed\u8a00 VM\uff0c \u4e0e AOT \u76f8\u6bd4\uff0c\u589e\u52a0\u7684\u5f00\u9500\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\u3002</p> <p>Discussion \u8fd0\u884c\u65f6\u7684\u66ff\u4ee3\u89e3\u51b3\u65b9\u6848\u662f AOT \u4ee5\u6d88\u9664 dispatch \u5f00\u9500\u3002 \u4f46\u662f\u7531\u4e8e\u64cd\u4f5c\u7684\u7c92\u5ea6\uff0c\u8c03\u5ea6\u65f6\u95f4\u5728\u6267\u884c\u4e2d\u53ea\u5360\u5f88\u5c0f\u7684\u4e00\u90e8\u5206\u3002 \u66f4\u91cd\u8981\u7684\u662f\uff0c\u6211\u4eec\u7684 VM \u63d0\u4f9b\u4e86\u4f20\u7edf\u4e0a\u5f52\u56e0\u4e8e\u865a\u62df\u673a\u7684\u7075\u6d3b\u6027\u4ee5\u53ca\u6e05\u6670\u7684 \u7f16\u8bd1\u5668/\u8fd0\u884c\u65f6\u5212\u5206\u3002 \u6211\u4eec\u770b\u5230\u4e86 VM \u4f5c\u4e3a\u8fd0\u884c\u65f6\u6a21\u5757\u96c6\u6210\u5230\u66f4\u5927\u7cfb\u7edf\u4e2d\u7684\u6f5c\u529b\u3002 \u4f8b\u5982\uff0cVM \u53ef\u4ee5\u63d0\u4f9b\u8d44\u6e90\u9694\u79bb\uff0c\u5176\u4e2d\u591a\u4e2a\u63a8\u7406\u5b9e\u4f8b\u5728\u4e91\u4e2d\u5171\u4eab\u76f8\u540c\u7684\u786c\u4ef6\u3002 \u6b64\u5916\uff0c\u670d\u52a1\u8d28\u91cf (QoS) \u611f\u77e5\u7cfb\u7edf\uff0c\u4f8b\u5982\uff08Kang \u7b49\u4eba\uff0c2018 \u5e74\uff1bYachir \u7b49\u4eba\uff0c2009 \u5e74\uff09\uff0c \u53ef\u4ee5\u5229\u7528 VM \u6682\u505c\u5f53\u524d\u6a21\u578b\u7684\u6267\u884c\uff0c\u4ee5\u83b7\u5f97\u66f4\u9ad8\u4f18\u5148\u7ea7\u6216\u65f6\u95f4\u5173\u952e\u7684\u6a21\u578b\u3002 \u6700\u540e\uff0c\u7531\u4e8e VM \u8bbe\u8ba1\u7684\u7b80\u5355\u6027\uff0c\u4eba\u4eec\u53ef\u4ee5\u51fa\u4e8e\u5b89\u5168\u548c\u9690\u79c1\u76ee\u7684\u9a8c\u8bc1 VM \u7684\u5b9e\u73b0\u3002</p>"},{"location":"mlc/paper-nimble.html#5-evaluation","title":"5. EVALUATION","text":"<p>\u672c\u8282\u65e8\u5728\u56de\u7b54\u4ee5\u4e0b\u95ee\u9898\uff1a</p> <ul> <li>\u4e0e\u5404\u79cd\u786c\u4ef6\u5e73\u53f0\u4e0a\u6700\u5148\u8fdb\u7684\u66ff\u4ee3\u65b9\u6848\u76f8\u6bd4\uff0cNimble \u52a8\u6001\u6a21\u578b\u7684\u6574\u4f53\u6027\u80fd\u5982\u4f55\uff1f</li> <li>Nimble VM \u5728\u8fd0\u884c\u65f6\u4e3a\u5904\u7406\u52a8\u6001\u5f15\u5165\u4e86\u591a\u5c11\u5f00\u9500\uff1f</li> <li>\u5efa\u8bae\u7684\u4f18\u5316\u6280\u672f\uff08\u5982\u5185\u5b58\u89c4\u5212\u548c\u7b26\u53f7\u4ee3\u7801\u751f\u6210\uff09\u7684\u6548\u679c\u5982\u4f55\uff1f</li> </ul> <p>\u5728\u8fd9\u4e2a\u5b9e\u9a8c\u4e2d\u9009\u62e9\u4e86\u4ee3\u8868\u4e0d\u540c\u7c7b\u522b\u52a8\u6001\u7684\u4e09\u79cd\u6d41\u884c\u6a21\u578b\uff0c\u5373\u3002 LSTM (\u52a8\u6001\u63a7\u5236\u6d41)\u3001 Tree-LSTM (\u52a8\u6001\u6570\u636e\u7ed3\u6784) \u548c BERT (\u52a8\u6001\u6570\u636e\u5f62\u72b6)\u3002 LSTM \u548c Tree-LSTM \u6a21\u578b\u4e2d\u4f7f\u7528\u7684\u8f93\u5165\u5927\u5c0f/\u9690\u85cf\u5927\u5c0f\u5206\u522b\u4e3a 300/512 \u548c 300/150\u3002 \u6211\u4eec\u4f7f\u7528\u4e86 BERT \u57fa\u7840\u5b9e\u73b0\u3002 \u5bf9\u4e8e LSTM \u548c BERT\uff0c\u6211\u4eec\u4f7f\u7528 Microsoft Research \u7684 Paraphrase Corpus (MRPC)\u4f5c\u4e3a\u6211\u4eec\u7684\u8f93\u5165\u6570\u636e\u96c6\uff0c\u8f93\u5165\u957f\u5ea6\u53ef\u53d8\u3002</p> <p>\u6211\u4eec\u5c06 Nimble \u7684\u6574\u4f53\u6027\u80fd\u4e0e\u6bcf\u4e2a\u52a8\u6001\u6a21\u578b\u7684 baseline \u8fdb\u884c\u4e86\u6bd4\u8f83\u3002 Nimble \u6210\u529f\u5b8c\u6210\u4e86\u6240\u6709\u5e73\u53f0\u4e0a\u6240\u6709\u6a21\u578b\u7684\u63a8\u7406\u3002 \u7136\u800c\uff0c\u5e76\u975e\u6240\u6709 baseline \u7cfb\u7edf\u90fd\u53ef\u4ee5\u5bf9\u8fd9\u4e9b\u6a21\u578b\u8fdb\u884c\u63a8\u7406\u3002 \u4f8b\u5982\uff0cTree-LSTM \u53ea\u80fd\u5728 PyTorch\u3001DyNet \u548c TensorFlow Fold \u4e0a\u8fd0\u884c\uff0c\u56e0\u4e3a\u5176\u4ed6\u6846\u67b6\u65e0\u6cd5\u5904\u7406\u52a8\u6001\u6570\u636e\u7ed3\u6784\u3002 TensorFlow Fold \u5e76\u975e\u8bbe\u8ba1\u7528\u4e8e\u5904\u7406 BERT\uff0c\u56e0\u6b64\u65e0\u6cd5\u83b7\u5f97\u4efb\u4f55\u7ed3\u679c\u3002 \u6211\u4eec\u5728 DyNet \u4e0a\u627e\u4e0d\u5230 BERT \u5b9e\u73b0\u3002 \u6700\u540e\uff0c\u7701\u7565\u4e86 Tree-LSTM \u5728 Nvidia GPU \u4e0a\u7684\u6a21\u578b\u63a8\u7406\uff0c\u56e0\u4e3a\u7531\u4e8e\u8fc7\u591a\u7684\u63a7\u5236\u6d41\u548c\u8f83\u5c0f\u7684\u5185\u6838\u5927\u5c0f\uff0c\u5f88\u96be\u4f7f GPU \u8ba1\u7b97\u80fd\u529b\u9971\u548c\uff0c\u4f7f\u5f97 GPU \u4e0d\u592a\u9002\u5408\u90e8\u7f72\u76ee\u6807\u3002</p> <p>\u57fa\u7ebf\u7cfb\u7edf\u90fd\u4f7f\u7528\u7b2c\u4e09\u65b9\u5185\u6838\u5e93\uff0c\u901a\u8fc7\u5229\u7528\u5927\u91cf\u624b\u52a8\u4f18\u5316\u7684\u7b97\u5b50\u6765\u5b9e\u73b0\u9ad8\u6027\u80fd\uff0c\u5f53\u7279\u5b9a\u76ee\u6807\u4e0d\u652f\u6301\u7b97\u5b50\u65f6\uff0c\u8fd9\u662f\u4e0d\u5229\u7684\u3002 \u4f46\u662f\uff0cNimble \u53ef\u4ee5\u9009\u62e9\u81ea\u7f16\u8bd1\u5185\u6838\u6216\u7b2c\u4e09\u65b9\u5e93\u63d0\u4f9b\u7684\u5185\u6838\uff0c\u4ee5\u6700\u5927\u5316\u6027\u80fd\u3002 \u5b83\u4f7f\u7528\u52a8\u6001\u8c03\u5ea6\u903b\u8f91\u5728\u8fd0\u884c\u65f6\u4f7f\u7528\u72ec\u7acb\u4e8e\u5e73\u53f0\u7684\u5b57\u8282\u7801\u8c03\u7528\u9009\u5b9a\u7684\u5185\u6838\u3002</p>"},{"location":"mlc/paper-nimble.html#53-microbenchmark","title":"5.3. Microbenchmark","text":"<p>TVM \u5728\u9759\u6001\u5f62\u72b6\u4e0a\u6bd4 Nimble \u5feb 5% \u5230 25%\uff0c\u5c3d\u7ba1\u7edd\u5bf9\u5ef6\u8fdf\u5dee\u5f02\u5f88\u5c0f\u3002 \u5f00\u9500\u6765\u81ea\u4e24\u4e2a\u65b9\u9762\uff1a</p> <ol> <li>\u7528\u7b26\u53f7\u5f62\u72b6\u751f\u6210\u7684\u5185\u6838\u4f1a\u5bfc\u81f4\u7d22\u5f15\u8ba1\u7b97\u4e2d\u7684\u989d\u5916\u5f00\u9500\uff1b</li> <li>VM \u4e2d\u7684\u5176\u4ed6\u6307\u4ee4\u9700\u8981\u5904\u7406\u52a8\u6001\u6267\u884c\uff0c\u4f8b\u5982\u5f62\u72b6\u51fd\u6570\u3001\u52a8\u6001\u5185\u5b58\u5206\u914d\u3001\u6307\u4ee4\u8c03\u5ea6\u7b49\u3002</li> </ol> <p>\u5728 Nvidia GPU \u4e0a\uff0c\u7531\u4e8e \u5f02\u6784\u8bbe\u5907\u5e03\u5c40\uff08\u7b2c 3.4 \u8282\uff09\uff0c\u56e0\u6b64\u5176\u4ed6\u6307\u4ee4\u7684\u5f00\u9500\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\u3002</p> <p>Symbolic codegen</p> <p>\u6211\u4eec\u4ece BERT \u6a21\u578b\u4e2d\u9009\u62e9\u4e86 3 \u4e2a\u5bc6\u96c6\u5c42\uff0c\u5e76\u6bd4\u8f83\u4e86\u7b26\u53f7\u4ee3\u7801\u751f\u6210\u548c\u9759\u6001\u4ee3\u7801\u751f\u6210\u5728 ARM CPU \u4e0a\u7684\u6027\u80fd\u3002 \u5bf9\u4e8e\u7b26\u53f7\u4ee3\u7801\u751f\u6210\uff0c\u6211\u4eec\u5728\u7f16\u8bd1\u671f\u95f4\u4f7f\u7528 Any \u4f5c\u4e3a\u5e8f\u5217\u957f\u5ea6\uff0c\u5e76\u5728\u8fd0\u884c\u65f6\u4f7f\u7528\u5e8f\u5217\u957f\u5ea6 128 \u8bc4\u4f30\u5185\u6838\u3002 \u5bf9\u4e8e\u9759\u6001codegen\uff0c\u6211\u4eec\u5728\u7f16\u8bd1\u65f6\u76f4\u63a5\u5c06\u5e8f\u5217\u957f\u5ea6\u8bbe\u7f6e\u4e3a128\u3002 </p> <p>\u56fe3 \u8bf4\u660e\u4e86\u4f7f\u7528\u7b26\u53f7\u5f62\u72b6\u751f\u6210\u7684\u5185\u6838\u76f8\u5bf9\u4e8e\u57fa\u7ebf\u7684\u76f8\u5bf9\u5ef6\u8fdf\u2014\u2014\u4f7f\u7528\u9759\u6001\u5f62\u72b6\u7f16\u8bd1\u7684\u5185\u6838\u3002 \u81ea\u52a8\u8c03\u6574\u7b97\u6cd5\u5728\u6240\u6709\u4e09\u4e2a\u5185\u6838\u4e2d\u5c06\u7b26\u53f7\u8f74\u4ee5 8 \u5e73\u94fa\u3002 \u5982\u7b2c 3.5 \u8282\u6240\u8ff0\uff0c\u6211\u4eec\u5c06\u7b26\u53f7\u4ee3\u7801\u751f\u6210\u671f\u95f4\u8981\u5206\u6d3e\u7684\u751f\u6210\u5185\u6838\u7684\u6570\u91cf\u4ece 8\uff08\u5b8c\u5168\u5206\u6d3e\uff09\u5230 1\uff08\u65e0\u5206\u6d3e\uff09\u3002 \u6211\u4eec\u89c2\u5bdf\u5230\uff0c\u5177\u6709\u5b8c\u5168\u5206\u6d3e\u7684\u7b26\u53f7\u4ee3\u7801\u751f\u6210\u5668\u53ef\u4ee5\u5b9e\u73b0\u4e0e\u9759\u6001\u4ee3\u7801\u751f\u6210\u5668\u51e0\u4e4e\u76f8\u540c\u7684\u6027\u80fd\uff0c\u800c\u51cf\u5c11\u5185\u6838\u6570\u91cf\u4f1a\u635f\u5bb3\u6027\u80fd\u3002 \u5728\u5177\u6709\u4e0d\u540c\u5f62\u72b6\u7684\u5bc6\u96c6\u7b97\u5b50\u3001\u5176\u4ed6\u7b97\u5b50\u548c\u5176\u4ed6\u5e73\u53f0\u4e0a\u4e5f\u53ef\u4ee5\u770b\u5230\u7c7b\u4f3c\u7684\u8d8b\u52bf\u3002</p>"},{"location":"mlc/paper-nimble.html#6-related-work","title":"6. RELATED WORK","text":"<p>\u672c\u8282\u5c06 Nimble \u4e0e\u6267\u884c\u52a8\u6001\u795e\u7ecf\u7f51\u7edc\u7684\u73b0\u6709\u89e3\u51b3\u65b9\u6848\u8fdb\u884c\u5bf9\u6bd4\u3002</p> <p>DL \u6846\u67b6 \u4e00\u4e9b\u6846\u67b6\u901a\u8fc7\u5728\u5176 \u56fe IR \u4e2d\u6dfb\u52a0\u539f\u8bed\u6765\u652f\u6301\u52a8\u6001\u63a7\u5236\u6d41\uff0c\u4f8b\u5982 Tensor-Flow \u4e2d\u7684\u5207\u6362\u548c\u5408\u5e76\uff08Yu \u7b49\u4eba\uff0c2018 \u5e74\uff09\u4ee5\u53ca MXNet \u4e2d\u7684 foreach\u3001cond \u548c while \u5faa\u73af(Zheng , 2018). \u63a7\u5236\u6d41\u7684\u95f4\u63a5\u7f16\u7801\u9700\u8981\u4e13\u95e8\u7684\u6570\u636e\u6d41\u8fd0\u884c\u65f6\u6765\u5904\u7406\u8bf8\u5982\u5207\u6362\u4e4b\u7c7b\u7684\u64cd\u4f5c\uff0c\u6216\u8005\u9700\u8981\u5c06\u63a7\u5236\u5e73\u9762\u548c\u6570\u636e\u5e73\u9762\u7684\u6267\u884c\u5206\u5f00\u7684\u6df7\u5408\u8fd0\u884c\u65f6\u3002 \u4e24\u8005\u90fd\u4e25\u91cd\u4fb5\u5165\u4e86\u6846\u67b6\u4ee3\u7801\u5e93\u3002 \u6b64\u5916\uff0c\u8fd8\u6709\u8bb8\u591a\u6846\u67b6\u6269\u5c55\u6765\u652f\u6301\u4e0d\u540c\u7c7b\u578b\u7684\u52a8\u6001\u3002TensorFlow Fold\uff08Looks \u7b49\u4eba\uff0c2017 \u5e74\uff09\u5bf9\u7528\u6237\u63d0\u4f9b\u7684\u8ba1\u7b97\u56fe\u8fdb\u884c\u5206\u6790\uff0c\u4ee5\u786e\u5b9a\u53ef\u4ee5\u4e00\u8d77\u6279\u5904\u7406\u7684\u52a8\u6001\u64cd\u4f5c\u3002 \u4e00\u65e6\u627e\u5230\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u5c31\u4f1a\u751f\u6210\u4e00\u4e2a\u6279\u5904\u7406\u7684 TensorFlow \u56fe\uff0c\u5b83\u63d0\u4f9b\u5f62\u72b6\u4e13\u7528\u7684\u5b50\u56fe\u3002 \u867d\u7136\u8fd9\u53ef\u80fd\u4f1a\u63d0\u4f9b\u52a0\u901f\uff0c\u4f46\u5b83\u4f1a\u5f15\u5165\u5927\u91cf\u5f00\u9500\uff0c\u56e0\u4e3a\u6bcf\u6761\u8def\u5f84\u90fd\u5fc5\u987b\u4f5c\u4e3a\u5355\u72ec\u7684\u5b50\u8ba1\u7b97\u56fe\u6267\u884c\uff0c\u5e76\u4e14\u4f1a\u9650\u5236\u8fdb\u4e00\u6b65\u7684\u4f18\u5316\u3002 \u90d1\u7b49\u4eba\u3002 \uff08Jeong \u7b49\u4eba\uff0c2018 \u5e74\uff09\u548c JANUS\uff08Jeong \u7b49\u4eba\uff0c2019 \u5e74\uff09\u4e5f\u6269\u5c55\u4e86 TensorFlow \u4ee5\u63d0\u9ad8\u52a8\u6001\u6a21\u578b\u7684\u6027\u80fd\u3002 \u8fd9\u4e9b\u6269\u5c55\u662f\u7279\u5b9a\u4e8e\u6846\u67b6\u7684\uff0c\u4e0e\u6211\u4eec\u4f7f\u7528\u7684\u7f16\u8bd1\u6280\u672f\u6ca1\u6709\u76f4\u63a5\u5173\u7cfb\u3002 speculative execution \u7684\u4f7f\u7528\u662f\u5bf9\u6211\u4eec\u6280\u672f\u7684\u8865\u5145\u3002</p> <p>Dynet\uff08Neubig \u7b49\u4eba\uff0c2017 \u5e74\uff09\u548c PyTorch\uff08Paszke \u7b49\u4eba\uff0c2019 \u5e74\uff09\u4f7f\u7528 host \u8bed\u8a00\u529f\u80fd\uff08\u5373 Python \u7684\u63a7\u5236\u6d41\uff09\u6765\u52a8\u6001\u5c55\u5f00\u63a7\u5236\u6d41\u4ee5\u751f\u6210\u52a8\u6001\u6a21\u578b\u7684\u9759\u6001trace\u3002 \u57fa\u4e8etrace\u7684\u65b9\u6cd5\u4ee5\u63d0\u524d\u4f18\u5316\u4e3a\u4ee3\u4ef7\u63d0\u4f9b\u4e86\u7075\u6d3b\u53cb\u597d\u7684\u7f16\u7a0b\u6a21\u578b\u3002 \u6b64\u5916\uff0c\u5b83\u9700\u8981\u4e3a\u6bcf\u4e2atrace\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u6d41\u56fe\uff0c\u5f15\u5165\u63a7\u5236\u6d41\u6784\u9020\u7684\u5f00\u9500\u5e76\u9650\u5236\u6574\u4e2a\u7a0b\u5e8f\u7684\u4f18\u5316\uff0c\u8fd9\u662f\u4f20\u7edf trace JIT \u7f16\u8bd1\u4e2d\u4e5f\u9762\u4e34\u7684\u6311\u6218\u3002 JAX\uff08Bradbury \u7b49\u4eba\uff0c2018 \u5e74\uff09\u4e5f\u652f\u6301\u53d7\u9650\u5f62\u5f0f\u7684\u52a8\u6001\u7f51\u7edc\uff0c\u4f46\u5176\u4f18\u5316\u4ece\u6839\u672c\u4e0a\u53d7\u5230\u5176\u5e95\u5c42\u7f16\u8bd1\u5668 XLA \u7684\u9650\u5236\u3002 \u4f8b\u5982\uff0cJAX \u7684 JIT \u6a21\u5f0f\u4e2d dynamic value dependent control-flow is not supporte\u3002 \u76f8\u6bd4\u4e4b\u4e0b\uff0cNimble \u5728\u4e0d\u5f71\u54cd\u9759\u6001\u5b50\u96c6\u6027\u80fd\u7684\u60c5\u51b5\u4e0b\u964d\u4f4e\u4e86\u52a8\u6001\u884c\u4e3a\u7684\u4f7f\u7528\u6210\u672c\u3002</p> <p>\u6b64\u5916\uff0c\u6846\u67b6\u4f9d\u8d56\u4e8e\u7b2c\u4e09\u65b9\u5e93\uff08Chetlur et al., 2014; Intel, 2020\uff09\u6765\u5b9e\u73b0\u5177\u6709\u4e0d\u540c\u6570\u636e\u5f62\u72b6\u7684\u7b97\u5b50\uff0c\u5373\u53ea\u5728\u7279\u5b9a\u786c\u4ef6\u5e73\u53f0\u4e0a\u8868\u73b0\u8f83\u597d\u3002 \u56e0\u6b64\uff0c\u6846\u67b6\u4ee5\u53ca\u4ece\u5b83\u4eec\u6d3e\u751f\u7684\u7528\u4e8e\u52a8\u6001\u6a21\u578b\u7684\u8fd0\u884c\u65f6\u7cfb\u7edf\uff08Xu et al., 2018; Gao et al., 2018\uff09\u901a\u5e38\u5728 ARM CPU \u7b49 second tier of support \u7684\u8bbe\u5907\u4e0a\u8868\u73b0\u4e0d\u4f73\uff0c\u800c\u5728\u6d41\u884c\u7684\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u627e\u4e0d\u5230\u7b97\u5b50\u548c\u5f62\u72b6\u7ec4\u5408\u3002 \u76f8\u6bd4\u4e4b\u4e0b\uff0cNimble \u9002\u7528\u4e8e\u6240\u6709\u5e73\u53f0\uff0c\u5e76\u4e14\u53ef\u4ee5\u6839\u636e\u9700\u8981\u4e3a\u65b0\u5f62\u72b6\u548c\u65b0\u8bbe\u5907\u751f\u6210\u9ad8\u6027\u80fd\u4ee3\u7801\uff08\u7b2c 3.5 \u8282\uff09\u3002</p> <p>DLC \u73b0\u6709\u7684 DLC \uff0c \u5305\u62ec XLA \u3001TVM \u548c Glow\uff0c\u53ef\u4ee5\u7f16\u8bd1\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u4ee5\u5728\u591a\u4e2a\u786c\u4ef6\u4e0a\u8fd0\u884c\u3002 \u7136\u800c\uff0c\u5728\u4f18\u5316\u52a8\u6001\u795e\u7ecf\u7f51\u7edc\u7f16\u8bd1\u65b9\u9762\u7684\u5de5\u4f5c\u5f88\u5c11\u3002 MLIR (Lattner et al., 2021) \u662f\u4e00\u4e2a\u5f88\u6709\u524d\u9014\u7684\u65b9\u5411\uff0c\u5176 IR \u652f\u6301\u52a8\u6001\u5f62\u72b6\uff0c\u4f46\u52a8\u6001\u4f18\u5316\u6216\u7aef\u5230\u7aef\u6027\u80fd\u672a\u77e5\u3002 Nimble \u7684\u7f16\u8bd1\u548c VM \u8bbe\u8ba1\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d7\u5230 production compiler and VM \u7684\u542f\u53d1\uff0c\u4f8b\u5982 LLVM\uff08Lattner &amp; Adve\uff0c2004\uff09\u3001GCC\uff08gcc\uff0c2019\uff09\u548c JVM\uff08jvm\uff0c2013\uff09\uff0c\u7528\u4e8e\u5904\u7406\u52a8\u6001\u884c\u4e3a\u7684\u901a\u7528\u89e3\u51b3\u65b9\u6848\uff0c\u4f8b\u5982\u63a7\u5236\u6d41\u548c\u53ef\u53d8\u957f\u5ea6\u8f93\u5165\u6570\u7ec4\u3002</p>"},{"location":"mlc/paper-roller.html","title":"ROLLER: Fast and Efficient Tensor Compilation for Deep Learning","text":"<p>Ref:</p> <ul> <li>https://zhuanlan.zhihu.com/p/546074778 </li> </ul> <p>https://github.com/microsoft/nnfusion/tree/osdi22_artifact/artifacts</p>"},{"location":"mlc/paper-roller.html#0-abstract","title":"0. Abstract","text":"<p>\u5f20\u91cf\u7f16\u8bd1\u5668\u5728\u5404\u79cd\u52a0\u901f\u5668\uff08\u4f8b\u5982 GPU\uff09\u4e0a\uff0c\u4e3a\u7b97\u5b50\u751f\u6210\u9ad8\u6548\u5185\u6838\u901a\u5e38\u9700\u8981\u6570\u5c0f\u65f6\uff0c\u8fd9\u662f DNN \u4e2d\u7684\u8ba1\u7b97\u5bc6\u96c6\u578b\u5b50\u4efb\u52a1\u3002 \u8fd9\u663e\u8457\u51cf\u6162\u4e86 DNN \u5f00\u53d1\u5468\u671f\uff0c\u5e76\u7ed9\u901a\u7528\u5185\u6838\u5e93\u548c\u81ea\u5b9a\u4e49\u5185\u6838\u7684\u5f00\u53d1\u5e26\u6765\u6c89\u91cd\u8d1f\u62c5\uff0c\u5c24\u5176\u662f\u5bf9\u4e8e\u65b0\u786c\u4ef6\u4f9b\u5e94\u5546\u800c\u8a00\u3002 \u7f16\u8bd1\u8fc7\u7a0b\u7f13\u6162\u539f\u56e0\u662f\u73b0\u6709\u7684 DLC \u5236\u5b9a\u7684\u641c\u7d22\u7a7a\u95f4\u5f88\u5927\uff0c\u5fc5\u987b\u4f7f\u7528 ML \u7b97\u6cd5\u624d\u80fd\u627e\u5230\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002</p> <p>\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86 ROLLER\uff0c\u5b83\u91c7\u7528\u4e0d\u540c\u7684\u57fa\u4e8e\u6784\u9020\u7684\u65b9\u6cd5\u6765\u751f\u6210\u5185\u6838\u3002 ROLLER \u7684\u6838\u5fc3\u662f <code>rTile</code> \uff0c\u8fd9\u662f\u4e00\u79cd\u65b0\u7684 tile \u62bd\u8c61\uff0c\u5b83\u5c01\u88c5\u4e86\u4e0e\u5e95\u5c42\u52a0\u901f\u5668\u7684\u5173\u952e\u7279\u5f81\u5bf9\u9f50\u7684\u5f20\u91cf\u5f62\u72b6\uff0c\u4ece\u800c\u901a\u8fc7\u9650\u5236\u5f62\u72b6\u9009\u62e9\u6765\u5b9e\u73b0\u9ad8\u6548\u6267\u884c\u3002 ROLLER \u7136\u540e\u91c7\u7528\u9012\u5f52\u7684\u57fa\u4e8e <code>rTile</code> \u7684\u6784\u5efa\u7b97\u6cd5\u6765\u751f\u6210\u57fa\u4e8e <code>rTile</code> \u7684\u7a0b\u5e8f\uff08rProgram\uff09\uff0c\u5176\u6027\u80fd\u53ef\u4ee5\u901a\u8fc7 micro performance model \u8fdb\u884c\u6709\u6548\u8bc4\u4f30\uff0c\u800c\u65e0\u9700\u5728\u771f\u5b9e\u8bbe\u5907\u4e2d\u8fdb\u884c\u8bc4\u4f30\u3002 \u56e0\u6b64\uff0cROLLER \u53ef\u4ee5\u5728\u51e0\u79d2\u949f\u5185\u751f\u6210\u9ad8\u6548\u7684\u5185\u6838\uff0c\u5176\u6027\u80fd\u53ef\u4e0e GPU \u7b49\u6d41\u884c\u52a0\u901f\u5668\u4e0a\u7684\u6700\u5148\u8fdb\u89e3\u51b3\u65b9\u6848\u76f8\u5ab2\u7f8e\uff0c\u540c\u65f6\u5728 IPU \u7b49\u8f83\u65b0\u7684\u52a0\u901f\u5668\u4e0a\u63d0\u4f9b\u66f4\u597d\u7684\u5185\u6838\u3002</p>"},{"location":"mlc/paper-roller.html#8-conclusion","title":"8. Conclusion","text":"<p>ROLLER \u5bf9 DLC \u91c7\u7528\u4e86\u4e00\u79cd\u975e\u5e38\u89c4\u7684\u65b9\u6cd5\u3002 ROLLER \u4e0d\u662f\u4f9d\u9760\u6602\u8d35\u7684 ML \u7b97\u6cd5\u5728\u5927\u578b\u641c\u7d22\u7a7a\u95f4\u4e2d\u627e\u5230\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u800c\u662f\u4f7f\u7528\u57fa\u4e8e\u9012\u5f52\u6784\u9020\u7684\u7b97\u6cd5\u751f\u6210\u9ad8\u6548 kernel\uff0c \u8be5\u7b97\u6cd5\u5229\u7528\u65b0\u7684 <code>rTile</code> \u62bd\u8c61\uff0c\u5177\u6709\u66f4\u5c11\u7684\u5f62\u72b6\uff0c\u53ef\u4e0e\u591a\u79cd\u786c\u4ef6\u529f\u80fd\u5bf9\u9f50\u3002 \u6784\u5efa\u7684\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7 micro performance model \u8fdb\u884c\u8bc4\u4f30\uff0c\u65e0\u9700\u6bcf\u6b21\u90fd\u5728\u771f\u5b9e\u8bbe\u5907\u4e0a\u8fd0\u884c\u3002 \u56e0\u6b64\uff0cROLLER \u53ef\u4ee5\u5728\u51e0\u79d2\u949f\u5185\u7f16\u8bd1\u51fa\u9ad8\u6027\u80fd\u5185\u6838\uff0c\u5373\u4f7f\u5728\u4e0d\u592a\u6210\u719f\u7684\u52a0\u901f\u5668\u4e2d\u4e5f\u662f\u5982\u6b64\u3002 \u66f4\u91cd\u8981\u7684\u662f\uff0cROLLER \u4e3a\u65b0\u7684 AI \u786c\u4ef6\u4f9b\u5e94\u5546\u63d0\u4f9b\u4e86\u4e00\u79cd\u72ec\u7279\u4e14\u663e\u7740\u66f4\u6709\u6548\u7684\u65b9\u6cd5\u6765\u6784\u5efa\u6709\u80fd\u529b\u7684\u4f9b\u5e94\u5546\u7279\u5b9a DNN \u5e93\uff0c\u5f25\u5408\u751f\u6001\u7cfb\u7edf\u4e0e\u5e02\u573a\u9886\u5bfc\u8005\u4e4b\u95f4\u7684\u5dee\u8ddd\uff0c\u4ece\u800c\u4fc3\u8fdb AI \u52a0\u901f\u5668\u7684\u521b\u65b0\u3002</p>"},{"location":"mlc/paper-roller.html#1-intro","title":"1. Intro","text":""},{"location":"mlc/paper-roller.html#7-related-work","title":"7. Related work","text":"<p>\u5927\u591a\u6570\u5f20\u91cf\u7f16\u8bd1\u5668\u5c06 DNN \u7b97\u5b50\u89c6\u4e3a\u5d4c\u5957\u7684\u591a\u7ea7\u5faa\u73af\u8ba1\u7b97\uff0c\u672c\u8d28\u4e0a\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5177\u6709\u7ec4\u5408\u590d\u6742\u6027\u7684\u5927\u7a7a\u95f4\u3002 TVM [15] \u7ee7\u627f\u4e86 Halide [27] \u7684 insight\uff0c\u5e76\u5c06 DNN \u7b97\u5b50\u63cf\u8ff0\u4e3a\u5faa\u73af\u4f18\u5316\u8c03\u5ea6\u539f\u8bed\u3002 \u540e\u6765\uff0cAutoTVM [16] \u6269\u5c55\u4e86 TVM \u4ee5\u5e94\u7528 ML \u65b9\u6cd5\u4ece\u624b\u52a8\u7f16\u5199\u7684\u4ee3\u7801\u6a21\u677f\u4e2d\u641c\u7d22\u6700\u4f73\u914d\u7f6e\u3002 FlexTensor [35] \u63d0\u51fa\u65e0\u9700\u624b\u52a8\u6a21\u677f\u5373\u53ef\u81ea\u52a8\u63a2\u7d22\u7a7a\u95f4\u3002 Ansor [33] \u8fdb\u4e00\u6b65\u63a8\u8fdb\u4e86\u8fd9\u79cd\u81ea\u52a8\u5316\u3002 \u8003\u8651\u5230\u5206\u5c42\u4ee3\u7801\u7ed3\u6784\uff0c\u5b83\u4f1a\u751f\u6210\u66f4\u5927\u7684\u641c\u7d22\u7a7a\u95f4\uff0c\u5e76\u91c7\u7528 \u8fdb\u5316\u7b97\u6cd5 \u6765\u5bfb\u627e\u9ad8\u6027\u80fd\u5185\u6838\u3002 Tiramisu [14]\u3001AKG [32] \u548c Tensor Comprehensions [29] \u7b49\u7f16\u8bd1\u5668\u5c06\u57fa\u4e8e\u591a\u9762\u4f53\u7684\u6280\u672f\u5e94\u7528\u4e8e\u5faa\u73af\u4f18\u5316\uff0c\u5c06\u5faa\u73af\u8f6c\u6362\u4e3a\u6574\u6570\u89c4\u5212\u95ee\u9898\u5e76\u4f7f\u7528\u6c42\u89e3\u5668\u627e\u5230\u826f\u597d\u7684\u914d\u7f6e\u3002 \u6240\u6709\u8fd9\u4e9b\u65b9\u6cd5\u90fd\u4f9d\u8d56\u4e8e\u5de8\u5927\u7684\u641c\u7d22\u7a7a\u95f4\u6765\u63d0\u4f9b\u826f\u597d\u7684\u5185\u6838\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u8f83\u957f\u7684\u7f16\u8bd1/\u6c42\u89e3\u65f6\u95f4\u3002 ROLLER \u63a2\u7d22\u4e86\u4e00\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u6784\u5efa\u4e0e\u786c\u4ef6\u7279\u6027\u4e00\u81f4\u7684 rTiles\u3002</p> <p>\u5f20\u91cf\u5904\u7406\u539f\u8bed (TPP) [18] \u5b9a\u4e49\u4e86\u4e00\u7ec4\u4e8c\u7ef4\u5f20\u91cf\u7b97\u5b50\uff0c\u7528\u4e8e\u5728\u9ad8\u7ef4\u5f20\u91cf\u4e0a\u7ec4\u6210\u590d\u6742\u7684\u7b97\u5b50\uff0c\u63d0\u4f9b\u6709\u9650\u7684\u8868\u8fbe\u80fd\u529b\u3002 \u76f8\u6bd4\u4e4b\u4e0b\uff0cROLLER \u4e0d\u9650\u5236 tile \u5f62\u72b6\u7684\u7ef4\u5ea6\uff0c\u53ef\u4ee5\u5e94\u7528\u4e8e\u4e00\u822c\u7684\u5f20\u91cf\u8868\u8fbe\u5f0f\u3002 OpenAI Triton [28] \u662f\u4e00\u4e2a\u7f16\u7a0b\u6846\u67b6\u548c\u7f16\u8bd1\u5668\uff0c\u7528\u4e8e\u5f00\u53d1 block-based \u7684 GPU \u5185\u6838\u3002</p> <p>Triton \u4f9d\u9760\u7a0b\u5e8f\u5458\u6765\u51b3\u5b9a\u5757\u5927\u5c0f\u548c\u5757\u8c03\u5ea6\uff0c\u800c\u8fd9\u662f ROLLER \u901a\u8fc7\u8003\u8651\u786c\u4ef6\u7279\u6027\u548c\u5f20\u91cf\u5f62\u72b6\u6765\u89e3\u51b3\u7684\u5173\u952e\u95ee\u9898\u3002 MLIR [5] \u548c Tensor IR [10] \u8ba1\u5212\u5728\u4ed6\u4eec\u7684 IR \u4e2d\u652f\u6301\u5757\u7ea7\uff08\u5373 tile\uff09\u8ba1\u7b97\u8868\u793a\u3002 ROLLER \u7684 rTile \u62bd\u8c61\u548c rProgram \u6784\u9020\u4e0e\u8fd9\u4e9b\u8ba1\u5212\u517c\u5bb9\u3002</p> <p>\u56fe\u7ea7 DNN \u7f16\u8bd1\u5668\uff0c\u5982 XLA [11]\u3001TVM [15] \u548c Rammer [26]\uff0c\u4e13\u6ce8\u4e8e\u8de8\u7b97\u5b50\u4f18\u5316\uff0c\u4f8b\u5982\u7b97\u5b50\u878d\u5408/\u534f\u540c\u8c03\u5ea6\u3002 ROLLER \u7684\u5185\u6838\u751f\u6210\u4e0e\u8fd9\u4e9b\u7f16\u8bd1\u5668\u517c\u5bb9\u3002 ROLLER \u7684 rTile \u62bd\u8c61\u8865\u5145\u4e86 Rammer [26] \u4e2d\u7684 rTask \u6982\u5ff5\uff0c\u56e0\u4e3a\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u6784\u5efa rTask \u7684\u6709\u6548\u65b9\u6cd5\u3002</p> <p>\u6700\u540e\uff0c\u4e00\u4e9b\u5de5\u4f5c\u4e13\u6ce8\u4e8e\u7279\u5b9a\u4e8e\u7b97\u5b50\u7684\u4f18\u5316\u3002 CUTLASS [7] \u662f\u5b9e\u73b0\u77e9\u9635\u4e58\u6cd5\u7684\u6a21\u677f\u3002 \u63d0\u51fa\u4e86\u4e00\u79cd\u5206\u6790\u6a21\u578b [24] \u6765\u4ec5\u9488\u5bf9\u591a\u6838 CPU \u4e0a\u7684\u5377\u79ef\u7b97\u5b50\u627e\u5230\u6700\u4f73\u5faa\u73af\u7ea7\u4f18\u5316\u914d\u7f6e\u3002 DREW [30] \u63d0\u51fa\u4e86\u4e00\u79cd\u4f7f\u7528\u6570\u636e\u538b\u7f29 [31] \u4f18\u5316 Winograd \u5377\u79ef\u7684\u65b0\u65b9\u6cd5\u3002 ROLLER \u7684\u4f18\u5316\u65b9\u6cd5\u9002\u7528\u4e8e\u5404\u79cd\u8bbe\u5907\u4e0a\u7684 DNN \u7b97\u5b50\u3002</p>"},{"location":"mlc/paper-torch.fx.html","title":"TORCH.FX","text":""},{"location":"mlc/paper-torch.fx.html#1-intro","title":"1. Intro","text":"<p>graph-mode \u6216\u8005\u8bf4 define-and-run-mode\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6(TensorFlow, Caffe\u7b49)\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u79cdEDSL\uff0c\u5b83\u4eec\u5bf9 host \u8bed\u8a00(\u901a\u5e38\u662fpy)\u8fdb\u884c\u5143\u7f16\u7a0b\uff0c\u6784\u9020\u51fa\u81ea\u5df1\u7684\u56fe\u5c42\u7ea7IR\uff0c\u5728\u5176\u4e0a\u505a \u5fae\u5206\u3001device/host partitioning and placement\u3001\u91cf\u5316\u3001\u4f18\u5316\u7b49\u53d8\u6362(transformation)\u3002</p> <p>eager mode \u6216\u8005\u8bf4 define-by-run\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6(PyTorch, TensorFlow Eager\u7b49)\u5219\u5141\u8bb8\u76f4\u63a5\u4f7f\u7528host language \u7f16\u5199\u903b\u8f91\u3002 \u5fae\u5206\u901a\u8fc7\u4f7f\u7528JIT\u7684auto-differentiation\u6765\u5b8c\u6210\u3002\u4f46\u662f\u5176\u5b83\u7c7b\u578b\u7684transformation\uff0c\u5982\u91cf\u5316\u3001\u7b97\u5b50\u878d\u5408\u7b49\uff0c\u8fd8\u662f\u9700\u8981\u62ff\u5230\u7a0b\u5e8f\u7684\u6574\u4f53\u7ed3\u6784\u4fe1\u606f\u624d\u597d\u505a\u3002\u56e0\u6b64\u52a8\u6001\u56fe\u867d\u7136\u6613\u7528\u6027\u5f88\u5f3a\uff0c\u4f46\u662f\u56fe\u7ed3\u6784\u4e0d\u80fd\u88ab\u63d0\u524d\u611f\u77e5\u548c\u53d8\u6362\uff0c\u9700\u8981\u4e00\u79cd\u65b9\u5f0f(program capture systems)\u62ff\u5230\u7a0b\u5e8f\u7684\u7ed3\u6784\u4fe1\u606f\u3002</p> <p>\u6709\u4e00\u4e9b\u7a0b\u5e8f\u6355\u83b7\u7cfb\u7edf\u662f\u4e3a\u4e86\u5e8f\u5217\u5316\u6574\u4e2a\u7a0b\u5e8f(\u6a21\u578b)\u800c\u505a\uff0c\u6bd4\u5982TorchScript\uff0c\u5176\u5bf9python\u8bed\u8a00\u5927\u90e8\u5206feature\u8fdb\u884c\u4e86\u5efa\u6a21\uff0c\u5982\u63a7\u5236\u6d41\uff0c\u7528\u6237\u81ea\u5b9a\u4e49\u7c7b\u578b\uff0c\u53ef\u53d8\u72b6\u6001\u7b49\uff0c\u8fd9\u8ba9TorchScript\u53d8\u5f97\u5341\u5206\u590d\u6742\u3002</p> <p>\u76f8\u53cd\u5730\uff0c\u5982\u679c\u53ea\u662f\u9700\u8981\u505aquantization or fusion\u7684\u8bdd\uff0c\u5176\u5b9e\u6211\u4eec\u65e0\u9700\u5bf9Python\u6240\u6709\u8bed\u6cd5\u3001\u7279\u6027\u8fdb\u884c\u5efa\u6a21\uff0c\u800c\u53ea\u9700\u8981\u7528DAG\u7684\u8868\u793a\u65b9\u5f0f\u8868\u793a\u51fa\u6a21\u578b\u7684\u6570\u636e\u6d41\uff0c\u6216\u8005\u8bf4\u7a0b\u5e8f\u7684tensor\u8ba1\u7b97\u56fe\uff0c\u65e0\u9700\u5173\u6ce8\u7b97\u5b50\u7684\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u3002</p> <p>torch.fx\u5c31\u662f\u8fd9\u6837\u4e00\u79cd\u7528\u4e8e\u6355\u83b7\u3001\u53d8\u6362\u56fe\u5c42\u7ea7pytorch\u7a0b\u5e8f\u7684\u7cfb\u7edf\u3002torch.fx \u5b9e\u73b0\u4e86\u4e00\u4e2a\u56fe\u5c42\u7ea7 IR\uff0c\u81f4\u529b\u4e8e\u7b80\u5316\u7a0b\u5e8f\u7684capture\u548c\u53d8\u6362\u3002torch.fx \u7684 IR \u53ea\u6709 6 \u6761\u6307\u4ee4\uff0c \u5b8c\u5168\u4f7f\u7528py\u7f16\u5199\uff0c\u5728\u91cf\u5316\u548c\u7b97\u5b50\u878d\u5408\u7b49\u9886\u57df\u6709\u5f88\u597d\u7684\u5e94\u7528\u3002</p> <p>\u7591\u95ee</p> <ul> <li>The primary program transformation used in deep learning frameworks, program differentiation, is reformulated from an ahead-of-time transformation to a just-in-time transformation, in the form of autodifferentiation.</li> </ul>"},{"location":"mlc/paper-torch.fx.html#2-background","title":"2. Background","text":"<p>\u4e0d\u7ba1\u662f graph-mode \u8fd8\u662f eager-mode \u7684\u6846\u67b6\u5728\u8ffd\u8e2a\u6355\u83b7\u7a0b\u5e8f\u7684\u65f6\u5019\u5fc5\u987b\u8981\u5728\u4ee5\u4e0b\u51e0\u70b9\u4e2d\u505a\u8003\u8651\uff1a</p> <ol> <li>\u6355\u83b7\u7a0b\u5e8f\u7ed3\u6784</li> <li>\u7a0b\u5e8f\u7279\u5316\u80fd\u529b</li> <li>IR \u7684\u8bbe\u8ba1</li> </ol> <p>\u901a\u5e38\u6765\u8bf4\uff0c \u6355\u83b7\u66f4\u590d\u6742\u7684\u7a0b\u5e8f\u3001\u4f7f\u5f97\u53d8\u6362\u540e\u7684\u7a0b\u5e8f\u6709\u66f4\u597d\u7684\u6548\u7387\uff0c\u9700\u8981\u66f4\u590d\u6742\u7684 capture \u6846\u67b6\u4ee5\u53ca\u66f4\u590d\u6742\u7684 IR \u8bbe\u8ba1\uff0c\u4e5f\u4f7f\u5f97\u5bf9\u7a0b\u5e8f\u7f16\u5199 tansformation \u66f4\u52a0\u56f0\u96be\u3002</p>"},{"location":"mlc/paper-torch.fx.html#21","title":"2.1 \u6355\u83b7\u7a0b\u5e8f\u7ed3\u6784","text":"<p>\u6700\u7b80\u5355\u7684\u6355\u83b7\u7a0b\u5e8f\u7ed3\u6784\u7684\u65b9\u5f0f\u5c31\u662f trace \u7a0b\u5e8f\u7684\u6267\u884c\u2014\u2014\u5bf9\u4e00\u6bb5\u7a0b\u5e8f\u7ed9\u5b9a\u4e00\u4e9b\u6837\u4f8b\u8f93\u5165\uff0c\u8bb0\u5f55\u7a0b\u5e8f\u6267\u884c\u8fc7\u7a0b\u4e2d\u6d89\u53ca\u7684\u8ba1\u7b97\uff0c\u4ece\u800c\u786e\u5b9a\u7a0b\u5e8f\u7684\u7ed3\u6784(PyTorch\u2019s <code>jit.trace</code>)</p> <p>\u7a0d\u5fae\u590d\u6742\u4e00\u70b9\u7684\u65b9\u5f0f\u662f\u4f7f\u7528\u7b26\u53f7\u8ffd\u8e2asymbolic tracing(perform tracing with abstract values rather than example inputs)\u3002\u4f7f\u7528\u7b26\u53f7\u8ffd\u8e2a\u53ef\u4ee5\u786e\u5b9a\u63a7\u5236\u6d41\u53d6\u51b3\u4e8e\u8f93\u5165\u7684\u5177\u4f53\u4f4d\u7f6e\uff08\u800c\u5728\u6837\u4f8b\u8f93\u5165trace\u4e2d\uff0c \u56e0\u4e3a\u7a0b\u5e8f\u7684\u6267\u884c\u53d6\u51b3\u4e8e\u8f93\u5165\uff0c\u5982\u679c\u8f93\u5165\u8986\u76d6\u4e0d\u5168\uff0c\u603b\u662f\u4f1a\u6709\u672a\u5230\u8fbe\u7684\u5206\u652f\uff09</p> <p>\u4e3a\u4e86\u80fd\u8986\u76d6\u5230\u6807\u51c6python\u7a0b\u5e8f\u6267\u884c\uff0c\u6709\u4e00\u4e9b tracing system\u53ef\u4ee5\u6355\u83b7\u66f4\u591a\u7ed3\u6784\uff0c\u6bd4\u5982\u63a7\u5236\u6d41\uff08\u5982tf.function\uff09\u3002</p> <p>\u6355\u83b7\u7a0b\u5e8f\u7ed3\u6784\u7684\u53e6\u4e00\u4e2a\u601d\u8def\u662f\u5728 python \u4e2d\u5d4c\u5165\u53e6\u4e00\u5957\u8bed\u8a00\uff0c\u4f8b\u5982 Tensorflow\u63d0\u4f9b\u7684 graph-building API \u4ee5\u53ca PyTorch\u7684 TorchScript \u90fd\u53ef\u4ee5\u770b\u4f5c\u8fd9\u79cd EDSL\u3002\u7528\u6237\u8c03\u7528\u7ed9\u5b9a\u7684API\u6765\u6784\u5efa\u8ba1\u7b97\u56fe or \u5728\u7279\u5b9a\u7684\u8bed\u6cd5\u9650\u5236\u4e0b\u6765\u4e66\u5199 torchscript\u3002\u4ece\u800c\u80fd\u591f\u652f\u6301\u63a7\u5236\u6d41\u7b49\uff0ctorchscript\u751a\u81f3\u53ef\u4ee5\u7406\u89e3user-defined types\uff08\u5176\u57fa\u4e8e python AST\uff09\u3002\u76f8\u6bd4\u4e8e tracing\u53ef\u80fd\u9ed8\u9ed8\u5931\u8d25\u3002\u8fd9\u79cd\u5d4c\u5165\u8bed\u8a00\u7684\u65b9\u6cd5\u5728\u9047\u5230\u4e0d\u652f\u6301\u7684\u8bed\u6cd5/\u8fd0\u7b97\u65f6\u6709\u660e\u786e\u62a5\u9519\u4fe1\u606f\u3002\u7136\u800c\uff0cembedded language\u7684\u7f16\u8bd1\u975e\u5e38\u56f0\u96be(\u76f8\u5f53\u4e8e\u91cd\u65b0\u5b9e\u73b0\u4e00\u95e8\u5b8c\u5907\u7684\u8bed\u8a00)\uff0c\u5e76\u4e14\u8fd8\u662f\u6ca1\u529e\u6cd5\u76f4\u63a5\u628a\u7528\u6237\u5199\u7684python model\u76f4\u63a5\u63d0\u53d6\u51fa\u7ed3\u6784\uff0c\u7528\u6237\u8fd8\u662f\u9700\u8981\u4fee\u6539\u4ed6\u4eec\u7684\u4ee3\u7801\uff0c\u4ee5\u9002\u5e94EDSL\uff0c\u6bd5\u7adf\u5b83\u4eec\u53ea\u652f\u6301python \u8bed\u6cd5\u7684\u4e00\u4e2a\u5b50\u96c6\u3002</p> <p>\u7591\u95ee</p> <ul> <li>For instance, <code>tf.function</code> augments symbolic tracing with a Lightweight Modular Staging system that uses Python AST transforms to convert imperative control flow constructs into higher-order Python functions, which can then be traced.\uff08\u600e\u4e48trace\u63a7\u5236\u6d41\uff1f\uff09</li> </ul>"},{"location":"mlc/paper-torch.fx.html#22-specializing-programs","title":"2.2 Specializing Programs","text":"<p>\u8fd9\u91cc\u8bb2\u7684\u662ftraced program \u53ef\u80fd\u53ea\u662f\u539f\u672c program \u7684\u4e00\u4e2a\u7279\u5316\u7248\u672c\u3002\u6bd4\u65b9\u4e00\u4e2a\u5faa\u73af\u795e\u7ecf\u7f51\u7edc\u4f1a\u6839\u636e\u8f93\u5165\u7684\u5e8f\u5217\u957f\u5ea6\u8fdb\u884c\u4e0d\u540c\u8f6e\u6570\u7684\u5faa\u73af\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5e8f\u5217\u957f\u5ea6\u6bd4\u65b9\u8bf410\uff0c\u5f97\u5230\u7684trace\u5c31\u662f\u4e00\u4e2a10\u6b21\u5faa\u73af\u2014\u2014\u5f53\u66f4\u6362\u4e00\u4e2a\u8f93\u5165\u5e8f\u5217\u957f\u5ea6\u65f6\uff0c\u5c31\u4f1a\u5f97\u5230\u53e6\u4e00\u4e2a\u4e0d\u540c\u7684trace\u3002\u56e0\u6b64\u50cf\u662f TorchScript\u8fd9\u79cd\u975e\u4fb5\u5165\u5f0f\u7684trace\uff0c\u5c31\u4f1a\u4ea7\u751fshape specialized\u7684\u95ee\u9898\uff1atraced program is only valid for the value shapes used at trace time and may fail for other shapes\u3002</p> <p>\u4e3a\u4e86\u89e3\u51b3\u7279\u5316\u7684\u7a0b\u5e8f\u5bf9\u67d0\u4e9b\u8f93\u5165\u5931\u6548\u7684\u95ee\u9898\u3002DyNet \u548c LazyTensor \u4f7f\u7528 JIT trace\uff1bJAX\u4f7f\u7528\u3002\u3002\u3002 TODO: \u8fd9\u90e8\u5206\u6ca1\u770b\u61c2\ud83e\udd8a</p> <p>\u7591\u95ee</p> <ul> <li>DyNet (Neubig et al., 2017) and LazyTensor (Suhan et al., 2021) perform tracing just-in-time</li> <li>JAX\u2019s jit combinator (Frostig et al., 2018) uses pure, functional Python programs as input. This enforces referential transparency on non-Tensor computation like shape expressions.</li> </ul>"},{"location":"mlc/paper-torch.fx.html#23-ir","title":"2.3. IR\u8bbe\u8ba1","text":"<p>ML \u6846\u67b6\u7684 IR \u683c\u5f0f\u5404\u4e0d\u76f8\u540c\uff0c\u66f4\u4e30\u5bcc\u7684 IR \u53ef\u4ee5\u6355\u83b7\u66f4\u591a\u7a0b\u5e8f\u5e76\u4e14\u66f4\u5177\u8868\u73b0\u529b\uff0c\u4f46\u4ee3\u4ef7\u662f\u7f16\u5199\u8f6c\u6362\u6216\u9ad8\u6548\u8fd0\u884c\u4ee3\u7801\u7684\u989d\u5916\u590d\u6742\u6027\u3002</p> <ul> <li> <p>\u8bed\u8a00\uff1a Caffe\uff0c TensorFlow\u4f7f\u7528 Protocol Buffers format \u6765\u8868\u793a\u8ba1\u7b97\u56fe\u3002\u800cPyTorch\u2019s JIT\uff0c MXNet \u4f7f\u7528 C++ \u7684\u6570\u636e\u7ed3\u6784\u5b9e\u73b0\u5b83\u4eec\u7684 IR\uff0c\u5e76\u6709\u5bf9\u5e94\u7684 py \u7ed1\u5b9a\u3002\u4f7f\u7528 native representations \u4f1a\u5e26\u6765\u66f4\u597d\u7684\u8fd0\u884c\u65f6\u6548\u7387\u3001\u66f4\u5bb9\u6613\u5e8f\u5217\u5316\u7b49</p> </li> <li> <p>\u63a7\u5236\u6d41\uff1a \u5927\u90e8\u5206\u795e\u7ecf\u7f51\u7edc\uff08\u4f8b\u5982MLPs\uff0cCNN\u7c7b\u7684\u7f51\u7edc\u7b49\uff09\u5728\u4e0d\u4f7f\u7528\u63a7\u5236\u6d41\u7684\u60c5\u51b5\u4e0b\u4e5f\u80fd\u5f88\u597d\u7684\u8868\u8fbe\u3002\u6587\u4e2d\u628a\u8fd9\u79cd\u6ca1\u6709\u63a7\u5236\u6d41\u7684\u7a0b\u5e8f\u53eb\u505a Basic block programs \u3002 Basic block programs \u901a\u5e38\u4f7f\u7528 DAG\u6765\u8868\u793a\u3002</p> <p>\u4f46\u662f\u5faa\u73af\u795e\u7ecf\u7f51\u7edc\uff0c\u5e38\u7528\u4e8esequence processing domains\uff0c\u5982\u4f20\u7edfRNN\uff0cGRU\uff0cLSTM\u7b49\u7f51\u7edc\uff0c\u5219\u9700\u8981\u63a7\u5236\u6d41\u3002\u56e0\u4e3aRNN\u7c7b\u7684\u795e\u7ecf\u7f51\u7edc\u5faa\u73af\u6b21\u6570\u5f80\u5f80\u4f9d\u8d56\u4e8e\u8f93\u5165\u5e8f\u5217\u957f\u5ea6\u3002</p> <p>\u5c3d\u7ba1\u5982\u6b64\uff0c\u8bb8\u591a\u6846\u67b6\u90fd\u652f\u6301\u5728\u5176 IR \u4e2d\u6355\u83b7\u548c\u8868\u793a\u63a7\u5236\u6d41\u3002TorchScript\u4e3a\u6240\u6709\u7ec4\u4ef6\u6dfb\u52a0\u4e86\u63a7\u5236\u6d41\u7684\u652f\u6301\u3002Jax\u4f7f\u7528\u9ad8\u9636\u51fd\u6570(<code>ax.lax.scan</code>)\u6765\u5141\u8bb8\u51fd\u6570\u5f0f\u7684\u63a7\u5236\u6d41\u3002MLIR represents control flow with basic blocks that end in tail calls. \u63a7\u5236\u6d41\u7684\u8868\u793a\u4e3aIR\u52a0\u5165\u4e86\u590d\u6742\u6027\uff0c\u4f7f\u5f97\u4f8b\u5982\u516c\u5171\u5b50\u8868\u8fbe\u5f0f\u8f6c\u6362\u66f4\u96be\u5b9e\u73b0\u3002</p> </li> <li> <p>state\uff1a python \u8bed\u8a00\u7684\u53d8\u91cf\u53ef\u53d8\u6027\u548c\u5207\u7247\u7684\u8bed\u6cd5\u4f7f\u5f97\u5728\u505a\u7a0b\u5e8f\u53d8\u6362\u65f6\uff0c\u5fc5\u987b\u8981\u505a\u522b\u540d\u5206\u6790\u7b49\u6709\u6548\u6027\u68c0\u67e5\uff0c\u4fdd\u8bc1\u53d8\u6362\u7684\u5b89\u5168\u6027\u7b49\u3002JAX \u4f7f\u7528\u51fd\u6570\u5f0f\u7684\u601d\u60f3\u5c06 tracking state \u7684\u5de5\u4f5c\u63a8\u5230\u4e86\u6846\u67b6\u4e4b\u5916\u3002</p> </li> </ul>"},{"location":"mlc/paper-torch.fx.html#3","title":"3. \u8bbe\u8ba1\u539f\u5219","text":"<ol> <li>\u907f\u514d\u652f\u6301\u957f\u5c3e\u5206\u5e03\uff0c\u590d\u6742\u7684\u6837\u4f8b\u3002\u4e3b\u8981\u5173\u6ce8\u7ecf\u5178\u6a21\u578b\u7684\u7a0b\u5e8f\u6355\u83b7\u548c\u53d8\u6362</li> <li>\u4f7f\u7528\u673a\u5668\u5b66\u4e60\u4ece\u4e1a\u8005\u5df2\u7ecf\u719f\u6089\u7684\u5de5\u5177\u548c\u6982\u5ff5\uff0c\u4f8b\u5982 Python \u7684\u6570\u636e\u7ed3\u6784\u548c PyTorch \u4e2d\u516c\u5f00\u8bb0\u5f55\u7684\u7b97\u5b50</li> <li>\u4f7f\u7a0b\u5e8f\u6355\u83b7\u8fc7\u7a0b\u5177\u6709\u9ad8\u5ea6\u53ef\u914d\u7f6e\u6027\uff0c\u4ee5\u4fbf\u7528\u6237\u53ef\u4ee5\u4e3a\u957f\u5c3e\u9700\u6c42\u5b9e\u73b0\u81ea\u5df1\u7684\u89e3\u51b3\u65b9\u6848</li> </ol> <p>torch.fx \u867d\u7136\u4e0d\u80fd\u50cf TorchScript \u8fd9\u6837\u7684 IR \u5904\u7406\u4e00\u4e9b\u6bd4\u8f83\u96be\u7684 Case\uff08\u6bd4\u5982\u52a8\u6001\u63a7\u5236\u6d41\uff09\uff0c\u4f46\u662f\u5728\u795e\u7ecf\u7f51\u7edc\u8fd9\u4e2a\u9886\u57df\u91cc\u505a\u5f97\u591f\u7528\u5c31\u53ef\u4ee5\u4e86\u3002\u6700\u5173\u952e\u7684\u662f\u5b9e\u73b0\u5f88\u7b80\u5355\uff0c\u5728\u8fd9\u5957IR\u4e0a\u505a\u8f6c\u6362\u975e\u5e38\u65b9\u4fbf\u3002</p>"},{"location":"mlc/paper-torch.fx.html#4-torchfx","title":"4. torch.fx \u6982\u89c8","text":"<p>\u6574\u4f53\u6765\u770b\uff0ctorch.fx\u5305\u62ec\u4e09\u4e2a\u90e8\u5206\uff1a</p> <ul> <li>torch.fx\u901a\u8fc7\u7b26\u53f7\u8ddf\u8e2a\u6765\u6355\u83b7\u7a0b\u5e8f</li> <li>\u5e76\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684 6 \u4e2a\u6307\u4ee4\u7684 IR \u6765\u8868\u793a\u5b83\u4eec</li> <li>\u5e76\u57fa\u4e8e\u8fd9\u4e2a IR \u91cd\u65b0\u751f\u6210 Python \u4ee3\u7801\u6765\u8fd0\u884c\u5b83</li> </ul> <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528 <code>torch.fx</code>\u7684\u7b26\u53f7\u8ffd\u8e2a\u6253\u5370\u51fa\u56fe\u5c42\u7ea7 IR \u5e76\u5bf9relu\u7b97\u5b50\u8fdb\u884c\u91cd\u5199\u7684\u4f8b\u5b50\uff1a <pre><code>import torch.nn.functional as F\nimport torch.fx as fx\n\ndef my_func(x):\n    return torch.relu(x).neg()\n\ntraced : fx.GraphModule = symbolic_trace(my_func)\nprint(traced.graph)\n\ndef replace_activation(graph: fx.Graph, old_op, new_op):\n    for n in graph.nodes:\n        if n.op == \"call_function\" and n.target == old_op:\n            # create IR to call new activate\n            with graph.inserting_after(n):\n                new_n = graph.call_function(new_op, n.args)\n                n.replace_all_uses_with(new_n)\n                graph.erase_node(n)\n\nreplace_activation(traced.graph, torch.relu, F.gelu)\ntraced.recompile()\nprint(traced.graph)\n</code></pre></p>"},{"location":"mlc/paper-torch.fx.html#41","title":"4.1. \u6355\u83b7\u7a0b\u5e8f\u7ed3\u6784","text":"<p>torch.fx\u7684\u7b26\u53f7\u8ddf\u8e2a\u673a\u5236\u4f7f\u7528\u4e00\u4e2a <code>Proxy</code> \u6570\u636e\u7ed3\u6784\u6765\u8bb0\u5f55\u7ed9\u5b9a\u4e00\u4e2a\u8f93\u5165\u4e4b\u540e\u7ecf\u8fc7\u4e86\u54ea\u4e9b Op\u3002 <code>Proxy</code> \u662f\u4e00\u4e2a duck-typed \u7c7b\u578b\u7684 Python \u7c7b\u8bb0\u5f55\u4e86\u5728\u5b83\u4e4b\u4e0a\u7684\u7684\u5c5e\u6027\u8bbf\u95ee\u548c\u8c03\u7528\u65b9\u6cd5\uff0c\u662f\u7a0b\u5e8f\u4e2d\u771f\u5b9e Op \u7684\u4e0a\u5c42\u62bd\u8c61.</p> <p>PyTorch \u7684\u7b97\u5b50\u4ee5\u53ca Python \u5b50\u96c6\u7684\u67d0\u4e9b\u51fd\u6570\u90fd\u4f1a\u88ab\u8fd9\u4e2a <code>Proxy</code> \u5305\u88c5\u4e00\u6b21\uff0c\u7136\u540e\u5728\u7b26\u53f7\u8ddf\u8e2a\u4f20\u5165\u7684\u662f\u4e00\u4e2a<code>nn.Module</code>\u65f6\uff0c\u4f1a\u5bf9\u8fd9\u4e2a<code>nn.Module</code>\u4e2d\u7684\u5b50<code>nn.Module</code>\u4e5f\u8fdb\u884c <code>Proxy</code> \u5305\u88c5\uff0c\u5f53\u7136\u8fd8\u5305\u542b\u8f93\u5165\u6570\u636e\u3002\u8fd9\u6837\u7a0b\u5e8f\u4e2d\u7684\u8f93\u5165\u548c\u5176\u5b83 Op \u90fd\u662f duck-typed \u7c7b\u578b\u7684 <code>Proxy</code> \u5bf9\u8c61\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6267\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u4e86\uff0c\u4e5f\u5c31\u662f\u7b26\u53f7\u8ddf\u8e2a\u7684\u8fc7\u7a0b\u3002\u7b26\u53f7\u8ddf\u8e2a\u7684\u8fc7\u7a0b\u901a\u8fc7\u4e00\u4e2aTracer\u7c7b\u8fdb\u884c\u914d\u7f6e\uff0c\u5b83\u7684\u65b9\u6cd5\u53ef\u4ee5\u88ab\u91cd\u5199\u4ee5\u63a7\u5236\u54ea\u4e9b\u503c\u88ab\u4f5c\u4e3a <code>Proxy</code> \u5bf9\u8c61\u4fdd\u7559\uff0c\u54ea\u4e9b\u503c\u88ab unpack\u3002\uff08 <code>Proxy</code> \u8bb0\u5f55\u4e0b\u6765\u7684 Op \u53ef\u4ee5\u8fdb\u884c unpack\uff0cunpack \u4e4b\u540e\u53ef\u4ee5\u62ff\u5230\u771f\u5b9e\u7684 Tensor, Parameter \u548c\u8fd0\u7b97\u7b26\u7b49\u7b49\uff09\u3002\u901a\u8fc7 <code>Proxy</code> \u548c Tracer \u7c7b\u7684\u914d\u5408\uff0ctorch.fx\u5c31\u53ef\u4ee5\u5b8c\u6210 PyTorch \u7a0b\u5e8f\u7684\u7b26\u53f7\u8ddf\u8e2a\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u7684\u7b26\u53f7\u8ddf\u8e2a\u7684\u610f\u601d\u5c31\u662f\u8fd0\u884c\u4e00\u904d\u8fd9\u4e2a\u88ab\u4ee3\u7406\u4e4b\u540e\u7684<code>nn.Module</code>\u7684 forward\u3002</p>"},{"location":"mlc/paper-torch.fx.html#42-ir","title":"4.2. IR\u8bbe\u8ba1","text":"<p>torch.fx\u7684 IR \u7531\u4e00\u4e2a Python \u6570\u636e\u7ed3\u6784 Graph \u6765\u7ec4\u7ec7\u3002\u8fd9\u4e2a Graph \u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u5305\u542b\u4e00\u7cfb\u5217Node\u7684\u7ebf\u6027\u8868\u3002\u8282\u70b9\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\u64cd\u4f5c\u7801opcode\uff0c\u63cf\u8ff0\u8282\u70b9\u4ee3\u8868\u4ec0\u4e48\u7c7b\u578b\u7684\u64cd\u4f5c\u3002 \u8282\u70b9\u6709\u4e00\u4e2a\u5173\u8054\u7684\u76ee\u6807\uff0c\u5b83\u662f\u8c03\u7528\u8282\u70b9( <code>call_module</code> \u3001 <code>call_function</code> \u548c <code>call_method</code> ) \u7684\u8c03\u7528\u76ee\u6807\u3002 \u6700\u540e\uff0c\u8282\u70b9\u6709 args \u548c kwargs\uff0c\u5728 trace \u671f\u95f4\u5b83\u4eec\u4e00\u8d77\u8868\u793a Python \u8c03\u7528\u7ea6\u5b9a\u4e2d\u7684\u76ee\u6807\u53c2\u6570\uff08\u6bcf\u4e2a opcode \u5bf9\u5e94\u7684 args \u548c kwargs \u7684\u8bed\u4e49\u53ef\u4ee5\u5728\u9644\u5f55 A.2 \u4e2d\u627e\u5230\uff09\u3002 \u8282\u70b9\u4e4b\u95f4\u7684\u6570\u636e\u4f9d\u8d56\u5173\u7cfb\u8868\u793a\u4e3a args \u548c kwargs \u4e2d\u5bf9\u5176\u4ed6\u8282\u70b9\u7684\u5f15\u7528\u3002</p> <p>torch.fx \u5c06\u7a0b\u5e8f\u7684\u72b6\u6001\u5b58\u50a8\u5728 <code>GraphModule</code> \u7c7b\u4e2d\u3002 <code>GraphModule</code> \u662f\u8f6c\u6362\u7a0b\u5e8f\u7684\u5bb9\u5668\uff0c\u66b4\u9732\u8f6c\u6362\u540e\u751f\u6210\u7684\u4ee3\u7801\uff0c\u5e76\u63d0\u4f9b <code>nn.Module</code> \u7c7b\u4f3c\u7684\u53c2\u6570\u7ba1\u7406 APIs\u3002 <code>GraphModule</code> \u53ef\u4ee5\u5728\u4efb\u4f55\u53ef\u4ee5\u4f7f\u7528\u666e\u901a\u7684 <code>nn.Module</code> \u7684\u5730\u65b9\u4f7f\u7528\uff0c\u4ee5\u63d0\u4f9b\u8f6c\u6362\u540e\u7684\u4ee3\u7801\u548c PyTorch \u751f\u6001\u7cfb\u7edf\u7684\u5176\u4f59\u90e8\u5206\u4e4b\u95f4\u7684\u4e92\u64cd\u4f5c\u6027\u3002</p>"},{"location":"mlc/paper-torch.fx.html#43-source-to-source","title":"4.3. Source-to-Source \u53d8\u6362","text":"<p>torch.fx \u6d41\u6c34\u7ebf\u6700\u540e\u4e00\u6b65\u662f code generation\u3002torch.fx \u5e76\u4e0d\u662f\u9000\u51fa Python \u751f\u6001\u7cfb\u7edf\u5e76\u8fdb\u5165\u5b9a\u5236\u7684\u8fd0\u884c\u65f6\uff0c\u800c\u662f\u4ece\u53d8\u6362\u540e\u7684 IR \u751f\u6210\u6709\u6548\u7684 Python \u6e90\u4ee3\u7801\u3002 \u7136\u540e\u5c06\u6b64\u53d8\u6362\u540e\u7684\u4ee3\u7801\u52a0\u8f7d\u5230 Python \u4e2d\uff0c\u751f\u6210\u4e00\u4e2a\u53ef\u8c03\u7528\u7684 Python \u5bf9\u8c61\uff0c\u5e76\u4f5c\u4e3aforward\u65b9\u6cd5\u5b89\u88c5\u5728 GraphModule \u5b9e\u4f8b\u4e0a\u3002 \u4f7f\u7528\u4ee3\u7801\u751f\u6210\u5141\u8bb8\u5c06 torch.fx \u53d8\u6362\u7684\u7ed3\u679c\u5b89\u88c5\u5728\u6a21\u578b\u4e2d\u5e76\u7528\u4e8e\u8fdb\u4e00\u6b65\u7684\u53d8\u6362\u3002 \u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u62ff\u5230 trace \u539f\u59cb\u7a0b\u5e8f\u7684\u7ed3\u679c\u5e76\u5c06\u5176\u5b89\u88c5\u4e3a\u65b0\u6a21\u5757\u4e2d\u7684\u6fc0\u6d3b\u51fd\u6570\u3002</p> <pre><code>class SampleModule(torch.nn.Module):\n    def forward(self, x):\n        return self.act(x + math.pi)\nsm = SampleModule()\nsm.act = traced # from previous code listing\ntraced : GraphModule = symbolic_trace(sm)\nprint(traced.code)\n\"\"\"\ndef forward(self, x):\nadd = x + 3.141592653589793; x = None\ngelu = torch.nn.functional.gelu(add); add = None\nneg = gelu.neg(); gelu = None\nreturn\n\"\"\"\n</code></pre>"},{"location":"mlc/paper-torch.fx.html#5","title":"5. \u8bbe\u8ba1\u4e0a\u7684\u9009\u62e9","text":""},{"location":"mlc/paper-torch.fx.html#51-symbolic-tracing","title":"5.1. Symbolic Tracing","text":"<p>\u7b26\u53f7\u8ffd\u8e2a\u76f8\u6bd4\u4e8eembedded language \u66f4\u52a0\u7075\u6d3b\uff0c\u4e5f\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec eliminate control flow\uff0c\u4f8b\u5982loop over <code>torch.nn.Sequential</code>\u3002</p> <p>\u7b26\u53f7\u8ffd\u8e2a\u7684\u95ee\u9898\u5728\u4e8e\u5b83\u65e0\u6cd5\u6355\u83b7 input-dependent control flow\u3002 fx\u901a\u8fc7making the tracing process customizable\u89e3\u51b3\u8fd9\u79cd\u6bd4\u8f83\u5c11\u89c1(long-tail)\u7684\u60c5\u51b5\u3002</p>"},{"location":"mlc/paper-torch.fx.html#52-configurable-program-capture","title":"5.2. Configurable Program Capture","text":"<p>torch.fx \u7684\u7b26\u53f7\u8ffd\u8e2a\u662f\u53ef\u5b9a\u5236\u7684\u3002\u53ef\u4ee5\u901a\u8fc7<code>Tracer</code> class \u6765\u5b9a\u5236 <code>fx.symbolic_trace</code>\u7684\u884c\u4e3a\u3002\u901a\u8fc7\u81ea\u5b9a\u4e49\u8ffd\u8e2a\u884c\u4e3a\u6211\u4eec\u5c31\u53ef\u4ee5\u5c4f\u853d\u6389\u6a21\u578b\u4e2d\u4e0d\u53d7\u652f\u6301\u7684\u8bed\u8a00\u529f\u80fd\u3002</p>"},{"location":"mlc/paper-torch.fx.html#53-aot-capture-without-specialization","title":"5.3. AoT Capture without Specialization","text":"<p>\u867d\u7136 ahead-of-time tracing \u9650\u5236\u4e86\u53ef\u4ee5\u6355\u83b7\u7684\u7a0b\u5e8f\u7a7a\u95f4\uff08\u4f8b\u5982\uff0c\u4e0d\u652f\u6301\u4efb\u610f\u63a7\u5236\u6d41\uff09\uff0c\u4f46\u5b83\u63d0\u4f9b\u4e86\u66f4\u53ef\u9884\u6d4b\u548c\u66f4\u53ef\u89c2\u5bdf\u7684\u6355\u83b7\u3001\u8f6c\u6362\u548c\u4ee3\u7801\u751f\u6210\u8fc7\u7a0b\u3002</p> <p>\u4e0e example-based tracing \u4e0d\u540c\uff0c\u7b26\u53f7\u8ddf\u8e2a\u4e0d\u80fd\u7279\u5316\u7a0b\u5e8f\u6d41\uff0c\u56e0\u4e3a\u8fdb\u884c\u6570\u636e\u76f8\u5173\u7684\u63a7\u5236\u6d41\u51b3\u7b56\u6240\u9700\u7684\u4fe1\u606f\u5728\u8ddf\u8e2a\u65f6\u4e0d\u5b58\u5728\u3002</p> <p>\u6bd4\u65b9\u8bf4\u5728\u63a7\u5236\u6d41\u9009\u62e9\u4e2d\u5e38\u7528\u5230\u7684 Tensor \u7684shape \u4fe1\u606f \u548c ndim \u7b49\u4fe1\u606f\uff0c\u5728\u7b26\u53f7\u8ffd\u8e2a\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u4ee5 Proxy \u503c\u88ab\u8fd4\u56de\u3002\u5f53\u4e0a\u4e0b\u6587\u7684\u5176\u5b83\u64cd\u4f5c\u4f7f\u7528\u8fd9\u4e9b\u503c\u65f6\uff0c\u4f1a\u629b\u51fa\u5f02\u5e38\u3002</p>"},{"location":"mlc/paper-torch.fx.html#54-python-ir","title":"5.4. \u57fa\u4e8epython\u7684 IR \u548c\u8f6c\u6362","text":"<p>torch.fx \u6ca1\u6709\u9009\u62e9\u4f7f\u7528 protobuf \u8fd9\u79cd cross-language \u7684\u683c\u5f0f\uff0c\u800c\u662f\u76f4\u63a5\u4f7f\u7528python \u5b9e\u73b0\u3002\u65b9\u4fbfpython \u7528\u6237\u4f7f\u7528\u3002</p> <p>transformations \u7684\u7ed3\u679c\u4e5f\u662f python \u4ee3\u7801\u3002Transformed code \u88ab\u5c01\u88c5\u5728<code>GraphModule</code>\u4e2d\uff0c \u5728PyTorch\u4e2d\u53ef\u4ee5\u50cf\u4f7f\u7528\u5176\u5b83 <code>nn.Module</code>\u4e00\u6837\u4f7f\u7528\u5b83\u3002</p> <p>\u4ee3\u7801\u751f\u6210\u8fdb\u4e00\u6b65\u5c06 torch.fx \u96c6\u6210\u5230 Python \u751f\u6001\u7cfb\u7edf\u4e2d\uff0c\u800c\u4e0d\u662f\u5c06\u8f6c\u6362\u540e\u7684\u4ee3\u7801\u9694\u79bb\u5230\u5b9a\u5236\u4e14\u66f4\u96be\u4f7f\u7528\u7684\u8fd0\u884c\u65f6\u4e2d\uff08\u8fd9\u4e2a\u662f\u5728\u8bf4\u8c01\uff1f\uff09\u3002</p>"},{"location":"mlc/paper-torch.fx.html#55-ir","title":"5.5. \u5728 IR \u4e2d\u6ca1\u6709\u63a7\u5236\u6d41","text":"<p>\u968f\u7740 Transformers \u4ee3\u66ff\u4f20\u7edf\u7684\u5faa\u73af\u795e\u7ecf\u7f51\u7edc\uff0c\u5728dl\u4e2d\u4f7f\u7528 host language \u7684\u63a7\u5236\u6d41\u7684\u673a\u4f1a\u8d8a\u6765\u8d8a\u5c11\u3002\u8bb8\u591a\u6a21\u578b\u53ef\u4ee5\u76f4\u63a5\u4e0d\u9700\u8981\u63a7\u5236\u6d41\u4e5f\u80fd\u5f88\u597d\u7684\u8868\u8fbe\u3002</p> <p>\u7136\u800c\u4e00\u65e6\u5728IR \u4e2d\u52a0\u5165\u4e86\u63a7\u5236\u6d41\uff0c\u5373\u4f7f\u6a21\u578b\u6ca1\u6709\u7528\u5230\u4efb\u4f55\u63a7\u5236\u6d41\uff0c\u4e5f\u4f1a\u6781\u5927\u589e\u52a0\u5206\u6790\u7684\u590d\u6742\u5ea6\u3002\u52a0\u5165\u4e86\u63a7\u5236\u6d41\u4e4b\u540e\u5728\u8fdb\u884c\u8f6c\u6362\u65f6\u7ecf\u5e38\u5f15\u5165bug\uff0c\u76f8\u5bf9\u5730\uff0c\u5bf9\u4e8e basic block IR\uff0c\u5728\u6267\u884c transformation \u65f6\u53ea\u9700\u8981transfer function\u3002</p> <p>\u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u63a7\u5236\u6d41\u5f15\u5165\u7684\u9ebb\u70e6\uff1a <code>x</code>\u7684shape \u5c06\u4f1a\u7531\u8f93\u5165\u7684\u503c\u786e\u5b9a\uff0c\u4ece\u800c\u4f7f\u5f97\u540e\u7eed\u4f7f\u7528<code>x</code>\u7684\u7a0b\u5e8f\u90fd\u53d8\u6210\u52a8\u6001shape\u3002\u5982\u679c\u67d0\u4e2a\u53d8\u6362\u9700\u8981tensor\u786e\u5207\u7684shape\u4fe1\u606f\uff08\u5982ASIC lowering\uff09\uff0c\u5219\u65e0\u6cd5\u7ee7\u7eed\u8fdb\u884c\u3002</p> <p><pre><code>def loop_shapes(x, itr):\n    # x is an input tensor of size [1, N]\n    for _ in range(itr):\n        x = torch.cat((x, x), dim=0)\n    # Depending on the number of loop iterations, x may have an\n    # arbitrary leading dimension i.e. x \\in [*dynamic*, N]\n    return x\n</code></pre> \u6587\u4e2d\u63d0\u5230\u5bf9\u4e8e\u5305\u542b\u63a7\u5236\u6d41\u7684\u5927\u6a21\u578b\uff0ctorch.fx \u4ecd\u7136\u53ef\u4ee5\u5728 basic blocks \u7684\u5b50\u56fe\u4e0a\u505atransform\u3002</p>"},{"location":"mlc/paper-torch.fx.html#56-graphs-but-modules","title":"5.6. \u51fd\u6570\u5f0f\u7684 Graphs but \u6709\u72b6\u6001\u7684 Modules","text":"<p>\u7591\u95ee</p> <ul> <li>Most models do not suffer from this restriction since most mutation is localized to the parameters of the model.\uff08\u90a3\u4ec0\u4e48model\u4f1a\u56e0\u4e3a\u72b6\u6001\u4e0d\u53ef\u53d8\u800c\u53d7\u5230\u5f71\u54cd\u5462\uff09</li> </ul>"},{"location":"mlc/tvm-ansor.html","title":"Ansor: Generating High-Performance Tensor Programs for Deep Learning","text":"<p>\u5de5\u4f5c\u53d1\u5728 2020 OSDI \u4e0a\uff0c \u662f\u5bf9 2018 \u5e74 Learning to optimize tensor program \u5373 Auto-TVM \u7684\u6539\u8fdb\uff0c \u4e3b\u8981\u662f\u5c06 Auto-TVM \u4e2d\u7684\u624b\u52a8\u5199\u8c03\u5ea6\u6a21\u677f\u3001\u81ea\u52a8\u641c\u53c2\u6570\uff0c\u6539\u8fdb\u4e3a\u4e86\u81ea\u52a8\u751f\u6210\u8c03\u5ea6\u6a21\u677f\uff0c\u800c\u65e0\u9700\u518d\u624b\u5199\uff0c\u5728\u641c\u7d22\u7a7a\u95f4\u4e2d\u968f\u673a\u91c7\u6837\uff0c\u7528\u8fdb\u5316\u641c\u7d22\uff08\u9057\u4f20\u7b97\u6cd5\uff09 \u52a0\u4e0a\u6210\u672c\u6a21\u578b \u627e\u5230\u6027\u80fd\u6bd4\u8f83\u597d\u7684\u7a0b\u5e8f\u3002</p> <p>\u5c40\u9650\u5728\u4e8e\u52a8\u6001\u5f62\u72b6\uff0c\u4ee5\u53ca\u81ea\u52a8\u5f20\u91cf\u5316\uff08\u65e0\u6cd5\u5f88\u597d\u5730\u5229\u7528\u5f20\u91cf\u5316\u6307\u4ee4\uff09\uff0c \u540e\u7eed\u5de5\u4f5c\u6709 TensorIR \u7b49</p> <p>\u53c2\u8003:</p> <ul> <li>\u6df1\u5ea6\u5b66\u4e60\u7f16\u8bd1\u7cfb\u5217\u4e4b ANSOR \u6280\u672f\u5206\u4eab</li> </ul>"},{"location":"mlc/tvm-ansor.html#0-abstract","title":"0. Abstract","text":"<p>\u76ee\u524d\uff0cDL \u7cfb\u7edf\u4f9d\u9760\u7279\u5b9a\u5e73\u53f0\u7684\u5185\u6838\u5e93\u6216\u5404\u79cd\u641c\u7d22\u7b56\u7565\u6765\u83b7\u5f97\u9ad8\u6027\u80fd\u5f20\u91cf\u7a0b\u5e8f\u3002 \u8fd9\u4e9b\u65b9\u6cd5\u8981\u4e48\u9700\u8981\u5927\u91cf\u7684\u5de5\u7a0b\u5de5\u4f5c\u6765\u5f00\u53d1\u7279\u5b9a\u5e73\u53f0\u7684\u4f18\u5316\u4ee3\u7801\uff0c\u8981\u4e48\u7531\u4e8e\u6709\u9650\u7684\u641c\u7d22\u7a7a\u95f4\u548c\u65e0\u6548\u7684\u63a2\u7d22\u7b56\u7565\u800c\u65e0\u6cd5\u627e\u5230\u9ad8\u6027\u80fd\u7a0b\u5e8f\u3002</p> <p>\u6211\u4eec\u4ecb\u7ecd\u4e86 Ansor\uff0c\u8fd9\u662f\u4e00\u79cd\u7528\u4e8e DL \u5e94\u7528\u7a0b\u5e8f\u7684\u5f20\u91cf\u7a0b\u5e8f\u751f\u6210\u6846\u67b6\u3002 \u4e0e\u73b0\u6709\u7684\u641c\u7d22\u7b56\u7565\u76f8\u6bd4\uff0cAnsor \u901a\u8fc7\u4ece\u641c\u7d22\u7a7a\u95f4\u7684\u5206\u5c42\u8868\u793a(hierarchical representation)\u4e2d\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u91c7\u6837\uff0c\u63a2\u7d22\u4e86\u66f4\u591a\u7684\u4f18\u5316\u7ec4\u5408\u3002 \u7136\u540e\uff0cAnsor \u901a\u8fc7\u8fdb\u5316\u641c\u7d22(evolutionary search)\u548c a learned cost model \u5bf9\u91c7\u6837\u7a0b\u5e8f\u8fdb\u884c\u5fae\u8c03\uff0c\u4ee5\u786e\u5b9a\u6700\u4f73\u7a0b\u5e8f\u3002 Ansor \u53ef\u4ee5\u627e\u5230\u73b0\u6709\u6700\u5148\u8fdb\u65b9\u6cd5\u641c\u7d22\u8303\u56f4\u4e4b\u5916\u7684\u9ad8\u6027\u80fd\u7a0b\u5e8f\u3002 \u6b64\u5916\uff0cAnsor \u5229\u7528\u4efb\u52a1\u8c03\u5ea6\u7a0b\u5e8f\u540c\u65f6\u4f18\u5316\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u591a\u4e2a\u5b50\u56fe\u3002 \u6211\u4eec\u8868\u660e\uff0c\u76f8\u5bf9\u4e8e\u6700\u5148\u8fdb\u7684\u6280\u672f\uff0cAnsor \u5728 Intel CPU\u3001ARM CPU \u548c NVIDIA GPU \u4e0a\u7684\u6267\u884c\u6027\u80fd\u5206\u522b\u63d0\u9ad8\u4e86 3.8 \u500d\u30012.6 \u500d\u548c 1.7 \u500d</p>"},{"location":"mlc/tvm-ansor.html#10-conclusion","title":"10. Conclusion","text":"<p>\u6211\u4eec\u63d0\u51fa\u4e86 Ansor\uff0c\u4e00\u79cd\u4e3a\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u751f\u6210\u9ad8\u6027\u80fd\u5f20\u91cf\u7a0b\u5e8f\u7684\u81ea\u52a8\u641c\u7d22\u6846\u67b6\u3002 \u901a\u8fc7\u6709\u6548\u5730\u63a2\u7d22\u5927\u578b\u641c\u7d22\u7a7a\u95f4\u5e76\u786e\u5b9a\u6027\u80fd\u74f6\u9888\u7684\u4f18\u5148\u7ea7\uff0cAnsor \u53ef\u4ee5\u627e\u5230\u73b0\u6709\u65b9\u6cd5\u641c\u7d22\u7a7a\u95f4\u4e4b\u5916\u7684\u9ad8\u6027\u80fd\u7a0b\u5e8f\u3002 Ansor \u5728\u5404\u79cd\u795e\u7ecf\u7f51\u7edc\u548c\u786c\u4ef6\u5e73\u53f0\u4e0a\u7684\u6027\u80fd\u4f18\u4e8e\u73b0\u6709\u624b\u52a8\u5e93\u548c\u57fa\u4e8e\u641c\u7d22\u7684\u6846\u67b6\u9ad8\u8fbe 3.8 \u500d\u3002Ansor \u5df2\u96c6\u6210\u5230 Apache TVM \u4e2d\u3002</p>"},{"location":"mlc/tvm-ansor.html#1-intro","title":"1. Intro","text":"<p>\u57fa\u4e8e\u641c\u7d22\u7684\u7f16\u8bd1 [2\u300111\u300132\u300149\u300159] \u6765\u81ea\u52a8\u751f\u6210\u5f20\u91cf\u7a0b\u5e8f(\u5373\u5f20\u91cf\u7b97\u5b50\u7684\u4f4e\u7ea7\u5b9e\u73b0)\u5f97\u5230\u4e86\u5f88\u591a\u7814\u7a76\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u6216\u591a\u4e2a\u7b97\u5b50\u7684\uff08\u5b50\uff09\u56fe\uff0c\u7528\u6237\u4f7f\u7528\u9ad8\u7ea7\u58f0\u660e\u5f0f\u8bed\u8a00 (\u7b2c2\u8282) \u5b9a\u4e49\u8ba1\u7b97\uff0c\u7136\u540e\u7f16\u8bd1\u5668\u641c\u7d22\u9488\u5bf9\u4e0d\u540c\u786c\u4ef6\u5e73\u53f0\u5b9a\u5236\u7684\u7a0b\u5e8f\u3002</p> <p>\u4e3a\u4e86\u627e\u5230\u9ad8\u6027\u80fd\u7684\u5f20\u91cf\u7a0b\u5e8f\uff0c\u57fa\u4e8e\u641c\u7d22\u7684\u65b9\u6cd5\u6709\u5fc5\u8981\u63a2\u7d22\u8db3\u591f\u5927\u7684\u641c\u7d22\u7a7a\u95f4\u4ee5\u6db5\u76d6\u6240\u6709\u6709\u7528\u7684\u5f20\u91cf\u7a0b\u5e8f\u4f18\u5316\u3002 \u7136\u800c\uff0c\u73b0\u6709\u65b9\u6cd5\u65e0\u6cd5\u6355\u83b7\u8bb8\u591a\u6709\u6548\u7684\u4f18\u5316\u7ec4\u5408\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f9d\u8d56\u4e8e\u9884\u5b9a\u4e49\u7684\u624b\u52a8\u7f16\u5199\u6a21\u677f(\u5982 TVM [12], FlexTensor [59]) \u6216\u901a\u8fc7\u8bc4\u4f30\u4e0d\u5b8c\u6574\u7a0b\u5e8f(\u5982 Halide auto-scheduler [2])\uff0c\u8fd9\u4f1a\u963b\u6b62\u5b83\u4eec\u8986\u76d6\u5168\u9762\u7684\u641c\u7d22\u7a7a\u95f4 (\u7b2c2\u8282)\u3002 \u4ed6\u4eec\u7528\u6765\u6784\u5efa\u641c\u7d22\u7a7a\u95f4\u7684\u89c4\u5219\u4e5f\u662f\u6709\u9650\u7684\u3002</p> <p>\u7591\u95ee</p> <p>\u624b\u52a8\u7f16\u5199\u6a21\u677f\u6307\u7684\u662f AutoTVM \u4e2d\u7684\u65b9\u6cd5\uff0c\u5927\u6982\u662f TE-Schedule \uff1f</p> <p>\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u63a2\u7d22\u4e86\u4e00\u79cd\u7528\u4e8e\u751f\u6210\u9ad8\u6027\u80fd\u5f20\u91cf\u7a0b\u5e8f\u7684\u65b0\u578b\u641c\u7d22\u7b56\u7565\u3002 \u5b83\u53ef\u4ee5\u627e\u5230\u73b0\u6709\u65b9\u6cd5\u9057\u6f0f\u7684\u9ad8\u6027\u80fd\u7a0b\u5e8f\u3002</p> <p>\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\u9762\u4e34\u591a\u91cd\u6311\u6218\uff1a</p> <ol> <li>\u9996\u5148\uff0c\u9700\u8981\u4e3a\u7ed9\u5b9a\u7684\u8ba1\u7b97\u5b9a\u4e49\u81ea\u52a8\u6784\u5efa\u4e00\u4e2a\u5927\u7684\u641c\u7d22\u7a7a\u95f4\u6765\u8986\u76d6\u5c3d\u53ef\u80fd\u591a\u7684\u5f20\u91cf\u7a0b\u5e8f\u3002</li> <li>\u5176\u6b21\uff0c\u9700\u8981\u5728\u6bd4\u73b0\u6709\u6a21\u677f\u8986\u76d6\u8303\u56f4\u5927\u51e0\u4e2a\u6570\u91cf\u7ea7\u7684\u5927\u578b\u641c\u7d22\u7a7a\u95f4\u4e2d\u4e0d\u6bd4\u8f83\u4e0d\u5b8c\u6574\u7a0b\u5e8f\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u9ad8\u6548\u641c\u7d22\u3002</li> <li>\u6700\u540e\uff0c\u5728\u4f18\u5316\u5177\u6709\u8bb8\u591a\u5b50\u56fe\u7684 DNN \u65f6\uff0c\u5e94\u8be5\u8bc6\u522b\u5e76\u4f18\u5148\u8003\u8651\u5bf9\u6574\u4f53\u6027\u80fd\u5f71\u54cd\u5927\u7684\u5b50\u56fe\u3002</li> </ol> <p>\u4e3a\u6b64\uff0c\u6211\u4eec\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u4e86 Ansor\uff0c\u8fd9\u662f\u4e00\u79cd\u7528\u4e8e\u81ea\u52a8\u5f20\u91cf\u7a0b\u5e8f\u751f\u6210\u7684\u6846\u67b6\u3002 Ansor \u5229\u7528\u5206\u5c42\u8868\u793a\u6765\u8986\u76d6\u5927\u578b\u641c\u7d22\u7a7a\u95f4\u3002 \u8fd9\u79cd\u8868\u793a\u89e3\u8026\u4e86\u9ad8\u5c42\u7ed3\u6784\u548c\u4f4e\u5c42\u7ec6\u8282\uff0c\u5b9e\u73b0\u4e86\u9ad8\u5c42\u7ed3\u6784\u7684\u7075\u6d3b\u679a\u4e3e\u548c\u4f4e\u5c42\u7ec6\u8282\u7684\u9ad8\u6548\u91c7\u6837\u3002\u7136\u540e Ansor \u4ece\u641c\u7d22\u7a7a\u95f4\u4e2d\u91c7\u6837\u5b8c\u6574\u7684\u7a0b\u5e8f\uff0c\u5e76\u4f7f\u7528 evolutionary search \u548c a learned cost model \u5bf9\u8fd9\u4e9b\u7a0b\u5e8f\u8fdb\u884c\u5fae\u8c03\u3002 \u4e3a\u4e86\u4f18\u5316\u5177\u6709\u591a\u4e2a\u5b50\u56fe\u7684 DNN \u7684\u6027\u80fd\uff0cAnsor \u52a8\u6001\u5730\u5bf9\u66f4\u6709\u53ef\u80fd\u63d0\u9ad8\u7aef\u5230\u7aef\u6027\u80fd\u7684 DNN \u7684\u5b50\u56fe\u8fdb\u884c\u4f18\u5148\u7ea7\u6392\u5e8f\u3002</p> <p>\u6211\u4eec\u6839\u636e manual libraries \u548c\u6700\u5148\u8fdb\u7684  search-based frameworks \uff0c \u5728\u6807\u51c6 DL benchmark \u548c\u65b0\u5174\u7684\u5de5\u4f5c\u8d1f\u8f7d\u4e0a\u8bc4\u4f30 Ansor\u3002 \u7ed3\u679c\u8868\u660e\uff0cAnsor \u5c06 DNN \u5728 Intel CPU\u3001 ARM CPU \u548c NVIDIA GPU \u4e0a\u7684\u6267\u884c\u6027\u80fd\u5206\u522b\u63d0\u9ad8\u4e86 3.8 \u500d\u30012.6 \u500d\u548c 1.7 \u500d\u3002 \u5bf9\u4e8e\u5927\u591a\u6570\u8ba1\u7b97\u5b9a\u4e49\uff0cAnsor \u627e\u5230\u7684\u6700\u4f73\u7a0b\u5e8f\u4f4d\u4e8e\u73b0\u6709 search-based \u7684\u65b9\u6cd5\u7684\u641c\u7d22\u7a7a\u95f4\u4e4b\u5916\u3002 \u7ed3\u679c\u8fd8\u8868\u660e\uff0c\u4e0e\u73b0\u6709\u7684 search-based \u7684\u65b9\u6cd5\u76f8\u6bd4\uff0cAnsor \u7684\u641c\u7d22\u6548\u7387\u66f4\u9ad8\uff0c\u5728\u66f4\u77ed\u7684\u65f6\u95f4\u5185\u751f\u6210\u6027\u80fd\u66f4\u9ad8\u7684\u7a0b\u5e8f\uff0c\u5c3d\u7ba1\u5176\u641c\u7d22\u7a7a\u95f4\u66f4\u5927\u3002 Ansor \u53ef\u4ee5\u4e0e\u6700\u5148\u8fdb\u6846\u67b6\u7684\u6027\u80fd\u76f8\u5ab2\u7f8e\uff0c\u641c\u7d22\u65f6\u95f4\u51cf\u5c11\u4e00\u4e2a\u6570\u91cf\u7ea7\u3002 \u6b64\u5916\uff0cAnsor \u53ea\u9700\u8981\u4ed6\u4eec\u7684\u6570\u5b66\u5b9a\u4e49\u800c\u65e0\u9700\u624b\u52a8\u6a21\u677f\uff0c\u4ece\u800c\u53ef\u4ee5\u81ea\u52a8\u6269\u5c55\u5230\u65b0\u7684\u7b97\u5b50\u3002</p> <p>\u8d21\u732e\uff1a </p> <ul> <li>\u4e00\u79cd\u4e3a\u8ba1\u7b97\u56fe\u751f\u6210\u5f20\u91cf\u7a0b\u5e8f\u7684\u5927\u578b\u5206\u5c42\u641c\u7d22\u7a7a\u95f4\u7684\u673a\u5236\u3002 </li> <li>\u4e00\u79cd\u5177\u6709\u5b66\u4e60\u6210\u672c\u6a21\u578b\u7684\u8fdb\u5316\u7b56\u7565\uff0c\u7528\u4e8e\u5fae\u8c03\u5f20\u91cf\u7a0b\u5e8f\u7684\u6027\u80fd\u3002 </li> <li>\u4e00\u79cd\u57fa\u4e8e\u68af\u5ea6\u4e0b\u964d\u7684\u8c03\u5ea6\u7b97\u6cd5\uff0c\u5728\u4f18\u5316DNN \u7684\u7aef\u5230\u7aef\u6027\u80fd\u65f6\u4f18\u5148\u8003\u8651\u91cd\u8981\u7684\u5b50\u56fe\u3002 </li> <li>Ansor \u7cfb\u7edf\u7684\u5b9e\u65bd\u548c\u7efc\u5408\u8bc4\u4f30\u8868\u660e\u4e0a\u8ff0\u6280\u672f\u5728\u5404\u79cd DNN \u548c\u786c\u4ef6\u5e73\u53f0\u4e0a\u4f18\u4e8e\u6700\u5148\u8fdb\u7684\u7cfb\u7edf\u3002</li> </ul>"},{"location":"mlc/tvm-ansor.html#2-background","title":"2. Background","text":"<p>\u4ece\u9ad8\u7ea7\u5b9a\u4e49\u81ea\u52a8\u751f\u6210\u9ad8\u6027\u80fd\u7684\u5f20\u91cf\u7a0b\u5e8f\u662f\u6781\u5176\u56f0\u96be\u7684\u3002 \u6839\u636e\u76ee\u6807\u5e73\u53f0\u7684\u67b6\u6784\uff0c\u7f16\u8bd1\u5668\u9700\u8981\u5728\u4e00\u4e2a\u975e\u5e38\u5927\u548c\u590d\u6742\u7684\u7a7a\u95f4\u4e2d\u641c\u7d22\uff0c\u5176\u4e2d\u5305\u542b\u4f18\u5316\u7684\u7ec4\u5408\u9009\u62e9\uff08\u4f8b\u5982\uff0ctile \u7ed3\u6784\u3001tile \u5927\u5c0f\u3001\u77e2\u91cf\u5316\u3001\u5e76\u884c\u5316\uff09\u3002 \u6211\u4eec\u5728\u672c\u8282\u4e2d\u63cf\u8ff0\u4e86\u4e24\u79cd\u6700\u8fd1\u6709\u6548\u7684\u65b9\u6cd5\uff0c\u5e76\u5728\u7b2c 8 \u8282\u4e2d\u63cf\u8ff0\u4e86\u5176\u4ed6\u76f8\u5173\u5de5\u4f5c</p> <ol> <li> <p>Template-guided search</p> <p>\u5728 Template-guided \u641c\u7d22\u4e2d\uff0c\u641c\u7d22\u7a7a\u95f4\u7531\u624b\u52a8\u6a21\u677f\u5b9a\u4e49\u3002 \u5982 \u56fe2a \u6240\u793a\uff0c\u7f16\u8bd1\u5668\uff08\u4f8b\u5982 TVM\uff09\u8981\u6c42\u7528\u6237\u624b\u52a8\u7f16\u5199\u8ba1\u7b97\u5b9a\u4e49\u6a21\u677f\u3002 \u8be5\u6a21\u677f\u4f7f\u7528\u4e00\u4e9b\u53ef\u8c03\u53c2\u6570 (\u4f8b\u5982\uff0ctile size \u548c unrolling factor) \u5b9a\u4e49\u5f20\u91cf\u7a0b\u5e8f\u7684\u7ed3\u6784\u3002 \u7136\u540e\uff0c\u7f16\u8bd1\u5668\u9488\u5bf9\u7279\u5b9a\u8f93\u5165\u5f62\u72b6\u914d\u7f6e\u548c\u7279\u5b9a\u786c\u4ef6\u76ee\u6807\u641c\u7d22\u8fd9\u4e9b\u53c2\u6570\u7684\u6700\u4f73\u503c\u3002 \u8fd9\u79cd\u65b9\u6cd5\u5728\u5e38\u89c1\u7684\u6df1\u5ea6\u5b66\u4e60\u7b97\u5b50\u4e0a\u53d6\u5f97\u4e86\u826f\u597d\u7684\u6027\u80fd\u3002 </p> <p>\u7136\u800c\uff0c\u5f00\u53d1\u6a21\u677f\u9700\u8981\u5927\u91cf\u7684\u52aa\u529b\u3002 \u4f8b\u5982\uff0cTVM \u7684\u4ee3\u7801\u5e93\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86\u8fd9\u4e9b\u6a21\u677f\u7684 15K \u591a\u884c\u4ee3\u7801\u3002 \u968f\u7740\u65b0\u7b97\u5b50\u548c\u65b0\u786c\u4ef6\u5e73\u53f0\u7684\u51fa\u73b0\uff0c\u8fd9\u4e2a\u6570\u5b57\u8fd8\u5728\u7ee7\u7eed\u589e\u957f\u3002 \u6b64\u5916\uff0c\u6784\u5efa\u9ad8\u8d28\u91cf\u6a21\u677f\u9700\u8981\u5f20\u91cf\u7b97\u5b50\u548c\u786c\u4ef6\u65b9\u9762\u7684\u4e13\u4e1a\u77e5\u8bc6 [32, 55, 59]\u3002 \u5c3d\u7ba1\u6a21\u677f\u8bbe\u8ba1\u5f88\u590d\u6742\uff0c\u4f46\u624b\u52a8\u6a21\u677f\u4ec5\u6db5\u76d6\u6709\u9650\u7684\u7a0b\u5e8f\u7ed3\u6784\uff0c\u624b\u52a8\u679a\u4e3e\u6240\u6709 \u7b97\u5b50 \u7684\u6240\u6709\u4f18\u5316\u9009\u62e9\u662f\u4ee4\u4eba\u671b\u800c\u5374\u6b65\u7684\u3002 </p> <p>\u8fd9\u79cd\u65b9\u6cd5\u901a\u5e38\u9700\u8981\u4e3a\u6bcf\u4e2a \u7b97\u5b50 \u5b9a\u4e49\u4e00\u4e2a\u6a21\u677f\u3002 FlexTensor [59] \u63d0\u51fa\u4e86\u4e00\u4e2a\u8986\u76d6\u591a\u4e2a\u7b97\u5b50\u7684\u901a\u7528\u6a21\u677f\uff0c\u4f46\u5b83\u7684\u6a21\u677f\u4ecd\u7136\u662f\u4e3a\u5355\u4e2a\u7b97\u5b50\u7c92\u5ea6\u8bbe\u8ba1\u7684\uff0c\u6ca1\u6709\u5305\u62ec\u6d89\u53ca\u591a\u4e2a\u7b97\u5b50\u7684\u4f18\u5316\uff08\u4f8b\u5982\uff0c\u7b97\u5b50\u878d\u5408\uff09\u3002 \u4f18\u5316\u5177\u6709\u591a\u4e2a\u7b97\u5b50\u7684\u8ba1\u7b97\u56fe\u7684\u641c\u7d22\u7a7a\u95f4\u5e94\u8be5\u5305\u542b\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u7ec4\u5408\u7b97\u5b50\u3002 \u57fa\u4e8e\u6a21\u677f\u7684\u65b9\u6cd5\u65e0\u6cd5\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u56e0\u4e3a\u5b83\u65e0\u6cd5\u5206\u89e3\u56fa\u5b9a\u6a21\u677f\u5e76\u5728\u641c\u7d22\u8fc7\u7a0b\u4e2d\u91cd\u65b0\u7ec4\u5408\u5b83\u4eec\u3002</p> </li> <li> <p>Sequential construction based search</p> <p>\u7591\u95ee</p> <p>\u540e\u7eed\u53ef\u4ee5\u770b\u4e00\u4e0b\u8fd9\u4e2a\u662f\u4ec0\u4e48\u4e1c\u897f\uff0c beam search?</p> <p>\u8fd9\u79cd\u65b9\u6cd5\u901a\u8fc7\u5c06\u7a0b\u5e8f\u6784\u9020\u5206\u89e3\u4e3a\u56fa\u5b9a\u7684\u51b3\u7b56\u5e8f\u5217\u6765\u5b9a\u4e49\u641c\u7d22\u7a7a\u95f4\u3002 \u7136\u540e\uff0c\u7f16\u8bd1\u5668\u4f7f\u7528\u4e00\u79cd\u7b97\u6cd5\uff0c\u4f8b\u5982 beam search [34] \u6765\u641c\u7d22\u597d\u7684\u51b3\u7b56\uff08\u4f8b\u5982\uff0cHalide auto-scheduler [2]\uff09\u3002 \u5728\u8fd9\u79cd\u65b9\u6cd5\u4e2d\uff0c\u7f16\u8bd1\u5668\u901a\u8fc7\u987a\u5e8f\u5c55\u5f00\u8ba1\u7b97\u56fe\u4e2d\u7684\u6240\u6709\u8282\u70b9\u6765\u6784\u5efa\u5f20\u91cf\u7a0b\u5e8f\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u7f16\u8bd1\u5668\u90fd\u4f1a\u5c31\u5982\u4f55\u5c06\u5176\u8f6c\u6362\u4e3a\u4f4e\u7ea7\u5f20\u91cf\u7a0b\u5e8f\u505a\u51fa\u4e00\u4e9b\u51b3\u5b9a\uff08\u5373\u51b3\u5b9a\u8ba1\u7b97\u4f4d\u7f6e\u3001\u5b58\u50a8\u4f4d\u7f6e\u3001\u5206\u5757\u5927\u5c0f\u7b49\uff09\u3002 \u5f53\u6240\u6709\u8282\u70b9\u5c55\u5f00\u540e\uff0c\u4e00\u4e2a\u5b8c\u6574\u7684\u5f20\u91cf\u7a0b\u5e8f\u5c31\u6784\u5efa\u5b8c\u6210\u4e86\u3002 \u8be5\u65b9\u6cd5\u5bf9\u6bcf\u4e2a\u8282\u70b9\u4f7f\u7528\u4e00\u7ec4\u901a\u7528\u7684\u5c55\u5f00\u89c4\u5219\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u81ea\u52a8\u641c\u7d22\u800c\u4e0d\u9700\u8981\u624b\u52a8\u6a21\u677f\u3002 \u7531\u4e8e\u6bcf\u4e2a\u51b3\u7b56\u7684\u53ef\u80fd\u9009\u62e9\u6570\u91cf\u5f88\u5927\uff0c\u4e3a\u4e86\u4f7f\u987a\u5e8f\u8fc7\u7a0b\u53ef\u884c\uff0c \u7f16\u8bd1\u5668\u4f30\u8ba1\u5019\u9009\u7a0b\u5e8f\u7684\u6027\u80fd\u5e76\u5c06\u5176\u4e0e \u5b66\u4e60\u6210\u672c\u6a21\u578b \u8fdb\u884c\u6bd4\u8f83\uff0c\u4ee5\u9009\u62e9\u524d k \u4e2a\u5019\u9009\u7a0b\u5e8f\u3002 \u5728\u641c\u7d22\u8fc7\u7a0b\u4e2d\uff0c\u5019\u9009\u7a0b\u5e8f\u662f\u4e0d\u5b8c\u6574\u7684\uff0c\u56e0\u4e3a\u4ec5\u5c55\u5f00\u4e86\u90e8\u5206\u8ba1\u7b97\u56fe\u6216\u4ec5\u505a\u51fa\u4e86\u90e8\u5206\u51b3\u7b56\u3002 \u56fe 2b \u663e\u793a\u4e86\u8fd9\u4e2a\u8fc7\u7a0b\u3002\u7136\u800c\uff0c\u4f30\u8ba1\u4e0d\u5b8c\u6574\u7a0b\u5e8f\u7684\u6700\u7ec8\u6027\u80fd\u5728\u51e0\u4e2a\u65b9\u9762\u662f\u56f0\u96be\u7684\uff1a</p> <p>(1) \u5728\u5b8c\u6574\u7a0b\u5e8f\u4e0a\u8bad\u7ec3\u7684\u6210\u672c\u6a21\u578b\u4e0d\u80fd\u51c6\u786e\u9884\u6d4b\u4e0d\u5b8c\u6574\u7a0b\u5e8f\u7684\u6700\u7ec8\u6027\u80fd\u3002 \u6210\u672c\u6a21\u578b\u53ea\u80fd\u5728\u5b8c\u6574\u7684\u7a0b\u5e8f\u4e0a\u8fdb\u884c\u8bad\u7ec3\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u7f16\u8bd1\u7a0b\u5e8f\u5e76\u6d4b\u91cf\u5b83\u4eec\u7684\u6267\u884c\u65f6\u95f4\u4ee5\u83b7\u5f97\u8bad\u7ec3\u6807\u7b7e\u3002 \u76f4\u63a5\u4f7f\u7528\u8fd9\u4e2a\u6a21\u578b\u6765\u9884\u6d4b\u4e0d\u5b8c\u6574\u7a0b\u5e8f\u7684\u6027\u80fd\u51c6\u786e\u6027\u4f1a\u5f88\u5dee\u3002 \u4f5c\u4e3a\u6848\u4f8b\u7814\u7a76\uff0c\u6211\u4eec\u4f7f\u7528\u6765\u81ea\u641c\u7d22\u7a7a\u95f4\u7684 20,000 \u4e2a\u968f\u673a\u5b8c\u6574\u7a0b\u5e8f\u6765\u8bad\u7ec3\u6211\u4eec\u7684\u6210\u672c\u6a21\u578b (5.2\u8282)\uff0c\u5e76\u4f7f\u7528\u8be5\u6a21\u578b\u6765\u9884\u6d4b\u4e0d\u5b8c\u6574\u7a0b\u5e8f\u7684\u6700\u7ec8\u6027\u80fd\u3002 \u4e0d\u5b8c\u6574\u7684\u7a0b\u5e8f\u662f\u901a\u8fc7\u4ec5\u5e94\u7528\u5b8c\u6574\u7a0b\u5e8f\u7684\u4e00\u5c0f\u90e8\u5206\u5faa\u73af\u8f6c\u6362\u800c\u83b7\u5f97\u7684\u3002 \u6211\u4eec\u4f7f\u7528\u4e24\u4e2a\u6307\u6807\u8fdb\u884c\u8bc4\u4f30\uff1apair-wise \u7684 accuracy \u548c \u524d k \u4e2a\u7a0b\u5e8f\u7684 recall@k score (k = 10)\u3002 \u5982 \u56fe 3 \u6240\u793a\uff0c\u4e24\u6761\u66f2\u7ebf\u5206\u522b\u4ece 50% \u548c 0% \u5f00\u59cb\uff0c\u8fd9\u610f\u5473\u7740\u96f6\u4fe1\u606f\u7684\u968f\u673a\u731c\u6d4b\u7ed9\u51fa\u4e86 50% \u7684\u6210\u5bf9\u6bd4\u8f83\u51c6\u786e\u7387\u548c 0% \u7684 top-k recall\u3002 \u8fd9\u4e24\u6761\u66f2\u7ebf\u968f\u7740\u7a0b\u5e8f\u7684\u5b8c\u6210\u800c\u8fc5\u901f\u589e\u52a0\uff0c\u8fd9\u610f\u5473\u7740\u6210\u672c\u6a21\u578b\u5bf9\u4e8e\u5b8c\u6574\u7a0b\u5e8f\u7684\u6027\u80fd\u975e\u5e38\u597d\uff0c\u4f46\u65e0\u6cd5\u51c6\u786e\u9884\u6d4b\u4e0d\u5b8c\u6574\u7a0b\u5e8f\u7684\u6700\u7ec8\u6027\u80fd\u3002</p> <p>note</p> <p>\u5176\u4e2d accuracy \u662f\u68c0\u7d22\u51fa\u76f8\u5173\u6587\u6863\u6570\u4e0e\u68c0\u7d22\u51fa\u7684\u6587\u6863\u603b\u6570\u7684\u6bd4\u7387\uff0c\u8861\u91cf\u7684\u662f\u68c0\u7d22\u7cfb\u7edf\u7684\u67e5\u51c6\u7387\uff1b</p> <p>recall \u662f\u6307\u68c0\u7d22\u51fa\u7684\u76f8\u5173\u6587\u6863\u6570\u548c\u6587\u6863\u5e93\u4e2d\u6240\u6709\u7684\u76f8\u5173\u6587\u6863\u6570\u7684\u6bd4\u7387\uff0c\u8861\u91cf\u7684\u662f\u68c0\u7d22\u7cfb\u7edf\u7684\u67e5\u5168\u7387\u3002</p> <p>(2) \u987a\u5e8f\u51b3\u7b56\u7684\u56fa\u5b9a\u987a\u5e8f\u9650\u5236\u4e86\u641c\u7d22\u7a7a\u95f4\u7684\u8bbe\u8ba1\u3002 \u4f8b\u5982\uff0c\u67d0\u4e9b\u4f18\u5316\u9700\u8981\u5411\u8ba1\u7b97\u56fe\u4e2d\u6dfb\u52a0\u65b0\u8282\u70b9\uff08\u4f8b\u5982\uff0c\u6dfb\u52a0\u7f13\u5b58\u8282\u70b9\uff0c\u4f7f\u7528 rfactor [46]\uff09\u3002 \u4e0d\u540c\u7a0b\u5e8f\u7684\u51b3\u7b56\u6570\u53d8\u5f97\u4e0d\u540c\u3002 \u5f88\u96be\u5bf9\u9f50\u4e0d\u5b8c\u6574\u7684\u7a0b\u5e8f\u4ee5\u8fdb\u884c\u516c\u5e73\u6bd4\u8f83\u3002</p> <p>(3) Sequential construction based search is not scalable\u3002 \u6269\u5927\u641c\u7d22\u7a7a\u95f4\u9700\u8981\u589e\u52a0\u66f4\u591a\u7684\u987a\u5e8f\u6784\u9020\u6b65\u9aa4\uff0c\u7136\u800c\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u66f4\u4e25\u91cd\u7684\u7d2f\u79ef\u8bef\u5dee\u3002</p> </li> <li> <p>Ansor\u2019s hierarchical approach</p> <p>Ansor \u7531\u5206\u5c42\u641c\u7d22\u7a7a\u95f4\u652f\u6301\uff0c\u8be5\u7a7a\u95f4\u5c06\u9ad8\u7ea7\u7ed3\u6784\u548c\u4f4e\u7ea7\u7ec6\u8282\u5206\u79bb\u3002 Ansor \u81ea\u52a8\u6784\u5efa\u8ba1\u7b97\u56fe\u7684\u641c\u7d22\u7a7a\u95f4\uff0c\u65e0\u9700\u624b\u52a8\u5f00\u53d1\u6a21\u677f\u3002 \u7136\u540e Ansor \u4ece\u7a7a\u95f4\u4e2d\u91c7\u6837\u5b8c\u6574\u7684\u7a0b\u5e8f\u5e76\u5bf9\u5b8c\u6574\u7684\u7a0b\u5e8f\u8fdb\u884c\u5fae\u8c03\uff0c\u907f\u514d\u5bf9\u4e0d\u5b8c\u6574\u7a0b\u5e8f\u7684\u4f30\u8ba1\u4e0d\u51c6\u786e\u3002 \u56fe 2 \u663e\u793a\u4e86 Ansor \u7684\u65b9\u6cd5\u4e0e\u73b0\u6709\u65b9\u6cd5\u4e4b\u95f4\u7684\u4e3b\u8981\u533a\u522b\u3002</p> </li> </ol>"},{"location":"mlc/tvm-ansor.html#3-design-overview","title":"3. Design Overview","text":"<p>\u56fe 4 \u663e\u793a\u4e86 Ansor \u7684\u6574\u4f53\u67b6\u6784\u3002 Ansor \u4f7f\u7528 Relay [42] \u7684 \u7b97\u5b50\u878d\u5408\u7b97\u6cd5\u5c06 DNN \u4ece\u6d41\u884c\u7684\u6a21\u578b\u683c\u5f0f\u8f6c\u6362\u4e3a\u5206\u533a\u7684\u5c0f\u5b50\u56fe\u3002 Ansor \u7136\u540e\u4e3a\u8fd9\u4e9b\u5b50\u56fe\u751f\u6210\u5f20\u91cf\u7a0b\u5e8f\u3002 Ansor \u5305\u542b\u4e09\u4e2a\u4e3b\u8981\u7ec4\u4ef6\uff1a</p> <ol> <li>\u4e00\u4e2a\u7a0b\u5e8f\u91c7\u6837\u5668\uff0c\u5b83\u6784\u5efa\u4e00\u4e2a\u5927\u7684\u641c\u7d22\u7a7a\u95f4\u5e76\u4ece\u4e2d\u91c7\u6837\u4e0d\u540c\u7684\u7a0b\u5e8f</li> <li>performance tuner</li> <li>a task scheduler \u4e3a\u4f18\u5316 DNN \u4e2d\u7684\u591a\u4e2a\u5b50\u56fe\u5206\u914d\u65f6\u95f4\u8d44\u6e90</li> </ol> <p>\u7a0b\u5e8f\u91c7\u6837\u5668\u3002 Ansor \u5fc5\u987b\u89e3\u51b3\u7684\u4e00\u4e2a\u5173\u952e\u6311\u6218\u662f\u4e3a\u7ed9\u5b9a\u7684\u8ba1\u7b97\u56fe\u751f\u6210\u4e00\u4e2a\u5927\u7684\u641c\u7d22\u7a7a\u95f4\u3002 \u4e3a\u4e86\u6db5\u76d6\u5177\u6709\u5404\u79cd\u9ad8\u7ea7\u7ed3\u6784\u548c\u4f4e\u7ea7\u7ec6\u8282\u7684\u5404\u79cd\u5f20\u91cf\u7a0b\u5e8f\uff0cAnsor \u4f7f\u7528\u5177\u6709\u4e24\u4e2a\u7ea7\u522b\u7684\u641c\u7d22\u7a7a\u95f4\u7684\u5206\u5c42\u8868\u793a\uff1asketch \u548c annotation\uff08\u7b2c\u56db\u7ae0\uff09\u3002 Ansor \u5c06\u7a0b\u5e8f\u7684\u9ad8\u7ea7\u7ed3\u6784\u5b9a\u4e49\u4e3a\u8349\u56fe\uff0c\u5e76\u7559\u4e0b\u6570\u5341\u4ebf\u4e2a\u4f4e\u7ea7\u9009\u62e9\uff08\u4f8b\u5982\uff0ctile size, parallel, unroll annotations\uff09\u4f5c\u4e3a\u6ce8\u91ca\u3002 \u8fd9\u79cd\u8868\u793a\u5141\u8bb8 Ansor \u7075\u6d3b\u5730\u679a\u4e3e\u9ad8\u7ea7\u7ed3\u6784\u5e76\u6709\u6548\u5730\u91c7\u6837\u4f4e\u7ea7\u7ec6\u8282\u3002 Ansor \u5305\u62ec\u4e00\u4e2a\u7a0b\u5e8f\u91c7\u6837\u5668\uff0c\u5b83\u4ece\u7a7a\u95f4\u4e2d\u968f\u673a\u91c7\u6837\u7a0b\u5e8f\u4ee5\u63d0\u4f9b\u5bf9\u641c\u7d22\u7a7a\u95f4\u7684\u5168\u9762\u8986\u76d6\u3002</p> <p>\u6027\u80fd\u4f18\u5316\u5668\u3002 \u968f\u673a\u62bd\u6837\u7a0b\u5e8f\u7684\u6027\u80fd\u4e0d\u4e00\u5b9a\u597d\u3002 \u4e0b\u4e00\u4e2a\u6311\u6218\u662f\u5fae\u8c03\u3002 Ansor \u91c7\u7528\u8fdb\u5316\u641c\u7d22\u548c\u5b66\u4e60\u6210\u672c\u6a21\u578b\u8fed\u4ee3\u5730\u5fae\u8c03 (\u7b2c\u4e94\u7ae0)\u3002 \u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0cAnsor \u4f7f\u7528\u91cd\u65b0\u91c7\u6837\u7684\u65b0\u7a0b\u5e8f\u4ee5\u53ca\u5148\u524d\u8fed\u4ee3\u4e2d\u7684\u597d\u7a0b\u5e8f\u4f5c\u4e3a\u521d\u59cb\u79cd\u7fa4\u6765\u5f00\u59cb\u8fdb\u5316\u641c\u7d22\u3002 \u8fdb\u5316\u641c\u7d22\u901a\u8fc7\u53d8\u5f02\u548c\u4ea4\u53c9\u5fae\u8c03\u7a0b\u5e8f\uff0c\u6267\u884c\u4e71\u5e8f\u91cd\u5199\u5e76\u89e3\u51b3\u987a\u5e8f\u6784\u5efa\u7684\u5c40\u9650\u6027\u3002 \u67e5\u8be2\u5b66\u4e60\u6210\u672c\u6a21\u578b\u6bd4\u5b9e\u9645\u6d4b\u91cf\u5feb\u51e0\u4e2a\u6570\u91cf\u7ea7\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728\u51e0\u79d2\u949f\u5185\u8bc4\u4f30\u6570\u5343\u4e2a\u7a0b\u5e8f\u3002</p> <p>\u4efb\u52a1\u8c03\u5ea6\u5668\u3002 \u4f7f\u7528\u7a0b\u5e8f\u91c7\u6837\u548c\u6027\u80fd\u5fae\u8c03\u5141\u8bb8 Ansor \u4e3a\u8ba1\u7b97\u56fe\u627e\u5230\u9ad8\u6027\u80fd\u5f20\u91cf\u7a0b\u5e8f\u3002 \u76f4\u89c2\u5730\u8bf4\uff0c\u5c06\u6574\u4e2a DNN \u89c6\u4e3a\u5355\u4e2a\u8ba1\u7b97\u56fe\u5e76\u4e3a\u5176\u751f\u6210\u5b8c\u6574\u7684\u5f20\u91cf\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u5b9e\u73b0\u6700\u4f73\u6027\u80fd\u3002 \u7136\u800c\uff0c\u8fd9\u6837\u641c\u7d22\u7a7a\u95f4\u4f1a\u6307\u6570\u7206\u70b8\u3002 \u901a\u5e38\uff0c\u7f16\u8bd1\u5668\u5c06 \u5927\u578b\u8ba1\u7b97\u56fe \u5212\u5206\u4e3a\u51e0\u4e2a\u5c0f\u5b50\u56fe [11\u300142]\u3002 \u7531\u4e8e DNN \u7684\u9010\u5c42\u6784\u9020\u6027\u8d28\uff0c\u6b64\u5206\u533a\u5bf9\u6027\u80fd\u7684\u5f71\u54cd\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\u3002 \u8fd9\u5c31\u5e26\u6765\u4e86 Ansor \u7684\u6700\u540e\u4e00\u4e2a\u6311\u6218\uff1a\u5728\u4e3a\u591a\u4e2a\u5b50\u56fe\u751f\u6210\u7a0b\u5e8f\u65f6\u5982\u4f55\u5206\u914d\u65f6\u95f4\u8d44\u6e90\u3002Ansor \u4e2d\u7684\u4efb\u52a1\u8c03\u5ea6\u5668\uff08\u7b2c\u516d\u7ae0\uff09\u4f7f\u7528\u57fa\u4e8e\u68af\u5ea6\u4e0b\u964d\u7684\u8c03\u5ea6\u7b97\u6cd5\u5c06\u8d44\u6e90\u5206\u914d\u7ed9\u66f4\u6709\u53ef\u80fd\u63d0\u9ad8\u7aef\u5230\u7aef DNN \u6027\u80fd\u7684\u5b50\u56fe\u3002</p>"},{"location":"mlc/tvm-ansor.html#4-program-sampling","title":"4. Program Sampling","text":"<p>\u641c\u7d22\u7a7a\u95f4\u51b3\u5b9a\u4e86\u5b83\u53ef\u4ee5\u627e\u5230\u7684\u6700\u4f73\u7a0b\u5e8f\u3002 \u73b0\u6709\u65b9\u6cd5\u4e2d\u8003\u8651\u7684\u641c\u7d22\u7a7a\u95f4\u53d7\u5230\u4ee5\u4e0b\u56e0\u7d20\u7684\u9650\u5236\uff1a</p> <ol> <li>\u624b\u52a8\u679a\u4e3e\uff08\u4f8b\u5982 AutoTVM\uff09\u3002 \u901a\u8fc7\u6a21\u677f\u624b\u52a8\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u9009\u62e9\u662f\u4e0d\u5207\u5b9e\u9645\u7684\uff0c\u56e0\u6b64\u73b0\u6709\u7684\u624b\u52a8\u6a21\u677f\u53ea\u80fd\u542f\u53d1\u5f0f(heuristically) \u5730\u8986\u76d6\u6709\u9650\u7684\u641c\u7d22\u7a7a\u95f4\u3002</li> <li>\u79ef\u6781\u7684\u65e9\u671f\u526a\u679d\uff08\u4f8b\u5982 Halide auto-scheduler [2]\uff09\u3002 \u57fa\u4e8e\u8bc4\u4f30\u4e0d\u5b8c\u6574\u7a0b\u5e8f\u7684\u6fc0\u8fdb\u65e9\u671f\u526a\u679d\u4f1a\u963b\u6b62\u641c\u7d22\u7b97\u6cd5\u63a2\u7d22\u7a7a\u95f4\u4e2d\u7684\u67d0\u4e9b\u533a\u57df\u3002</li> </ol> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u901a\u8fc7\u89e3\u51b3\u4e0a\u8ff0\u9650\u5236\u6765\u63a8\u52a8\u6240\u8003\u8651\u641c\u7d22\u7a7a\u95f4\u8fb9\u754c\u7684\u6280\u672f\u3002 \u4e3a\u4e86\u89e3\u51b3 <code>(1)</code>\uff0c\u6211\u4eec\u901a\u8fc7\u9012\u5f52\u5730\u5e94\u7528\u4e00\u7ec4\u7075\u6d3b\u7684\u63a8\u5bfc\u89c4\u5219\u6765\u81ea\u52a8\u6269\u5c55\u641c\u7d22\u7a7a\u95f4\u3002 \u4e3a\u907f\u514d <code>(2)</code>\uff0c\u6211\u4eec\u5728\u641c\u7d22\u7a7a\u95f4\u4e2d\u968f\u673a\u62bd\u53d6\u5b8c\u6574\u7a0b\u5e8f\u3002 \u7531\u4e8e\u968f\u673a\u62bd\u6837\u4e3a\u6bcf\u4e2a\u70b9\u63d0\u4f9b\u4e86\u5e73\u7b49\u7684\u673a\u4f1a\u8fdb\u884c\u62bd\u6837\uff0c\u6211\u4eec\u7684\u641c\u7d22\u7b97\u6cd5\u53ef\u4ee5\u6f5c\u5728\u5730\u63a2\u7d22\u6240\u8003\u8651\u7a7a\u95f4\u4e2d\u7684\u6bcf\u4e2a\u7a0b\u5e8f\u3002 \u6211\u4eec\u4e0d\u4f9d\u8d56\u4e8e\u968f\u673a\u62bd\u6837\u6765\u627e\u5230\u6700\u4f73\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u62bd\u6837\u7a0b\u5e8f\u968f\u540e\u90fd\u4f1a\u8fdb\u884c\u5fae\u8c03\uff08\u7b2c5\u7ae0\uff09\u3002</p> <p>\u4e3a\u4e86\u5bf9\u53ef\u4ee5\u8986\u76d6\u5927\u641c\u7d22\u7a7a\u95f4\u7684\u7a0b\u5e8f\u8fdb\u884c\u91c7\u6837\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5177\u6709\u4e24\u4e2a\u7ea7\u522b\u7684\u5206\u5c42\u641c\u7d22\u7a7a\u95f4\uff1a sketch \u548c annotation\u3002 \u6211\u4eec\u5c06\u7a0b\u5e8f\u7684\u9ad8\u7ea7\u7ed3\u6784\u5b9a\u4e49\u4e3a\u8349\u56fe\uff0c\u5e76\u7559\u4e0b\u6570\u5341\u4ebf\u4e2a\u4f4e\u7ea7\u9009\u62e9\uff08\u4f8b\u5982\uff0ctile size\u3001parallel\u3001unroll annotations\uff09\u4f5c\u4e3a\u6ce8\u91ca\u3002 \u5728\u9876\u5c42\uff0c\u6211\u4eec\u901a\u8fc7\u9012\u5f52\u5730\u5e94\u7528\u4e00\u4e9b\u63a8\u5bfc\u89c4\u5219\u6765\u751f\u6210\u8349\u56fe\u3002 \u5728\u5e95\u5c42\uff0c\u6211\u4eec\u968f\u673a\u6807\u6ce8\u8fd9\u4e9b\u8349\u56fe\u4ee5\u83b7\u5f97\u5b8c\u6574\u7684\u7a0b\u5e8f\u3002 \u8fd9\u79cd\u8868\u793a\u4ece\u6570\u5341\u4ebf\u4e2a\u4f4e\u7ea7\u9009\u62e9\u4e2d\u603b\u7ed3\u4e86\u4e00\u4e9b\u57fa\u672c\u7ed3\u6784\uff0c\u4ece\u800c\u53ef\u4ee5\u7075\u6d3b\u5730\u679a\u4e3e\u9ad8\u7ea7\u7ed3\u6784\u5e76\u6709\u6548\u5730\u91c7\u6837\u4f4e\u7ea7\u7ec6\u8282\u3002</p>"},{"location":"mlc/tvm-ansor.html#41-sketch-generation","title":"4.1. Sketch Generation","text":"<p>\u5982 \u56fe4 \u6240\u793a\uff0c\u7a0b\u5e8f\u91c7\u6837\u5668\u63a5\u53d7 \u5206\u5272\u540e\u7684\u5b50\u56fe \u4f5c\u4e3a\u8f93\u5165\u3002 \u56fe5 \u4e2d\u7684\u7b2c\u4e00\u5217\u663e\u793a\u4e86\u4e24\u4e2a\u8f93\u5165\u793a\u4f8b\u3002 \u8f93\u5165\u5177\u6709\u4e09\u79cd\u7b49\u4ef7\u5f62\u5f0f\uff1a\u6570\u5b66\u8868\u8fbe\u5f0f\u3001\u76f4\u63a5\u5c55\u5f00\u5faa\u73af\u7d22\u5f15\u5f97\u5230\u7684\u76f8\u5e94\u6734\u7d20\u7a0b\u5e8f\u548c\u76f8\u5e94\u7684\u8ba1\u7b97\u56fe(DAG)\u3002</p> <p>\u4e3a\u4e86\u4e3a\u5177\u6709\u591a\u4e2a\u8282\u70b9\u7684 DAG \u751f\u6210\u8349\u56fe\uff0c\u6211\u4eec\u6309\u62d3\u6251\u987a\u5e8f\u8bbf\u95ee\u6240\u6709\u8282\u70b9\u5e76\u8fed\u4ee3\u6784\u5efa\u7ed3\u6784\u3002 \u5bf9\u4e8e\u8ba1\u7b97\u5bc6\u96c6\u578b\u4e14\u5177\u6709\u5927\u91cf\u6570\u636e\u91cd\u7528\u673a\u4f1a\u7684\u8ba1\u7b97\u8282\u70b9\uff08\u4f8b\u5982\uff0cconv2d\u3001mat-mul\uff09\uff0c\u6211\u4eec\u4e3a\u5b83\u4eec\u6784\u5efa\u57fa\u672c\u7684 \u5206\u5757 \u548c \u878d\u5408 \u7ed3\u6784\u4f5c\u4e3a\u8349\u56fe\u3002 \u5bf9\u4e8e\u7b80\u5355\u7684\u9010\u5143\u7d20\u8282\u70b9\uff08\u4f8b\u5982\uff0cReLU\u3001\u9010\u5143\u7d20\u6dfb\u52a0\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u5b89\u5168\u5730\u5c06\u5b83\u4eec\u5185\u8054\u3002 \u8bf7\u6ce8\u610f\uff0c\u65b0\u8282\u70b9\uff08\u4f8b\u5982\uff0c\u7f13\u5b58\u8282\u70b9\u3001\u5e03\u5c40\u53d8\u6362\u8282\u70b9\uff09\u4e5f\u53ef\u80fd\u5728\u8349\u56fe\u751f\u6210\u671f\u95f4\u88ab\u5f15\u5165 DAG\u3002</p> <p>\u6211\u4eec\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u63a8\u5bfc\u7684\u679a\u4e3e\u65b9\u6cd5\uff0c\u901a\u8fc7\u9012\u5f52\u5730\u5e94\u7528\u51e0\u4e2a\u57fa\u672c\u89c4\u5219\u6765\u751f\u6210\u6240\u6709\u53ef\u80fd\u7684\u8349\u56fe\u3002 \u6b64\u8fc7\u7a0b\u5c06 DAG \u4f5c\u4e3a\u8f93\u5165\u5e76\u8fd4\u56de\u8349\u56fe\u5217\u8868\u3002 \u6211\u4eec\u5b9a\u4e49\u72b6\u6001 \\(\\sigma = (S,i)\\)\uff0c\u5176\u4e2d S \u662f DAG \u5f53\u524d\u90e8\u5206\u751f\u6210\u7684\u8349\u56fe\uff0ci \u662f\u5f53\u524d\u5de5\u4f5c\u8282\u70b9\u7684\u7d22\u5f15\u3002 DAG \u4e2d\u7684\u8282\u70b9\u6309\u7167\u4ece\u8f93\u51fa\u5230\u8f93\u5165\u7684\u62d3\u6251\u987a\u5e8f\u6392\u5e8f\u3002 \u63a8\u5bfc\u4ece\u6700\u521d naive \u7a0b\u5e8f\u548c DAG \u4e2d\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\uff0c\u5373\u521d\u59cb\u72b6\u6001 \\(\u03c3 = (naive~program, index~of ~the~last~node)\\)\u3002 \u7136\u540e\u6211\u4eec\u5c1d\u8bd5\u9012\u5f52\u5730\u5c06\u6240\u6709\u63a8\u5bfc\u89c4\u5219\u5e94\u7528\u4e8e\u72b6\u6001\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u89c4\u5219\uff0c\u5982\u679c\u5f53\u524d\u72b6\u6001\u6ee1\u8db3\u5e94\u7528\u6761\u4ef6\uff0c\u6211\u4eec\u5c06\u89c4\u5219\u5e94\u7528\u5230 \\(\\sigma = (S,i)\\) \u5e76\u5f97\u5230 \\(\\sigma' = (S',i')\\) \u5176\u4e2d \\(i' \\leq i\\)\u3002 \u8fd9\u6837\u7d22\u5f15 i\uff08\u5de5\u4f5c\u8282\u70b9\uff09\u5355\u8c03\u9012\u51cf\u3002 \u5f53 i = 0 \u65f6\uff0c\u72b6\u6001\u6210\u4e3a\u7ec8\u6b62\u72b6\u6001\u3002\u679a\u4e3e\u671f\u95f4\uff0c\u53ef\u4ee5\u5c06\u591a\u4e2a\u89c4\u5219\u5e94\u7528\u4e8e\u4e00\u4e2a\u72b6\u6001\u4ee5\u751f\u6210\u591a\u4e2a\u540e\u7eed\u72b6\u6001\u3002 \u4e00\u4e2a\u89c4\u5219\u4e5f\u53ef\u4ee5\u751f\u6210\u591a\u4e2a\u53ef\u80fd\u7684\u540e\u7eed\u72b6\u6001\u3002 \u6240\u4ee5\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u961f\u5217\u6765\u5b58\u50a8\u6240\u6709\u7684\u4e2d\u95f4\u72b6\u6001\u3002 \u5f53\u961f\u5217\u4e3a\u7a7a\u65f6\uff0c\u8be5\u8fc7\u7a0b\u7ed3\u675f\u3002 \u6700\u540e\u72b6\u6001\u4e2d\u7684\u6240\u6709 \\(\\sigma.S\\) \u5728\u8349\u56fe\u751f\u6210\u7ed3\u675f\u65f6\u5f62\u6210\u4e00\u4e2a\u8349\u56fe\u5217\u8868\u3002 \u5178\u578b\u5b50\u56fe\u7684\u8349\u56fe\u6570\u91cf\u5c11\u4e8e 10 \u4e2a\u3002</p> <p>Derivation rules \u8868 1 \u5217\u51fa\u4e86\u6211\u4eec\u7528\u4e8e CPU \u7684\u63a8\u5bfc\u89c4\u5219\u3002 \u6211\u4eec\u9996\u5148\u63d0\u4f9b\u6240\u7528\u8c13\u8bcd\u7684\u5b9a\u4e49\uff0c\u7136\u540e\u63cf\u8ff0\u6bcf\u4e2a\u89c4\u5219\u7684\u529f\u80fd\u3002 <code>IsStrictInliable(S,i)</code> \u8868\u793a S \u4e2d\u7684\u8282\u70b9 i \u662f\u5426\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5143\u7d20\u7b97\u5b50\uff0c\u5b83\u603b\u662f\u53ef\u4ee5\u5185\u8054\uff08\u4f8b\u5982\uff0c\u5143\u7d20\u6dfb\u52a0\uff0cReLU\uff09\u3002 - <code>HasDataReuse(S,i)</code> \u6307\u793a S \u4e2d\u7684\u8282\u70b9 i \u662f\u5426\u662f\u8ba1\u7b97\u5bc6\u96c6\u578b\u8fd0\u7b97\u7b26\u5e76\u4e14\u662f\u5426\u5177\u6709\u4e30\u5bcc\u7684\u8fd0\u7b97\u7b26\u5185\u6570\u636e\u91cd\u7528\u673a\u4f1a\uff08\u4f8b\u5982\uff0cmat-mul\u3001conv2d\uff09\u3002 - <code>HasFusibleConsumer(S,i)</code> \u6307\u793a S \u4e2d\u7684\u8282\u70b9 i \u662f\u5426\u53ea\u6709\u4e00\u4e2a\u6d88\u8d39\u8005 j \u5e76\u4e14\u8282\u70b9 j \u53ef\u4ee5\u878d\u5408\u5230\u8282\u70b9 i\uff08\u4f8b\u5982\uff0c <code>matmul + bias_add</code>\uff0c<code>conv2d + relu</code>\uff09\u3002 - <code>HasMoreReductionParallel(S,i)</code> \u8868\u793a S \u4e2d\u7684\u8282\u70b9 i \u5728\u7a7a\u95f4\u7ef4\u5ea6\u4e0a\u662f\u5426\u5177\u6709\u5f88\u5c11\u7684\u5e76\u884c\u6027\u4f46\u5728\u7f29\u51cf\u7ef4\u5ea6\u4e0a\u5177\u6709\u8db3\u591f\u7684\u5e76\u884c\u6027\u673a\u4f1a\u3002 \uff08\u4f8b\u5982\uff0c\u8ba1\u7b97\u77e9\u9635\u7684 2 \u8303\u6570\uff0cmatmul \\(C_{2\\times 2} = A_{2\\times512} \\cdot B_{512\\times 2}\\)\uff09\u3002</p> <p>\u6211\u4eec\u5bf9\u8ba1\u7b97\u5b9a\u4e49\u6267\u884c\u9759\u6001\u5206\u6790\u4ee5\u83b7\u5f97\u8fd9\u4e9b\u8c13\u8bcd\u7684\u503c\u3002 \u901a\u8fc7\u89e3\u6790\u6570\u5b66\u8868\u8fbe\u5f0f\u4e2d\u7684\u8bfb/\u5199\u6a21\u5f0f\u81ea\u52a8\u5b8c\u6210\u5206\u6790\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4ecb\u7ecd\u6bcf\u4e2a\u63a8\u5bfc\u89c4\u5219\u7684\u529f\u80fd\u3002</p> <p>\u5bf9\u4e8e \u89c4\u5219 1 \u5982\u679c\u5b83\u4e0d\u662f\u4e25\u683c\u53ef\u5185\u8054\u7684\uff0c\u5219\u53ea\u662f\u7b80\u5355\u5730\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u3002 \u5bf9\u4e8e\u89c4\u5219 2 \u59cb\u7ec8\u5185\u8054\u4e25\u683c\u53ef\u5185\u8054\u7684\u8282\u70b9\u3002 \u7531\u4e8e\u89c4\u5219 1 \u548c\u89c4\u5219 2 \u7684\u6761\u4ef6\u4e92\u65a5\uff0c\u56e0\u6b64 i &gt; 1 \u7684\u72b6\u6001\u603b\u662f\u53ef\u4ee5\u6ee1\u8db3\u5176\u4e2d\u4e00\u4e2a\u5e76\u7ee7\u7eed\u63a8\u5bfc\u3002</p> <p>\u89c4\u5219 3\u30014 \u548c 5 \u5904\u7406\u5177\u6709\u6570\u636e\u91cd\u7528\u7684\u8282\u70b9\u7684\u591a\u7ea7\u5e73\u94fa\u548c\u878d\u5408\u3002 \u89c4\u5219 3 \u5bf9\u6570\u636e\u53ef\u91cd\u7528\u8282\u70b9\u6267\u884c\u591a\u7ea7\u5e73\u94fa\u3002 \u5bf9\u4e8e CPU\uff0c\u6211\u4eec\u4f7f\u7528 <code>\"SSRSRS\"</code> tile structure\uff0c \u5176\u4e2d <code>S</code> \u4ee3\u8868\u4e00\u4e2a\u56fe\u5757\u7ea7\u522b\u7684\u7a7a\u95f4\u5faa\u73af\uff0c<code>R</code> \u4ee3\u8868\u4e00\u4e2a\u56fe\u5757\u7ea7\u522b\u7684\u7f29\u51cf\u5faa\u73af\u3002 \u4f8b\u5982\uff0c\u5728 \\(\\texttt{matmul} C(i, j) = \\sum_k A[i,k] \u00d7B[k, j]\\) \u4e2d\uff0ci \u548c j \u662f\u7a7a\u95f4\u5faa\u73af\uff0ck \u662f\u7f29\u51cf\u5faa\u73af\u3002 matmul \u7684<code>\"SSRSRS\"</code> tile \u7ed3\u6784\u5c06\u539f\u6765\u7684 3 \u7ea7\u5faa\u73af <code>(i, j, k)</code> \u6269\u5c55\u4e3a 10 \u7ea7\u5faa\u73af <code>(i0, j0, i1, j1, k0, i2, j2, k1, i3, j3)</code>\u3002 \u867d\u7136\u6211\u4eec\u4e0d\u6392\u5217\u5faa\u73af\u987a\u5e8f\uff0c\u4f46\u8fd9\u79cd\u591a\u7ea7\u5e73\u94fa\u4e5f\u53ef\u4ee5\u6db5\u76d6\u67d0\u4e9b\u91cd\u65b0\u6392\u5e8f\u7684\u60c5\u51b5\u3002 \u4f8b\u5982\uff0c\u901a\u8fc7\u5c06\u5176\u4ed6\u5faa\u73af\u7684\u957f\u5ea6\u8bbe\u7f6e\u4e3a 1\uff0c\u53ef\u4ee5\u5c06\u4e0a\u8ff0 10 \u7ea7\u5faa\u73af\u4e13\u95e8\u7528\u4e8e\u7b80\u5355\u7684\u91cd\u65b0\u6392\u5e8f (k0, j2,i3)\u3002 <code>\"SSRSRS\"</code> \u56fe\u5757\u7ed3\u6784\u5bf9\u4e8e\u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u8ba1\u7b97\u5bc6\u96c6\u578b\u5bc6\u96c6\u8fd0\u7b97\u7b26\uff08\u4f8b\u5982\uff0cmatmul\u3001conv2d\u3001conv3d\uff09\u662f\u901a\u7528\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u7531\u7a7a\u95f4\u5faa\u73af\u548c\u7f29\u51cf\u5faa\u73af\u7ec4\u6210\u3002</p> <p>\u89c4\u5219 4 \u6267\u884c\u591a\u7ea7\u5e73\u94fa\u5e76\u878d\u5408\u53ef\u878d\u6d88\u8d39\u8005\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u5c06\u5143\u7d20\u8282\u70b9\uff08\u4f8b\u5982 ReLU\u3001bias add\uff09\u878d\u5408\u5230\u5206\u5757\u8282\u70b9\uff08\u4f8b\u5982 conv2d\u3001mat-mul\uff09\u4e2d\u3002 \u5982\u679c\u5f53\u524d\u6570\u636e\u53ef\u91cd\u7528\u8282\u70b9\u6ca1\u6709\u53ef\u878d\u6d88\u8d39\u8005\uff0c\u5219\u89c4\u5219 5 \u6dfb\u52a0\u4e00\u4e2a\u7f13\u5b58\u8282\u70b9\u3002 </p> <p>\ud83d\udca1 \u4f8b\u5982\uff0cDAG \u4e2d\u7684\u6700\u7ec8\u8f93\u51fa\u8282\u70b9\u6ca1\u6709\u4efb\u4f55\u6d88\u8d39\u8005\uff0c\u56e0\u6b64\u5b83\u9ed8\u8ba4\u76f4\u63a5\u5c06\u7ed3\u679c\u5199\u5165\u4e3b\u5185\u5b58\uff0c\u7531\u4e8e\u5185\u5b58\u8bbf\u95ee\u7684\u9ad8\u5ef6\u8fdf\uff0c\u8fd9\u662f\u4f4e\u6548\u7684\u3002 \u901a\u8fc7\u6dfb\u52a0\u4e00\u4e2a\u7f13\u5b58\u8282\u70b9\uff0c\u6211\u4eec\u5c06\u4e00\u4e2a\u65b0\u7684\u53ef\u878d\u6d88\u8d39\u8005\u5f15\u5165\u5230 DAG \u4e2d\uff0c\u7136\u540e\u53ef\u4ee5\u5e94\u7528\u89c4\u5219 4 \u5c06\u8fd9\u4e2a\u65b0\u6dfb\u52a0\u7684\u7f13\u5b58\u8282\u70b9\u878d\u5408\u5230\u6700\u7ec8\u7684\u8f93\u51fa\u8282\u70b9\u4e2d\u3002 \u878d\u5408\u7f13\u5b58\u8282\u70b9\u540e\uff0c\u73b0\u5728\u6700\u7ec8\u7684\u8f93\u51fa\u8282\u70b9\u5c06\u5176\u7ed3\u679c\u5199\u5165\u7f13\u5b58\u5757\uff0c\u7f13\u5b58\u5757\u5c06\u5728\u5757\u4e2d\u7684\u6240\u6709\u6570\u636e\u8ba1\u7b97\u5b8c\u6bd5\u540e\u7acb\u5373\u5199\u5165\u4e3b\u5b58\u3002</p> <p>\u89c4\u5219 6 \u53ef\u4ee5\u4f7f\u7528 <code>rfactor</code> [46] \u5c06\u5f52\u7ea6\u5faa\u73af\u5206\u89e3\u4e3a\u7a7a\u95f4\u5faa\u73af\u4ee5\u5e26\u6765\u66f4\u591a\u5e76\u884c\u6027\u3002</p> <p>\u56fe 5 \u663e\u793a\u4e86\u751f\u6210\u7684\u8349\u56fe\u7684\u4e09\u4e2a\u793a\u4f8b\u3002 \u8349\u56fe\u4e0e TVM \u4e2d\u7684\u624b\u52a8\u6a21\u677f\u4e0d\u540c\uff0c\u56e0\u4e3a\u624b\u52a8\u6a21\u677f\u6307\u5b9a\u4e86\u9ad8\u7ea7\u7ed3\u6784\u548c\u4f4e\u7ea7\u7ec6\u8282\uff0c\u800c\u8349\u56fe\u4ec5\u5b9a\u4e49\u4e86\u9ad8\u7ea7\u7ed3\u6784\u3002 \u5bf9\u4e8e\u793a\u4f8b\u8f93\u5165 1\uff0cDAG \u4e2d\u56db\u4e2a\u8282\u70b9\u7684\u6392\u5e8f\u987a\u5e8f\u4e3a <code>(A, B, C, D)</code>\u3002 \u4e3a\u4e86\u5bfc\u51fa DAG \u7684\u8349\u56fe\uff0c\u6211\u4eec\u4ece\u8f93\u51fa\u8282\u70b9 <code>D(i = 4)</code> \u5f00\u59cb\uff0c\u5e76\u5c06\u89c4\u5219\u9010\u4e00\u5e94\u7528\u4e8e\u8282\u70b9\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u751f\u6210\u7684\u8349\u56fe 1 \u7684\u63a8\u5bfc\u662f\uff1a</p> <p>Customization \u867d\u7136\u6240\u63d0\u51fa\u7684\u89c4\u5219\u8db3\u591f\u5b9e\u7528\uff0c\u53ef\u4ee5\u6db5\u76d6\u5927\u591a\u6570\u7b97\u5b50\u7684\u7ed3\u6784\uff0c\u4f46\u603b\u6709\u4f8b\u5916\u3002 \u4f8b\u5982\uff0c\u4e00\u4e9b\u7279\u6b8a\u7684\u7b97\u6cd5\uff08\u4f8b\u5982\uff0cWinograd \u5377\u79ef [30]\uff09\u548c\u52a0\u901f\u5668\u5185\u5728\u51fd\u6570\uff08\u4f8b\u5982\uff0cTensorCore [37]\uff09\u9700\u8981\u7279\u6b8a\u7684 tile \u7ed3\u6784\u624d\u80fd\u6709\u6548\u3002 \u867d\u7136\u6a21\u677f\u5f15\u5bfc\u641c\u7d22\u65b9\u6cd5\uff08\u5728 TVM \u4e2d\uff09\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u65b0\u6848\u4f8b\u5236\u4f5c\u4e00\u4e2a\u65b0\u6a21\u677f\uff0c\u4f46\u5b83\u9700\u8981\u5927\u91cf\u7684\u8bbe\u8ba1\u5de5\u4f5c\u3002 \u53e6\u4e00\u65b9\u9762\uff0cAnsor \u4e2d\u57fa\u4e8e\u63a8\u5bfc\u7684\u8349\u56fe\u751f\u6210\u8db3\u591f\u7075\u6d3b\uff0c\u53ef\u4ee5\u4e3a\u65b0\u5174\u7b97\u6cd5\u548c\u786c\u4ef6\u751f\u6210\u6240\u9700\u7684\u7ed3\u6784\uff0c\u56e0\u4e3a\u6211\u4eec\u5141\u8bb8\u7528\u6237\u6ce8\u518c\u65b0\u7684\u63a8\u5bfc\u89c4\u5219\u5e76\u5c06\u5b83\u4eec\u4e0e\u73b0\u6709\u89c4\u5219\u65e0\u7f1d\u96c6\u6210\u3002</p>"},{"location":"mlc/tvm-ansor.html#42-random-annotation","title":"4.2. Random Annotation","text":"<p>\u4e0a\u4e00\u5c0f\u8282\u751f\u6210\u7684\u8349\u56fe\u662f\u4e0d\u5b8c\u6574\u7684\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ea\u6709 tile \u7ed3\u6784\uff0c\u6ca1\u6709\u7279\u5b9a\u7684 tile \u5c3a\u5bf8 \u548c \u5faa\u73af\u6ce8\u91ca\uff0c\u4f8b\u5982\u5e76\u884c\u3001\u5c55\u5f00\u548c\u77e2\u91cf\u5316\u3002 \u5728\u672c\u5c0f\u8282\u4e2d\uff0c\u6211\u4eec\u5bf9\u8349\u56fe\u8fdb\u884c\u6ce8\u91ca\uff0c\u4f7f\u5b83\u4eec\u6210\u4e3a\u7528\u4e8e\u5fae\u8c03\u548c\u8bc4\u4f30\u7684\u5b8c\u6574\u7a0b\u5e8f\u3002</p> <p>\u7ed9\u5b9a\u751f\u6210\u7684\u8349\u56fe\u5217\u8868\uff0c\u6211\u4eec\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u8349\u56fe\uff0c\u968f\u673a\u586b\u5145 tile size\uff0c \u5e76\u884c\u5316\u4e00\u4e9b\u5916\u5faa\u73af\uff0c\u77e2\u91cf\u5316\u4e00\u4e9b\u5185\u5faa\u73af\uff0c\u5e76\u5c55\u5f00\u4e00\u4e9b\u5185\u5faa\u73af\u3002 \u6211\u4eec\u8fd8\u968f\u673a\u66f4\u6539\u7a0b\u5e8f\u4e2d\u67d0\u4e9b\u8282\u70b9\u7684\u8ba1\u7b97\u4f4d\u7f6e\uff0c\u4ee5\u5bf9\u56fe\u5757\u7ed3\u6784\u8fdb\u884c\u5fae\u8c03\u3002 \u672c\u5c0f\u8282\u4e2d\u7684\u6240\u6709 <code>\"\u968f\u673a\"</code> \u5747\u8868\u793a\u5bf9\u6240\u6709\u6709\u6548\u503c\u7684\u5747\u5300\u5206\u5e03\u3002 \u5982\u679c\u4e00\u4e9b\u7279\u6b8a\u7684\u7b97\u6cd5\u9700\u8981\u81ea\u5b9a\u4e49\u6ce8\u91ca\u624d\u80fd\u751f\u6548\uff08\u4f8b\u5982\uff0c\u7279\u6b8a\u7684\u5c55\u5f00\uff09\uff0c\u6211\u4eec\u5141\u8bb8\u7528\u6237\u5728\u8ba1\u7b97\u5b9a\u4e49\u4e2d\u7ed9\u51fa\u7b80\u5355\u7684\u63d0\u793a\u6765\u8c03\u6574\u6ce8\u91ca\u7b56\u7565\u3002 \u6700\u540e\uff0c\u7531\u4e8e\u66f4\u6539\u5e38\u91cf\u5f20\u91cf\u7684\u5e03\u5c40\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u5b8c\u6210\u5e76\u4e14\u4e0d\u4f1a\u5e26\u6765\u8fd0\u884c\u65f6\u5f00\u9500\uff0c\u6211\u4eec\u6839\u636e\u591a\u7ea7\u5206\u5757\u7ed3\u6784\u91cd\u5199\u5e38\u91cf\u5f20\u91cf\u7684\u5e03\u5c40\uff0c\u4f7f\u5176\u5c3d\u53ef\u80fd\u7f13\u5b58\u53cb\u597d\u3002 \u8fd9\u79cd\u4f18\u5316\u662f\u6709\u6548\u7684\uff0c\u56e0\u4e3a\u5377\u79ef\u5c42\u6216\u5bc6\u96c6\u5c42\u7684\u6743\u91cd\u5f20\u91cf\u5bf9\u4e8e\u63a8\u7406\u5e94\u7528\u7a0b\u5e8f\u662f\u5e38\u6570\u3002</p> <p>\u968f\u673a\u91c7\u6837\u7684\u793a\u4f8b\u5982 \u56fe5 \u6240\u793a\u3002\u91c7\u6837\u7a0b\u5e8f\u7684\u5faa\u73af\u6b21\u6570\u53ef\u80fd\u5c11\u4e8e\u8349\u56fe\uff0c\u56e0\u4e3a\u957f\u5ea6\u4e3a 1 \u7684\u5faa\u73af\u88ab\u7b80\u5316\u4e86\u3002</p>"},{"location":"mlc/tvm-ansor.html#43-gpu-support","title":"4.3. GPU Support","text":"<p>\u5bf9\u4e8e GPU\uff0c\u6211\u4eec\u5c06\u591a\u7ea7\u5e73\u94fa\u7ed3\u6784\u4ece <code>\"SSRSRS\"</code> \u66f4\u6539\u4e3a <code>\"SSSRRSRS\"</code> \u4ee5\u5339\u914d GPU \u7684\u67b6\u6784\u3002 \u524d\u4e09\u4e2a\u7a7a\u95f4\u5757\u4e2d\u7684\u5faa\u73af\u5206\u522b\u7ed1\u5b9a\u5230 BlockIdx\u3001\u865a\u62df\u7ebf\u7a0b\uff08\u7528\u4e8e\u51cf\u5c11 bank \u51b2\u7a81\uff09\u548c ThreadIdx\u3002 \u6211\u4eec\u6dfb\u52a0\u4e86\u4e24\u6761\u8349\u56fe\u63a8\u5bfc\u89c4\u5219\uff0c\u4e00\u6761\u7528\u4e8e\u901a\u8fc7\u63d2\u5165\u7f13\u5b58\u8282\u70b9\u6765\u5229\u7528\u5171\u4eab\u5185\u5b58\uff08\u7c7b\u4f3c\u4e8e\u89c4\u5219 5\uff09\uff0c\u53e6\u4e00\u6761\u7528\u4e8e\u51cf\u5c11\u8de8\u7ebf\u7a0b\uff08\u7c7b\u4f3c\u4e8e\u89c4\u5219 6\uff09\u3002</p>"},{"location":"mlc/tvm-ansor.html#5-performance-fine-tuning","title":"5. Performance Fine-tuning","text":"<p>program sampler \u91c7\u6837\u7684 \u7a0b\u5e8f \u5177\u6709\u826f\u597d\u7684\u641c\u7d22\u7a7a\u95f4\u8986\u76d6\u7387\uff0c\u4f46\u8d28\u91cf\u6ca1\u6709\u4fdd\u8bc1\u3002 \u8fd9\u662f\u56e0\u4e3a\u4f18\u5316\u9009\u62e9\uff0c\u4f8b\u5982\u56fe\u5757\u7ed3\u6784\u548c\u5faa\u73af\u6ce8\u91ca\uff0c\u90fd\u662f\u968f\u673a\u91c7\u6837\u7684\u3002 \u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86 Performance Fine-tuning\uff0c \u5b83\u901a\u8fc7\u8fdb\u5316\u641c\u7d22\u548c\u5b66\u4e60\u6210\u672c\u6a21\u578b\u5fae\u8c03\u91c7\u6837\u7a0b\u5e8f\u7684\u6027\u80fd\u3002</p> <p>tuning \u88ab\u8fed\u4ee3\u5730\u6267\u884c\u3002 \u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u4f7f\u7528\u8fdb\u5316\u641c\u7d22\u6839\u636e\u5b66\u4e60\u6210\u672c\u6a21\u578b\u627e\u5230\u4e00\u5c0f\u6279\u6709\u524d\u9014\u7684\u7a0b\u5e8f\u3002 \u7136\u540e\u6211\u4eec\u5728\u786c\u4ef6\u4e0a\u6d4b\u91cf\u8fd9\u4e9b\u7a0b\u5e8f\u4ee5\u83b7\u5f97\u5b9e\u9645\u7684\u6267\u884c\u65f6\u95f4\u6210\u672c\u3002 \u6700\u540e\uff0c\u4f7f\u7528\u4ece\u6d4b\u91cf\u4e2d\u83b7\u5f97\u7684\u5206\u6790\u6570\u636e\u91cd\u65b0\u8bad\u7ec3\u6210\u672c\u6a21\u578b\uff0c\u4f7f\u5176\u66f4\u52a0\u51c6\u786e\u3002</p> <p>\u8fdb\u5316\u641c\u7d22\u4f7f\u7528\u968f\u673a\u62bd\u6837\u7684\u7a0b\u5e8f\u4ee5\u53ca\u6765\u81ea\u5148\u524d\u6d4b\u91cf\u7684\u9ad8\u8d28\u91cf\u7a0b\u5e8f\u4f5c\u4e3a\u521d\u59cb\u79cd\u7fa4\uff0c\u5e76\u5e94\u7528\u53d8\u5f02\u548c\u4ea4\u53c9\u6765\u751f\u6210\u4e0b\u4e00\u4ee3\u3002 \u5b66\u4e60\u6210\u672c\u6a21\u578b\u7528\u4e8e\u9884\u6d4b\u6bcf\u4e2a\u7a0b\u5e8f\u7684\u9002\u5e94\u6027\uff0c\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\u662f\u4e00\u4e2a\u7a0b\u5e8f\u7684\u541e\u5410\u91cf\u3002 \u6211\u4eec\u8fd0\u884c\u56fa\u5b9a\u4ee3\u6570\u7684\u8fdb\u5316\uff0c\u5e76\u9009\u62e9\u5728\u641c\u7d22\u8fc7\u7a0b\u4e2d\u627e\u5230\u7684\u6700\u4f73\u7a0b\u5e8f\u3002 \u6211\u4eec\u5229\u7528\u5b66\u4e60\u6210\u672c\u6a21\u578b\uff0c\u56e0\u4e3a\u6210\u672c\u6a21\u578b\u53ef\u4ee5\u76f8\u5bf9\u51c6\u786e\u5730\u4f30\u8ba1\u7a0b\u5e8f\u7684\u9002\u7528\u6027\uff0c\u540c\u65f6\u6bd4\u5b9e\u9645\u6d4b\u91cf\u5feb\u51e0\u4e2a\u6570\u91cf\u7ea7\u3002 \u5b83\u5141\u8bb8\u6211\u4eec\u5728\u51e0\u79d2\u949f\u5185\u6bd4\u8f83\u641c\u7d22\u7a7a\u95f4\u4e2d\u6570\u4ee5\u4e07\u8ba1\u7684\u7a0b\u5e8f\uff0c\u5e76\u9009\u62e9\u6709\u524d\u9014\u7684\u7a0b\u5e8f\u8fdb\u884c\u5b9e\u9645\u6d4b\u91cf\u3002</p>"},{"location":"mlc/tvm-ansor.html#51-evolutionary-search","title":"5.1. Evolutionary Search","text":"<p>\u8fdb\u5316\u641c\u7d22 [54] \u662f\u4e00\u79cd\u53d7\u751f\u7269\u8fdb\u5316\u542f\u53d1\u7684\u901a\u7528\u5143\u542f\u53d1\u5f0f\u7b97\u6cd5\u3002 \u901a\u8fc7\u8fed\u4ee3\u5730\u6539\u53d8\u9ad8\u8d28\u91cf\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u751f\u6210\u5177\u6709\u6f5c\u5728\u66f4\u9ad8\u8d28\u91cf\u7684\u65b0\u7a0b\u5e8f\u3002 \u8fdb\u5316\u4ece\u91c7\u6837\u7684\u521d\u59cb\u4ee3\u5f00\u59cb\u3002 \u4e3a\u4e86\u751f\u6210\u4e0b\u4e00\u4ee3\uff0c\u6211\u4eec\u9996\u5148\u6839\u636e\u4e00\u5b9a\u7684\u6982\u7387\u4ece\u5f53\u524d\u4ee3\u4e2d\u9009\u62e9\u4e00\u4e9b\u7a0b\u5e8f\u3002 \u9009\u62e9\u7a0b\u5e8f\u7684\u6982\u7387\u4e0e\u5b66\u4e60\u6210\u672c\u6a21\u578b (5.2\u8282) \u9884\u6d4b\u7684 fitness \u6210\u6b63\u6bd4\uff0c\u8fd9\u610f\u5473\u7740\u5177\u6709\u66f4\u9ad8\u6027\u80fd\u5206\u6570\u7684\u7a0b\u5e8f\u88ab\u9009\u4e2d\u7684\u6982\u7387\u66f4\u9ad8\u3002 \u5bf9\u4e8e\u9009\u5b9a\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u968f\u673a\u5e94\u7528\u5176\u4e2d\u4e00\u79cd\u8fdb\u5316\u64cd\u4f5c\u6765\u751f\u6210\u65b0\u7a0b\u5e8f\u3002 \u57fa\u672c\u4e0a\uff0c\u5bf9\u4e8e\u6211\u4eec\u5728\u91c7\u6837\u671f\u95f4\u505a\u51fa\u7684\u51b3\u5b9a\uff08\u00a74.2\uff09\uff0c\u6211\u4eec\u8bbe\u8ba1\u76f8\u5e94\u7684\u8fdb\u5316\u64cd\u4f5c\u6765\u91cd\u5199\u548c\u5fae\u8c03\u5b83\u4eec\u3002</p> <p>Tile size mutation\u3002 \u6b64\u64cd\u4f5c\u626b\u63cf\u7a0b\u5e8f\u5e76\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u5e73\u94fa\u5faa\u73af\u3002 \u5bf9\u4e8e\u8fd9\u4e2a\u5206\u5757\u5faa\u73af\uff0c\u5b83\u5c06\u4e00\u4e2a\u5206\u5757\u7ea7\u522b\u7684\u5206\u5757\u5927\u5c0f\u9664\u4ee5\u4e00\u4e2a\u968f\u673a\u56e0\u5b50\uff0c\u5e76\u5c06\u8be5\u56e0\u5b50\u4e58\u4ee5\u53e6\u4e00\u4e2a\u7ea7\u522b\u3002 \u7531\u4e8e\u6b64\u64cd\u4f5c\u4f7f\u5206\u5757\u5927\u5c0f\u7684\u4e58\u79ef\u7b49\u4e8e\u539f\u59cb\u5faa\u73af\u957f\u5ea6\uff0c\u56e0\u6b64\u53d8\u5f02\u7a0b\u5e8f\u59cb\u7ec8\u6709\u6548\u3002</p> <p>\u7591\u95ee</p> <p>\u5bf9\u4e8e\u4e0d\u80fd\u5b8c\u7f8e\u5207\u5206\u7684\u5faa\u73af\uff1f</p> <p>Parallel mutation\u3002 \u8be5\u64cd\u4f5c\u626b\u63cf\u7a0b\u5e8f\u5e76\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u5df2\u88ab\u6ce8\u91ca\u4e3a parallel \u7684\u5faa\u73af\u3002 \u5bf9\u4e8e\u6b64\u5faa\u73af\uff0c\u6b64\u64cd\u4f5c\u901a\u8fc7\u878d\u5408\u5176\u76f8\u90bb\u5faa\u73af\u7ea7\u522b\u6216\u5c06\u5176\u62c6\u5206\u4e3a\u4e00\u4e2a\u56e0\u5b50\u6765\u66f4\u6539\u5e76\u884c\u7c92\u5ea6\u3002</p> <p>Pragma mutation\u3002 \u7a0b\u5e8f\u4e2d\u7684\u67d0\u4e9b\u4f18\u5316\u7531\u7279\u5b9a\u4e8e\u7f16\u8bd1\u5668\u7684\u7f16\u8bd1\u6307\u793a\u6307\u5b9a\u3002 \u8be5\u64cd\u4f5c\u626b\u63cf\u7a0b\u5e8f\u5e76\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u7f16\u8bd1\u6307\u793a\u3002 \u5bf9\u4e8e\u6b64 pragma\uff0c\u6b64\u64cd\u4f5c\u968f\u673a\u5c06\u5176\u53d8\u5f02\u4e3a\u53e6\u4e00\u4e2a\u6709\u6548\u503c\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u7684\u5e95\u5c42\u4ee3\u7801\u751f\u6210\u5668\u901a\u8fc7\u63d0\u4f9b <code>auto_unroll_max_step=N</code> pragma \u652f\u6301\u4ee5\u81ea\u52a8\u5c55\u5f00\u7684\u6700\u5927\u6b65\u6570\u3002 \u6211\u4eec\u968f\u673a\u8c03\u6574\u6570\u5b57 N\u3002</p> <p>Computation location mutation\u3002 \u6b64\u64cd\u4f5c\u626b\u63cf\u7a0b\u5e8f\u5e76\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u4e0d\u662f\u591a\u5c42 tiling \u7684\u7075\u6d3b\u8282\u70b9\uff08\u4f8b\u5982\uff0c\u5377\u79ef\u5c42\u4e2d\u7684\u586b\u5145\u8282\u70b9\uff09\u3002 \u5bf9\u4e8e\u6b64\u8282\u70b9\uff0c\u64cd\u4f5c\u968f\u673a\u5c06\u5176\u8ba1\u7b97\u4f4d\u7f6e\u66f4\u6539\u4e3a\u53e6\u4e00\u4e2a\u6709\u6548\u7684\u9644\u52a0\u70b9\u3002</p> <p>Node-based crossover\u3002 \u4ea4\u53c9\u662f\u901a\u8fc7\u7ec4\u5408\u4e24\u4e2a\u6216\u591a\u4e2a\u4eb2\u672c\u7684\u57fa\u56e0\u6765\u4ea7\u751f\u65b0\u540e\u4ee3\u7684\u64cd\u4f5c\u3002 Ansor \u4e2d\u7a0b\u5e8f\u7684\u57fa\u56e0\u662f\u5b83\u7684\u91cd\u5199\u6b65\u9aa4\u3002 Ansor \u751f\u6210\u7684\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u662f\u4ece\u5176\u6700\u521d\u7684\u6734\u7d20\u5b9e\u73b0\u4e2d\u91cd\u5199\u7684\u3002 Ansor \u5728\u8349\u56fe\u751f\u6210\u548c\u968f\u673a\u6ce8\u91ca\u671f\u95f4\u4e3a\u6bcf\u4e2a\u7a0b\u5e8f\u4fdd\u7559\u4e86\u5b8c\u6574\u7684\u91cd\u5199\u5386\u53f2\u3002 \u6211\u4eec\u53ef\u4ee5\u5c06\u91cd\u5199\u6b65\u9aa4\u89c6\u4e3a\u7a0b\u5e8f\u7684\u57fa\u56e0\uff0c\u56e0\u4e3a\u5b83\u4eec\u63cf\u8ff0\u4e86\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u5982\u4f55\u4ece\u6700\u521d\u7684\u539f\u59cb\u7a0b\u5e8f\u5f62\u6210\u7684\u3002 \u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ec4\u5408\u4e24\u4e2a\u73b0\u6709\u7a0b\u5e8f\u7684\u91cd\u5199\u6b65\u9aa4\u6765\u751f\u6210\u4e00\u4e2a\u65b0\u7a0b\u5e8f\u3002 \u4f46\u662f\uff0c\u4efb\u610f\u7ec4\u5408\u6765\u81ea\u4e24\u4e2a\u7a0b\u5e8f\u7684\u91cd\u5199\u6b65\u9aa4\u53ef\u80fd\u4f1a\u7834\u574f\u6b65\u9aa4\u4e2d\u7684\u4f9d\u8d56\u5173\u7cfb\u5e76\u521b\u5efa\u65e0\u6548\u7a0b\u5e8f\u3002 \u56e0\u6b64\uff0cAnsor \u4e2d\u4ea4\u53c9\u64cd\u4f5c\u7684\u7c92\u5ea6\u662f\u57fa\u4e8e DAG \u4e2d\u7684\u8282\u70b9\uff0c\u56e0\u4e3a\u8de8\u4e0d\u540c\u8282\u70b9\u7684\u91cd\u5199\u6b65\u9aa4\u901a\u5e38\u5177\u6709\u8f83\u5c0f\u7684\u4f9d\u8d56\u6027\u3002 Ansor \u4e3a\u6bcf\u4e2a\u8282\u70b9\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u7236\u8282\u70b9\uff0c\u5e76\u5408\u5e76\u6240\u9009\u8282\u70b9\u7684\u91cd\u5199\u6b65\u9aa4\u3002 \u5f53\u8282\u70b9\u4e4b\u95f4\u5b58\u5728\u4f9d\u8d56\u5173\u7cfb\u65f6\uff0cAnsor \u4f1a\u5c1d\u8bd5\u4f7f\u7528\u7b80\u5355\u7684\u542f\u53d1\u5f0f\u65b9\u6cd5\u6765\u5206\u6790\u548c\u8c03\u6574\u6b65\u9aa4\u3002 Ansor \u8fdb\u4e00\u6b65\u9a8c\u8bc1\u5408\u5e76\u540e\u7684\u7a0b\u5e8f\u4ee5\u4fdd\u8bc1\u529f\u80fd\u7684\u6b63\u786e\u6027\u3002 \u9a8c\u8bc1\u7b80\u5355\uff0c\u56e0\u4e3a Ansor \u53ea\u4f7f\u7528\u4e86\u4e00\u5c0f\u90e8\u5206\u5faa\u73af\u8f6c\u6362\u91cd\u5199\u6b65\u9aa4\uff0c\u5e95\u5c42\u4ee3\u7801\u751f\u6210\u5668\u53ef\u4ee5\u901a\u8fc7\u4f9d\u8d56\u5206\u6790\u6765\u68c0\u67e5\u6b63\u786e\u6027\u3002</p> <p>\u8fdb\u5316\u641c\u7d22\u5229\u7528\u53d8\u5f02\u548c\u4ea4\u53c9\u5728\u51e0\u8f6e\u4e2d\u91cd\u590d\u751f\u6210\u4e00\u7ec4\u65b0\u7684\u5019\u9009\u8005\uff0c\u5e76\u8f93\u51fa\u4e00\u5c0f\u7ec4\u5f97\u5206\u6700\u9ad8\u7684\u7a0b\u5e8f\u3002 \u8fd9\u4e9b\u7a0b\u5e8f\u5c06\u5728\u76ee\u6807\u786c\u4ef6\u4e0a\u8fdb\u884c\u7f16\u8bd1\u548c\u6d4b\u91cf\uff0c\u4ee5\u83b7\u5f97\u771f\u5b9e\u7684\u8fd0\u884c\u65f6\u95f4\u6210\u672c\u3002 \u7136\u540e\u4f7f\u7528\u6536\u96c6\u5230\u7684\u6d4b\u91cf\u6570\u636e\u6765\u66f4\u65b0\u6210\u672c\u6a21\u578b\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u9010\u6e10\u63d0\u9ad8\u5b66\u4e60\u6210\u672c\u6a21\u578b\u7684\u51c6\u786e\u6027\u4ee5\u5339\u914d\u76ee\u6807\u786c\u4ef6\u3002 \u56e0\u6b64\uff0c\u8fdb\u5316\u641c\u7d22\u9010\u6e10\u4e3a\u76ee\u6807\u786c\u4ef6\u5e73\u53f0\u751f\u6210\u66f4\u9ad8\u8d28\u91cf\u7684\u7a0b\u5e8f\u3002</p> <p>\u4e0e TVM \u548c FlexTensor \u4e2d\u53ea\u80fd\u5728\u56fa\u5b9a\u7684\u7c7b\u4f3c\u7f51\u683c\u7684\u53c2\u6570\u7a7a\u95f4\u4e2d\u5de5\u4f5c\u7684\u641c\u7d22\u7b97\u6cd5\u4e0d\u540c\uff0cAnsor \u4e2d\u7684\u8fdb\u5316\u64cd\u4f5c\u662f\u4e13\u95e8\u4e3a tensor \u7a0b\u5e8f\u8bbe\u8ba1\u7684\u3002 \u5b83\u4eec\u53ef\u4ee5\u5e94\u7528\u4e8e\u4e00\u822c\u7684\u5f20\u91cf\u7a0b\u5e8f\uff0c\u5e76\u4e14\u53ef\u4ee5\u5904\u7406\u5177\u6709\u590d\u6742\u4f9d\u8d56\u6027\u7684\u641c\u7d22\u7a7a\u95f4\u3002 \u4e0e Halide \u81ea\u52a8\u8c03\u5ea6\u7a0b\u5e8f\u4e2d\u7684\u5c55\u5f00\u89c4\u5219\u4e0d\u540c\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u53ef\u4ee5\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u4e71\u5e8f\u4fee\u6539\uff0c\u4ece\u800c\u89e3\u51b3\u987a\u5e8f\u9650\u5236\u3002</p>"},{"location":"mlc/tvm-ansor.html#52-learned-cost-model","title":"5.2. Learned Cost Model","text":"<p>\u6210\u672c\u6a21\u578b\u5bf9\u4e8e\u5728\u641c\u7d22\u8fc7\u7a0b\u4e2d\u5feb\u901f\u4f30\u8ba1\u7a0b\u5e8f\u7684\u6027\u80fd\u662f\u5fc5\u8981\u7684\u3002 \u6211\u4eec\u91c7\u7528\u7c7b\u4f3c\u4e8e\u76f8\u5173\u5de5\u4f5c [2, 12] \u7684\u5b66\u4e60\u6210\u672c\u6a21\u578b with newly designed program features\u3002 \u57fa\u4e8e\u5b66\u4e60\u6210\u672c\u6a21\u578b\u7684\u7cfb\u7edf\u5177\u6709\u5f88\u597d\u7684\u53ef\u79fb\u690d\u6027\uff0c\u56e0\u4e3a\u53ef\u4ee5\u901a\u8fc7\u8f93\u5165\u4e0d\u540c\u7684\u8bad\u7ec3\u6570\u636e\u5c06\u5355\u4e2a\u6a21\u578b\u8bbe\u8ba1\u91cd\u590d\u7528\u4e8e\u4e0d\u540c\u7684\u786c\u4ef6\u540e\u7aef\u3002</p> <p>\u7531\u4e8e\u6211\u4eec\u7684\u76ee\u6807\u7a0b\u5e8f\u4e3b\u8981\u662f data parallel tensor programs\uff0c \u5b83\u4eec\u7531\u591a\u4e2a\u4ea4\u9519\u7684\u5faa\u73af\u5d4c\u5957\u7ec4\u6210\uff0c\u591a\u4e2a\u8d4b\u503c\u8bed\u53e5\u4f5c\u4e3a\u6700\u5185\u5c42\u8bed\u53e5\uff0c\u6211\u4eec\u8bad\u7ec3\u6210\u672c\u6a21\u578b\u6765\u9884\u6d4b\u4e00\u4e2a\u6700\u5185\u5c42\u975e\u5faa\u73af\u8bed\u53e5\u7684\u5206\u6570 \u5faa\u73af\u5d4c\u5957\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u5b8c\u6574\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e2a\u6700\u5185\u5c42\u7684\u975e\u5faa\u73af\u8bed\u53e5\u8fdb\u884c\u9884\u6d4b\uff0c\u5e76\u5c06\u9884\u6d4b\u76f8\u52a0\u4f5c\u4e3a\u5206\u6570\u3002 \u6211\u4eec\u901a\u8fc7\u5728\u5b8c\u6574\u7a0b\u5e8f\u7684\u4e0a\u4e0b\u6587\u4e2d\u63d0\u53d6\u7279\u5f81\u6765\u4e3a\u6700\u5185\u5c42\u7684\u975e\u5faa\u73af\u8bed\u53e5\u6784\u5efa\u7279\u5f81\u5411\u91cf\u3002 \u63d0\u53d6\u7684\u7279\u5f81\u5305\u62ec\u7b97\u672f\u7279\u5f81\u548c\u5185\u5b58\u8bbf\u95ee\u7279\u5f81\u3002 \u63d0\u53d6\u7279\u5f81\u7684\u8be6\u7ec6\u5217\u8868\u5728\u9644\u5f55 B \u4e2d\u3002</p> <p>\u6211\u4eec\u4f7f\u7528\u52a0\u6743\u5e73\u65b9\u8bef\u5dee\u4f5c\u4e3a\u635f\u5931\u51fd\u6570\u3002 \u56e0\u4e3a\u6211\u4eec\u4e3b\u8981\u5173\u5fc3\u4ece\u641c\u7d22\u7a7a\u95f4\u4e2d\u8bc6\u522b\u6027\u80fd\u826f\u597d\u7684\u7a0b\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u66f4\u91cd\u89c6\u8fd0\u884c\u901f\u5ea6\u66f4\u5feb\u7684\u7a0b\u5e8f\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6a21\u578b f \u5728\u541e\u5410\u91cf\u4e3a y \u7684\u7a0b\u5e8f P \u4e0a\u7684\u635f\u5931\u51fd\u6570\u4e3a \\(loss(f,P,y) = w_p(\\sum_{s\\in S(P)} f(s) \u2212 y)^2 = y(\\sum_{s \\in S(P)} f (s) \u2212 y)^2\\) \u5176\u4e2d \\(S(P)\\) \u662f P \u4e2d\u6700\u5185\u5c42\u975e\u5faa\u73af\u8bed\u53e5\u7684\u96c6\u5408\u3002\u6211\u4eec\u76f4\u63a5\u4f7f\u7528\u541e\u5410\u91cf y \u4f5c\u4e3a\u6743\u91cd\u3002 \u6211\u4eec\u8bad\u7ec3\u68af\u5ea6\u63d0\u5347\u51b3\u7b56\u6811 9 \u4f5c\u4e3a\u57fa\u7840\u6a21\u578b f \u3002 \u4e3a\u6765\u81ea\u6240\u6709 DAG \u7684\u6240\u6709\u5f20\u91cf\u7a0b\u5e8f\u8bad\u7ec3\u5355\u4e2a\u6a21\u578b\uff0c\u6211\u4eec\u5c06\u6765\u81ea\u540c\u4e00 DAG \u7684\u6240\u6709\u7a0b\u5e8f\u7684\u541e\u5410\u91cf\u6807\u51c6\u5316\u4e3a\u5728 [0,1] \u8303\u56f4\u5185\u3002 \u5728\u4f18\u5316 DNN \u65f6\uff0c\u6d4b\u91cf\u7a0b\u5e8f\u7684\u6570\u91cf\u901a\u5e38\u5c11\u4e8e 30,000\u3002 \u5728\u5982\u6b64\u5c0f\u7684\u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\u68af\u5ea6\u63d0\u5347\u51b3\u7b56\u6811\u975e\u5e38\u5feb\uff0c\u6240\u4ee5\u6211\u4eec\u6bcf\u6b21\u90fd\u8bad\u7ec3\u4e00\u4e2a\u65b0\u6a21\u578b\u800c\u4e0d\u662f\u8fdb\u884c\u589e\u91cf\u66f4\u65b0\u3002</p>"},{"location":"mlc/tvm-ansor.html#6-task-scheduler","title":"6. Task Scheduler","text":"<p>DNN \u53ef\u4ee5\u5212\u5206\u4e3a\u8bb8\u591a\u72ec\u7acb\u7684\u5b50\u56fe\uff08\u4f8b\u5982\uff0c<code>conv2d + relu</code>\uff09\u3002 \u5bf9\u4e8e\u67d0\u4e9b\u5b50\u56fe\uff0c\u82b1\u65f6\u95f4\u8c03\u6574\u5b83\u4eec\u4e0d\u4f1a\u663e\u8457\u63d0\u9ad8\u7aef\u5230\u7aef DNN \u6027\u80fd\u3002 \u8fd9\u662f\u7531\u4e8e\u4e24\u4e2a\u539f\u56e0\uff1a(1) \u5b50\u56fe\u4e0d\u662f\u6027\u80fd\u74f6\u9888\uff1b(2) \u8c03\u4f18\u4ec5\u5bf9\u5b50\u56fe\u7684\u6027\u80fd\u5e26\u6765\u5f88\u5c0f\u7684\u6539\u8fdb\u3002</p> <p>\u4e3a\u4e86\u907f\u514d\u5728\u8c03\u6574\u4e0d\u91cd\u8981\u7684\u5b50\u56fe\u4e0a\u6d6a\u8d39\u65f6\u95f4\uff0cAnsor \u52a8\u6001\u5730\u5c06\u4e0d\u540c\u6570\u91cf\u7684\u65f6\u95f4\u8d44\u6e90\u5206\u914d\u7ed9\u4e0d\u540c\u7684\u5b50\u56fe\u3002 \u4ee5 <code>ResNet-50</code> \u4e3a\u4f8b\uff0c\u56fe\u5212\u5206\u540e\u6709 29 \u4e2a\u552f\u4e00\u5b50\u56fe\u3002 \u5927\u591a\u6570\u8fd9\u4e9b\u5b50\u56fe\u662f\u5177\u6709\u4e0d\u540c\u5f62\u72b6\u914d\u7f6e\uff08\u8f93\u5165\u5927\u5c0f\u3001\u5185\u6838\u5927\u5c0f\u3001\u6b65\u5e45\u7b49\uff09\u7684\u5377\u79ef\u5c42\u3002 \u6211\u4eec\u9700\u8981\u4e3a\u4e0d\u540c\u7684\u5377\u79ef\u5c42\u751f\u6210\u4e0d\u540c\u7684\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u6700\u597d\u7684\u5f20\u91cf\u7a0b\u5e8f\u53d6\u51b3\u4e8e\u8fd9\u4e9b\u5f62\u72b6\u914d\u7f6e\u3002 \u5b9e\u9645\u4e0a\uff0c\u7528\u6237\u7684\u6240\u6709\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u90fd\u6709\u591a\u4e2a DNN\u3002 \u8fd9\u4f1a\u5bfc\u81f4\u66f4\u591a\u7684\u5b50\u56fe\u4ee5\u53ca\u66f4\u591a\u51cf\u5c11\u603b\u8c03\u6574\u65f6\u95f4\u7684\u673a\u4f1a\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u5728\u5b50\u56fe\u4e4b\u95f4\u5171\u4eab\u548c\u91cd\u7528\u77e5\u8bc6\u3002 \u4e00\u4e2a\u5b50\u56fe\u4e5f\u53ef\u4ee5\u5728\u4e00\u4e2a DNN \u4e2d\u6216\u8de8\u4e0d\u540c\u7684 DNN \u51fa\u73b0\u591a\u6b21\u3002</p> <p>\u6211\u4eec\u5c06\u4efb\u52a1\u5b9a\u4e49\u4e3a \u4e3a\u5b50\u56fe\u751f\u6210\u9ad8\u6027\u80fd\u7a0b\u5e8f\u800c\u6267\u884c\u7684\u8fc7\u7a0b\u3002 \u8fd9\u610f\u5473\u7740\u4f18\u5316\u5355\u4e2a DNN \u9700\u8981\u5b8c\u6210\u6570\u5341\u4e2a\u4efb\u52a1\uff08\u4f8b\u5982\uff0c<code>ResNet-50</code> \u7684 29 \u4e2a\u4efb\u52a1\uff09\u3002 Ansor \u7684\u4efb\u52a1\u8c03\u5ea6\u5668\u4ee5\u8fed\u4ee3\u7684\u65b9\u5f0f\u4e3a\u4efb\u52a1\u5206\u914d\u65f6\u95f4\u8d44\u6e90\u3002 \u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0cAnsor \u9009\u62e9\u4e00\u4e2a\u4efb\u52a1\uff0c\u4e3a\u5b50\u56fe\u751f\u6210\u4e00\u6279\u6709\u524d\u9014\u7684\u7a0b\u5e8f\uff0c\u5e76\u5728\u786c\u4ef6\u4e0a\u6d4b\u91cf\u7a0b\u5e8f\u3002 \u6211\u4eec\u5c06\u8fd9\u6837\u7684\u8fed\u4ee3\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u65f6\u95f4\u8d44\u6e90\u5355\u4f4d\u3002 \u5f53\u6211\u4eec\u5c06\u4e00\u4e2a\u5355\u4f4d\u7684\u65f6\u95f4\u8d44\u6e90\u5206\u914d\u7ed9\u4e00\u4e2a\u4efb\u52a1\u65f6\uff0c\u8be5\u4efb\u52a1\u5c31\u83b7\u5f97\u4e86\u751f\u6210\u548c\u6d4b\u91cf\u65b0\u7a0b\u5e8f\u7684\u673a\u4f1a\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u627e\u5230\u66f4\u597d\u7a0b\u5e8f\u7684\u673a\u4f1a\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u4ecb\u7ecd\u8c03\u5ea6\u95ee\u9898\u7684\u516c\u5f0f\u548c\u6211\u4eec\u7684\u89e3\u51b3\u65b9\u6848\u3002</p>"},{"location":"mlc/tvm-ansor.html#61-problem-formulation","title":"6.1. Problem Formulation","text":"<p>\u5728\u8c03\u6574\u4e00\u4e2a\u6216\u4e00\u7ec4 DNN \u65f6\uff0c\u7528\u6237\u53ef\u4ee5\u6709\u5404\u79cd\u7c7b\u578b\u7684\u76ee\u6807\uff0c\u4f8b\u5982\uff0c\u51cf\u5c11 DNN \u7684\u5ef6\u8fdf\uff0c\u6ee1\u8db3\u4e00\u7ec4 DNN \u7684\u5ef6\u8fdf\u8981\u6c42\uff0c\u6216\u8005\u5728\u8c03\u6574\u4e0d\u518d\u63d0\u9ad8 DNN \u6027\u80fd\u65f6\u6700\u5c0f\u5316\u8c03\u6574\u65f6\u95f4\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u4e3a\u7528\u6237\u63d0\u4f9b\u4e86\u4e00\u7ec4\u76ee\u6807\u51fd\u6570\u6765\u8868\u8fbe\u4ed6\u4eec\u7684\u76ee\u6807\u3002 \u7528\u6237\u4e5f\u53ef\u4ee5\u63d0\u4f9b\u81ea\u5df1\u7684\u76ee\u6807\u51fd\u6570\u3002</p> <p>\u5047\u8bbe\u603b\u5171\u6709 n \u4e2a\u4efb\u52a1\u3002 \u8bbe \\(t \\in \\mathbf{Z}_n\\) \u4e3a\u5206\u914d\u5411\u91cf\uff0c\u5176\u4e2d \\(t_i\\) \u662f\u82b1\u8d39\u5728\u4efb\u52a1 i \u4e0a\u7684\u65f6\u95f4\u5355\u4f4d\u6570\u3002 \u8bbe\u4efb\u52a1 i \u5b9e\u73b0\u7684\u6700\u5c0f\u5b50\u56fe\u5ef6\u8fdf\u662f\u5206\u914d\u5411\u91cf\u7684\u51fd\u6570 \\(g_i(t)\\) \u3002 DNN \u7684\u7aef\u5230\u7aef\u6210\u672c\u6210\u4e3a\u5b50\u56fe \\(f(g_1(t),g_2(t), \\cdots, g_3(t))\\) \u5ef6\u8fdf\u7684\u51fd\u6570\u3002 \u6211\u4eec\u7684\u76ee\u6807\u662f\u6700\u5c0f\u5316\u7aef\u5230\u7aef\u6210\u672c\uff1a</p> \\[ \\texttt{minimize}f(g_1(t),g_2(t), \\cdots, g_3(t)) \\] <p>\u4e3a\u4e86\u4f7f\u7aef\u5230\u7aef\u65f6\u5ef6\u6700\u5c0f\uff0c\u6211\u4eec\u5b9a\u4e49 \\(f(g_1(t),g_2(t), \\cdots, g_3(t))=\\sum_{i=1}^n w_i\\times g_i\\)\uff0c \u5176\u4e2d\\(w_i\\) \u662f\u8be5 task \u5728 \u6574\u4e2a\u56fe\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002</p> <p>\u8868 2 \u663e\u793a\u4e86\u591a\u4e2a\u7528\u4e8e\u8c03\u6574 DNNs \u7684\u793a\u4f8b\u76ee\u6807\u51fd\u6570\u3002 \u8bbe \\(m\\) \u662f DNN \u7684\u6570\u91cf\uff0c\\(S(j)\\) \u662f\u5c5e\u4e8e DNN \\(j\\) \u7684\u4efb\u52a1\u96c6\u3002</p> <ul> <li>\\(f_1\\) \u5c06\u6bcf\u4e2a DNN \u7684\u5ef6\u8fdf\u76f8\u52a0\uff0c\u8fd9\u610f\u5473\u7740\u4f18\u5316\u6309\u987a\u5e8f\u8fd0\u884c\u4e00\u6b21\u6240\u6709 DNN \u7684\u6210\u672c\u3002</li> <li>\u5728 \\(f_2\\) \u4e2d\uff0c\u6211\u4eec\u5c06 \\(L_j\\) \u5b9a\u4e49\u4e3a DNN \\(j\\) \u7684\u5ef6\u8fdf\u8981\u6c42\uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c\u5ef6\u8fdf\u5df2\u7ecf\u6ee1\u8db3\u8981\u6c42\uff0c\u6211\u4eec\u4e0d\u60f3\u5728 DNN \u4e0a\u82b1\u8d39\u65f6\u95f4\u3002</li> <li>\u5728 \\(f_3\\) \u4e2d\uff0c\u6211\u4eec\u5c06 \\(B_j\\) \u5b9a\u4e49\u4e3a DNN \\(j\\) \u7684\u53c2\u8003\u5ef6\u8fdf\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u9488\u5bf9\u7ed9\u5b9a\u7684\u53c2\u8003\u5ef6\u8fdf\u6700\u5927\u5316\u52a0\u901f\u7684\u51e0\u4f55\u5e73\u5747\u503c\u3002</li> <li>\u6700\u540e\u5728 \\(f_4\\) \u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u51fd\u6570 \\(ES(g_i,t)\\)\uff0c\u5b83\u901a\u8fc7\u67e5\u770b\u4efb\u52a1 \\(i\\) \u7684\u5ef6\u8fdf\u5386\u53f2\u6765\u8fd4\u56de\u4e00\u4e2a\u63d0\u524d\u505c\u6b62\u503c\u3002 \u53ef\u4ee5\u8fbe\u5230 per-task early stopping \u7684\u6548\u679c\u3002</li> </ul>"},{"location":"mlc/tvm-ansor.html#62-optimizing-with-gradient-descent","title":"6.2. Optimizing with Gradient Descent","text":"<p>\u6211\u4eec\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u68af\u5ea6\u4e0b\u964d\u7684\u8c03\u5ea6\u7b97\u6cd5\u6765\u4f18\u5316\u76ee\u6807\u51fd\u6570\u3002 \u7ed9\u5b9a\u5f53\u524d\u5206\u914d t\uff0c\u5176\u601d\u60f3\u662f\u53bb\u8fd1\u4f3c\u76ee\u6807\u51fd\u6570 \\(\\frac{\\partial f}{\\partial t_i}\\) \u4ece\u800c\u9009\u62e9\u4efb\u52a1 i \u4f7f\u5f97 \\(i = \\rm{argmax}_i | \\frac{\\partial f}{\\partial t_i} |\\)\u3002 We approximate the gradient by making an optimistic guess and considering the similarity between tasks.</p> <p>\u4e3a\u4e86\u8fd0\u884c\u8be5\u7b97\u6cd5\uff0cAnsor \u4ece \\(t = 0\\) \u5f00\u59cb\uff0c\u5e76\u901a\u8fc7\u4e00\u8f6e\u5faa\u73af\u9884\u70ed\u4ee5\u83b7\u5f97\u521d\u59cb\u5206\u914d\u5411\u91cf \\(t = (1,1,\\cdots,1)\\)\u3002 \u9884\u70ed\u540e\uff0c\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0c\u6211\u4eec\u8ba1\u7b97\u6bcf\u4e2a\u4efb\u52a1\u7684\u68af\u5ea6\u5e76\u9009\u62e9 \\(\\rm{argmax}_i | \\frac{\\partial f}{\\partial t_i} |\\)\u3002 \u7136\u540e\u6211\u4eec\u5c06\u8d44\u6e90\u5355\u5143\u5206\u914d\u7ed9\u4efb\u52a1 \\(i\\) \u5e76\u66f4\u65b0\u5206\u914d\u5411\u91cf \\(t_i = t_i + 1\\)\u3002\u4f18\u5316\u8fc7\u7a0b\u4e00\u76f4\u6301\u7eed\u5230\u6211\u4eec\u7528\u5b8c\u65f6\u95f4\u9884\u7b97\u3002 \u4e3a\u4e86\u9f13\u52b1\u63a2\u7d22\uff0c\u6211\u4eec\u91c7\u7528\u4e86 \\(\\varepsilon\\)-greedy \u7b56\u7565 [47]\uff0c\u5b83\u4fdd\u7559\u4e86 \\(\\varepsilon\\) \u7684\u6982\u7387\u6765\u968f\u673a\u9009\u62e9\u4efb\u52a1\u3002</p> <p>\u4ee5\u4f18\u5316\u5355\u4e2a DNN \u7684\u7aef\u5230\u7aef\u5ef6\u8fdf\u4e3a\u4f8b\uff0cAnsor \u4f18\u5148\u8003\u8651\u5177\u6709\u9ad8\u521d\u59cb\u5ef6\u8fdf\u7684\u5b50\u56fe\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u4e50\u89c2\u731c\u6d4b\u8868\u660e\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u964d\u4f4e\u5176\u5ef6\u8fdf\u3002 \u4e4b\u540e\uff0c\u5982\u679c Ansor \u5bf9\u5176\u8fdb\u884c\u591a\u6b21\u8fed\u4ee3\u800c\u6ca1\u6709\u89c2\u5bdf\u5230\u5176\u5ef6\u8fdf\u51cf\u5c11\uff0c\u5219 Ansor \u56e0\u4e3a \\(|\\frac{\\partial f}{\\partial t_i}|\\) \u7684\u964d\u4f4e\u79bb\u5f00\u5b50\u56fe\u3002</p>"},{"location":"mlc/tvm-ansor.html#7-evaluation","title":"7. Evaluation","text":"<p>\u901a\u5e38\uff0cAnsor \u9700\u8981\u51e0\u4e2a\u5c0f\u65f6\u624d\u80fd\u5728\u5355\u53f0\u673a\u5668\u4e0a\u4e3a DNN \u751f\u6210\u5b8c\u5168\u4f18\u5316\u7684\u7a0b\u5e8f\u3002 \u8fd9\u5bf9\u4e8e\u63a8\u7406\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u56e0\u4e3a\u5b83\u662f\u90e8\u7f72\u524d\u7684\u4e00\u6b21\u6027\u5de5\u4f5c\u3002 \u6b64\u5916\uff0cAnsor \u7684\u6574\u4e2a\u67b6\u6784\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5e76\u884c\u5316\u3002</p> <p>note</p> <p>\u6162</p>"},{"location":"mlc/tvm-ansor.html#8-related-work","title":"8. Related work","text":"<ul> <li> <p>\u57fa\u4e8e\u8c03\u5ea6\u8bed\u8a00\u7684\u81ea\u52a8\u5f20\u91cf\u7a0b\u5e8f\u751f\u6210\u3002 </p> <p>Halide [41] \u5f15\u5165\u4e86\u4e00\u79cd\u53ef\u4ee5\u63cf\u8ff0\u5faa\u73af\u4f18\u5316\u539f\u8bed\u7684\u8c03\u5ea6\u8bed\u8a00\u3002 \u8be5\u8bed\u8a00\u9002\u7528\u4e8e\u624b\u52a8\u4f18\u5316\u548c\u81ea\u52a8\u641c\u7d22\u3002 Halide \u5177\u6709\u57fa\u4e8e\u4e0d\u540c\u6280\u672f\u7684\u4e09\u4e2a\u7248\u672c\u7684\u81ea\u52a8\u8c03\u5ea6\u7a0b\u5e8f [2\u300131\u300136]\u3002 \u6700\u65b0\u7684\u5e26\u6709 beam search \u548c learned cost model \u7684\u6a21\u578b\u5728\u5176\u4e2d\u8868\u73b0\u6700\u597d\uff0c\u6211\u4eec\u7684\u8bc4\u4f30\u4e5f\u4f7f\u7528\u4e86\u5b83\u3002 </p> <p>TVM [11] \u4f7f\u7528\u7c7b\u4f3c\u7684\u8c03\u5ea6\u8bed\u8a00\u5e76\u5305\u62ec\u6a21\u677f\u5f15\u5bfc\u641c\u7d22\u6846\u67b6 AutoTVM [12]\u3002 FlexTensor [59] \u63d0\u51fa\u4e86\u53ef\u4ee5\u9488\u5bf9\u4e00\u7ec4\u7b97\u5b50\u7684\u901a\u7528\u6a21\u677f\uff0c\u4f46\u5b83\u7684\u6a21\u677f\u662f\u4e3a\u5355\u4e2a\u7b97\u5b50\u8bbe\u8ba1\u7684\u3002 \u5f88\u96be\u5c06\u8fd9\u4e9b\u6a21\u677f\u7528\u4e8e\u6d89\u53ca\u591a\u4e2a\u7b97\u5b50\u7684\u4f18\u5316\uff08\u4f8b\u5982\uff0c\u7b97\u5b50\u878d\u5408\uff09\u3002 </p> <p>\u5e76\u884c\u5de5\u4f5c ProTuner [19] \u4f7f\u7528\u8499\u7279\u5361\u6d1b\u6811\u641c\u7d22\u6765\u89e3\u51b3 Halide \u81ea\u52a8\u8c03\u5ea6\u5668\u4e2d\u7684\u4e0d\u51c6\u786e\u4f30\u8ba1\u95ee\u9898\u3002 ProTuner \u4e3b\u8981\u9488\u5bf9\u56fe\u50cf\u5904\u7406\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u800c Ansor \u9488\u5bf9\u6df1\u5ea6\u5b66\u4e60\u5de5\u4f5c\u8d1f\u8f7d\u5e76\u5f15\u5165\u4e86\u65b0\u7684\u641c\u7d22\u7a7a\u95f4\u548c\u5176\u4ed6\u4f18\u5316\u3002 </p> </li> <li> <p>\u591a\u9762\u4f53\u7f16\u8bd1\u6a21\u578b\u3002 </p> <p>\u591a\u9762\u4f53\u7f16\u8bd1\u6a21\u578b [8,52,53] \u5c06\u7a0b\u5e8f\u4f18\u5316\u8868\u8ff0\u4e3a\u6574\u6570\u7ebf\u6027\u89c4\u5212 (ILP) \u95ee\u9898\u3002 \u5b83\u4f7f\u7528\u4eff\u5c04\u5faa\u73af\u53d8\u6362\u4f18\u5316\u7a0b\u5e8f\uff0c\u4f7f\u76f8\u5173\u8bed\u53e5\u4e4b\u95f4\u7684\u6570\u636e\u91cd\u7528\u8ddd\u79bb\u6700\u5c0f\u5316\u3002 Tiramisu [5] \u548c Tensor Comprehensions [49] \u662f\u4e24\u4e2a\u540c\u6837\u9488\u5bf9\u6df1\u5ea6\u5b66\u4e60\u9886\u57df\u7684\u591a\u9762\u4f53\u7f16\u8bd1\u5668\u3002 Tiramisu \u63d0\u4f9b\u4e86\u7c7b\u4f3cHalide\u8bed\u8a00\u7684\u8c03\u5ea6\u8bed\u8a00\uff0c\u9700\u8981\u624b\u52a8\u8c03\u5ea6\u3002 Tensor Comprehensions \u53ef\u4ee5\u81ea\u52a8\u641c\u7d22 GPU \u4ee3\u7801\uff0c\u4f46\u5b83\u8fd8\u4e0d\u80fd\u7528\u4e8e\u8ba1\u7b97\u53d7\u9650\u7684\u95ee\u9898 [11]\u3002 \u5b83\u4e0d\u80fd\u5728 conv2d \u548c matmul [11,48] \u7b49\u7b97\u5b50\u4e0a\u80dc\u8fc7 TVM\u3002 \u8fd9\u662f\u56e0\u4e3a\u7f3a\u4e4f\u67d0\u4e9b\u4f18\u5316 [50] \u548c\u591a\u9762\u4f53\u516c\u5f0f\u4e2d\u4e0d\u51c6\u786e\u7684\u9690\u6027\u6210\u672c\u6a21\u578b\u3002</p> </li> <li> <p>\u6df1\u5ea6\u5b66\u4e60\u7684\u56fe\u7ea7\u4f18\u5316\u3002 </p> <p>\u56fe\u7ea7\u4f18\u5316\u5c06\u8ba1\u7b97\u56fe\u4e2d\u7684\u7b97\u5b50\u4f5c\u4e3a\u4e00\u4e2a\u57fa\u672c\u5355\u5143\uff0c\u4e0d\u6539\u53d8\u7b97\u5b50\u5185\u90e8\u5b9e\u73b0\u3002 \u5e38\u89c1\u4f18\u5316\u5305\u62ec \u5e03\u5c40\u4f18\u5316[32]\u3001\u7b97\u5b50\u878d\u5408[11\u300138\u300160]\u3001\u5e38\u91cf\u6298\u53e0[42]\u3001\u81ea\u52a8\u6279\u5904\u7406[33]\u3001\u81ea\u52a8\u751f\u6210\u56fe\u66ff\u6362[29]\u7b49\u3002 \u56fe\u7ea7\u4f18\u5316\u901a\u5e38\u662f\u7b97\u5b50\u7ea7\u4f18\u5316\u7684\u8865\u5145\u3002 \u56fe\u7ea7\u4f18\u5316\u4e5f\u53ef\u4ee5\u53d7\u76ca\u4e8e\u7b97\u5b50\u7684\u9ad8\u6027\u80fd\u5b9e\u73b0\u3002 \u6bd4\u5982\u901a\u7528\u7b97\u5b50\u878d\u5408\u5c31\u4f9d\u8d56\u4e8eAnsor\u7684\u4ee3\u7801\u751f\u6210\u80fd\u529b\u3002 \u6211\u4eec\u5c06 Ansor \u7684 \u8054\u5408\u4f18\u5316\u548c\u66f4\u591a\u56fe\u7ea7\u4f18\u5316\u4f5c\u4e3a\u672a\u6765\u7684\u5de5\u4f5c\u3002</p> </li> <li> <p>\u57fa\u4e8e\u641c\u7d22\u7684\u7f16\u8bd1\u548c\u81ea\u52a8\u8c03\u6574\u3002 </p> <p>\u57fa\u4e8e\u641c\u7d22\u7684\u7f16\u8bd1\u548c\u81ea\u52a8\u8c03\u6574\u5df2\u7ecf\u5728\u6df1\u5ea6\u5b66\u4e60\u4ee5\u5916\u7684\u9886\u57df\u5c55\u793a\u4e86\u5b83\u4eec\u7684\u6709\u6548\u6027\u3002 Stock [44] \u662f\u4e00\u4e2a\u57fa\u4e8e\u968f\u673a\u641c\u7d22\u7684\u8d85\u7ea7\u4f18\u5316\u5668\u3002 Stock \u641c\u7d22\u65e0\u5faa\u73af\u786c\u4ef6\u6307\u4ee4\u5e8f\u5217\uff0c\u800c Ansor \u751f\u6210\u5e26\u6709\u5faa\u73af\u5d4c\u5957\u7684\u5f20\u91cf\u7a0b\u5e8f\u3002 OpenTuner [4] \u662f\u4e00\u4e2a\u57fa\u4e8e multi-armed bandit approaches \u7684\u7a0b\u5e8f\u81ea\u52a8\u8c03\u6574\u7684\u901a\u7528\u6846\u67b6\u3002 </p> <p>OpenTuner \u4f9d\u8d56\u7528\u6237\u6307\u5b9a\u7684\u641c\u7d22\u7a7a\u95f4\uff0c\u800c Ansor \u81ea\u52a8\u6784\u5efa\u641c\u7d22\u7a7a\u95f4\u3002 \u4f20\u7edf\u7684\u9ad8\u6027\u80fd\u5e93\uff0c\u5982 ATLAS [56] \u548c FFTW [16] \u4e5f\u4f7f\u7528\u81ea\u52a8\u8c03\u6574\u3002 \u6700\u8fd1\u7684\u4f5c\u54c1 NeuroVectorizer [18] \u548c AutoPhase [20, 26] \u4f7f\u7528\u6df1\u5ea6\u5f3a\u5316\u5b66\u4e60\u6765\u81ea\u52a8\u5411\u91cf\u5316\u7a0b\u5e8f\u5e76\u4f18\u5316\u7f16\u8bd1\u5668\u9636\u6bb5\u987a\u5e8f</p> </li> </ul>"},{"location":"mlc/tvm-ansor.html#9-limitations-and-future-work","title":"9.  Limitations and Future work","text":"<ol> <li>Ansor \u7684\u5c40\u9650\u6027\u4e4b\u4e00\u662f \u65e0\u6cd5\u4f18\u5316\u5177\u6709  dynamic shapes \u7684 graph [45]\u3002 Ansor \u8981\u6c42\u8ba1\u7b97\u56fe\u4e2d\u7684\u5f62\u72b6\u662f\u9759\u6001\u7684\u5e76\u4e14\u4e8b\u5148\u5df2\u77e5\uff0c\u4ee5\u4fbf\u8fdb\u884c\u5206\u6790\u3001\u6784\u5efa\u641c\u7d22\u7a7a\u95f4\u548c\u6267\u884c\u6d4b\u91cf\u3002 \u5982\u4f55\u4e3a\u7b26\u53f7\u6216\u52a8\u6001\u5f62\u72b6\u751f\u6210\u7a0b\u5e8f\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u672a\u6765\u65b9\u5411\u3002</li> <li>\u53e6\u4e00\u4e2a\u9650\u5236\u662f Ansor \u4ec5\u652f\u6301\u5bc6\u96c6(dense)\u7b97\u5b50\u3002 \u4e3a\u4e86\u652f\u6301\u7a00\u758f\u795e\u7ecf\u7f51\u7edc [17] \u548c\u56fe\u5f62\u795e\u7ecf\u7f51\u7edc [25] \u4e2d\u5e38\u7528\u7684\u7a00\u758f\u7b97\u5b50\uff08\u4f8b\u5982 SpMM\uff09\uff0c\u6211\u4eec\u5e0c\u671b Ansor \u7684\u5f88\u5927\u4e00\u90e8\u5206\u4ecd\u7136\u53ef\u4ee5\u91cd\u7528\uff0c\u4f46\u6211\u4eec\u9700\u8981\u91cd\u65b0\u8bbe\u8ba1\u641c\u7d22\u7a7a\u95f4\u3002</li> <li>\u6700\u540e\uff0cAnsor \u4ec5\u5728\u9ad8\u5c42\u6267\u884c\u7a0b\u5e8f\u4f18\u5316\uff0c\u4f46\u4f9d\u8d56\u4e8e\u5176\u4ed6\u4ee3\u7801\u751f\u6210\u5668\uff08\u4f8b\u5982 LLVM \u548c NVCC\uff09\u6765\u8fdb\u884c\u5e73\u53f0\u76f8\u5173\u7684\u4f18\u5316\uff08\u4f8b\u5982\u6307\u4ee4\u9009\u62e9\uff09\u3002 Ansor \u6ca1\u6709\u5229\u7528 Intel VNNI\u3001NVIDIA Tensor Core \u548c ARM Dot \u7b49\u9488\u5bf9\u6df7\u5408\u7cbe\u5ea6\u548c\u4f4e\u7cbe\u5ea6\u7b97\u5b50\u7684\u7279\u6b8a\u6307\u4ee4\uff0c\u76ee\u524d\u73b0\u6210\u7684\u4ee3\u7801\u751f\u6210\u5668\u65e0\u6cd5\u5f88\u597d\u5730\u5904\u7406\u8fd9\u4e9b\u6307\u4ee4\u3002</li> </ol>"},{"location":"mlc/tvm-autotvm.html","title":"Learning to Optimize Tensor Programs","text":"<p>\u6587\u7ae0\u53d1\u5728 2018 \u5e74 NIPS\uff0c \u540e\u7eed\u5de5\u4f5c \u6709 Ansor \u7b49</p>"},{"location":"mlc/tvm-autotvm.html#0-abstract","title":"0. Abstract","text":"<p>\u6211\u4eec\u5f15\u5165\u4e86\u4e00\u4e2a\u57fa\u4e8e\u5b66\u4e60\u7684\u6846\u67b6\u6765\u4f18\u5316\u5f20\u91cf\u7a0b\u5e8f\u3002 \u5f20\u91cf\u7b97\u5b50\u7684\u9ad8\u6548\u5b9e\u73b0\uff0c\u662f\u6df1\u5ea6\u5b66\u4e60\u7cfb\u7edf\u7684\u5173\u952e\uff0c \u5f53\u524d\u7684\u7cfb\u7edf\u4f9d\u8d56\u4e8e\u624b\u52a8\u4f18\u5316\u7684\u5e93\uff0c\u4f8b\u5982 cuDNN\uff0c\u4f46\u5b83\u4ec5\u652f\u6301\u5c0f\u8303\u56f4\u7684\u670d\u52a1\u5668\u7ea7 GPU\u3002\u8fd9\u79cd\u4f9d\u8d56\u9650\u5236\u4e86\u9ad8\u7ea7\u56fe\u4f18\u5316\u7684\u9002\u7528\u6027\uff0c\u5e76\u4e14\u5728\u90e8\u7f72\u5230\u65b0\u7684\u786c\u4ef6\u76ee\u6807\u65f6\u4f1a\u4ea7\u751f\u5927\u91cf\u7684\u5de5\u7a0b\u6210\u672c\u3002 \u6211\u4eec\u4f7f\u7528 learning \u6765\u6d88\u9664\u8fd9\u79cd\u5de5\u7a0b\u8d1f\u62c5\u3002 \u6211\u4eec\u5b66\u4e60\u7279\u5b9a\u9886\u57df\u7684\u7edf\u8ba1\u6210\u672c\u6a21\u578b(domain-specific statistical cost models)\uff0c\u4ee5\u6307\u5bfc\u5728\u6570\u5341\u4ebf\u79cd\u53ef\u80fd\u7684\u7a0b\u5e8f\u53d8\u4f53\u4e2d\u641c\u7d22\u5f20\u91cf\u7b97\u5b50\u5b9e\u73b0\u3002 \u6211\u4eec\u4f7f\u7528\u8de8\u5de5\u4f5c\u8d1f\u8f7d\u7684\u6709\u6548\u6a21\u578b\u8fc1\u79fb\u8fdb\u4e00\u6b65\u52a0\u901f\u641c\u7d22\u3002 \u5b9e\u9a8c\u7ed3\u679c\u8868\u660e\uff0c\u6211\u4eec\u7684\u6846\u67b6\u63d0\u4f9b\u7684\u6027\u80fd\u53ef\u4e0e\u7528\u4e8e\u4f4e\u529f\u8017 CPU\u3001\u79fb\u52a8 GPU \u548c\u670d\u52a1\u5668\u7ea7 GPU \u7684\u6700\u5148\u8fdb\u7684\u624b\u52a8\u4f18\u5316\u5e93\u76f8\u5ab2\u7f8e\u3002</p>"},{"location":"mlc/tvm-autotvm.html#1-intro","title":"1. Intro","text":"<p>\u4e3a\u4e86\u4f18\u5316\u5f20\u91cf\u7b97\u5b50\uff0c\u7a0b\u5e8f\u5458\u9700\u8981\u8003\u8651\u7531\u4e8e\u7ebf\u7a0b\u3001\u5185\u5b58\u91cd\u7528\u3001\u6d41\u6c34\u7ebf\u548c\u5176\u4ed6\u786c\u4ef6\u56e0\u7d20\u505a\u5b9e\u73b0\u3002 \u56e0\u6b64\uff0c\u652f\u6301\u4e0d\u540c\u7684\u786c\u4ef6\u540e\u7aef\u9700\u8981\u4ed8\u51fa\u5de8\u5927\u7684\u5de5\u7a0b\u52aa\u529b\u3002 \u5373\u4f7f\u5728\u5f53\u524d\u652f\u6301\u7684\u786c\u4ef6\u4e0a\uff0c\u5f00\u53d1 DL \u6846\u67b6\u548c\u6a21\u578b\u4e5f\u4f1a\u53d7\u5230\u5e93\u4e2d\u4f18\u5316\u7b97\u5b50\u96c6\u7684\u9650\u5236\uff0c\u4ece\u800c\u963b\u6b62\u7b97\u5b50\u878d\u5408\u7b49\u4f18\u5316\u3002</p> <p>\u8fd9\u9879\u7814\u7a76\u63a2\u8ba8\u4e86\u4ee5\u4e0b\u95ee\u9898\uff1a\u6211\u4eec\u80fd\u5426\u5229\u7528\u5b66\u4e60\u6765\u51cf\u8f7b\u8fd9\u79cd\u5de5\u7a0b\u8d1f\u62c5\u5e76\u81ea\u52a8\u4f18\u5316\u7ed9\u5b9a\u786c\u4ef6\u5e73\u53f0\u7684\u5f20\u91cf\u7b97\u5b50\u7a0b\u5e8f\uff1f \u6211\u4eec\u80af\u5b9a\u7684\u7b54\u6848\u57fa\u4e8e\u6211\u4eec\u7684\u7edf\u8ba1\u6210\u672c\u6a21\u578b\uff0c\u8be5\u6a21\u578b\u4f7f\u7528\u7ed9\u5b9a\u7684\u4f4e\u7ea7\u7a0b\u5e8f\u9884\u6d4b\u7a0b\u5e8f\u8fd0\u884c\u65f6\u95f4\u3002 \u8fd9\u4e9b\u6210\u672c\u6a21\u578b\u6307\u5bfc\u6211\u4eec\u63a2\u7d22\u53ef\u80fd\u7684\u7a0b\u5e8f\u7a7a\u95f4\uff0c\u4f7f\u7528\u53ef\u8fc1\u79fb\u7684\u8868\u793a\u6765\u6982\u62ec\u4e0d\u540c\u7684\u5de5\u4f5c\u8d1f\u8f7d\u4ee5\u52a0\u901f\u641c\u7d22\u3002 \u6211\u4eec\u505a\u51fa\u4ee5\u4e0b\u8d21\u732e\uff1a</p> <ul> <li>\u5f62\u5f0f\u5316\u63cf\u8ff0\u4e86 \u4f7f\u7528 learning \u4f18\u5316\u5f20\u91cf\u7a0b\u5e8f \u8fd9\u4e2aproblem \uff0c \u5e76\u4e14\u603b\u7ed3\u4e86\u5176\u663e\u8457\u7279\u70b9</li> <li>\u63d0\u51fa\u4e86\u4e00\u4e2aML \u6846\u67b6\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898</li> <li>\u4f7f\u7528\u8fc1\u79fb\u5b66\u4e60\u52a0\u901f\u4f18\u53162-10\u500d</li> </ul> <p>\u6211\u4eec\u5bf9\u8be5\u6846\u67b6\u4e2d\u7684\u7ec4\u4ef6\u8bbe\u8ba1\u9009\u62e9\u8fdb\u884c\u4e86\u8be6\u7ec6\u7684\u5b9e\u8bc1\u5206\u6790\u3002 \u5b9e\u9a8c\u7ed3\u679c\u8868\u660e\uff0c\u6211\u4eec\u7684\u6846\u67b6\u6bd4\u73b0\u6709\u6846\u67b6\u4ea7\u751f\u4e86 1.2 \u500d\u5230 3.8 \u500d\u7684\u7aef\u5230\u7aef\u6027\u80fd\u6539\u8fdb\u3002</p>"},{"location":"mlc/tvm-autotvm.html#7-conclusion","title":"7. Conclusion","text":"<p>\u6587\u7ae0\u4ecb\u7ecd\u4e86 AutoTVM\uff1a\u4e00\u79cd\u57fa\u4e8e\u673a\u5668\u5b66\u4e60\u7684\u6846\u67b6\uff0c\u53ef\u81ea\u52a8\u4f18\u5316 DL \u7cfb\u7edf\u4e2d\u5f20\u91cf\u7b97\u5b50\u7684\u5b9e\u73b0\u3002 \u6211\u4eec\u7684\u7edf\u8ba1\u6210\u672c\u6a21\u578b(statistical cost model)\u5141\u8bb8\u5728\u5de5\u4f5c\u8d1f\u8f7d\u4e4b\u95f4\u8fdb\u884c\u6709\u6548\u7684\u6a21\u578b\u5171\u4eab\uff0c\u5e76\u901a\u8fc7\u6a21\u578b\u8fc1\u79fb\u52a0\u901f\u4f18\u5316\u8fc7\u7a0b\u3002 \u9664\u4e86\u6211\u4eec\u7684\u89e3\u51b3\u65b9\u6848\u6846\u67b6\u4e4b\u5916\uff0c\u8fd9\u4e2a\u65b0\u95ee\u9898\u7684\u5177\u4f53\u7279\u5f81\u4f7f\u5176\u6210\u4e3a\u76f8\u5173\u9886\u57df\u521b\u65b0\u7684\u7406\u60f3\u8bd5\u9a8c\u53f0\uff0c\u4f8b\u5982\u795e\u7ecf\u7a0b\u5e8f\u5efa\u6a21\u3001\u8d1d\u53f6\u65af\u4f18\u5316\u3001\u8fc1\u79fb\u5b66\u4e60\u548c\u5f3a\u5316\u5b66\u4e60\u3002 \u5728\u7cfb\u7edf\u65b9\u9762\uff0c learning to optimize tensor programs \u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u786c\u4ef6\u540e\u7aef\u5b9e\u73b0\u66f4\u591a\u878d\u5408\u7684\u7b97\u5b50\u3001\u6570\u636e\u5e03\u5c40\u548c\u6570\u636e\u7c7b\u578b\u2014\u2014\u8fd9\u5bf9\u4e8e\u6539\u8fdb DL \u7cfb\u7edf\u81f3\u5173\u91cd\u8981\u3002 \u6211\u4eec\u7684\u6846\u67b6\u53ef\u4ee5\u5728 https \u627e\u5230\uff1a https://tvm.apache.org/</p>"},{"location":"mlc/tvm-autotvm.html#2-problem-formalization","title":"2. Problem Formalization","text":"<p>\u4ee5 \u56fe1 \u4e3a\u4f8b\u3002\u6211\u4eec\u4f7f\u7528\u7d22\u5f15\u8868\u8fbe\u5f0f(index expressions)\u8868\u793a\u5f20\u91cf\u7b97\u5b50\uff08\u5982\uff0c\\(C_{ij} = \\sum_k A_{ki}B_{kj}\\)\uff09\u3002 \u7528 \\(\\varepsilon\\) \u8868\u793a\u5176\u7a7a\u95f4\u3002 \u7d22\u5f15\u8868\u8fbe\u5f0f\u4e0d\u6307\u5b9a\u5b9e\u73b0\u7ec6\u8282\uff0c\u4f8b\u5982\u5faa\u73af\u987a\u5e8f\u3001\u5185\u5b58\u8303\u56f4\u548c\u7ebf\u7a0b\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u751f\u6210\u903b\u8f91\u4e0a\u7b49\u540c\u4e8e\u7ed9\u5b9a \\(e \\in \\varepsilon\\) \u7684\u8868\u8fbe\u5f0f\u7684\u4f4e\u7ea7\u4ee3\u7801\u7684\u591a\u4e2a\u53d8\u4f53\u3002\u6211\u4eec\u4f7f\u7528 \\(S_e\\) \u6765\u8868\u793a\u4ece e \u5230\u4f4e\u7ea7\u4ee3\u7801\u7684\u53ef\u80fd\u7684\u8c03\u5ea6\u7a7a\u95f4\u3002 \u5bf9\u4e8e \\(s \\in S_e\\)\uff0c\u8bbe \\(x = g(e, s)\\) \u4e3a\u751f\u6210\u7684\u4f4e\u7ea7\u4ee3\u7801\u3002 \u8fd9\u91cc\uff0cg \u4ee3\u8868\u4e00\u4e2a\u7f16\u8bd1\u5668\u6846\u67b6\uff0c\u5b83\u4ece e\u3001s \u751f\u6210\u4f4e\u7ea7\u4ee3\u7801\u3002 \u6211\u4eec\u611f\u5174\u8da3\u7684\u662f\u6700\u5c0f\u5316 \\(f(x)\\)\uff0c\u8fd9\u662f\u786c\u4ef6\u4e0a\u7684\u5b9e\u9645\u8fd0\u884c\u65f6\u95f4\u6210\u672c\u3002 \u91cd\u8981\u7684\u662f\uff0c\u6211\u4eec\u4e0d\u77e5\u9053 f(x) \u7684\u89e3\u6790\u8868\u8fbe\u5f0f\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u5728\u786c\u4ef6\u4e0a\u8fd0\u884c\u5b9e\u9a8c\u6765\u67e5\u8be2\u5b83\u3002 \u5bf9\u4e8e\u7ed9\u5b9a\u7684 (g, e, Se, f) \u5143\u7ec4\uff0c\u6211\u4eec\u7684\u95ee\u9898\u53ef\u4ee5\u5f62\u5f0f\u5316\u4e3a\u4ee5\u4e0b\u76ee\u6807\uff1a</p> \\[ \\texttt{arg min} f(g(e,s)) \\] <p>\u8fd9\u5f88\u7c7b\u4f3c\u4f20\u7edf\u7684\u8d85\u53c2\u6570\u641c\u7d22\u95ee\u9898\uff0c\u4f46\u662f\u6709\u4ee5\u4e0b\u51e0\u4e2a\u663e\u8457\u4e0d\u540c\uff1a</p> <ul> <li> <p>\u76f8\u5bf9\u8f83\u4f4e\u7684\u5b9e\u9a8c\u6210\u672c\u3002 \u4f20\u7edf\u4e0a\u8d85\u53c2\u6570\u4f18\u5316\u95ee\u9898\u67e5\u8be2 f \u6210\u672c\u5f88\u9ad8\uff0c\u5373\u8fd0\u884c\u5b9e\u9a8c\u53ef\u80fd\u9700\u8981\u6570\u5929\u3002 \u7136\u800c\uff0c\u7f16\u8bd1\u548c\u8fd0\u884c\u5f20\u91cf\u7a0b\u5e8f\u7684\u6210\u672c\u662f\u51e0\u79d2\u949f\u3002 \u6b64\u5c5e\u6027\u8981\u6c42\u6a21\u578b\u8bad\u7ec3\u548c\u63a8\u7406\u901f\u5ea6\u5feb\uff0c \u5426\u5219\u4e0e\u5728\u771f\u5b9e\u786c\u4ef6\u4e0a\u5206\u6790\u6267\u884c\u76f8\u6bd4\u6ca1\u6709\u4efb\u4f55\u597d\u5904\u3002 \u8fd9\u4e5f\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u5728\u4f18\u5316\u8fc7\u7a0b\u4e2d\u6536\u96c6\u66f4\u591a\u7684\u8bad\u7ec3\u6570\u636e\u3002</p> </li> <li> <p>\u7279\u5b9a\u9886\u57df\u7684\u95ee\u9898\u7ed3\u6784\u3002 \u5927\u591a\u6570\u73b0\u6709\u7684\u8d85\u53c2\u6570\u4f18\u5316\u7b97\u6cd5\u5c06\u95ee\u9898\u89c6\u4e3a\u9ed1\u76d2\u3002 \u5f53\u6211\u4eec\u4f18\u5316\u7a0b\u5e8f\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5b83\u4eec\u4e30\u5bcc\u7684\u7ed3\u6784\u6765\u6784\u5efa\u6709\u6548\u7684\u6a21\u578b\u3002</p> </li> <li> <p>\u5927\u91cf\u7c7b\u4f3c\u7684\u7b97\u5b50\u3002 \u7aef\u5230\u7aef DL \u7cfb\u7edf\u5fc5\u987b\u9488\u5bf9\u4e0d\u540c\u7684\u8f93\u5165\u5927\u5c0f\u3001\u5f62\u72b6\u548c\u6570\u636e\u5e03\u5c40\u914d\u7f6e\u4f18\u5316\u5f20\u91cf\u7b97\u5b50\u7a0b\u5e8f\u3002 \u8fd9\u4e9b\u4efb\u52a1\u76f8\u4f3c\uff0c\u53ef\u4ee5\u4e3a\u8fc1\u79fb\u5b66\u4e60\u63d0\u4f9b\u673a\u4f1a\u3002</p> </li> </ul> <p>\u6211\u4eec\u63cf\u8ff0\u4e86\u4e0e\u624b\u52a8\u4f18\u5316\u4ee3\u7801\u7ade\u4e89\u7684\u81ea\u52a8\u4ee3\u7801\u751f\u6210\u7684\u4e24\u4e2a\u5173\u952e\u5148\u51b3\u6761\u4ef6\u3002:</p> <ol> <li>\u6211\u4eec\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u8be6\u5c3d\u7684\u641c\u7d22\u7a7a\u95f4 \\(S_e\\)\uff0c\u6db5\u76d6\u624b\u52a8\u8c03\u6574\u5e93\u4e2d\u7684\u6240\u6709\u786c\u4ef6\u611f\u77e5\u4f18\u5316\u3002</li> <li>\u6211\u4eec\u9700\u8981\u6709\u6548\u5730\u627e\u5230 \\(S_e\\) \u4e2d\u7684\u6700\u4f18\u8c03\u5ea6\u3002</li> </ol> <p>\u6709\u8bb8\u591a\u7528\u4e8e\u4ee3\u7801\u751f\u6210\u7684\u9886\u57df\u7279\u5b9a\u8bed\u8a00 (DSL) [32\u300136\u300115\u300137\u300120\u300130]\uff0c\u6bcf\u79cd\u8bed\u8a00\u90fd\u6709\u4e0d\u540c\u7684 \\(E\\)\u3001\\(S_e\\) \u548c \\(g\\)\u3002 \u591a\u9762\u4f53\u6a21\u578b [5, 42, 41] \u662f \\(S_e\\) \u7684\u6d41\u884c\u9009\u62e9\uff1b \u4ed6\u4eec\u5c06\u5faa\u73af\u57df\u5efa\u6a21\u4e3a\u6574\u6570\u7ebf\u6027\u7ea6\u675f\u3002 \u4e00\u79cd\u6e90\u81ea Halide [32] \u7684\u66ff\u4ee3\u65b9\u6cd5\u4f7f\u7528\u4e00\u7ec4\u8f6c\u6362\u539f\u8bed\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8c03\u5ea6\u7a7a\u95f4\u3002 \u6539\u5584\\(S_e\\)\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u7814\u7a76\u65b9\u5411\uff0c\u8d85\u51fa\u4e86\u672c\u6587\u7684\u8303\u56f4\uff1b \u6211\u4eec\u9009\u62e9\u4e86\u4e30\u5bcc\u7684 \\(S_e\\)\uff0c\u5e76\u5728\u672c\u6587\u7684\u5176\u4f59\u90e8\u5206\u4e13\u6ce8\u4e8e\u8c03\u5ea6\u4f18\u5316\u3002</p> <p>\u6211\u4eec\u4f7f\u7528\u6765\u81ea\u73b0\u6709\u4ee3\u7801\u751f\u6210\u6846\u67b6 [9] \u7684\u539f\u8bed\u6765\u5f62\u6210 \\(S_e\\)\u3002 \u6211\u4eec\u7684\u641c\u7d22\u7a7a\u95f4\u5305\u62ec\u6bcf\u4e2a\u5faa\u73af\u8f74\u4e0a\u7684\u591a\u5c42\u5e73\u94fa\u3001\u5faa\u73af\u6392\u5e8f\u3001GPU \u7684\u5171\u4eab\u5185\u5b58\u7f13\u5b58\u4ee5\u53ca\u5c55\u5f00\u548c\u77e2\u91cf\u5316\u7b49\u6ce8\u91ca\u3002 \u641c\u7d22\u7a7a\u95f4\u5927\u5c0f</p>"},{"location":"mlc/tvm-autotvm.html#3-learning-to-optimize-tensor-programs","title":"3. Learning to Optimize Tensor Programs","text":"<p>\u6211\u4eec\u63d0\u51fa\u4e86\u4e00\u4e2a\u57fa\u4e8e ML \u7684\u6846\u67b6\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u56fe 2 \u5c55\u793a\u4e86\u6846\u67b6\u53ca\u5176\u6a21\u5757\u3002 \u6211\u4eec\u5efa\u7acb\u4e86\u4e00\u4e2a\u7edf\u8ba1\u6210\u672c\u6a21\u578b statisticalcost models \\(\\hat{f}(x)\\) \u6765\u4f30\u8ba1\u6bcf\u4e2a\u4f4e\u7ea7\u7a0b\u5e8f x \u7684\u6210\u672c\u3002 Exploration Module \u63d0\u51fa\u65b0\u7684\u8c03\u5ea6\u4ee5\u5728\u786c\u4ef6\u4e0a\u8fd0\u884c\u3002 \u8fd0\u884c\u65f6\u7edf\u8ba1\u4fe1\u606f\u6536\u96c6\u5728\u6570\u636e\u5e93 D = {(ei , si , ci)} \u4e2d\uff0c\u8be5\u6570\u636e\u5e93\u53c8\u53ef\u7528\u4e8e\u66f4\u65b0 \\(\\hat{f}\\)\u3002 \u6211\u4eec\u5728\u4ee5\u4e0b\u5c0f\u8282\u4e2d\u8ba8\u8bba\u7279\u5b9a\u4e8e module \u7684\u8bbe\u8ba1\u9009\u62e9\u3002</p>"},{"location":"mlc/tvm-autotvm.html#31-statistical-cost-model","title":"3.1. Statistical Cost Model","text":"<p>\u6211\u4eec\u652f\u6301\u7684\u7b2c\u4e00\u4e2a\u7edf\u8ba1\u6a21\u578b\u662f\u57fa\u4e8e\u68af\u5ea6\u63d0\u5347\u6811 [11] (GBTs)\u3002 \u6211\u4eec\u4ece\u7ed9\u5b9a\u7684\u4f4e\u7ea7 AST \\(x\\) \u4e2d\u63d0\u53d6\u9886\u57df\u7279\u5b9a\u7279\u5f81\u3002 \u5305\u62ec\u5faa\u73af\u7ed3\u6784\u4fe1\u606f\uff08\u5982\u5185\u5b58\u8bbf\u95ee\u8ba1\u6570\u548c\u6570\u636e\u91cd\u7528\u7387\uff09\u548c\u901a\u7528\u6ce8\u91ca\uff08\u4f8b\u5982\uff0c\u77e2\u91cf\u5316\u3001\u5c55\u5f00\u3001\u7ebf\u7a0b\u7ed1\u5b9a\uff09\u3002 \u6211\u4eec\u4f7f\u7528 XGBoost [7]\uff0c\u5b83\u5728\u8fc7\u53bb\u7684\u95ee\u9898\u4e2d\u88ab\u8bc1\u660e\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u57fa\u4e8e\u7279\u5f81\u7684\u6a21\u578b\u3002 \u6211\u4eec\u7684\u7b2c\u4e8c\u4e2a\u6a21\u578b\u662f TreeGRU[39]\uff0c\u5b83\u9012\u5f52\u5730\u5c06\u4f4e\u7ea7 AST \u7f16\u7801\u4e3a\u5d4c\u5165\u5411\u91cf\u3002 \u6211\u4eec\u4f7f\u7528\u7ebf\u6027\u5c42\u5c06\u5d4c\u5165\u5411\u91cf\u6620\u5c04\u5230\u6700\u7ec8\u9884\u6d4b\u6210\u672c\u3002</p> <p>GBT \u548c TreeGRU \u4ee3\u8868\u4e86\u4e24\u79cd\u4e0d\u540c\u7684 ML \u95ee\u9898\u89e3\u51b3\u65b9\u6cd5\u3002 GBT \u4f9d\u8d56\u4e8e\u7cbe\u786e\u7684\u7279\u5f81\u63d0\u53d6\uff0c\u4f7f\u7528 CPU \u8fdb\u884c\u5feb\u901f\u9884\u6d4b\u3002 TreeGRU \u662f\u4e00\u79cd\u57fa\u4e8e DL \u7684\u65b9\u6cd5\uff0c\u5177\u6709\u53ef\u6269\u5c55\u6027\uff0c\u4e0d\u9700\u8981\u7279\u5f81\u5de5\u7a0b\uff0c\u4f46\u5728\u8bad\u7ec3\u548c\u9884\u6d4b\u901f\u5ea6\u65b9\u9762\u6ede\u540e\u3002 \u6211\u4eec\u5c06\u6279\u5904\u7406\u5e94\u7528\u4e8e TreeGRU \u6a21\u578b\u5e76\u4f7f\u7528 GPU \u52a0\u901f\u4f7f\u8bad\u7ec3\u548c\u9884\u6d4b\u901f\u5ea6\u8db3\u591f\u5feb\u3002</p>"},{"location":"mlc/tvm-autotvm.html#32-training-objective-function","title":"3.2. Training Objective Function","text":"<p>\u6211\u4eec\u53ef\u4ee5\u4ece\u591a\u4e2a\u76ee\u6807\u51fd\u6570\u4e2d\u8fdb\u884c\u9009\u62e9\uff0c\u4e3a\u7ed9\u5b9a\u7684\u6570\u636e\u96c6\u5408 \\(\\mathcal{D} = {(e_i , s_i , c_i)}\\) \u8bad\u7ec3\u7edf\u8ba1\u6210\u672c\u6a21\u578b\u3002 \u4e00\u4e2a\u5e38\u89c1\u7684\u9009\u62e9\u662f\u56de\u5f52\u635f\u5931\u51fd\u6570 \\(\\sum_i (\\hat{f}(x_i)-c_i)^2\\) \uff0c\u5b83\u9f13\u52b1\u6a21\u578b\u51c6\u786e\u9884\u6d4b\u6210\u672c\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u7531\u4e8e\u6211\u4eec\u5728\u9009\u62e9\u8fc7\u7a0b\u4e2d\u53ea\u5173\u5fc3\u7a0b\u5e8f\u8fd0\u884c\u65f6\u95f4\u7684\u76f8\u5bf9\u987a\u5e8f\u800c\u4e0d\u662f\u5b83\u4eec\u7684\u7edd\u5bf9\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u6539\u7528\u4ee5\u4e0b\u79e9\u635f\u5931\u51fd\u6570[6]\uff1a</p> \\[ \\sum_{i,j}\\log(1+e^{-sign(c_i-c_j)(\\hat{f}(x_i)-\\hat{f}(x_j))}) \\] <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u9884\u6d4b\u51fd\u6570 \\(\\hat{f}(x)\\) \u6765\u9009\u62e9\u6700\u597d\u7684\u5b9e\u73b0\u3002</p>"},{"location":"mlc/tvm-autotvm.html#33-exploration-module","title":"3.3. Exploration Module","text":"<p>\u7591\u95ee</p> <p>\u6ca1\u770b\u61c2\uff1f\u4e0d\u61c2\u7684\u6982\u5ff5\u6bd4\u8f83\u591a</p> <p>\u63a2\u7d22\u6a21\u5757\u63a7\u5236\u641c\u7d22\u5faa\u73af\uff0c\u7b97\u6cd5 1 \u5bf9\u5176\u8fdb\u884c\u4e86\u603b\u7ed3\u3002\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0c\u5b83\u5fc5\u987b\u6839\u636e \\(\\hat{f}(x)\\) \u548c\u5728\u771f\u5b9e\u786c\u4ef6\u4e0a\u67e5\u8be2 \\(f(x)\\) \u9009\u62e9\u4e00\u6279\u5019\u9009\u7a0b\u5e8f\u3002 \u7531\u4e8e\u641c\u7d22\u7a7a\u95f4\u7684\u5927\u5c0f\uff0c\u6211\u4eec\u4e0d\u80fd\u7b80\u5355\u5730\u679a\u4e3e \\(S_e\\) \u7684\u6574\u4e2a\u7a7a\u95f4\u5e76\u9009\u62e9 top-b \u5019\u9009\u8005\u3002 \u76f8\u53cd\uff0c\u6211\u4eec\u4f7f\u7528\u6a21\u62df\u9000\u706b [19] \u548c f(x) \u4f5c\u4e3a energy function\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u6279\u5e76\u884c\u9a6c\u5c14\u53ef\u592b\u94fe\u6765\u63d0\u9ad8\u7edf\u8ba1\u6210\u672c\u6a21\u578b\u7684\u9884\u6d4b\u541e\u5410\u91cf\u3002 \u6211\u4eec\u9009\u62e9\u8868\u73b0\u6700\u597d\u7684\u5019\u9009\u6279\u6b21\u5728\u771f\u5b9e\u786c\u4ef6\u4e0a\u8fd0\u884c\u3002 \u6536\u96c6\u7684\u6027\u80fd\u6570\u636e\u7528\u4e8e\u66f4\u65b0 \\(\\hat{f}\\)\u3002 \u6211\u4eec\u4f7f\u9a6c\u5c14\u53ef\u592b\u94fe\u7684\u72b6\u6001\u5728 \\(\\hat{f}\\) \u66f4\u65b0\u4e2d\u4fdd\u6301\u4e0d\u53d8\u3002 \u6211\u4eec\u8fd8\u5e94\u7528 \\(\\epsilon\\)-greedy \u968f\u673a\u9009\u62e9 \\(\\epsilon\\)b\uff08\u4f8b\u5982 0.05\uff09\u4e2a\u5019\u9009\u8005\u4ee5\u786e\u4fdd\u63a2\u7d22\u3002</p> <p>Diversity-Aware Exploration\u3002 \u5728\u4e3a\u786c\u4ef6\u8bc4\u4f30\u9009\u62e9 b \u4e2a\u5019\u9009\u8005\u65f6\uff0c\u6211\u4eec\u4f1a\u540c\u65f6\u8003\u8651\u8d28\u91cf\u548c\u591a\u6837\u6027\u3002 \u5047\u8bbe\u8c03\u5ea6\u914d\u7f6e \\(s\\) \u53ef\u4ee5\u5206\u89e3\u4e3a m \u4e2a\u5206\u91cf \\(s=[s_1,s_2,\\cdots s_m]\\)\u3002 \u6211\u4eec\u6700\u5927\u5316\u4ee5\u4e0b\u76ee\u6807\u4ee5\u4ece\u9876\u90e8 \\(\\lambda b\\) \u5019\u9009\u8005\u4e2d\u9009\u62e9\u5019\u9009\u96c6 \\(S\\)\uff1a</p> \\[ L(S) = -\\sum_{s\\in S}\\hat{f}(g(e,s)) + \\alpha \\sum_{j=1}^m |\\cup_{s\\in S}\\{s_j\\}| \\] <p>\u7b2c\u4e00\u4e2a\u4efb\u671f\u9f13\u52b1\u6211\u4eec\u9009\u62e9\u8fd0\u884c\u65f6\u95f4\u6210\u672c\u4f4e\u7684\u5019\u9009\u4eba\u3002 \u7b2c\u4e8c\u9879\u8ba1\u7b97 S \u6240\u8986\u76d6\u7684\u4e0d\u540c\u914d\u7f6e\u7ec4\u4ef6\u7684\u6570\u91cf\u3002L(S) \u662f\u4e00\u4e2a\u5b50\u6a21\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5e94\u7528\u8d2a\u5fc3\u7b97\u6cd5 [29, 22] \u6765\u83b7\u5f97\u8fd1\u4f3c\u89e3\u3002 </p> <p>\u4e0d\u786e\u5b9a\u6027\u4f30\u8ba1\u5668\u3002 \u5f53 \\(\\hat{f}\\) \u7684\u4e0d\u786e\u5b9a\u6027\u4f30\u8ba1\u53ef\u7528\u65f6\uff0c\u8d1d\u53f6\u65af\u4f18\u5316\u65b9\u6cd5 [34\u300133\u300135\u300117] \u4f7f\u7528\u83b7\u53d6\u51fd\u6570\u800c\u4e0d\u662f\u5747\u503c\u3002 \u5178\u578b\u7684\u9009\u62e9\u5305\u62ec\u9884\u671f\u6539\u8fdb (EI) \u548c\u7f6e\u4fe1\u4e0a\u9650 (UCB)\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5f15\u5bfc\u7a0b\u5e8f\u6765\u83b7\u5f97\u6a21\u578b\u7684\u4e0d\u786e\u5b9a\u6027\u4f30\u8ba1\u5e76\u9a8c\u8bc1\u8fd9\u4e9b\u65b9\u6cd5\u7684\u6709\u6548\u6027\u3002 \u6b63\u5982\u6211\u4eec\u5c06\u5728\u7b2c 6 \u8282\u4e2d\u770b\u5230\u7684\uff0c\u8003\u8651\u4e0d\u786e\u5b9a\u6027\u5e76\u4e0d\u4f1a\u6539\u8fdb\u6211\u4eec\u95ee\u9898\u7684\u641c\u7d22\u3002 \u7136\u800c\uff0c\u91c7\u96c6\u529f\u80fd\u7684\u9009\u62e9\u4ecd\u7136\u662f\u4e00\u4e2a\u503c\u5f97\u8fdb\u4e00\u6b65\u63a2\u7d22\u7684\u5019\u9009\u8005\u3002</p>"},{"location":"mlc/tvm-autotvm.html#4-accelerating-optimization-via-transfer-learning","title":"4. Accelerating Optimization via Transfer Learning","text":"<p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u5173\u6ce8\u5b66\u4e60\u4f18\u5316\u5355\u4e2a\u5f20\u91cf\u7b97\u5b50\u7684\u5de5\u4f5c\u8d1f\u8f7d\u3002 \u5728\u5b9e\u8df5\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u9488\u5bf9\u5177\u6709\u4e0d\u540c\u8f93\u5165\u5f62\u72b6\u548c\u6570\u636e\u7c7b\u578b\u7684\u8bb8\u591a\u5f20\u91cf\u7b97\u5b50\u8fdb\u884c\u4f18\u5316\u3002 \u5728\u73b0\u5b9e\u4e16\u754c\u7684\u8bbe\u7f6e\u4e2d\uff0c\u7cfb\u7edf\u4ece\u4ee5\u524d\u770b\u5230\u7684\u5de5\u4f5c\u8d1f\u8f7d\u4e2d\u6536\u96c6\u5386\u53f2\u6570\u636e D0\u3002 \u6211\u4eec\u53ef\u4ee5\u5e94\u7528\u8fc1\u79fb\u5b66\u4e60\u6765\u6709\u6548\u5730\u4f7f\u7528 D0 \u6765\u52a0\u901f\u4f18\u5316\u3002</p> <p>\u8fc1\u79fb\u5b66\u4e60\u7684\u5173\u952e\u662f\u521b\u5efa\u4e00\u4e2a\u5bf9\u6e90\u57df\u548c\u76ee\u6807\u57df\u4e0d\u53d8\u7684\u53ef\u8fc1\u79fb\u8868\u793a\u3002 \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8de8\u57df\u7684\u901a\u7528\u8868\u793a\u6765\u5171\u4eab\u6210\u672c\u6a21\u578b\u3002 \u4e0d\u540c\u7684\u8868\u793a\u9009\u62e9\u53ef\u80fd\u5177\u6709\u4e0d\u540c\u7ea7\u522b\u7684\u4e0d\u53d8\u6027\u3002</p> <p>\u8d1d\u53f6\u65af\u4f18\u5316\u65b9\u6cd5\u4e2d\u7684\u4e00\u79cd\u5e38\u89c1\u505a\u6cd5\u662f\u76f4\u63a5\u4f7f\u7528\u914d\u7f6e\u4f5c\u4e3a\u6a21\u578b\u7684\u8f93\u5165\u3002 \u4f46\u662f\uff0c\u641c\u7d22\u7a7a\u95f4\u89c4\u8303\u53ef\u80fd\u4f1a\u56e0\u4e0d\u540c\u7684\u5de5\u4f5c\u8d1f\u8f7d\u800c\u6539\u53d8\uff0c\u6216\u8005\u5f53\u7528\u6237\u4e3a\u76f8\u540c\u7684\u5de5\u4f5c\u8d1f\u8f7d\u6307\u5b9a\u65b0\u7684\u641c\u7d22\u7a7a\u95f4\u65f6\u3002 \u914d\u7f6e\u8868\u793a s \u5bf9\u4e8e\u641c\u7d22\u7a7a\u95f4\u7684\u53d8\u5316\u4e0d\u662f\u4e0d\u53d8\u7684\u3002</p> <p>\u53e6\u4e00\u65b9\u9762\uff0c\u4f4e\u7ea7\u5faa\u73af AST \\(x\\)\uff08\u56fe 3a\uff09\u662f\u5bf9\u641c\u7d22\u7a7a\u95f4\u4e0d\u53d8\u7684\u7a0b\u5e8f\u7684\u5171\u4eab\u8868\u793a\u3002 \u4e3a\u4e86\u5229\u7528\u8fd9\u79cd\u4e0d\u53d8\u6027\uff0c\u6211\u4eec\u7684\u6210\u672c\u6a21\u578b \\(f(x)\\) \u5c06\u4f4e\u7ea7\u5faa\u73af AST \\(x\\) \u4f5c\u4e3a\u8f93\u5165\u3002 \u6211\u4eec\u8fd8\u9700\u8981\u5c06 \\(x\\) \u7f16\u7801\u5230\u5411\u91cf\u7a7a\u95f4\u4e2d\u4ee5\u8fdb\u884c\u9884\u6d4b\u3002 \\(x\\) \u7684\u7279\u5b9a\u7f16\u7801\u4e5f\u53ef\u4ee5\u5bfc\u81f4\u4e0d\u540c\u7ea7\u522b\u7684\u4e0d\u53d8\u6027</p> <p>GBT \u7684\u4e0a\u4e0b\u6587\u5173\u7cfb\u7279\u5f81\u3002 \u6211\u4eec\u5728\u6bcf\u4e2a\u5faa\u73af\u7ea7\u522b\u5b9a\u4e49\u4e0a\u4e0b\u6587\u7279\u5f81\u6765\u8868\u793a\u5faa\u73af\u7279\u5f81\u3002 \u4e0a\u4e0b\u6587\u7279\u5f81\u7684\u7b80\u5355\u8868\u793a\u662f\u4e00\u4e2a\u5411\u91cf\uff08\u4f8b\u5982\uff0c\u5728\u56fe 3b \u4e2d\uff0c\u6bcf\u4e2a\u5faa\u73af\u90fd\u6709\u4e00\u884c\u7279\u5f81\uff09\u3002 \u4e0a\u4e0b\u6587\u7279\u5f81\u53ef\u4ee5\u63d0\u4f9b\u4fe1\u606f\uff0c\u4f46\u81f3\u5173\u91cd\u8981\u7684\u662f\uff0c\u4e0d\u80fd\u6982\u62ec\u4e0d\u540c\u7684\u5faa\u73af\u5d4c\u5957\u6a21\u5f0f\uff1b \u6211\u4eec\u5b9a\u4e49\u4e0a\u4e0b\u6587\u5173\u7cfb\u7279\u5f81\u6765\u514b\u670d\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>\u7591\u95ee</p> <p>\u8fd9\u90e8\u5206\u4e5f\u770b\u4e0d\u592a\u61c2\uff0c\u6682\u65f6\u8df3\u8fc7</p>"},{"location":"mlc/tvm-autotvm.html#5-prior-work","title":"5. Prior Work","text":"<p>\u9ed1\u76d2\u4f18\u5316\uff08auto-tuning\uff09\u7528\u4e8e\u9ad8\u6027\u80fd\u8ba1\u7b97\u5e93\uff0c\u5982 ATLAS [43] \u548c FFTW [12]\u3002 \u6216\u8005\uff0c\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a\u4f9d\u8d56\u4e8e\u786c\u4ef6\u7684\u6210\u672c\u6a21\u578b\u6765\u6307\u5bfc\u641c\u7d22 [28\u30015]\u3002 Polyhedral methods [5, 42] \u4f7f\u7528\u6574\u6570\u7ebf\u6027\u89c4\u5212\u6765\u4f18\u5316\u6210\u672c\u3002 Tensor Comprehensions [41] \u7ed3\u5408\u4e86\u8fd9\u4e24\u79cd\u65b9\u6cd5\uff0c\u4f7f\u7528\u9ed1\u76d2\u4f18\u5316\u6765\u9009\u62e9\u7ebf\u7a0b\u5757\u7684\u53c2\u6570\u548c\u591a\u9762\u4f53\u4f18\u5316\u6765\u751f\u6210\u5185\u90e8\u5faa\u73af\u3002 \u9ed1\u76d2\u65b9\u6cd5\u53ef\u80fd\u9700\u8981\u8bb8\u591a\u5b9e\u9a8c\u8bd5\u9a8c\u624d\u80fd\u63a2\u7d22\u5de8\u5927\u7684\\(S_e\\)\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u9884\u5b9a\u4e49\u7684\u6210\u672c\u6a21\u578b\u53ef\u80fd\u4e0d\u591f\u51c6\u786e\uff0c\u65e0\u6cd5\u6355\u6349\u73b0\u4ee3\u786c\u4ef6\u7684\u590d\u6742\u6027\uff0c\u5fc5\u987b\u4e3a\u6bcf\u4e2a\u65b0\u786c\u4ef6\u76ee\u6807\u624b\u52a8\u91cd\u65b0\u5b9a\u4e49</p> <p>\u4ee5\u524d\uff0c  statistical cost models \u5df2\u7528\u4e8e\u4f18\u5316 SAT \u6c42\u89e3\u5668 [17\u300118]\u3002 \u6211\u4eec\u5c06\u8fd9\u4e00\u60f3\u6cd5\u5e94\u7528\u4e8e\u6211\u4eec\u7684\u95ee\u9898\uff0c\u5e76\u6784\u5efa\u4e86\u4e00\u4e2a\u7279\u5b9a\u9886\u57df\u7684\u6210\u672c\u6a21\u578b\uff0c\u4ee5\u5b9e\u73b0\u5de5\u4f5c\u8d1f\u8f7d\u4e4b\u95f4\u7684\u6709\u6548\u8f6c\u79fb\u3002 \u6700\u8fd1\u7684\u8d8b\u52bf\u662f\u4f7f\u7528\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u6765\u6267\u884c\u7a0b\u5e8f\u5206\u6790 [3\u300110]\u3002 \u6211\u4eec new problem setting and experiment environment \u53ef\u4ee5\u4f5c\u4e3a\u76f8\u5173\u65b9\u5411\u672a\u5f00\u53d1\u7814\u7a76\u673a\u4f1a\u7684\u8bd5\u9a8c\u53f0\u3002</p>"},{"location":"mlc/tvm-autotvm.html#6-experiment","title":"6. Experiment","text":"<p>TODO:</p>"},{"location":"mlc/tvm-ffi.html","title":"TVM-ffi","text":"<p>\u672c\u6587 \u57fa\u4e8e tlc-pack/relax dc7072efe290d7e8c69d8e216311510981fc82e1</p> <p>Ref: </p> <ul> <li>\u6df1\u5165\u7406\u89e3TVM\uff1aPython/C++\u4e92\u8c03(\u4e0b)</li> </ul> <p>\u8fd9\u7bc7\u4e3b\u8981\u4ecb\u7ecd TVM \u4e2d python \u524d\u7aef\u548c C/C++\u540e\u7aef \u4ea4\u4e92\u7684\u65b9\u6cd5\u3002</p>"},{"location":"mlc/tvm-ffi.html#1-import-tvm","title":"1. <code>import tvm</code> \u505a\u4e86\u4ec0\u4e48?","text":"<p>\u9996\u5148\u8003\u8651\u4e00\u4e2a\u95ee\u9898\uff1a <pre><code>import tvm\n</code></pre> \u8fd9\u884c\u4ee3\u7801\u505a\u4e86\u4ec0\u4e48\u5de5\u4f5c\uff1f</p> <p>\u6839\u636epython\u8bed\u8a00\u7684\u5b9a\u4e49\uff0c \u8fd9\u91cc\u7684 <code>tvm</code> \u662f\u4e00\u4e2a package(\u4e00\u4e2apackage\u5305\u542b\u591a\u4e2asubpakcage \u6216 modules)\u3002\u6267\u884c <code>import</code>\u65f6\uff0cpackage \u76ee\u5f55\u4e0b\u82e5\u6709<code>__init_.py</code>\u6587\u4ef6\uff0c\u5219\u8be5\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u4ee3\u7801\u90fd\u4f1a\u88ab\u6267\u884c\u3002\u56e0\u6b64 \u8fd9\u884c\u4ee3\u7801\u5b9e\u9645\u4e0a\u9690\u5f0f\u5730\u6267\u884c\u4e86 <code>tvm/__init__.py</code>\u6587\u4ef6\u3002\u56e0\u6b64\u63a5\u4e0b\u6765\u770b\u8be5\u6587\u4ef6\u4e2d\u505a\u4e86\u54ea\u4e9b\u5de5\u4f5c\uff08\u8fd9\u91cc\u91cd\u70b9\u5173\u6ce8 ffi \u76f8\u5173\uff09\uff1a \u5728 <code>tvm/__init__.py</code>\u6587\u4ef6\u4e2d \u5f15\u5165 ffi \u90e8\u5206\u7684\u903b\u8f91\u5982\u4e0b</p> <pre><code># tvm._ffi\nfrom ._ffi.base import TVMError, __version__, _RUNTIME_ONLY\n\nfrom ._ffi.runtime_ctypes import DataTypeCode, DataType\nfrom ._ffi import register_object, register_func, register_extension, get_global_func\n</code></pre> <p>\u8fd9\u91cc\u7684<code>tvm/_ffi</code> \u662f\u4e00\u4e2a subpackage\uff0c<code>tvm/_ffi/__init__.py</code>\u4e2d\u5185\u5bb9\u662f\uff1a</p> <pre><code>from . import _pyversion\nfrom .base import register_error\nfrom .registry import register_object, register_func, register_extension\nfrom .registry import _init_api, get_global_func, get_object_type_index\n</code></pre> <ol> <li> <p><code>from ._ffi.base import ...</code>\u8bed\u53e5\u4f1a\u4ece<code>tvm/_ffi/base.py</code> \u505a\u7684\u5de5\u4f5c\u662f\u5c1d\u8bd5load tvm\u52a8\u6001\u5e93\uff0c\u5176\u641c\u7d22\u51e0\u4e2a\u5e38\u89c4\u8def\u5f84\uff0c\u5176\u903b\u8f91\u5982\u4e0b\uff1a     <pre><code>def _load_lib():\n\"\"\"Load libary by searching possible path.\"\"\"\n    lib_path = libinfo.find_lib_path()\n    # The dll search path need to be added explicitly in\n    # windows after python 3.8\n    if sys.platform.startswith(\"win32\") and sys.version_info &gt;= (3, 8):\n        for path in libinfo.get_dll_directories():\n            os.add_dll_directory(path)\n    lib = ctypes.CDLL(lib_path[0], ctypes.RTLD_GLOBAL)\n    lib.TVMGetLastError.restype = ctypes.c_char_p\n    return lib, os.path.basename(lib_path[0])\n</code></pre>     \u53ef\u4ee5\u770b\u5230\uff0ctvm\u4f7f\u7528python\u7684<code>ctypes</code>\u6a21\u5757\u52a0\u8f7d\u52a8\u6001\u5e93.</p> <p>\u5728_load_lib\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\uff0c<code>_LIB</code>\u548c<code>_LIB_NAME</code>\u90fd\u5b8c\u6210\u4e86\u521d\u59cb\u5316\uff0c\u5176\u4e2d<code>_LIB</code>\u662f\u4e00\u4e2a<code>ctypes.CDLL</code>\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u5b83\u662f\u80fd\u591f\u64cd\u4f5cTVM\u52a8\u6001\u94fe\u63a5\u5e93\u7684export symbols\u7684\u4e00\u4e2a\u5168\u5c40\u53e5\u67c4\uff0c<code>_LIB_NAME</code>\u662f\u5e93\u540d\u79f0\u5b57\u7b26\u4e32\u3002\u8fd9\u6837\u540e\u7eed\u5728python\u4e2d\uff0c\u6211\u4eec\u5c31\u80fd\u901a\u8fc7<code>_LIB</code>\u8fd9\u4e2a\u53e5\u67c4\u548cc++\u7684\u4ee3\u7801\u8fdb\u884c\u4ea4\u4e92\u3002</p> </li> <li> <p>\u6267\u884c <code>tvm/_ffi/registry.py</code> \uff0c\u8be5module\u5185\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u4e0e c++ \u4ee3\u7801\u4ea4\u4e92\u7684\u51fd\u6570\uff08\u5982\u4ecepy\u83b7\u53d6\u5df2\u6ce8\u518cfunc\u7684\u65b9\u6cd5\uff1a<code>get_global_func</code>\uff0c\u4ee5\u53ca\u4ecepy\u4ee3\u7801\u6ce8\u518cfunc\u7684\u65b9\u6cd5\uff1a<code>register_func</code> \u7b49\u7b49\uff09</p> <p>\u8fd9\u91cc\u4ee5<code>get_global_func</code>\u4e3a\u4f8b\uff0c\u770b\u4e00\u4e0bpy\u662f\u600e\u4e48\u62ff\u5230 c++\u4e2d\u7f16\u5199\u7684\u51fd\u6570\u7684\uff1a <code>get_global_func</code>\u7b80\u5355\u5730\u8c03\u7528 <code>_get_global_func</code> \u8fd4\u56de\u503c\u662f\u4e00\u4e2a<code>PackedFunc</code>\u5bf9\u8c61\uff0c<code>_get_global_func</code>\u903b\u8f91\u5982\u4e0b\uff1a</p> <pre><code>def _get_global_func(name, allow_missing=False):\n    handle = PackedFuncHandle() # \u7c7b\u578b\u4e3a ctypes.c_void_p \u5bf9\u5e94c\u4e2d\u7684\u4e00\u4e2a void*\n    check_call(_LIB.TVMFuncGetGlobal(c_str(name), ctypes.byref(handle)))\n\n    if handle.value:\n        return _make_packed_func(handle, False)\n    if allow_missing:\n        return None\n    raise ValueError(\"Cannot find global function %s\" % name)\n</code></pre> <p>\u5176\u4e2d<code>_LIB.TVMFuncGetGlobal</code> \u51fd\u6570\u5b9a\u4e49\u4f4d\u4e8e<code>src/runtime/registry.cc</code>\uff0c\u8be5\u51fd\u6570\u7b80\u5316\u540e\u903b\u8f91\u5982\u4e0b\uff1a</p> <p><pre><code>int TVMFuncGetGlobal(const char* name, TVMFunctionHandle* out) {\nconst tvm::runtime::PackedFunc* fp = tvm::runtime::Registry::Get(name);\ntvm::runtime::TVMRetValue ret;\nret = *fp;\nTVMValue val;\nint type_code;\nret.MoveToCHost(&amp;val, &amp;type_code);\n*out = val.v_handle;\n}\n</code></pre> \u9996\u5148\u67e5\u8868\u83b7\u5f97 name \u5bf9\u5e94\u7684 <code>PackedFunc*</code> fp\uff0c\u7136\u540e\u7528<code>TVMRetValue</code>\u7c7b\u578b\u5c06 fp wrap \u8d77\u6765\uff0c\u63a5\u7740\u8c03\u7528<code>TVMRetValue</code>\u7684<code>MoveToCHost</code> \u65b9\u6cd5\u5c06 \u6307\u9488\u8fd4\u56de\u5230py\u524d\u7aef\u3002</p> <p>python\u5728\u4eceC++\u62ff\u5230 PackedFuncHandle \u540e\uff0c\u8c03\u7528\u4e86<code>_make_packed_func</code> \u5c06\u5176\u5305\u88c5\u6210\u4e00\u4e2apython\u5bf9\u8c61\uff0c\u7b80\u5316\u540e\u903b\u8f91\u5982\u4e0b:</p> <pre><code>def _make_packed_func(handle, is_global):\n    obj = PackedFunc.__new__(PackedFunc)\n    obj.is_global = is_global\n    obj.handle = handle\n    return obj\n</code></pre> <p>\u8fd9\u4e2a\u8fc7\u7a0b\u544a\u8bc9\u6211\u4eec\uff0c\u5982\u679c\u60f3\u8981C++\u7684\u51fd\u6570\u88ab python \u524d\u7aef\u7684<code>get_global_func</code>\u611f\u77e5\uff0c\u9700\u8981\u5b9e\u73b0\u5c06\u51fd\u6570\u6ce8\u518c\u5230\u4e00\u4e2a\u8868\u91cc\uff0c\u4f7f\u5f97<code>tvm::runtime::Registry::Get</code>\u65b9\u6cd5\u80fd\u4ece\u8fd9\u5f20\u8868\u4e2d\u83b7\u53d6\u5230\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u5173\u6ce8 \u5728c++\u4e2d\u6ce8\u518c\u51fd\u6570\u7684\u6574\u4e2a\u8fc7\u7a0b\u3002</p> </li> </ol>"},{"location":"mlc/tvm-ffi.html#2-registry","title":"2. Registry","text":"<p>\u4e0a\u9762\u6211\u4eec\u8bf4\u5230 tvm \u53ef\u4ee5\u901a\u8fc7 <code>get_global_func</code>\u4e4b\u7c7b \u7684\u65b9\u6cd5\u83b7\u53d6\u5230 c++ \u4e2d\u6ce8\u518c\u7684\u51fd\u6570\uff0cor \u8fdb\u884c\u5176\u5b83\u4ea4\u4e92\u3002\u8fd9\u91cc\u6709\u51e0\u4e2a\u95ee\u9898\uff1a</p> <ol> <li>\u5177\u4f53\u6765\u8bf4\u600e\u4e48\u5728c++\u4e2d\u6ce8\u518c\u4e00\u4e2a\u51fd\u6570\u4f7f\u5176\u5bf9\u4e8e py \u524d\u7aef\u53ef\u89c1\uff1f</li> <li>python \u524d\u7aef\u5177\u4f53\u4f1a\u5728\u4ec0\u4e48\u65f6\u5019 load \u8fd9\u4e9b\u51fd\u6570\uff1f</li> </ol> <p>\u4ee5\u4e00\u4e2a\u4f8b\u5b50\u6765\u8bf4\u660e\u8fd9\u4e24\u4e2a\u95ee\u9898\uff1a</p> <p>\u6bd4\u65b9\u8bf4\u5728\u4f7f\u7528<code>from_onnx()</code>\u65f6\u9700\u8981\u5c06onnx\u7b97\u5b50\u8f6c\u6362\u6210RelayExpr\uff0c\u800c\u6784\u5efa RelayExpr\u7684\u5b9e\u73b0\u5728C++\u4ee3\u7801\u4e2d: <code>src/relay/op/nn/nn.cc</code>\uff0c\u5305\u62ec<code>MakeDense</code>, <code>MakeMatMul</code>, <code>MakeBiasAdd</code> \u7b49\u3002</p> <ul> <li>\u8fd9\u4e9b<code>Make*</code>\u51fd\u6570 \u9700\u8981\u52a0\u4e0a\u4ec0\u4e48\u6837\u7684\u6807\u8bb0 or \u901a\u8fc7\u4ec0\u4e48\u6837\u7684\u65b9\u5f0f\u624d\u80fd\u591f\u88abpython \u7684<code>ctypes</code>\u6a21\u5757\u611f\u77e5\u5e76\u8c03\u7528\uff1f</li> <li>\u6211\u4eec\u6bcf\u6b21\u5728python\u4e2d\u751f\u6210RelayExpr\u65f6\u90fd\u8981\u5148\u8c03\u7528<code>get_global_func</code>\u62ff\u5230handle\u518d\u8fdb\u884c\u4e00\u6b21\u8c03\u7528\u5417\uff1f\u770b <code>get_global_func</code> \u6e90\u7801\u53ef\u77e5\uff0c \u4ed6\u4f1a\u8c03\u7528\u901a\u8fc7c_runtime_api\u66b4\u9732\u7684<code>_LIB.TVMFuncGetGlobal</code>\uff0c \u800c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u67e5\u627e\u6574\u4e2a\u6ce8\u518c\u8868\uff0c\u6548\u7387\u662f\u5f88\u4f4e\u7684\u3002</li> </ul> <p>\u770b\u4e00\u4e0btvm\u662f\u600e\u4e48\u505a\u7684\u3002\u9996\u5148\u56de\u7b54\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff0c\u5373python \u5982\u4f55\u62ff\u5230c++ \u51fd\u6570\uff1a</p> <p>\u5728<code>tvm/__init__.py</code>\u4e2d\u6709\u4e00\u884c\u4ee3\u7801\uff1a <pre><code>from .runtime.object import Object\n</code></pre> \u5728<code>tvm/runtime/__init__.py</code>\u4e2d\u6709\u4e00\u884c\u4ee3\u7801\uff1a <pre><code>from .object import Object\n</code></pre> \u5728<code>tvm/runtime/object.py</code>\u8fd9\u4e2amodule\u4e2d\u6709\u4e00\u884c\u4ee3\u7801\uff1a <pre><code>from . import _ffi_api, _ffi_node_api\n</code></pre> \u800c<code>tvm/runtime/_ffi_api.py</code>\u4ee3\u7801\u5982\u4e0b\uff1a <pre><code>\"\"\"FFI APIs for tvm.runtime\"\"\"\nimport tvm._ffi\n\n# Exports functions registered via TVM_REGISTER_GLOBAL with the \"runtime\" prefix.\n# e.g. TVM_REGISTER_GLOBAL(\"runtime.ModuleLoadFromFile\")\ntvm._ffi._init_api(\"runtime\", __name__)\n</code></pre> \u8be5module\u901a\u8fc7\u8c03\u7528<code>tvm_ffi._init_api()</code>\u65b9\u6cd5\u6765\u4e3a\u7279\u5b9a\u7684python module \u751f\u6210\u8c03\u7528C++\u4ee3\u7801\u7684 api\u3002\u5177\u4f53\u6765\u8bf4\u8be5\u51fd\u6570\u901a\u8fc7\u8c03\u7528<code>tvm/_ffi/registry</code>\u4e2d\u7684<code>list_global_func_names()</code>\u51fd\u6570\uff08\u5e95\u5c42\u8c03\u7528 ctypes \u66b4\u9732\u7684 <code>TVMFuncListGlobalNames</code>\u8fd9\u4e2aC++API\uff09\u5f97\u5230C++\u4e2d\u6ce8\u518c\u7684\u6240\u6709\u51fd\u6570</p> <p>\u5728\u6574\u4e2a tvm project \u4e2d \u641c\u7d22<code>tvm._ffi._init_api(</code> \u53d1\u73b0\u6709 88 \u4e2a\u7ed3\u679c \uff0c\u4f8b\u5982\uff1a <pre><code>tvm._ffi._init_api(\"relay.op._make\", __name__)\ntvm._ffi._init_api(\"relay.op.nn._make\", __name__)\ntvm._ffi._init_api(\"relay.op.dyn._make\", __name__)\ntvm._ffi._init_api(\"relay.op.dyn.nn._make\", __name__)\n</code></pre></p> <p>\ud83d\udca1\u603b\u7ed3\uff1apython \u7aef\u901a\u8fc7<code>_init_api()</code>\u51fd\u6570\u6765\u4e3a\u5404\u4e2amodule\u751f\u6210\u5bf9\u5e94\u7684 C++\u51fd\u6570\u63a5\u53e3\u3002\u5177\u4f53\u6765\u8bf4\uff0c <code>_init_api()</code>\u4f7f\u7528<code>ctypes</code>\u6a21\u5757\u8c03\u7528 \u52a8\u6001\u5e93\u66b4\u9732\u7ed9 python \u7684<code>TVMFuncListGlobalNames</code>\u65b9\u6cd5\u2014\u2014\u8be5\u65b9\u6cd5\u8fd4\u56de\u6240\u6709\u5728C++\u4ee3\u7801\u4e2d\u4f7f\u7528<code>TVM_REGISTER_GLOBAL</code>\u5b8f\u6ce8\u518c\u8fc7\u7684\u51fd\u6570(\u7684\u5730\u5740)(\u5728\u8be5\u7248\u672c\u4ee3\u7801\u5e93\u4e2d\u67092236\u5904\u67e5\u627e\u7ed3\u679c)\uff0c<code>_init_api()</code>\u4f1a\u6839\u636e\u6ce8\u518c\u540d\u524d\u7f00\u8fdb\u884c\u7b5b\u9009\uff0c\u4e3a\u5bf9\u5e94\u7684python module \u751f\u6210\u76f8\u5e94\u7684api\u3002</p> <p><code>TVMFuncListGlobalNames</code>\u7684\u5b9e\u73b0\u4f4d\u4e8e<code>src/runtime/registry.cc</code>\u4e2d</p> <p>\u5728<code>src/runtime/c_runtime_api.h</code>\u4e2d\u5bfc\u51fa\u7b26\u53f7</p> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u5173\u5fc3\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u5373 tvm C++ \u4ee3\u7801\u4e2d\u7684 registry\u673a\u5236\uff0c\u8fd9\u4e5f\u662f\u5176\u5b83\u8bed\u8a00\u524d\u7aef\u4e0e C++\u4ee3\u7801\u4ea4\u4e92\u7684\u6838\u5fc3\u673a\u5236\uff1a</p> <p><code>TVM_REGISTER_GLOBAL</code>\u5b8f\uff1a <pre><code>#define TVM_REGISTER_GLOBAL(OpName) \\\n  TVM_STR_CONCAT(TVM_FUNC_REG_VAR_DEF, __COUNTER__) = ::tvm::runtime::Registry::Register(OpName)\n</code></pre></p> <ul> <li><code>TVM_FUNC_REG_VAR_DEF</code> \u5c55\u5f00\u4e3a<code>static ::tvm::runtime::Registry&amp; __mk_##TVM</code>\uff0c</li> <li><code>__COUNTER__</code>\u662f\u4e3b\u6d41\u7f16\u8bd1\u5668\u90fd\u652f\u6301\u7684\u4e00\u4e2a\u5185\u7f6e\u5b8f\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u6bcf\u6b21+1\u7684\u8ba1\u6570\u5668</li> <li>\u5b8f\u5c06\u4f1a\u901a\u8fc7\u8c03\u7528<code>Registry::Register(OpName)</code>\u8fd4\u56de\u4e00\u4e2a<code>Registry&amp;</code></li> </ul> <p>\u4e00\u4e2a\u5c55\u5f00\u793a\u4f8b\uff1a \u5728<code>src/relay/op/nn/nn.cc</code>\u4e2d\uff1a <pre><code>TVM_REGISTER_GLOBAL(\"relay.op.nn._make.relu\").set_body_typed([](Expr data) {\nstatic const Op&amp; op = Op::Get(\"nn.relu\");\nreturn Call(op, {data}, Attrs(), {});\n});\n</code></pre> \u4f1a\u88ab\u66ff\u6362\u4e3a\u5982\u4e0b\u8bed\u53e5\uff1a <pre><code>static ::tvm::runtime::Registry&amp; __mk_TVM40 =\n::tvm::runtime::Registry::Register(\"relay.op.nn._make.relu\").set_body_typed([](Expr data) {\nstatic const Op&amp; op = Op::Get(\"nn.relu\");\nreturn Call(op, {data}, Attrs(), {});\n});\n</code></pre></p> <p>\u5176\u4e2d<code>set_body</code>\u5373\u5c06<code>Registry</code>\u7684<code>func_</code>\u6210\u5458\u6539\u4e3a\u8be5lambda\u3002</p> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e00\u4e0b <code>Registry</code> \u7ed3\u6784\uff0c\u7b80\u5316\u540e\uff1a <pre><code>// include/tvm/runtime/registry.h\nclass Registry {\npublic:\nRegistry&amp; set_body(PackedFunc f);\nRegistry&amp; set_body_typed(FLambda f);\nRegistry&amp; set_body_method(R (T::*f)(Args...));\n\nstatic Registry&amp; Register(const std::string&amp; name);\nstatic const PackedFunc* Get(const std::string&amp; name);\nstatic std::vector ListNames();\n\nprotected:\nstd::string name_;\nPackedFunc func_;\nfriend struct Manager;\n};\n</code></pre> <code>name_</code>\u5f88\u597d\u7406\u89e3\uff0c\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5373\u4e3a<code>relay.op.nn._make.relu</code>\uff1b\u800c<code>func_</code>\u7684\u7c7b\u578b\u662f<code>PackedFunc</code>\uff0c\u662f\u5bf9\u51fd\u6570\u6307\u9488\u7684\u4e00\u4e2a\u5305\u88c5\uff0c\u521a\u624d\u4f8b\u5b50\u4e2d\u4f7f\u7528<code>set_body</code>\u65b9\u6cd5\u4f20\u5165\u7684lambda\u4f1a\u7ecf\u8fc7\u5305\u88c5\u540e\u8d4b\u503c\u7ed9<code>func_</code>\uff0c\u5bf9\u4e8e <code>PackedFunc</code> \u7684\u8be6\u7ec6\u4fe1\u606f\u53ef\u4ee5\u53c2\u8003 tvm-type</p> <p>\u770b\u4e00\u4e0b\u521a\u624d<code>TVM_REGISTER_GLOBAL</code>\u7528\u5230\u7684<code>Register</code>\u65b9\u6cd5\uff0c\u548c<code>set_body</code>\u65b9\u6cd5\uff0c\u5b9a\u4e49\u5982\u4e0b\uff1a <pre><code>Registry&amp; Registry::Register(const std::string&amp; name, bool can_override) {\nManager* m = Manager::Global();\nstd::lock_guard&lt;std::mutex&gt; lock(m-&gt;mutex);\n\nif (m-&gt;fmap.count(name)) {\nICHECK(can_override) &lt;&lt; \"Global PackedFunc \" &lt;&lt; name &lt;&lt; \" is already registered\";\n}\n\nRegistry* r = new Registry();\nr-&gt;name_ = name;\nm-&gt;fmap[name] = r;\nreturn *r;\n}\n\nRegistry&amp; Registry::set_body(PackedFunc f) {\nfunc_ = f;\nreturn *this;\n}\n</code></pre> \u53ef\u4ee5\u770b\u5230\uff0c\u5176\u903b\u8f91\u4e3a\u83b7\u53d6<code>Manager</code>\u7684\u5355\u4f8b\uff0c\u7136\u540e\u4ece<code>Manager</code>\u7684\u6210\u5458<code>fmap</code>\u8868\u4e2d\u67e5\u8be2\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u5c31new\u4e00\u4e2a<code>Registry</code>\u5b9e\u4f8b\uff0c\u7136\u540e\u5c06\u8be5\u5b9e\u4f8b\u52a0\u5165\u8868\u4e2d\uff0c\u5e76\u8fd4\u56de\u5bf9\u8be5\u5b9e\u4f8b\u7684\u5f15\u7528\uff0c\u6211\u4eec\u63a5\u7740\u53ef\u4ee5\u901a\u8fc7<code>.set_body()</code>\u6765\u8bbe\u7f6e\u8be5\u5b9e\u4f8b\u7684\u51fd\u6570\u4f53\u3002</p> <p>\u9996\u5148\u770b\u4e00\u4e0b<code>Manager</code>\u7684\u5b9e\u73b0(\u4f4d\u4e8e<code>src/runtime/registry.cc</code>)\uff1a</p> <pre><code>struct Registry::Manager {\nstd::unordered_map&lt;std::string, Registry*&gt; fmap;\nstd::mutex mutex;\n\nManager() {}\n\nstatic Manager* Global() {\n// We deliberately leak the Manager instance, to avoid leak sanitizers\n// complaining about the entries in Manager::fmap being leaked at program\n// exit.\n// \u8fd9\u6bb5\u6ce8\u91ca\u4e0d\u7406\u89e3\uff1f\nstatic Manager* inst = new Manager();\nreturn inst;\n}\n};\n</code></pre> <p>\ud83d\udca1\u5230\u8fd9\u91cc\u6211\u4eec\u660e\u767d\u4e86\uff1a</p> <ol> <li>\u6240\u6709\u901a\u8fc7<code>TVM_REGISTER_GLOBAL</code> \u5b8f\u6ce8\u518c\u7684\u51fd\u6570\uff0c\u90fd\u4f1a\u5b58\u50a8\u5230\u5168\u5c40\u552f\u4e00\u7684<code>Manager</code>\u7684<code>fmap</code>\u5b9e\u4f8b\u4e2d\uff0c\u8be5\u8868\u7684key\u662f\u51fd\u6570\u540d\uff0c\u5bf9\u4e8e\u4f8b\u5b50\u4e2d\u5373\u4e3a<code>relay.op.nn._make.relu</code>\uff0c \u8868\u7684value\u662f\u4e00\u4e2a<code>Registry*</code>\uff0c\u4e00\u4e2a<code>Registry</code>\u5b9e\u4f8b\u4e2d\u5305\u542b\u4e00\u4e2a\u51fd\u6570\u540d\u548c\u4e00\u4e2a<code>PackedFunc</code>\u5bf9\u8c61\u8868\u793a\u51fd\u6570\u672c\u8eab\uff1b</li> <li><code>TVM_REGISTER_GLOBAL</code> \u5b8f\u6240\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u5bf9\u4e8e\u672a\u6ce8\u518c\u7684\u51fd\u6570\uff0cnew\u4e00\u4e2a<code>Registry</code>\u5b9e\u4f8b\uff0c\u5e76\u628a\u6307\u9488\u5b58\u5230\u8868\u4e2d</li> <li>\u524d\u9762\u63d0\u5230\u7684<code>TVMFuncListGlobalNames</code> \u5c31\u662f\u904d\u5386\u8fd9\u5f20\u8868</li> </ol> <p>\u63a5\u4e0b\u6765\u7684\u95ee\u9898\u5c31\u662f<code>PackedFunc</code>\u662f\u4ec0\u4e48\uff1f\u5982\u4f55\u901a\u8fc7\u8be5\u7ed3\u6784\u5b9e\u73b0\u5bf9\u6240\u6ce8\u518c\u51fd\u6570\u7684\u8c03\u7528\uff1f</p> <p>\u5173\u4e8e <code>PackedFunc</code> \u7c7b\u578b\uff0c\u53ef\u4ee5\u53c2\u8003 tvm-type \u8fd9\u7bc7\u6587\u7ae0\u3002</p>"},{"location":"mlc/tvm-ffi.html#3-tvmffi","title":"3. \u4e00\u4e2a\u5b9e\u8df5: \u5728TVM\u4e2d\u4f7f\u7528FFI","text":"<p>\u8fd9\u4e00\u8282\u662f\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5229\u7528\u4e0a\u9762\u7684 ffi \u673a\u5236\uff0c \u5728c++ \u6ce8\u518c\u4e00\u4e2a <code>CallNodeCounter</code>, \u7136\u540e\u5728python \u7aef\u4f7f\u7528\u5b83\u3002 </p> <p>\u4e3a\u4e86\u5145\u5206\u6f14\u793a TVM \u7684 FFI\uff0c \u8fd9\u91cc\u6211\u5728 visit \u8ba1\u7b97\u56fe\u65f6\u4f1a\u8c03\u7528 python \u6ce8\u518c\u7684 <code>DmPythonPrint</code> \u51fd\u6570\u4f5c\u4e3a callback\uff0c \u5728 visit \u8fc7\u7a0b\u4e2d\uff0c \u8c03\u7528 python \u7aef\u51fd\u6570\u5728python \u7aef\u6253\u5370\u4e00\u4e9b\u4fe1\u606f\u3002</p> <p>\ud83d\udca1\u9996\u5148\u8fd9\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u4ee3\u7801\uff0c expr \u7684\u8bbf\u95ee\u987a\u5e8f\u4e5f\u6709\u95ee\u9898\u3002\u6b63\u5e38\u7684 \u53ea\u8bfb visitor \u4e0d\u5e94\u8be5\u5728c++\u91cc\u8d39\u5468\u6298\u8fd9\u6837\u5199\uff0c\u53ea\u662f\u4e3a\u4e86\u6f14\u793a FFI</p> <p>c++ \u7aef\u4ee3\u7801\uff1a</p> <pre><code>#include &lt;tvm/relay/expr.h&gt;\n#include &lt;tvm/relay/expr_functor.h&gt;\n\nnamespace tvm {\nnamespace relay {\nnamespace backend {\n\nclass CallNodeCounter : private ExprVisitor {\npublic:\nstatic int64_t GetCallNodeCount(const Expr&amp; expr) {\nCallNodeCounter counter;\ncounter.call_node_callback_ = const_cast&lt;PackedFunc*&gt;(runtime::Registry::Get(\"DmPythonPrint\"));\n\n\nTVMValue call_node_name;\nauto type_code = 11;\nauto ret = runtime::TVMRetValue{};\n\ncounter.call_node_callback_-&gt;operator()(\"Begin of visit...\\n\");\n\ncounter(expr);\n\ncounter.call_node_callback_-&gt;operator()(\"End of visit...\\n\");\nreturn counter.count_;\n}\n\n\nvoid VisitExpr_(const CallNode* call) final {\nif (call-&gt;op-&gt;IsInstance&lt;OpNode&gt;()) {\nTVMValue call_node_name;\ncall_node_callback_-&gt;operator()((std::string{\"Find Call Node:\"} + call-&gt;op.as&lt;OpNode&gt;()-&gt;name).c_str());\n++count_;\n}\nExprVisitor::VisitExpr_(call);\n}\n\nint64_t count_{};\nPackedFunc* call_node_callback_{nullptr};\n};\n\nint64_t DmCounter(const Expr&amp; expr) { return CallNodeCounter::GetCallNodeCount(expr); }\n\nTVM_REGISTER_GLOBAL(\"relay.backend.DmCounter\").set_body_typed(DmCounter);\n\n}  // namespace backend\n}  // namespace relay\n}  // namespace tvm\n</code></pre> <p>python \u7aef\uff1a</p> <pre><code>import numpy as np\nimport tvm\nfrom tvm import relay\n\n\n# python \u6ce8\u518c \u51fd\u6570 `DmPythonPrint`\nif tvm.get_global_func(\"DmPythonPrint\", allow_missing=True) is None:\n    @tvm.register_func\n    def DmPythonPrint(msg):\n        print(f\"{msg}\")\n\n\ndata = relay.var(\"data\", shape=(1,784),dtype=\"float32\")\nweight1 = relay.var(\"weight1\",shape=(128,784),dtype=\"float32\")\nbias1 = relay.var(\"bias1\",shape=(128,),dtype=\"float32\")\nweight2 = relay.var(\"weight2\",shape=(10,128),dtype=\"float32\")\nbias2 = relay.var(\"bias2\",shape=(10,),dtype=\"float32\")\n\ndense1 = relay.nn.dense(data,weight1)\nbias_add1 = relay.nn.bias_add(dense1, bias1)\nrelu1 = relay.nn.relu(bias_add1)\ndense2 = relay.nn.dense(relu1,weight2)\nbias_add2 = relay.nn.bias_add(dense2, bias2)\nrelu2 = relay.nn.relu(bias_add2)\n\nfunc:relay.Function = relay.Function([data,weight1,bias1,weight2,bias2],relu2)\n\nir_mod: tvm.IRModule = tvm.IRModule.from_expr(func)\n\n# \u62ff\u5230 C++ \u6ce8\u518c\u7684 \u51fd\u6570 `Dmcounter`\nprint_call_node = relay.backend._backend.DmCounter\nres = print_call_node(func)\nprint(f\"Total nums of `CallNode`: {res}\")\n</code></pre> <p>\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a </p> <pre><code>Begin of visit...\n\nFind Call Node:nn.relu\nFind Call Node:nn.bias_add\nFind Call Node:nn.dense\nFind Call Node:nn.relu\nFind Call Node:nn.bias_add\nFind Call Node:nn.dense\nEnd of visit...\n\nTotal nums of `CallNode`: 6\n</code></pre>"},{"location":"mlc/tvm-install.html","title":"TVM-install","text":""},{"location":"mlc/tvm-install.html#windows","title":"windows","text":"<p>\u4e3b\u8981\u53c2\u8003\u5b98\u7f51\u7684\uff1ainstall from source \u4ee5\u4e0b\u81ea\u5df1\u603b\u7ed3\u503c\u5f97\u6ce8\u610f\u7684\u70b9\uff1a</p> <ol> <li> <p>\u5728windows\u4e0a\u5b89\u88c5tvm\u9996\u5148\u8981\u4ece\u6e90\u7801\u5b89\u88c5llvm\uff0c\u6ce8\u610f\u8fd9\u91cc\u4e0d\u80fd\u4f7f\u7528    \u4ecellvm\u5b98\u7f51\u4e0b\u8f7d\u7684\u9884\u7f16\u8bd1\u7684llvm\uff0c\u56e0\u4e3apre-built-binary\u4e2d    \u6ca1\u6709<code>llvm-config</code>\u7b49\u7f16\u8bd1tvm\u6240\u9700\u8981\u7684\u4e1c\u897f\u3002    \u81f3\u4e8e\u5982\u4f55\u5728windows\u4ecesource\u5b89\u88c5llvm\u89c1<code>cpp/toolchain</code>\u6587\u7ae0</p> </li> <li> <p>\u4f7f\u7528Ninja \u7f16\u8bd1tvm:     \u9996\u5148\u6253\u5f00<code>x64 native dev prompt</code>(\u4e3a\u4e86\u83b7\u53d6cl\u73af\u5883\u53d8\u91cf)\uff0c\u7136\u540e\u8fdb\u5165\u6e90\u7801\u76ee\u5f55\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> <pre><code>mkdir build\ncd build\ncp ../cmake/config.cmake .       # \u4fee\u6539\u5176\u4e2dset(USE_LLVM ON)\u4ee5\u53ca\u5176\u5b83\u53d8\u91cf(\u53c2\u8003\u5b98\u7f51)\ncmake -GNinja -DCMAKE_CXX_COMPILER=cl -DCMAKE_C_COMPILER=cl -DCMAKE_BUILD_TYPE=Release ..\ncmake --build .\ncmake --build . --target install # \u8be5\u6b65\u9aa4\u53ef\u7701\u7565\n</code></pre> <p>\u4fee\u6539 <code>build/config.cmake</code>:</p> <ol> <li><code>set(USE_RELAY_DEBUG ON)</code></li> <li><code>(USE_LLVM \"/path/to/llvm-config --link-static\")</code></li> <li><code>set(HIDE_PRIVATE_SYMBOLS ON)</code></li> <li>\u542f\u7528 CUDA: <code>set(USE_CUDA ON)</code></li> </ol> <p>\u6267\u884c <code>build</code> \u540e\uff0c \u5e94\u8be5\u4f1a\u5f97\u5230\u7f16\u8bd1\u751f\u6210\u7684<code>tvm.dll</code>\u548c<code>tvm_runtime.dll</code>(\u4ee5\u53ca\u5bf9\u5e94\u7684\u4e24\u4e2a\u5bfc\u5165\u5e93\u5373.lib\u6587\u4ef6)</p> <p>\u6267\u884c<code>install</code>\u4e4b\u540e\u4f1a\u663e\u793a\u5b89\u88c5\u7684\u4f4d\u7f6e\uff0c\u9ed8\u8ba4\u5e94\u8be5\u662f\u5728<code>C:\\Program Files(X86)</code>\uff0c\u53ef\u4ee5\u81ea\u5df1\u653e\u5230\u5408\u9002\u7684\u4f4d\u7f6e\u3002</p> <p>\u4e0d\u8fc7\uff0c\u5982\u679c\u662f\u7b80\u5355\u4f7f\u7528 TVM \u4e0a\u5c42\u5e94\u7528\uff0c <code>install</code> \u6b65\u9aa4\u53ef\u7701\u7565\u3002 \u5e76\u4e0d\u9700\u8981\u5c06\u7f16\u8bd1\u51fa\u6765\u7684\u5e93\u8def\u5f84\u52a0\u5165\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\uff0c\u624d\u80fd\u8ba9ffi\u6a21\u5757\u627e\u5230\u8fd9\u4e9b\u5e93\uff0c\u56e0\u4e3a TVM \u4e0a\u5c42 ffi \u4f1a\u6839\u636e \u73af\u5883\u53d8\u91cf<code>TVM_HOME</code>\uff0c\u5373TVM\u6e90\u7801\u76ee\u5f55(\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf <code>TVM_HOME=/path/to/tvm-source-code</code>) \u641c\u7d22\u5176\u4e0b <code>build</code> \u76ee\u5f55\u4e2d\u7684\u8fd0\u884c\u65f6\u4f9d\u8d56\u3002</p> </li> <li> <p>\u800c\u4e3a\u4e86\u4f7f\u7528tvm\uff0c\u9664\u4e86\u521a\u624d\u7684\u4e24\u4e2a\u5e93\u4e4b\u5916\uff0ctvm project\u8fd8\u63d0\u4f9b\u4e86\u4e0a\u5c42\u7684\u8f6f\u4ef6\u5305\uff0c\u5305\u62ecpython\uff0crust\uff0cgo\u7b49\u8bed\u8a00\u7684binding\u3002    \u63a5\u4e0b\u6765\u8fd8\u9700\u8981\u5b89\u88c5\u8fd9\u4e9bbinding\uff0c\u4ee5\u5b89\u88c5python\u5305\u4e3a\u4f8b\uff0c\u5b98\u7f51\u63d0\u4f9b\u4e86\u4e24\u79cd\u65b9\u5f0f\uff1a</p> <ol> <li> <p>\u5176\u4e2d\u7b2c\u4e00\u79cd\u5373\u76f4\u63a5\u628a\u6e90\u7801\u7684<code>python</code>\u76ee\u5f55\u52a0\u5165\u5230<code>PYTHONPATH</code>\u73af\u5883\u53d8\u91cf\u4e2d\uff0c\u8fd9\u6837python\u5728\u641c\u7d22lib\u65f6\u5c31\u80fd\u591f\u641c\u7d22\u5230\u8fd9\u4e2a\u5e93\u3002\u8fd9\u4e00\u6b65\u5728linux\u4e0a\u76f4\u63a5\u8bbe\u7f6e<code>$PYTHONPATH=$PYTHONPATH:&lt;tvm-src&gt;/python:</code>\u4f46\u662f\u5728windows\u7cfb\u7edf\u4e0a\uff0c\u4e0d\u80fd\u591f\u8bbe\u7f6e<code>%PYTHONPATH%=%PYTHONPATH%;&lt;tvm-src&gt;/python;</code>\uff0c\u800c\u662f\u9700\u8981\u8bbe\u7f6e<code>%PYTHONPATH%=D:\\software\\Python\\Python38;%TVM_HOME%/python;</code>\uff1b</p> <p>\u5b66\u4e60 TVM \u7ecf\u5e38\u9700\u8981\u6539\u52a8 python \u6e90\u7801\uff0c\u8fd9\u79cd\u65b9\u5f0f\u66f4\u52a0\u63a8\u8350</p> <p>\u63a5\u4e0b\u6765\u8fd8\u9700\u8981\u5b89\u88c5 TVM \u4f9d\u8d56\u7684\u4e00\u4e9b\u5176\u4ed6\u5305\uff0c\u6bd4\u5982\u81ea\u52a8\u8c03\u4f18\u4f9d\u8d56\u7684 <code>xgboost</code>, <code>pandas</code> \u7b49\uff0c\u5177\u4f53\u89c1\u5b98\u7f51</p> </li> <li> <p>\u4e5f\u53ef\u4ee5\u5b89\u88c5\u9884\u7f16\u8bd1\u597d\u7684\u5b89\u88c5\u5305\uff0c\u53c2\u7167https://tlcpack.ai/\u5373\u53ef\uff1a</p> <pre><code>conda install tlcpack-nightly -c tlcpack\n</code></pre> </li> </ol> </li> </ol>"},{"location":"mlc/tvm-lowering.html","title":"TVM-lowering","text":"<p>Ref:</p> <ul> <li>TVM \u81ea\u5e95\u5411\u4e0a\uff08\u4e8c\uff09\uff1aTIR \u7684\u6982\u5ff5\u548c\u7f16\u8bd1\u539f\u7406</li> <li>\u3010\u4ece\u96f6\u5f00\u59cb\u5b66\u6df1\u5ea6\u5b66\u4e60\u7f16\u8bd1\u5668\u3011\u56db\uff0c\u89e3\u6790TVM\u7b97\u5b50</li> <li>\u3010\u4ece\u96f6\u5f00\u59cb\u5b66\u6df1\u5ea6\u5b66\u4e60\u7f16\u8bd1\u5668\u3011\u516d\uff0cTVM\u7684\u7f16\u8bd1\u6d41\u7a0b\u8be6\u89e3</li> <li>TVM \u5b66\u4e60\u6307\u5357\uff08\u4e2a\u4eba\u7248\uff09</li> </ul>"},{"location":"mlc/tvm-lowering.html#1-lower-tir","title":"1. Lower Tir","text":"<p>TIR\u4e00\u822c\u8ba4\u4e3a\u662f target ir\uff0cTensorIR\u662f\u540e\u9762\u53c8\u63d0\u7684\u65b0\u6982\u5ff5\uff0c\u505a\u4e3atvm script\u7684\u4e00\u90e8\u5206\u3002</p> <p>\u8fd9\u8282\u7528\u4e00\u4e2a\u4f8b\u5b50\u8ffd\u8e2a tir \u8868\u793a\u7684 PrimFunc \u662f\u5982\u4f55\u7ecf\u8fc7 target translation \u88ab\u7ffb\u8bd1\u4e3a\u7279\u5b9atarget\u7684\u4e00\u4e2a <code>runtime.Module</code></p> <p>\u4f7f\u7528\u7684\u4f8b\u5b50\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>import tvm\nfrom tvm import te\nSIZE = 1024\n\n# 1. \u4f7f\u7528 TE \u58f0\u660e\u8ba1\u7b97\n# mm\nk = te.reduce_axis((0, SIZE), 'k')\nA = te.placeholder((SIZE, SIZE), name='A')\nB = te.placeholder((SIZE, SIZE), name='B')\nC = te.compute((SIZE, SIZE), lambda x, y: te.sum(A[x, k] * B[k, y], axis=k), name='MM')\n# relu\nD_IN = te.placeholder((SIZE, SIZE), name='RELU_IN')\nD_OUT = te.compute((SIZE, SIZE), lambda i, j: te.max(D_IN[i, j], 0), \"RELU_OUT\")\n\n# 2. \u4ece TE \u521b\u5efa PrimFunc \nte_mm: tvm.tir.PrimFunc = te.create_prim_func([A, B, C]).with_attr({\"global_symbol\": \"mmult\"})\nte_relu: tvm.tir.PrimFunc = te.create_prim_func([D_IN, D_OUT]).with_attr({\"global_symbol\": \"relu\"})\n\n# 3. \u5c06\u521b\u5efa\u51fa\u6765\u7684 PrimFunc \u6dfb\u52a0\u5230\u4e00\u4e2a IRModule \u4e2d\nir_m: tvm.IRModule = tvm.IRModule({'mm': te_mm})\ngv_relu = tvm.ir.GlobalVar(\"relu\")\nir_m.update_func(gv_relu, te_relu)\nprint(ir_m.get_global_vars())\n# \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u4f7f\u7528 \u5148\u6784\u5efa Schedule\uff0c \u518d\u8c03\u7528 `tvm.lower` \u7684\u65b9\u6cd5 \u5f97\u5230\u4e00\u4e2a IRModule\n# te_sch: te.Schedule = te.create_schedule(C.op) # C.op: te.tensor.ComputeOp\n# ir_m: tvm.IRModule = tvm.lower(te_sch, [A, B, C], simple_mode=True,name='mmult')\n\n# 4. Lower and Build\n''' \u5728\u8fd9\u4e00\u6b65\u5c06 IRModule ==&gt; runtime.Module'''\nrt_m: tvm.runtime.Module = tvm.build(ir_m, target='llvm', name='func_set')\n\nprint(f\"\\033[31mtvm.build\\033[0m: {type(ir_m)} \\033[31m==&gt;\\033[0m {type(rt_m)}\")\n\n# print IRModule\uff0c \u5176\u4e2d\u5305\u542b\u4e00\u4e2a PrimFunc\n# print(f\"\\033[31mAfter lowering, the IRModule\\033[0m:\\n{ir_m}\")\nir_m.show()\n\n# # print source code\n# print(f\"\\033[31msource code\\033[0m:\\n{rt_m.get_source()}\")\n</code></pre> <p><code>tvm.build</code> \u5c06\u4ee3\u7801\u4ece IRModule \u8f6c\u6362\u6210 runtime.Module\uff1b </p> <ul> <li>\u5176\u4e2d IRModule \u5b9a\u4e49\u5728 <code>include/tvm/ir/module.h</code> \u4e2d\uff1b \u53ef\u4ee5\u7b80\u5355\u89c6\u4f5c\u4e00\u4e2a <code>&lt;name, BaseFunc&gt;</code> \u7684\u54c8\u5e0c\u8868(\u5373\u53ef\u540c\u65f6\u5305\u542b<code>PrimFunc</code> \u548c <code>Func</code>)</li> <li>\u5176\u4e2d runtime.Module \u5b9a\u4e49\u5bf9\u5e94\u5728 <code>include/tvm/runtime/module.h</code> \u4e2d\uff1b \u53ef\u4ee5\u7b80\u5355\u89c6\u4f5c\u4e00\u4e2a <code>&lt;name, PackedFunc&gt;</code> \u7684\u54c8\u5e0c\u8868\u3002 <code>ModuleNode</code> \u662f\u4e00\u4e2a\u63a5\u53e3\uff0c \u5bf9\u5e94\u6709\u591a\u79cd\u4e0d\u540c\u7684\u5b9e\u73b0\uff0c \u5982 <code>CUDAModuleNode</code>\uff0c <code>LLVMModuleNode</code> \u7b49</li> </ul> <p>\u4ee5\u4f7f\u7528te\u58f0\u660e \u8ba1\u7b97\u8fc7\u7a0b \u4e3a\u4f8b\uff0c\u5c55\u793a\u4e00\u4e2a <code>te.tensor.ComputeOp</code> \u662f\u5982\u4f55\u88ab\u7f16\u8bd1\u6210 <code>runtime.Module</code> \u7684\uff1a</p> <ol> <li>\u4f7f\u7528te\u58f0\u660e\u8ba1\u7b97\u8fc7\u7a0b</li> <li> <p>\u4f7f\u7528 <code>te.create_schedule</code> \u521b\u5efa\u4e00\u4e2aSchedule \u5bf9\u8c61\uff0c \u63a5\u7740\u4f7f\u7528 <code>te.lower()</code> \u5c06\u4e00\u4e2a <code>te.Schedule</code> \u8f6c\u6210\u4e00\u4e2aIRModule\uff1b</p> <p>\u6216\u8005\u4f7f\u7528 <code>te.create_prim_func</code> \u521b\u5efa\u4e00\u4e2a <code>tvm.tir.PrimFunc</code> \u5bf9\u8c61(\u5373 MLC \u8bfe\u7a0b \u4e2d\u6240\u8bf4\u7684\u4e00\u4e2a\u5143\u5f20\u91cf\u51fd\u6570)\uff0c \u7136\u540e\u4f7f\u7528 IRModule \u7684\u6784\u9020\u51fd\u6570\u628a\u8fd9\u4e2a PrimFunc \u653e\u5230IRModule \u4e2d</p> </li> <li> <p>\u63a5\u7740\u8c03\u7528 <code>tvm.build()</code> \u5bf9 IRModule\u8fdb\u884c\u6784\u5efa\uff1a \u5728\u8fd9\u4e00\u6b65\u4e2d\uff0c IRModule \u6700\u7ec8\u5c06\u88ab\u8f6c\u6362\u6210\u4e00\u4e2a <code>runtime.Module</code>\uff1b </p> <p>\u8fd9\u91cc\u9700\u8981\u6ce8\u610f <code>tvm.build</code> \u53ef\u4ee5\u63a5\u53d7 <code>Schedule</code>, <code>PrimFunc</code>, <code>IRModule</code> \u7b49\u591a\u79cd\u7c7b\u578b\uff08\u5b9e\u9645\u4e0a\u90fd\u4f1a\u88ab\u8f6c\u6210 IRModule \u7136\u540e\u518d\u7f16\u8bd1\uff09\u4f5c\u4e3a\u8f93\u5165\uff0c \u5982\u679c\u4f20\u5165\u7684\u662f\u4e00\u4e2a <code>Schedule</code> \u7684\u8bdd\uff0c \u5219\u9700\u8981\u4f20\u5165\u51fd\u6570\u76f8\u5e94\u7684\u8f93\u5165\u53c2\u6570\u5217\u8868</p> </li> </ol> <p>\ud83d\udca1\u56e0\u6b64\u63a5\u4e0b\u6765\u4e3b\u8981\u770b \u4f4d\u4e8e <code>python/driver/build_module.py</code> \u4e2d\u7684 <code>tvm.build</code> \u65b9\u6cd5</p> <p><code>tvm.build()</code> \u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u4e3b\u8981\u6b65\u9aa4</p> <pre><code>def build(\n    inputs: Union[te.Schedule, PrimFunc, IRModule, Mapping[str, IRModule]],\n    args: Optional[List[Union[Buffer, tensor.Tensor, Var]]] = None,\n    target: Optional[Union[str, Target]] = None,\n    target_host: Optional[Union[str, Target]] = None,\n    runtime: Optional[\"tvm.relay.backend.Runtime\"] = None,\n    name: Optional[str] = \"default_function\",\n    binds: Optional[Mapping[tensor.Tensor, Buffer]] = None,\n):\n    if isinstance(inputs, tvm.IRModule):\n      input_mod = lower(inputs)\n    if not isinstance(inputs, (dict, container.Map)):\n      target = Target.current() if target is None else target\n      target = target if target else \"llvm\"\n      target_input_mod = {target: input_mod}\n    else:\n      target_input_mod = inputs\n\n    annotated_mods = {}\n    for tar, mod in target_input_mod.items():\n      annotated_mods[tar] = mod.with_attr(\"runtime\", runtime)\n\n    # \u7701\u7565 get target_host \u7684\u4ee3\u7801\n    target_host = \"llvm\"\n\n    annotated_mods, target_host = Target.canon_target_map_and_host(annotated_mods, target_host)\n    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)\n    annotated_mods, target_host = Target.canon_target_map_and_host(annotated_mods, target_host)\n\n    to_return = rt_mod_host\n    return OperatorModule.from_module(to_return, ir_module_by_target=annotated_mods, name=name)\n</code></pre> <ol> <li> <p>\u8c03\u7528 <code>python/driver/build_module.py</code> \u4e2d <code>lower()</code>\uff0c \u8fd9\u662f\u4e00\u6b65\u4f5c\u7528\u662f\u6267\u884c IRModule\uff08or schedule\u7b49\uff09 \u5230 IRModule \u7684\u53d8\u6362\uff0c\u6267\u884c tir \u5c42\u7ea7\u7684 target \u65e0\u5173\u4f18\u5316\u3002 \u5177\u4f53\u6765\u8bf4\uff0c<code>lower()</code> \u4e2d\u4f1a\u8c03\u7528 <code>ffi.lower_module(inp, simple_mode)</code>\uff0c\u8fd9\u91cc\u5bf9\u5e94\u5230 C++ \u4ee3\u7801 <code>src/dirver/driver_api.cc</code> \u4e2d\u7684 <code>LowerModule</code> \u65b9\u6cd5\uff1a</p> <pre><code>IRModule LowerModule(IRModule mod, bool simple_mode) {\nArray&lt;transform::Pass&gt; pass_list = CreatePassList(simple_mode);\nreturn LowerWithPassList(std::move(mod), pass_list);\n}\nTVM_REGISTER_GLOBAL(\"driver.lower_module\").set_body_typed([](IRModule mod, bool simple_mode) {\nreturn LowerModule(std::move(mod), simple_mode);\n});\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230 \u5728 <code>LowerModule</code> \u903b\u8f91\u4e2d\uff0c \u9996\u5148\u521b\u5efa\u4e86\u4e00\u4e2apass \u5217\u8868\uff0c \u5305\u542b\u4e86<code>tir::transform</code>\u4e2d\u7684\u4e00\u4e9b\u53d8\u6362\uff0c \u7136\u540e\u8c03\u7528 <code>LowerWithPassList</code> \u628a\u5217\u8868\u4e2d\u7684 pass \u5e94\u7528\u5230\u8be5 IRModule \u4e2d\uff1a\u5373\u9996\u5148\u5c06 <code>pass_list</code> \u6784\u9020\u6210\u4e00\u4e2a <code>Sequential</code> \u5bf9\u8c61\uff0c \u7136\u540e\u8c03\u7528 <code>SequentialNode::operator()</code> \uff0c </p> </li> <li> <p>\u5728\u7b2c\u4e00\u6b65\u7684 lowering \u4e4b\u540e\uff0c<code>tvm.build()</code> \u63a5\u6536\u7684inputs\u53c2\u6570 <code>Union[te.Schedule, PrimFunc, IRModule, Mapping[str, IRModule]]</code> \u88ab\u8f6c\u6210\u4e86\u4e00\u4e2a \u7ecf\u8fc7\u521d\u6b65\u4f18\u5316\u7684 IRModule \uff0c \u5e76\u6267\u884c\u4e86 tir \u7ea7\u522b\u7684 target independent \u4f18\u5316\u3002 \u63a5\u4e0b\u6765\u5c31\u662f\u6267\u884c\u4ee3\u7801\u751f\u6210\u7684\u5de5\u4f5c\uff0c \u9996\u5148\u68c0\u67e5 target \u76f8\u5173\u4fe1\u606f\uff0c\u4f1a\u6839\u636e <code>tvm.build()</code> \u7684\u8f93\u5165\u8bbe\u7f6e\u76f8\u5e94\u7684 target, target_host \u7b49\u53d8\u91cf</p> </li> <li> <p>\u5728\u62ff\u5230 target \u7b49\u89c4\u8303\u683c\u5f0f\u7684\u4fe1\u606f\u4e4b\u540e\uff0c\u4f1a\u6267\u884c<code>rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)</code> \uff0c\u8fd9\u91cc\u8c03\u7528\u7684 <code>tir_to_runtime</code> \u5bf9\u5e94\u5230C++\u4e2d\u7684 <code>TIRToRuntime</code>:</p> <pre><code>TVM_REGISTER_GLOBAL(\"driver.tir_to_runtime\")\n.set_body_typed([](const Map&lt;Target, IRModule&gt;&amp; inputs_arg, Target host_target) {\nreturn TIRToRuntime(inputs_arg, host_target);\n});\n</code></pre> <p>\u6bd4\u8f83\u5173\u952e\u7684 <code>TIRToRuntime</code> \u903b\u8f91\u5982\u4e0b\uff1a</p> <pre><code>runtime::Module TIRToRuntime(const Map&lt;Target, IRModule&gt;&amp; inputs_arg, const Target&amp; target_host_arg) {\nstd::vector&lt;runtime::Module&gt; device_modules;\nMap&lt;Target, IRModule&gt; inputs = inputs_arg;\nTarget target_host = target_host_arg;\n// 1. \u68c0\u67e5\u5e76\u8bbe\u7f6etarget_host\n// ...\n// 2. \u904d\u5386\u8f93\u5165\u7684 {Target: IRModule}\n//  SplitMixedModule \u5c06\u4e00\u4e2a IRModule \u5206\u4e3a host \u4e0e device \u4e24\u90e8\u5206\n//  \u6839\u636e host \u4e0e device \u4fe1\u606f\u66f4\u65b0 mhost_all\nIRModule mhost_all = IRModule(Map&lt;GlobalVar, BaseFunc&gt;(),{},{},{},(*inputs.begin()).second-&gt;attrs);\nfor (const auto&amp; it : inputs) {\nif (it.second.defined()) {\nconst auto&amp; [target, ir_module] = it;\nauto&amp; [host_mod, device_mod] = SplitMixedModule(ir_module, target, target_host);\n\nbool overrides_host_target = target-&gt;GetTargetDeviceType() == target_host-&gt;GetTargetDeviceType();\nbool non_host_target_kind  = target-&gt;kind != target_host-&gt;kind;\nif (overrides_host_target &amp;&amp; non_host_target_kind)\ndevice_modules.push_back(codegen::Build(host_mod, target));\nelse\nmhost_all-&gt;Update(host_mod);\n\nif (device_mod-&gt;functions.size() != 0)\ndevice_modules.push_back(codegen::Build(device_mod, target));\n}\n}\n// 3. Build host module\nruntime::Module mhost = codegen::Build(mhost_all, target_host);\nfor (const auto&amp; it : device_modules)\nif (it.operator-&gt;())\nmhost.Import(it);\nreturn mhost;\n}\n</code></pre> <p>\u8fd9\u91cc\u6bd4\u8f83\u5173\u952e\u7684 <code>codegen::build</code> \u5728<code>src/target/codegen.cc</code> \u4e2d\uff0c \u5b9e\u73b0\u5982\u4e0b\uff1a</p> <pre><code>runtime::Module Build(IRModule mod, Target target) {\nauto target_attr_map = tvm::TargetKind::GetAttrMap&lt;FTVMTIRToRuntime&gt;(\"TIRToRuntime\");\nif (target_attr_map.count(target-&gt;kind))\nreturn target_attr_map[target-&gt;kind](mod, target);\n\nstd::string build_f_name = \"target.build.\" + target-&gt;kind-&gt;name;\nconst PackedFunc* bf = runtime::Registry::Get(build_f_name);\nreturn (*bf)(mod, target);\n}\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230 \u901a\u8fc7\u4f7f\u7528\u5b57\u7b26\u4e32\u62fc\u63a5 \u62ff\u5230 <code>build_f_name</code> (\u4f8b\u5982 target \u662f llvm\uff0c \u8fd9\u91cc\u5f97\u5230\u5c31\u662f \"target.build.llvm\"\uff0c cuda \u5c31\u662f \"target.build.cuda\")\uff0c \u63a5\u7740\u7528\u8fd9\u4e2a\u540d\u5b57\u67e5\u627e\u5230\u5df2\u6ce8\u518c\u7684\u51fd\u6570\uff0c\u8fdb\u884c build</p> </li> <li> <p>\u63a5\u4e0b\u6765\u5206\u522b\u4ee5 llvm \u540e\u7aef\uff08\u4e0d\u8bbe\u7f6eruntime\uff09 \u548c cuda \u540e\u7aef\u4e3a\u4f8b \u770b\u4e00\u4e0b\u5982\u4f55\u751f\u6210\u7684 llvm IR or CUDA \u4ee3\u7801</p> <pre><code>// `src/target/llvm/llvm_module.cc`\nTVM_REGISTER_GLOBAL(\"target.build.llvm\")\n.set_body_typed([](IRModule mod, Target target) -&gt; runtime::Module {\nauto n = make_object&lt;LLVMModuleNode&gt;();\nn-&gt;Init(mod, target);\nreturn runtime::Module(n);\n});\n// `src/target/opt/build_cuda_on.cc`\nTVM_REGISTER_GLOBAL(\"target.build.cuda\").set_body_typed(BuildCUDA);\n</code></pre> <p>\u9996\u5148\u770bCUDA\u7684 tir =&gt; bin \u7f16\u8bd1\u6d41\u7a0b\uff1a</p> <pre><code>runtime::Module BuildCUDA(IRModule mod, Target target) {\n// Step 1: Initialize CodeGen for CUDA  \nbool output_ssa = false;\nCodeGenCUDA cg;\ncg.Init(output_ssa);\n\n// Step 2: Add all tir::PrimFunc in IRModule to compile list\nfor (auto kv : mod-&gt;functions) {\nauto f = Downcast&lt;PrimFunc&gt;(kv.second);\ncg.AddFunction(f);\n}\n\n// Step 3: Lower IRModule to CUDA source code\nstd::string code = cg.Finish();\n\n// Step 4: Compile CUDA source code using NVCC and create runtime::Module\nstd::string fmt = \"ptx\";\nstd::string ptx = NVRTCCompile(code, cg.need_include_path());\nreturn CUDAModuleCreate(ptx, fmt, ExtractFuncInfo(mod), code);\n}\n</code></pre> <p>\u5e76\u884c\u7ebf\u7a0b\u6267\u884c\uff08Parallel Thread eXecution\uff0cPTX\uff09\u4ee3\u7801\u662f\u7f16\u8bd1\u540e\u7684GPU\u4ee3\u7801\u7684\u4e00\u79cd IR \uff0c \u5b83\u53ef\u4ee5\u518d\u6b21\u7f16\u8bd1\u4e3a\u539f\u751f\u7684GPU\u6307\u4ee4\u3002PTX\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7a33\u5b9a\u7684\u7f16\u7a0b\u6a21\u578b\u548c\u6307\u4ee4\u96c6\uff0c\u8fd9\u4e2aISA\u80fd\u591f\u8de8\u8d8a\u591a\u79cdGPU\uff0c\u5e76\u4e14\u80fd\u591f\u4f18\u5316\u4ee3\u7801\u7684\u7f16\u8bd1\u7b49\u7b49\u3002</p> <p>\u63a5\u4e0b\u6765\u770b LLVM\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c target=\"llvm\"\uff0c\u7531\u4e8e LLVM IR \u4ecd\u7136\u53ea\u662f\u4e00\u79cd\u4e2d\u95f4\u8868\u793a\uff0c\u8fd8\u9700\u8981\u6839\u636e target \u5f53\u4e2d\u66f4\u8be6\u7ec6\u7684\u786c\u4ef6\u53c2\u6570\uff0c\u627e\u5230\u76ee\u6807\u7f16\u8bd1\u786c\u4ef6\uff0c\u7136\u540e\u8c03\u7528\u76f8\u5e94\u7684 CodeGen\uff08\u7701\u7565\u90e8\u5206\u8f85\u52a9\u4ee3\u7801\uff09\uff1a</p> <pre><code>void Init(const IRModule&amp; mod, const Target&amp; target) {\n// Step 1: Initialize CodeGen for LLVM with different target\nInitializeLLVM();\ntm_ = GetLLVMTargetMachine(target);\nstd::unique_ptr&lt;CodeGenLLVM&gt; cg = CodeGenLLVM::Create(tm_.get());\n\n// Step 2: Add all tir::PrimFunc in IRModule to compile list\nstd::vector&lt;PrimFunc&gt; funcs;\nfor (auto kv : mod-&gt;functions) {\nif (!kv.second-&gt;IsInstance&lt;PrimFuncNode&gt;()) {\n// (@jroesch): we relax constraints here, Relay functions will just be ignored.\nDLOG(INFO) &lt;&lt; \"Can only lower IR Module with PrimFuncs, but got \" &lt;&lt; kv.second-&gt;GetTypeKey();\ncontinue;\n}\nauto f = Downcast&lt;PrimFunc&gt;(kv.second);\nfuncs.push_back(f);\n}\n\n// Step 3: Lower IRModule to LLVM IR code\nmodule_ = cg-&gt;Finish();\n}\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u8fd9\u91cc\u6784\u9020\u4e86\u4e00\u4e2a <code>LLVMModuleNode</code> \u5b9e\u4f8b\uff0c \u8c03\u7528\u4e86\u5b83\u7684 <code>Init</code> \u65b9\u6cd5\uff0c \u56e0\u6b64\u53ef\u77e5\u8be5\u65b9\u6cd5\u5c31\u662f\u5c06 IRModule lower \u4e3a LLVMModuleNode \u7684\u6838\u5fc3\u51fd\u6570\u3002 \u5173\u4e8e <code>LLVMModuleNode</code> \u7684\u5b9a\u4e49\uff0c \u53ef\u53c2\u8003 TVM-type\uff0c\u4e0b\u9762\u662f <code>Init</code> \u65b9\u6cd5\u7684\u5177\u4f53\u5b9e\u73b0\uff1a</p> </li> <li> <p>\u4ece\u4e0a\u4e00\u6b65\u4e2d\u53ef\u77e5\uff0c TIR \u80fd lower \u6210\u76ee\u6807\u6e90\u4ee3\u7801\uff0c\u5173\u952e\u662f CodeGen\u3002\u4e0a\u9762\u63d0\u5230\u7684 CodeGenCUDA\uff0c\u4ee5\u53ca CodeGenLLVM \u662f\u5b8c\u6210 TIR lower \u4e3a C++ \u4ee3\u7801\u7684\u76f8\u5173\u7ed3\u6784\u3002 \u5176\u4e2d <code>CodeGenCUDA</code>\u7ee7\u627f\u81ea <code>CodeGenC</code>\uff0c\u4ee5\u5176\u4e3a\u4f8b\u5b50\u8bf4\u660e\uff08<code>tvm/src/target/source/codegen_c.[h, cc]</code>\uff09\uff1a</p> <pre><code>class CodeGenC : public ExprFunctor&lt;void(const PrimExpr&amp;, std::ostream&amp;)&gt;,\npublic StmtFunctor&lt;void(const Stmt&amp;)&gt;,\npublic CodeGenSourceBase {\npublic:\n// expression\nvoid VisitExpr_(const VarNode* op, std::ostream&amp; os) override;         // NOLINT(*)\nvoid VisitExpr_(const LoadNode* op, std::ostream&amp; os) override;        // NOLINT(*)\nvoid VisitExpr_(const BufferLoadNode* op, std::ostream&amp; os) override;  // NOLINT(*)\nvoid VisitExpr_(const LetNode* op, std::ostream&amp; os) override;         // NOLINT(*)\n...\n// statment\nvoid VisitStmt_(const LetStmtNode* op) override;\nvoid VisitStmt_(const StoreNode* op) override;\nvoid VisitStmt_(const BufferStoreNode* op) override;\nvoid VisitStmt_(const ForNode* op) override;\nvoid VisitStmt_(const WhileNode* op) override;\nvoid VisitStmt_(const IfThenElseNode* op) override;\n...\n}\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c <code>CodeGenC</code> \u4f1a\u904d\u5386\u5230\u4e24\u79cd TIR Node\uff1aExpression\uff08\u8868\u8fbe\u5f0f\uff09 \u548c Statement\uff08\u8bed\u53e5\uff09\u3002Expression\uff08\u8868\u8fbe\u5f0f\uff09\u4e2d\u5305\u542b\u4e86\u5e38\u89c1\u7684\u53d8\u91cf\u58f0\u660e\u3001\u8fd0\u7b97\u3001\u5224\u65ad\u3001\u51fd\u6570\u8c03\u7528\uff0c\u800c Statement\uff08\u8bed\u53e5\uff09\u4e2d\u5305\u542b\u4e86\u63a7\u5236\u6d41\uff08if-else\uff0cLoop \u7b49\uff09\u3001\u5185\u5b58\u7ba1\u7406\u3001\u8d4b\u503c\u7b49\u64cd\u4f5c\u3002</p> <p>\u4f8b\u5982\uff0c\u9047\u5230\u56db\u5219\u8fd0\u7b97\u7684 Expression\uff0cCodeGenC \u76f4\u63a5\u7ffb\u8bd1\u4e3a \" a OP b \"\u7684\u4ee3\u7801\uff1a</p> <pre><code>template &lt;typename T&gt;\ninline void PrintBinaryExpr(const T* op, const char* opstr,\nstd::ostream&amp; os, CodeGenC* p) {\n// If both a and b are scalars\nif (op-&gt;dtype.lanes() == 1) {\n// If OP is an alphabet string, then lower it as \"OP(a, b)\"\nif (isalpha(opstr[0])) {\nos &lt;&lt; opstr &lt;&lt; '(';\np-&gt;PrintExpr(op-&gt;a, os);\nos &lt;&lt; \", \";\np-&gt;PrintExpr(op-&gt;b, os);\nos &lt;&lt; ')';\n}\n// If OP is a symbol, like + - * / %, then lower it as \"a OP b\"\nelse {\nos &lt;&lt; '(';\np-&gt;PrintExpr(op-&gt;a, os);\nos &lt;&lt; ' ' &lt;&lt; opstr &lt;&lt; ' ';\np-&gt;PrintExpr(op-&gt;b, os);\nos &lt;&lt; ')';\n}\n}\n// If both a and b are vectors\nelse {\np-&gt;PrintVecBinaryOp(opstr, op-&gt;dtype, op-&gt;a, op-&gt;b, os);\n}\n}\n\nvoid CodeGenC::VisitExpr_(const AddNode* op, std::ostream&amp; os) {  // NOLINT(*)\nPrintBinaryExpr(op, \"+\", os, this);\n}\nvoid CodeGenC::VisitExpr_(const SubNode* op, std::ostream&amp; os) {  // NOLINT(*)\nPrintBinaryExpr(op, \"-\", os, this);\n}\nvoid CodeGenC::VisitExpr_(const MulNode* op, std::ostream&amp; os) {  // NOLINT(*)\nPrintBinaryExpr(op, \"*\", os, this);\n}\nvoid CodeGenC::VisitExpr_(const DivNode* op, std::ostream&amp; os) {  // NOLINT(*)\nPrintBinaryExpr(op, \"/\", os, this);\n}\n</code></pre> <p>\u5982\u679c\u9047\u5230\u9009\u62e9 SelectNode\uff0cCodeGenC \u5219\u7ffb\u8bd1\u4e3a \"(c ? a : b)\" \u7684\u4ee3\u7801\uff1a</p> <pre><code>void CodeGenC::VisitExpr_(const SelectNode* op, std::ostream&amp; os) {\nos &lt;&lt; \"(\";\nPrintExpr(op-&gt;condition, os);\nos &lt;&lt; \" ? \";\nPrintExpr(op-&gt;true_value, os);\nos &lt;&lt; \" : \";\nPrintExpr(op-&gt;false_value, os);\nos &lt;&lt; \")\";\n}\n</code></pre> </li> </ol>"},{"location":"mlc/tvm-lowering.html#2-lower-te","title":"2. Lower TE","text":"<p>\u4e0a\u4e00\u8282\u4e2d\u6211\u4eec\u4f7f\u7528 TE(Tensor Expression) \u58f0\u660e\u8ba1\u7b97\u8fc7\u7a0b\uff0c \u6784\u9020\u4e86\u4e00\u4e2a PrimFunc\u3002 \u5728TVM \u4e2d\uff0c PrimFunc \u8fd8\u53ef\u4ee5\u901a\u8fc7\u7f16\u5199 TVMScript\uff0c \u6216\u8005\u901a\u8fc7 relay/relax lower \u800c\u6765\u3002 </p> <p>TE\u662f\u4f4d\u4e8e Relay IR / TOPI \u548c TIR \u4e4b\u95f4\u6982\u5ff5\uff0c \u662fTVM \u63d0\u4f9b\u7684\u4e00\u79cd\u7528\u4e8e\u7f16\u5199 Primfunc \u7684 EDSL\uff0c \u5176\u62bd\u8c61\u7a0b\u5ea6\u6bd4 TIR \u66f4\u9ad8\uff0c\u65e0\u6cd5\u76f4\u63a5\u88ab\u7f16\u8bd1\u4e3a\u786c\u4ef6\u6e90\u4ee3\u7801\uff0c\u5fc5\u987b\u5148 lower \u4e3a TIR \u7684 Primitive Function \u518d\u8fdb\u884c\u7f16\u8bd1\u3002</p> <p>\u5728\u8fd9\u4e00\u8282\u4e2d\u6211\u4eec\u5173\u6ce8\u4f7f\u7528 te \u63cf\u8ff0\u7684\u8ba1\u7b97\u8fc7\u7a0b\u662f\u5982\u4f55\u88ab\u8f6c\u6362\u6210\u4e00\u4e2a PrimFunc \u7684\uff0c\u5373\u5bf9\u5e94\u5230 Lower Tir \u4e2d\u63d0\u5230\u7684 <code>te.create_prim_func</code>\uff0c \u4e5f\u5c31\u662f\u5b98\u65b9\u7ed9\u51fa\u7684 \u7f16\u8bd1\u6d41\u7a0b\u4e2d\u7684\u7ea2\u6846\u4e2d\u7684\u90e8\u5206\uff1a</p> <p>\u6d4b\u8bd5\u4ee3\u7801\u4e0e\u7b2c\u4e00\u8282\u4e2d\u4ee3\u7801\u76f8\u540c\uff0c\u53ea\u4e0d\u8fc7\u6b64\u65f6\u6211\u4eec\u5173\u6ce8\u66f4\u4e0a\u5c42\u7684\u90e8\u5206\uff1a</p> <pre><code>import tvm\nfrom tvm import te\nSIZE = 1024\n\n# 1. \u4f7f\u7528 TE \u58f0\u660e\u8ba1\u7b97\n# mm\nA = te.placeholder((SIZE, SIZE), name='A')  # te.tensor.Tensor\nB = te.placeholder((SIZE, SIZE), name='B')  # te.tensor.Tensor\nk = te.reduce_axis((0, SIZE), 'k')          # tir.expr.IterVar\nC = te.compute((SIZE, SIZE), lambda x, y: te.sum(A[x, k] * B[k, y], axis=k), name='MM') # te.tensor.Tensor\n\n# 2. \u4ece TE \u521b\u5efa PrimFunc \nte_mm: tvm.tir.PrimFunc = te.create_prim_func([A, B, C]).with_attr({\"global_symbol\": \"mmult\"})\n\n# 3. \u5c06\u521b\u5efa\u51fa\u6765\u7684 PrimFunc \u6dfb\u52a0\u5230\u4e00\u4e2a IRModule \u4e2d\nir_m: tvm.IRModule = tvm.IRModule({'mm': te_mm})\n\n# \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u4f7f\u7528 \u5148\u6784\u5efa Schedule\uff0c \u518d\u8c03\u7528 `tvm.lower` \u7684\u65b9\u6cd5 \u5f97\u5230\u4e00\u4e2a IRModule\nte_sch: te.Schedule = te.create_schedule(C.op) # C.op: te.tensor.ComputeOp\nir_m: tvm.IRModule = tvm.lower(te_sch, [A, B, C], simple_mode=True,name='mmult')\n\nprint(ir_m.get_global_vars())\n</code></pre> <p>\u5728\u5173\u6ce8 lowering \u4e4b\u524d\u9996\u5148\u770b\u4e00\u4e0b\u4e00\u4e2a TE \u7684\u6784\u6210</p> <ol> <li> <p>\u9996\u5148\u662f <code>te.placeholder</code> \u5c06\u8fd4\u56de\u4e00\u4e2a <code>te.tensor.Tensor</code>\u3002 \u5176\u6570\u636e\u7ed3\u6784\u5b9a\u4e49\u4f4d\u4e8e <code>include/tvm/te/operation.h</code>\u4e2d\uff0c \u5177\u4f53\u5982\u4e0b\uff1a</p> <pre><code>class PlaceholderOpNode : public OperationNode {\npublic:\nArray&lt;PrimExpr&gt; shape;\nDataType dtype;\n\nint num_outputs() const final{return 1;};\nArray&lt;PrimExpr&gt; output_shape(size_t i) const final{return shape;};\nArray&lt;Tensor&gt; InputTensors() const final{return {};};\n\nstatic constexpr const char* _type_key = \"PlaceholderOp\";\nTVM_DECLARE_BASE_OBJECT_INFO(PlaceholderOpNode, OperationNode);\n};\n</code></pre> <p>placeholder \u901a\u5e38\u7528\u4e8e\u8ba1\u7b97\u56fe\u7684 Input \u8282\u70b9\u4f7f\u7528\uff0c\u6ca1\u6709\u524d\u5e8f\u8282\u70b9\uff0c\u53ef\u80fd\u4e5f\u662fte\u4e2d\u6700\u5e38\u7528\u7684Op\u3002 \u9664\u4e86<code>PlaceholderOp</code> \u4e4b\u5916\uff0c TE \u4e2d\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684 Op \u5b9a\u4e49\uff0c\u4f8b\u5982\u540e\u9762\u4f1a\u63d0\u5230\u7684 <code>ComputeOp</code>\uff0c \u4ee5\u53ca <code>ExternOp</code> \u7b49\uff0c \u8fd9\u4e9b Op \u662f TE AST \u7684\u7ec4\u6210\u90e8\u5206\u3002</p> </li> <li> <p>\u63a5\u4e0b\u6765\u662f <code>te.compute</code> \uff0c compute \u4ece\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u524d\u5e8f\u8282\u70b9\u63a5\u6536\u6570\u636e\uff0c\u5e76\u6309\u521d\u59cb\u5316\u7684\u65f6\u5019\u4f20\u5165\u7684 lambda \u8868\u8fbe\u5f0f\u8ba1\u7b97 Tensor \u5185\u7684\u6570\u636e\u3002\u5176API \u7b2c\u4e00\u4e2a\u4f20\u5165\u53c2\u6570\u662f Tensor \u7684 shape\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a lambda \u8868\u8fbe\u5f0f\uff0c\u8868\u660e Tensor \u7684\u6570\u636e\u662f\u5982\u4f55\u8ba1\u7b97\u6765\u7684\uff0c\u8fd4\u56de\u4e00\u4e2a<code>te.tensor.Tensor</code> \u3002 \u5176 C++ \u90e8\u5206\u6570\u636e\u7ed3\u6784\u5b9a\u4e49\u5177\u4f53\u5982\u4e0b\uff1a</p> <pre><code>class TVM_DLL ComputeOpNode : public BaseComputeOpNode {\npublic:\nArray&lt;PrimExpr&gt; body; //compute expression\n// override functions\nint num_outputs() const final;\nArray&lt;Tensor&gt; InputTensors() const final;\n\nstatic constexpr const char* _type_key = \"ComputeOp\";\nTVM_DECLARE_FINAL_OBJECT_INFO(ComputeOpNode, BaseComputeOpNode);\n};\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u5176\u5173\u952e\u6210\u5458\u53ea\u6709\u4e00\u4e2a body\uff0c\u662f\u4e00\u4e2a PrimExpr \u6570\u7ec4\uff0c\u56e0\u6b64\u63a5\u4e0b\u6765\u770b python \u7aef\u662f\u600e\u6837\u628a\u4e00\u4e2a lambda \u8868\u8fbe\u5f0f\u8868\u8fbe\u7684\u8ba1\u7b97\u8f6c\u6362\u6210\u4e86 PrimExpr\uff1a</p> <pre><code>def compute(shape, fcompute, name=\"compute\", tag=\"\", attrs=None, varargs_names=None):\n  out_ndim = len(shape)\n\n  argspec = inspect.getfullargspec(fcompute)\n  arg_names = argspec.args\n\n  # 1. \u5c06\u4f20\u5165\u7684 shape \u8f6c\u6210 tir.IterVar \u5217\u8868\n  dim_var = [tvm.tir.IterVar((0, s), x, 0) for x, s in zip(arg_names, shape[:out_ndim])]\n\n  # 2. \u6784\u9020\u8ba1\u7b97\u7684 AST\n  body = fcompute(*[v.var for v in dim_var])\n\n  # 3. \u8c03\u7528 C++ API \u83b7\u53d6 compute_op_node\n  body = convert(body) # \u5c06List[PrimExpr] \u8f6c\u6210 Array&lt;PrimExpr&gt;\n  op_node = _ffi_api.ComputeOp(name, tag, attrs, dim_var, body)\n\n  return op_node.output\n</code></pre> <p>\u8fd9\u91cc\u7684\u5173\u952e\u70b9\u5728\u4e8e <code>IterVar</code> \u7ee7\u627f\u4e86 <code>ExprOp</code>\uff08\u4f4d\u4e8e <code>python/tvm/tir/expr.py</code>\uff09\uff0c \u800c <code>ExprOp</code> \u91cd\u8f7d\u4e86\u56db\u5219\u8fd0\u7b97\uff0c\u79fb\u4f4d\u8fd0\u7b97\uff0c\u6bd4\u8f83\u8fd0\u7b97\u7b49\u64cd\u4f5c\u7b26\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u88ab lambda \u8868\u8fbe\u5f0f\u64cd\u4f5c\uff0c\u8c03\u7528\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26\u8fd4\u56de\u8868\u793a\u8fd0\u7b97\u4e4b\u540e\u7684\u8868\u8fbe\u5f0f\uff0c\u4f8b\u5982\uff1a</p> <pre><code>Z = te.compute((n,), lambda i: X[i]*Y[i])\n</code></pre> <p>\u9996\u5148\u5bf9\u4e8e <code>X[i]</code>\u548c<code>Y[i]</code> \u4f1a\u5206\u522b\u6784\u9020\u4e00\u4e2a <code>tir.expr.ProducerLoad</code> \u8868\u8fbe\u5f0f\uff0c\u63a5\u7740\u8fd9\u4e24\u4e2a\u8868\u8fbe\u5f0f\u7684\u4e58\u6cd5\u4f1a\u8c03\u7528\u5230 <code>ExprOp</code> \u91cd\u8f7d\u7684\u4e58\u6cd5\u8fd0\u7b97\u7b26\uff1a</p> <pre><code>def multiply(lhs, rhs, span=None):\n  return _ffi_api._OpMul(lhs, rhs, span)\n</code></pre> <p>\u8fd4\u56de\u4e00\u4e2a <code>tir.Mul</code> Expr\uff1b\u5176\u5b83\u7684\u8fd0\u7b97\u7c7b\u4f3c\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f TE \u4e2d\u4e5f\u63d0\u4f9b\u4e86\u63a7\u5236\u7c7b PrimExpr \u7684\u5c01\u88c5\uff0c\u4f8b\u5982 <code>te.if_then_else</code>\uff1b\u4ee5\u53ca <code>te.extern_primfunc</code> \u7528\u5176\u5b83PrimFunc \u6765\u521b\u5efa PrimExpr</p> </li> <li> <p>\u5728\u6784\u9020\u8868\u793a\u8ba1\u7b97\u7684 AST \u4e4b\u540e\uff0c\u6211\u4eec\u628a\u8fd9\u4e2a\u4ecelambda\u6784\u9020\u51fa\u6765\u7684 PrimExpr \u6570\u7ec4\u4f20\u5165\u4e86<code>_ffi_api.ComputeOp</code>\uff0c \u8fd4\u56de\u4e00\u4e2a ComputeOp \u7c7b\u578b\uff0c <code>ComputeOp</code> \u662f <code>te::Operation</code> \u7684\u4e00\u4e2a\u5b50\u7c7b\uff0c\u56e0\u6b64\u53ef\u4ee5\u4ece\u5176<code>output</code>\u65b9\u6cd5\u62ff\u5230\u8ba1\u7b97\u7ed3\u679c <code>Tensor</code> \u4f5c\u4e3a <code>te.compute</code> \u7684\u8fd4\u56de\u7ed3\u679c</p> </li> </ol> <p>\ud83d\udca1\u5728\u8fd9\u91cc\u603b\u7ed3\u4e00\u4e0b TE \u7684\u6784\u6210\u5173\u952e\u5143\u7d20\uff1a \u5373 <code>Tensor</code> \u548c <code>Operation</code> \u4e24\u4e2a\u7c7b\u578b\u3002\u524d\u8005\u8868\u5f81\u4e00\u4e2a\u5f20\u91cf\u7684\u5f62\u72b6\u3001\u5143\u7d20\u7c7b\u578b\u3001source operation\u7b49\uff1b\u540e\u8005\u8868\u793a\u4ea7\u751f Tensor \u7684\u4e00\u79cd\u64cd\u4f5c\uff0c\u5305\u62ec\u8868\u793a\u8f93\u5165\u7684\u64cd\u4f5c PlaceholderOp\uff0c \u8868\u793a\u8ba1\u7b97\u903b\u8f91\u7684\u64cd\u4f5c ComputeOp \u7b49\u3002</p> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u5f00\u59cb\u5173\u6ce8 <code>te.create_prim_func</code> \u662f\u5982\u4f55 \u5c06 TE lower \u5230 PrimFunc \u7684\uff0c\u5bf9\u5e94\u5230<code>src/te/operation/create_prim_func.cc</code> \uff1a</p> <pre><code>PrimFunc CreatePrimFuncWithConstants(const Array&lt;te::Tensor&gt;&amp; arg_list,\nconst Array&lt;runtime::NDArray&gt;&amp; constants,\nconst Optional&lt;Array&lt;tir::Var&gt;&gt;&amp; tir_var_list,\nstd::optional&lt;DataType&gt; index_dtype_override) {\n// Infomations used in CreatePrimFunc and its sub-functions.\nCreateFuncInfo info(arg_list);\n// Root body stmts.\nArray&lt;Stmt&gt; root_stmts;\n// Analyzer\narith::Analyzer analyzer;\n\n// Step 1. \u540e\u7eed\u904d\u5386\u8ba1\u7b97\u56fe\uff1a placeholder\u88ab\u653e\u5230\u524d\u9762\uff0c\u6700\u7ec8computeOp\u5728\u6700\u540e\nArray&lt;te::Operation&gt; order = CollectOrderedOps(arg_list);\n\n// Step 2. \u8fd9\u6bb5\u903b\u8f91\u662f\u5904\u7406 TE \u4e2d\u540e\u6765\u5f15\u5165\u7684 ExternOp\uff0c\u5728\u672c\u4f8b\u4e2d\u65e0\u9700\u8003\u8651\nInitializeBufferBinds(order, &amp;info);\n\n// Step 3. \u5982\u679c\u662f placeholder\uff0c\u521b\u5efa\u5bf9\u5e94\u7684 tir.Buffer\uff1b\u5982\u679c\u662fcompute\uff0c\u521b\u5efa\u5bf9\u5e94\u7684 tir.Stmt\uff1b\u5982\u679c\u662f extern\uff0c\u5219\u521b\u5efa\u4e00\u4e2a tir.Stmt \u8282\u70b9\nfor (const te::Operation&amp; op : order) {\nRewriteStageToBlock(op, &amp;info, &amp;root_stmts, &amp;analyzer);\n}\n\n// \u521b\u5efa\u5e76\u8fd4\u56de PrimFunc\nauto func = GenerateAndCompletePrimFunc(arg_list, root_stmts, &amp;info, tir_var_list);\n\nreturn func;\n}\n</code></pre> <p>\u56de\u987e\u4e0b PrimFunc \u7684\u7ed3\u6784\uff1a</p> <pre><code>class PrimFuncNode : public BaseFuncNode {\npublic:\nArray&lt;tir::Var&gt; params;\ntir::Stmt body;\nType ret_type;\nMap&lt;tir::Var, Buffer&gt; buffer_map;\n\nstatic constexpr const char* _type_key = \"tir.PrimFunc\";\nTVM_DECLARE_FINAL_OBJECT_INFO(PrimFuncNode, BaseFuncNode);\n};\n</code></pre> <p><code>GenerateAndCompletePrimFunc</code> \u4f1a\u5c06 <code>arg_list</code>(<code>Array&lt;te::Tensor&gt;</code>) \u8f6c\u6210\u4e00\u4e2a <code>Array&lt;tir::Var&gt;</code> \u4f5c\u4e3a\u51fd\u6570\u7684 params\uff1b \u800c\u51fd\u6570 body \u548c <code>buffer_map</code> \u5df2\u4ece\u5efa\u7acb\u7684\u8ba1\u7b97\u56fe\u4e2d\u5f97\u5230\uff1b\u56e0\u6b64\u5230\u8fd9\u91cc\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u4ece TE \u5230 <code>PrimFunc</code> \u7684\u8f6c\u6362\u3002</p> <p>\ud83d\udca1\u603b\u7ed3\u6574\u4e2a\u8fc7\u7a0b\uff0c\u6700\u6838\u5fc3\u7684\u90e8\u5206\u5728\u4e8e\u540e\u7eed\u904d\u5386 TE \u8868\u793a\u7684\u8ba1\u7b97\u56fe\uff08Operation\u4f5c\u4e3a\u8282\u70b9\uff0c\u901a\u8fc7 <code>InputTensors</code> \u65b9\u6cd5\u62ff\u5230\u6240\u6709\u5165\u8fb9\uff0c\u505a DFS\uff09\uff0c\u8f6c\u6362\u6210\u5bf9\u5e94\u7684 <code>tir.Buffer</code> \u548c <code>tir.Stmt</code> \u5373 tir \u4e2d\u7684 AST</p>"},{"location":"mlc/tvm-lowering.html#3-lower-relay","title":"3. Lower Relay","text":"<p>\u8fd9\u4e00\u8282\u5173\u6ce8\u4e00\u4e2a\u66f4\u9ad8\u5c42\u6b21\u7684\u62bd\u8c61\uff0c TVM \u4e2d\u56fe\u7ea7\u522b IR Relay \u7684 lowering</p> <p>\u4ece\u8fd9\u5f20\u56fe\u53ef\u4ee5\u770b\u5230\uff0c Relay \u8981\u5230 TIR \u67092\u6761\u8def\u5f84\uff0c\u7b2c\u4e00\u6761\u5c31\u662f\u76f4\u63a5\u5230 TIR\uff0c \u6bd4\u5982 PrimExpr \u6d3e\u751f\u7684\u8282\u70b9 IntImmNode \u53ef\u4ee5\u76f4\u63a5\u6620\u5c04\u5230 TIR \uff0c\u53e6\u5916\u4e00\u6761\u5c31\u662f Relay \u91cc\u9762\u7c7b\u4f3c Conv \u7684 Op \u7684\u8ba1\u7b97\u903b\u8f91\u662f\u7528 TOPI \u6765\u8868\u8fbe\u7684\uff0c TOPI \u662f TVM \u4e2d\u7528 TE \u6765\u8868\u793a\u5e38\u7528\u7b97\u5b50\u7684\u9884\u5b9a\u4e49\u5e93\u3002</p>"},{"location":"mlc/tvm-lowering.html#31-topi","title":"3.1. TOPI","text":"<p>\u8003\u8651\u8fd9\u4e2a\u4f8b\u5b50\uff1a</p> <pre><code>n = te.var(\"i\", dtype=\"int32\")\nm = te.var(\"j\", dtype=\"int32\")\nA = te.placeholder((n, m), name=\"A\")\nk = te.reduce_axis((0, m), \"k\")\nB = te.compute((n,), lambda i: te.sum(A[i, k], axis=k), name=\"B\")\n\n# \u4f7f\u7528 TOPI: \u8fd9\u4e00\u53e5\u4e0e\u4e0a\u9762\u4e24\u53e5\u7b49\u4ef7\nC = topi.sum(A, axis=1) \n\n# \u53ef\u4ee5\u5229\u7528\u4e0a\u4e00\u8282\u7684\u4ee3\u7801\uff0c \u5c06 TE lower \u5230 tir \u67e5\u770b\u8868\u793a\uff1a\nprim_func1 = te.create_prim_func([A,B])\nprim_func2 = te.create_prim_func([A,C])\nprint(f\"\\033[31m{'='*20}prim_func1{'='*20}\\033[0m\\n{prim_func1}\")\nprint(f\"\\033[31m{'='*20}prim_func2{'='*20}\\033[0m\\n{prim_func2}\")\n\n# Build \u4e4b\u540e\u8fd0\u884c\u7ed3\u679c\u5f53\u7136\u4e5f\u662f\u76f8\u540c\u7684\uff1a\nprim_func1 = te.create_prim_func([A,B])\nprim_func2 = te.create_prim_func([A,C])\n\nlib1, lib2 = tvm.build(prim_func1), tvm.build(prim_func2)\n\na_np = np.random.rand(128, 1024).astype(\"float32\")\nexpected_res = np.sum(a_np, axis=1)\na_nd1, a_nd2 = tvm.nd.array(a_np), tvm.nd.array(a_np)\ntest_res1 = tvm.nd.empty((128,), dtype=\"float32\")\ntest_res2 = tvm.nd.empty((128,), dtype=\"float32\")\n\nlib1(a_nd1, test_res1)\nlib2(a_nd2, test_res2)\nnp.testing.assert_allclose(expected_res, test_res1.numpy(), rtol=1e-5)\nnp.testing.assert_allclose(expected_res, test_res2.numpy(), rtol=1e-5)\nprint(\"\ud83c\udf89\\033[32mTest Pass...\\033[0m\")\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u5bf9\u4e8e\u6c42\u548c\u8fd9\u6837\u5e38\u89c1\u7684\u7b80\u5355\u64cd\u4f5c\uff0c\u5982\u679c\u53ea\u4f7f\u7528 te \u7684\u8bdd\uff0c\u4e5f\u9700\u8981\u5148\u5b9a\u4e49\u4e00\u4e2a reduce_axis, \u518d\u7528 lambda \u98ce\u683c\u53bb\u58f0\u660e\uff0c\u6bd4\u8f83\u7e41\u7410\uff0c\u66f4\u4e0d\u5fc5\u8bf4\u5728\u795e\u7ecf\u7f51\u7edc\u4e2d\u5927\u91cf\u4f7f\u7528\u7684\u5176\u5b83\u66f4\u590d\u6742\u4e00\u70b9\u7684\u7b97\u5b50\uff0c\u5982\u679c\u7528 te \u53bb\u5199\u7684\u8bdd\uff0c\u4f1a\u6bd4\u8f83\u9ebb\u70e6\u3002 \u56e0\u6b64 TVM \u63d0\u4f9b\u4e86\u4e00\u4e9b\u4f7f\u7528 TE \u5b9a\u4e49\u7684\u73b0\u6210\u7684\u7b97\u5b50\uff0c\u628a\u4ed6\u4eec\u653e\u5230\u4e00\u8d77\uff08\u4ee5\u53ca\u4e00\u4e9b schedule \u64cd\u4f5c\uff09\uff0c\u79f0\u4f5c TOPI(Tensor operator inventory)</p> <p>TOPI \u4e2d\u5305\u542b\u4e86\u5982 \u5377\u79ef\uff0c softmax\uff0c \u77e9\u9635\u4e58 \u7b49\u5e38\u89c1\u7684\u7b97\u5b50\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u66f4\u597d\u7684\u8868\u8fbe DL \u4e2d\u5e38\u89c1\u7684\u8ba1\u7b97\u8fc7\u7a0b\u3002</p> <p>\u5728\u770b\u5177\u4f53\u5b9e\u73b0\u524d\u53ef\u4ee5\u9996\u5148\u89c2\u5bdf\u4e00\u4e0b TOPI \u7684\u76ee\u5f55\u7ed3\u6784\uff0c\u5305\u542b\u4e86 <code>nn.cc</code>\uff0c<code>elemwise.cc</code>\uff0c<code>schedule.cc</code>\u7b49\uff0c\u5206\u522b\u5bf9\u5e94\u4e86\u673a\u5668\u5b66\u4e60\u5e38\u89c1\u7b97\u5b50\uff0celement wise \u8fd0\u7b97\uff08\u5982\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 <code>topi.sum</code>\uff09\uff0c \u7b97\u5b50\u8c03\u5ea6\uff1b\u5728\u8fd9\u4e9b\u6587\u4ef6\u4e2d\uff0c\u4f7f\u7528 <code>TVM_REGISTER_GLOBAL</code> \u6ce8\u518c\u4e86 TOPI \u4e2d\u7684\u5177\u4f53\u5b9e\u73b0\u3002</p> <p>\ud83d\udca1\u8fd9\u91cc\u6211\u4eec\u4ee5 <code>topi.matmul</code> \u4e3a\u4f8b\u770b\u4e00\u4e0b\u5b9e\u73b0\u3002</p> <p><code>topi.matmul</code> \u5bf9\u5e94 C++ \u6ce8\u518c\u5728<code>src/topi/nn.cc</code> \u4e2d\uff0c\u5b9e\u73b0\u5728<code>include/tvm/topi/nn/dense.h</code>\u4e2d\uff0c\u7b80\u5316\u540e\u5982\u4e0b\uff1a</p> <pre><code>inline tvm::te::Tensor matmul(const tvm::te::Tensor&amp; A, const tvm::te::Tensor&amp; B,bool trans_a = false, bool trans_b = false,std::string name = \"T_matmul\", std::string tag = kMatMul) {\ntvm::Array&lt;tvm::PrimExpr&gt; output_shape{A-&gt;shape[trans_a ? 1 : 0], B-&gt;shape[trans_b ? 0 : 1]};\nauto k = tvm::te::reduce_axis(tvm::Range{0, A-&gt;shape[trans_a ? 0 : 1]}, \"k\");\nauto l = [&amp;](tvm::tir::Var i, tvm::tir::Var j) {\nreturn tvm::sum((trans_a ? A[k][i] : A[i][k]) * (trans_b ? B[j][k] : B[k][j]), {k});\n};\nreturn tvm::te::compute(output_shape, l, name, tag);\n}\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u5176\u5b9e <code>dense</code> \u8ddf\u6211\u4eec\u624b\u5199\u7684\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\uff0c\u4f46\u662f\u5bf9\u4e8e logsoftmax \u4e4b\u7c7b\u6709\u5b9e\u73b0\u6280\u5de7\u7684\u7b97\u5b50\uff0cTOPI \u6709\u5f88\u597d\u7684\u5b9e\u73b0\u5e76\u4e14\u6709\u76f8\u5e94\u7684\u8c03\u5ea6\u53ef\u4ee5\u4f7f\u7528\u3002</p> <p>TOPI \u4e2d\u6709\u4e9b\u7b97\u5b50\u5728C++ \u548c python \u7aef\u5206\u522b\u5b9e\u73b0\u4e86\u4e00\u6b21\uff0c\u8fd9\u6837\u505a\u7684\u539f\u56e0\u89c1\uff1a https://discuss.tvm.apache.org/t/why-topi-is-implemented-in-both-c-and-python/50/7</p> <p>\u7b80\u5355\u6765\u8bf4\uff0c\u5f53\u4e00\u4e2a\u7b97\u5b50\u5730\u8c03\u5ea6\u65b9\u5f0f\u7a33\u5b9a\u4e4b\u540e\uff0c\u4f1a\u88ab\u653e\u5728C++\u90e8\u5206\uff0c \u6b63\u5728dev\u5730\u653e\u5728python\u5b9e\u73b0\uff1b\u800c\u5bf9\u4e8e\u4e00\u4e9b\u7b80\u5355\u7684\u7b97\u5b50\uff0c\u5c31\u4fdd\u7559\u4e86\u5728 C++ \u548c py \u4e24\u90e8\u5206\u7684\u5b9e\u73b0</p>"},{"location":"mlc/tvm-lowering.html#32-relay-graphexecutor","title":"3.2. Relay-GraphExecutor","text":"<p>\u672c\u8282\u4f7f\u7528\u5982\u4e0b\u4f8b\u5b50\uff1a</p> <pre><code>import numpy as np\nimport tvm\nfrom tvm import relay\n\n# 1. \u5b9a\u4e49 Relay Var\ndata = relay.var(\"data\", shape=(1,784),dtype=\"float32\")\nweight1 = relay.var(\"weight1\",shape=(128,784),dtype=\"float32\")\nbias1 = relay.var(\"bias1\",shape=(128,),dtype=\"float32\")\nweight2 = relay.var(\"weight2\",shape=(10,128),dtype=\"float32\")\nbias2 = relay.var(\"bias2\",shape=(10,),dtype=\"float32\")\n\n# 2. \u4f7f\u7528 Relay Op \u5b9a\u4e49\u7f51\u7edc\u7ed3\u6784\ndense1 = relay.nn.dense(data,weight1)\nbias_add1 = relay.nn.bias_add(dense1, bias1)\nrelu1 = relay.nn.relu(bias_add1)\ndense2 = relay.nn.dense(relu1,weight2)\nbias_add2 = relay.nn.bias_add(dense2, bias2)\nrelu2 = relay.nn.relu(bias_add2)\n\n# 3. \u6784\u5efa\u7f51\u7edc\nfunc = relay.Function([data,weight1,bias1,weight2,bias2],relu2)\nprint(f\"\\033[31m{'='*20}relay func{'='*20}\\033[0m\\n{func}\")\n\n# 4. \u6784\u5efa IRModule\nir_mod = tvm.IRModule.from_expr(func)\n\n# 5. \u8c03\u7528 relay.build \u8fdb\u884c\u6784\u5efa\n# relay.build \u76ee\u524d\u6682\u65f6\u652f\u6301\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5165 `relay.Function`\uff0c \u4f46\u662f\u4e4b\u540e\u5c06\u53ea\u652f\u6301 IRModule\nwith tvm.transform.PassContext(opt_level=2):\n  rt_lib = relay.build(ir_mod=ir_mod,target=\"llvm\")\n\n# 6. \u4f7f\u7528 graph_executor \u52a0\u8f7d build \u597d\u7684\u8ba1\u7b97\u56fe\u5e76\u6267\u884c\ndev = tvm.cpu()\ndtype = \"float32\"\ngraph_module = graph_executor.GraphModule(rt_lib[\"default\"](dev))\n# Set inputs: \u8fd9\u91cc\u53ea\u8bbe\u7f6e\u4e00\u90e8\u5206\u53c2\u6570\uff0c\u56e0\u4e3aparams \u7684\u5185\u5b58\u5df2\u7ecf\u5728 relay.build \u9636\u6bb5 \u5206\u914d\u597d\u5185\u5b58\u5305\u542b\u5728 graphmodule \u4e2d\uff0c \u56e0\u6b64\u8fd9\u91cc\u7684\u4ee3\u7801\u4e5f\u80fd\u8dd1\u901a\n\n# Execute &amp;&amp; Get outputs\ngraph_module.run()\ngraph_exec_output = graph_module.get_output(0)\nprint(graph_exec_output)\n</code></pre> <p>\u8fd9\u91cc\u4ee5 <code>dense</code> \u7b97\u5b50\u4e3a\u4f8b\uff0c \u9996\u5148\u5173\u6ce8 <code>dense1 = relay.nn.dense(data,weight1)</code> \uff1a</p> <pre><code>def dense(data, weight, units=None, out_dtype=\"\"):\n  return _make.dense(data, weight, units, out_dtype)\n</code></pre> <p>\u5728 C++ \u7aef\u4f7f\u7528 RELAY_REGISTER_OP \u673a\u5236\u7edf\u4e00\u7ba1\u7406 Relay Op\uff0c <code>dense</code>\u7b97\u5b50\u7684\u6ce8\u518c\u4f4d\u4e8e <code>src/relay/op/nn/nn.cc</code> \u4e2d\uff1a</p> <pre><code>Expr MakeDense(Expr data, Expr weight, IndexExpr units, DataType out_dtype) {\nauto attrs = make_object&lt;DenseAttrs&gt;();\nattrs-&gt;units = units;\nattrs-&gt;out_dtype = out_dtype;\nstatic const Op&amp; op = Op::Get(\"nn.dense\");\nreturn Call(op, {data, weight}, Attrs(attrs), {});\n}\n\nTVM_REGISTER_GLOBAL(\"relay.op.nn._make.dense\").set_body_typed(MakeDense);\n\nRELAY_REGISTER_OP(\"nn.dense\")\n.describe(/*\u7701\u7565*/)\n.set_attrs_type&lt;DenseAttrs&gt;()\n.set_num_inputs(2)\n.add_argument(\"data\", \"nD Tensor\", \"Input data.\")\n.add_argument(\"weight\", \"2D Tensor\", \"Weight matrix.\")\n.set_support_level(1)\n.set_attr&lt;FInferCorrectLayout&gt;(\"FInferCorrectLayout\", DenseInferCorrectLayout)\n.add_type_rel(\"Dense\", MatmulRel&lt;DenseAttrs&gt;)\n.set_attr&lt;TOpPattern&gt;(\"TOpPattern\", kOutEWiseFusable);\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u6700\u7ec8\u8fd4\u56de\u7684\u5c31\u662f\u4e00\u4e2a <code>CallNode</code>\uff0c Op \u662f <code>dense</code>\u3002</p> <p>\u540c\u65f6\u6ce8\u610f\u5230 <code>RELAY_REGISTER_OP(\"nn.dense\")</code> \u53ea\u662f\u8bbe\u7f6e\u4e86\u8f93\u5165\u8f93\u51fa type \u5173\u7cfb\uff0c\u4ee5\u53ca\u5176\u5b83\u7684\u4e00\u4e9b\u76f8\u5173\u5c5e\u6027\uff0c \u6ca1\u6709\u6307\u5b9a <code>dense</code> \u8fd9\u4e2a\u7b97\u5b50\u5177\u4f53\u7684\u8ba1\u7b97\u548c\u8c03\u5ea6\uff0c \u90a3\u4e48\u4e00\u4e2a Relay \u7b97\u5b50\u7684\u8ba1\u7b97\u548c\u8c03\u5ea6\u5728\u54ea\u91cc\u6307\u5b9a\u5462\uff1f</p> <p>\u7b54\u6848\u662f\u5728 python \u7aef\uff0c \u4ee5<code>dense</code>\u4e3a\u4f8b\uff0c \u5176\u8c03\u5ea6\u548c\u8ba1\u7b97\u7684\u6307\u5b9a\u4f4d\u4e8e <code>python/tvm/relay/op/nn/_nn.py</code> \u4e2d\uff0c \u8be5\u6587\u4ef6\u4f1a\u5728 <code>import relay</code> \u65f6\u88ab\u81ea\u52a8\u52a0\u8f7d\uff1a</p> <pre><code># dense\nreg.register_strategy(\"nn.dense\", strategy.dense_strategy)\n</code></pre> <p><code>strategy.dense_strategy</code> \u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>@override_native_generic_func(\"dense_strategy\")\ndef dense_strategy(attrs, inputs, out_type, target):\n\"\"\"dense generic strategy\"\"\"\n  logger.warning(\"dense is not optimized for this platform.\")\n  strategy = _op.OpStrategy()\n  strategy.add_implementation(\n    wrap_compute_dense(topi.nn.dense),\n    wrap_topi_schedule(topi.generic.schedule_dense),\n    name=\"dense.generic\",\n  )\n  return strategy\n</code></pre> <p>\u5176\u4e2d <code>topi.nn.dense</code> \u548c <code>topi.generic.schedule_dense</code> \u5c31\u662f \u4e0a\u4e00\u8282 TOPI \u4e2d\u9884\u5b9a\u4e49\u597d\u7684 TE \u8868\u793a\u7684\u7b97\u5b50\u5e93\u4e2d\u7684\u7b97\u5b50\u3002 \u800c <code>_op.OpStrategy</code> \u5bf9\u5e94 C++ \u4e2d\u7684\u6570\u636e\u7ed3\u6784\u4f4d\u4e8e <code>include/tvm/relay/op_strategy.h</code> \u4e2d\uff1a</p> <pre><code>class OpImplementationNode : public Object {\npublic:\nFTVMCompute fcompute;\nFTVMSchedule fschedule;\nString name;\nint plevel;\n\nstatic constexpr const char* _type_key = \"relay.OpImplementation\";\nTVM_DECLARE_FINAL_OBJECT_INFO(OpImplementationNode, Object);\n};\n</code></pre> <p>\u5176\u4e2d <code>FTVMCompute</code> \u662f <code>runtime::TypedPackedFunc&lt;Array&lt;te::Tensor&gt;(const Attrs&amp; attrs, const Array&lt;te::Tensor&gt;&amp; inputs, const Type&amp; out_type)&gt;;</code> \uff0c FTVMSchedule \u662f <code>runtime::TypedPackedFunc&lt;te::Schedule(const Attrs&amp; attrs, const Array&lt;te::Tensor&gt;&amp; outs, const Target&amp; target)&gt;;</code>\uff1b</p> <p>\ud83d\udca1\u8fd9\u6837\u5c31\u5c06 TOPI \u548c Relay Op \u5efa\u7acb\u4e86\u8054\u7cfb</p> <p>\u63a5\u4e0b\u6765\u5173\u6ce8 <code>relay.build</code></p> <p>\u5148\u6682\u65f6\u5ffd\u7565 <code>PassContext(opt_level=2)</code>\uff0c \u76f4\u63a5\u770b <code>relay.build</code>\uff1a</p> <pre><code>def build(ir_mod,target=None, target_host=None,\n          executor=Executor(\"graph\"), runtime=Runtime(\"cpp\"),\n          workspace_memory_pools=None, constant_memory_pools=None,\n          params=None, mod_name=\"default\",\n):\n  raw_targets = Target.canon_multi_target_and_host(Target.target_or_current(target), target_host)\n  target_host = raw_targets[0].host\n\n  # \u5982\u679c\u5f53\u524d dispatch context \u662f fallback context (the default root context),\n  # \u4ece TopHub \u4e2d load pre-tuned parameters\n  if isinstance(autotvm.DispatchContext.current, autotvm.FallbackContext):\n    tophub_context = autotvm.tophub.context(list(raw_targets))\n  else:\n    tophub_context = autotvm.utils.EmptyContext()\n\n  with tophub_context:\n    bld_mod = BuildModule()\n    graph_json, runtime_mod, params = bld_mod.build(\n      mod=ir_mod, target=raw_targets, params=params,\n      executor=executor, runtime=runtime,\n      workspace_memory_pools=workspace_memory_pools,\n      constant_memory_pools=constant_memory_pools,\n      mod_name=mod_name,\n    )\n    # build \u4e4b\u540e bld_mod \u4e2d\u5305\u542b IRModule\uff08\u5176\u4e2d\u4e3a PrimFunc\uff09\n    func_metadata = bld_mod.get_function_metadata()\n    devices = bld_mod.get_devices()\n    lowered_ir_mods = bld_mod.get_irmodule()\n    executor_codegen_metadata = bld_mod.get_executor_codegen_metadata()\n    # \u8fd9\u91cc\u53ea\u770b graph_executor \u53bb\u6389\u4e86aot \u76f8\u5173\n    if executor.name == \"graph\":\n      executor_factory = _executor_factory.GraphExecutorFactoryModule(\n        ir_mod, raw_targets, # \u539f\u59cb(Relay)IRModule; build target\n        executor, graph_json, runtime_mod,  # executor-config; graph\u4fe1\u606f; build\u540e\u7684 runtime module\n        mod_name, params, func_metadata,  # runtime.module name; \u6a21\u578b\u53c2\u6570; \u51fd\u6570\u4fe1\u606f\n      )\n    return executor_factory\n</code></pre> <p>\u51fd\u6570\u6700\u7ec8\u8fd4\u56de\u4e00\u4e2a <code>relay.backend.executor_factory.ExecutorFactoryModule</code> \uff0c \u662frelay\u7684 graph executor factory\uff08 <code>ExecutorFactoryModule</code> \u76ee\u524d\u6709 graph \u548c aot \u4e24\u79cd\uff0c \u5728\u672c\u4f8b\u5b50\u4e2d\u4e3a <code>graph_executor</code>\uff09</p> <p>\u6574\u4e2a\u6784\u5efa\u6d41\u7a0b\u5982\u4e0b\uff1a</p> <ol> <li> <p>TopHub \u5bfb\u627e\u5386\u53f2\u4f18\u5316\u4fe1\u606f:</p> <p>\u9996\u5148 Relay \u4f1a\u5bfb\u627e\u662f\u5426\u6709 AutoTVM \u9884\u5148 Fintune \u7684\u8bb0\u5f55\uff0c\u5982\u679c\u6ca1\u6709\u90a3\u4e48\u5c31\u4f7f\u7528autotvm.FallbackContext\u8fd9\u4e2a\u73af\u5883\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u5982\u679c\u6709\u90a3\u4e48\u63a5\u4e0b\u6765\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u5728 tophub_context \u7684 scope \u4e4b\u4e0b (with tophub_context:)\u3002\u503c\u5f97\u4e00\u63d0\u7684\u662f Relay \u8003\u8651\u4e86\u5f02\u6784\u60c5\u666f\u4e0b\u7684\u4ee3\u7801\u751f\u6210\uff0c\u7528\u6237\u53ef\u4ee5\u6307\u5b9a\u591a\u4e2a\u751f\u6210\u4ee3\u7801\u7684\u76ee\u6807 (target)\u3002</p> <p>TODO:</p> </li> <li> <p>\u5728 <code>tophub_context</code>\u4e2d\uff0c\u521b\u5efa\u4e86\u4e00\u4e2a <code>BuildModule</code> \uff0c\u8c03\u7528 <code>build</code> \u3002 <code>bld_mod.build</code> \u5728 python \u7aef\u7684\u8fd4\u56de\u503c\u6709\u4e09\u4e2a: <code>executor_config, mod, params</code>\uff1b \u5176\u4e2d <code>executor_config</code> \u662f\u4e00\u4e2a json-like form \u7684config\uff0c \u7528\u4e8e\u7ed9\u540e\u7eed\u751f\u6210\u7ed9 graph_executor \u63d0\u4f9b\u4fe1\u606f\uff1b <code>mod</code> \u662f\u5305\u542b\u5404\u79cd\u5fc5\u9700\u8fd0\u884c\u65f6\u5e93\u7684 <code>runtime.module</code>\uff1b <code>params</code> \u662f\u4f18\u5316\u540e\u7684\u8ba1\u7b97\u56fe\u7684\u53c2\u6570\u3002</p> </li> <li> <p><code>BuildModule()</code> \u5bf9\u5e94\u5728 C++ \u4e2d\u7684 <code>src/relay/backend/build_module.cc</code> \u4e2d:</p> <pre><code>class RelayBuildModule : public runtime::ModuleNode {\nprotected:\n// return The updated Relay IR module after optimization.\nIRModule Optimize(IRModule relay_module, const Array&lt;Target&gt;&amp; raw_targets);\n\n// Compile a Relay IR module to runtime module. \u7ed3\u679c\u4fdd\u5b58\u5728 `this-&gt;ret_`\nvoid BuildRelay(IRModule relay_module, const String&amp; mod_name);\n\nprotected:\nstd::unique_ptr&lt;ExecutorCodegen&gt; executor_codegen_;\nExecutor executor_;     // Executor to build for\nRuntime runtime_;       // Runtime to codegen for\nWorkspaceMemoryPools workspace_memory_pools_;\nConstantMemoryPools constant_memory_pools_;\nstd::unordered_map&lt;std::string, runtime::NDArray&gt; params_; // parameters\nBuildOutput ret_; // building output\nCompilationConfig config_;\n};\n</code></pre> <p><code>bld_mod.build</code> \u76f4\u63a5\u5bf9\u5e94\u4e0a\u8ff0 <code>Build</code> \u51fd\u6570\uff0c\u8be5\u51fd\u7b80\u5355\u5730\u628a\u51fd\u6570\u53c2\u6570\u5982 runtime\uff0c executor\uff0c config \u7b49\u8d4b\u503c\u7ed9\u5bf9\u5e94\u7684fileds\uff0c \u63a5\u7740\u8c03\u7528\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u7684 <code>BuildRelay</code> \u51fd\u6570\uff0c\u8fd9\u662f\u6574\u4e2a build \u4e2d\u7684\u5173\u952e\u90e8\u5206</p> </li> <li> <p><code>BuildRelay</code> \u51fd\u6570\u4e3b\u8981\u903b\u8f91\u5982\u4e0b\uff1a</p> <pre><code>void BuildRelay(IRModule relay_module, const String&amp; mod_name) {\n// 1. Relay IRModule -&gt; IRModule \u4f18\u5316 (TODO: \u5c55\u5f00)\nrelay_module = OptimizeImpl(std::move(relay_module));\n\nFunction func = Downcast&lt;Function&gt;(relay_module-&gt;Lookup(\"main\"));\nLOG(DEBUG)&lt;&lt;\"After `OptimizeImpl`: relay_module-&gt;Lookup('main')\" &lt;&lt; PrettyPrint(func); // my print\n\nIRModule func_module = WithAttrs(IRModule::FromExpr(func),{/*executor \u7b49 attrs...*/});\n\n// 2. \u4e3a\u4f18\u5316\u540e\u7684\u51fd\u6570\u6267\u884c codegen\n// 2.1. \u5982\u679c\u662f graph_executor \u521b\u5efa\u4e00\u4e2a `GraphCodegen` \u5bf9\u8c61\nexecutor_codegen_ = MakeExecutorCodegen(executor_-&gt;name);\nexecutor_codegen_-&gt;Init(nullptr, config_-&gt;primitive_targets);\n// \u8fd9\u91cc\u7684codegen \u5bf9\u5e94 GraphExecutorCodegen::Codegen\n//  a) \u8bbe\u7f6e memory_plan_\n//  b) LowerTE, lower \u4e4b\u540e\u7684 IR \u5728 tir level \nexecutor_codegen_-&gt;Codegen(func_module, func, mod_name);\n// \u4e3a ret_ \u8bbe\u7f6e graph_json\nexecutor_codegen_-&gt;UpdateOutput(&amp;ret_);\n// ret_ \u5305\u62ec: 1) graph_json \u5b57\u7b26\u4e32; 2) runtime.mod; 3)[string: NDArray] params \u5b57\u5178;\n// \u8fd9\u91cc\u8bbe\u7f6e executor_codegen_ \u5728 codegen \u9636\u6bb5\u6784\u9020\u7684 params \nret_.params = executor_codegen_-&gt;GetParams();\n\n// 2.2. \u62ff\u5230 lowerd_funcs \uff08\u6b64\u65f6Relay\u51fd\u6570\u5df2\u7ecf\u4e0b\u964d\u4e3a PrimFunc\uff09\nauto lowered_funcs = executor_codegen_-&gt;GetIRModule();\n\nconst Target&amp; host_target = config_-&gt;host_virtual_device-&gt;target;\nconst runtime::PackedFunc* pf = runtime::Registry::Get(\"codegen.LLVMModuleCreate\");\n// 2.3. \u5982\u679c\u7531\u4e8e\u4f18\u5316\u7b49\u539f\u56e0\uff0c lowered_funcs \u96c6\u5408\u4e3a\u7a7a\u65f6\uff0c\u8fd4\u56de\u7a7a module\nif (lowered_funcs.size() == 0) {/* \u7701\u7565...*/} // 3. \u5426\u5219\u6267\u884c TIRToRuntime\uff0c \u53ef\u4ee5\u53c2\u8003 tir \u4e0b\u964d\u4e00\u8282\u4e2d\u7684\u6b65\u9aa4\nelse {ret_.mod = tvm::TIRToRuntime(lowered_funcs, host_target);}\n\n// 4. \u63a5\u4e0b\u6765\u662f\u5bf9 external module \u7684\u5904\u7406\n...\n}\n</code></pre> <p><code>BuildRelay</code> \u5305\u542b\u4e86 Optimize \uff0c Codegen \u4e24\u4e2a\u8fc7\u7a0b\uff1a</p> <ol> <li> <p>\u5728 <code>Build</code> \u4e4b\u524d\uff1a Relay \u9636\u6bb5\u7684 IRModule\uff1a</p> <pre><code>def @main(%data: Tensor[(1, 784), float32], %weight1: Tensor[(128, 784), float32], %bias1: Tensor[(128), float32], %weight2: Tensor[(10, 128), float32], %bias2: Tensor[(10), float32]) {\n  %0 = nn.dense(%data, %weight1, units=None);\n  %1 = nn.bias_add(%0, %bias1);\n  %2 = nn.relu(%1);\n  %3 = nn.dense(%2, %weight2, units=None);\n  %4 = nn.bias_add(%3, %bias2);\n  nn.relu(%4)\n}\n</code></pre> </li> <li> <p>\u5728 <code>Optmize</code> \u4e4b\u540e\uff0c \u4e8e\u6253\u5370\u51fa\u8fd9\u65f6\u7684 IR \u53d1\u73b0\u662f\u4ee5 Tensor \u4e3a\u64cd\u4f5c\u5355\u4f4d\uff0c\u5373\u8f6c\u4e3a\u4e86 TE\u7684\u8868\u793a\uff0c\u5e76\u4e14\u5728TE\u5c42\u7ea7\u8fdb\u884c\u4e86\u7b97\u5b50\u878d\u5408\uff0c\u53ef\u4ee5\u770b\u5230\uff0c\u5728Relay\u4e2d\u7684 <code>nn.dense</code> Op, \u4ee5\u53ca <code>nn.bias_add</code> Op, <code>nn.relu</code> Op \u5728\u8fd9\u91cc\u7684 IR \u4e2d\u90fd\u88ab\u8f6c\u4e3aTE\u8868\u793a\uff0c\u5e76\u4e14\u4e09\u4e2a\u7b97\u5b50\u88ab\u5305\u88f9\u5230\u4e86\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u5728\u63a5\u4e0b\u6765\u7684 codegen \u4e2d\uff0c \u4e09\u4e2aTE\u51fd\u6570\u5c06\u4f1a\u88ab\u878d\u5408\u6210\u4e00\u4e2a\u8ba1\u7b97\u8fc7\u7a0b\uff1a</p> <pre><code>fn (\n%data: Tensor[(1, 784), float32], %weight1: Tensor[(128, 784), float32], %bias1: Tensor[(128), float32], %weight2: Tensor[(10, 128), float32], %bias2: Tensor[(10), float32], dst_layout=\"NC5n\", executor=meta[Executor][0], runtime=meta[Runtime][0], hash=\"e88b28184aebb4db\", src_layout=\"NC\", virtual_device=VirtualDevice(device_type=1, virtual_device_id=0, target=Target(id=1d4d3b79920, kind='llvm', keys={'cpu'}, host=Target(id=1d4d3b79a00, kind='llvm', keys={'cpu'})))\n) -&gt; Tensor[(1, 10), float32] {\n\n// \u6570\u636e layout \u8f6c\u6362\n%6 = fn (%p02: Tensor[(128, 784), float32],Primitive=1, hash=\"e9662aa5b8e67b96\", src_layout=\"NC\", dst_layout=\"NC8n\"\n) -&gt; Tensor[(16, 784, 8), float32] {\nlayout_transform(%p02, src_layout=\"NC\", dst_layout=\"NC8n\")\n}  %7 = %6(%weight1);\n\n// \u5bf9\u5e94 Relay function IR \u4e2d\u7684\n// %0 = nn.dense(%data, %weight1, units=None);\n// %1 = nn.bias_add(%0, %bias1);\n// %2 = nn.relu(%1);\n%8 = fn (%p01: Tensor[(1, 784), float32], %p11: Tensor[(16, 784, 8), float32], %p21: Tensor[(128), float32], Primitive=1, hash=\"f360b4c42be956c4\", weight_layout=\"NC8n\"\n) -&gt; Tensor[(1, 128), float32] {\n%3 = nn.contrib_dense_pack(%p01, %p11, units=None, out_dtype=\"float32\", weight_layout=\"NC8n\");\n%4 = expand_dims(%p21, axis=0);\n%5 = add(%3, %4);\nnn.relu(%5)\n} // \u6570\u636e Layout \u8f6c\u6362\n%9 = fn (%p03: Tensor[(10, 128), float32], Primitive=1, hash=\"86451ec737a6a453\", src_layout=\"NC\", dst_layout=\"NC5n\"\n) -&gt; Tensor[(2, 128, 5), float32] {\nlayout_transform(%p03, src_layout=\"NC\", dst_layout=\"NC5n\")\n} /* ty=fn (Tensor[(10, 128), float32]) -&gt; Tensor[(2, 128, 5), float32] */;\n%10 = %8(%data, %7, %bias1);\n%11 = %9(%weight2);\n\n// \u5bf9\u5e94 Relay function IR \u4e2d\u7684\n// %3 = nn.dense(%2, %weight2, units=None);\n// %4 = nn.bias_add(%3, %bias2);\n// nn.relu(%4)\n%12 = fn (%p0: Tensor[(1, 128), float32], %p1: Tensor[(2, 128, 5), float32], %p2: Tensor[(10), float32], Primitive=1, hash=\"32a532a5919d3a8b\", weight_layout=\"NC5n\"\n) -&gt; Tensor[(1, 10), float32] {\n%0 = nn.contrib_dense_pack(%p0, %p1, units=None, out_dtype=\"float32\", weight_layout=\"NC5n\");\n%1 = expand_dims(%p2, axis=0);\n%2 = add(%0, %1);\nnn.relu(%2)\n} %12(%10, %11, %bias2)\n} </code></pre> </li> <li> <p>\u63a5\u7740\u662f <code>CodeGen</code> (<code>GraphExecutorCodegen</code> \u7684\u65b9\u6cd5)\u4e2d\u5bf9 TE \u7684 lower\uff0c \u5bf9\u5e94\u5230 <code>tec::LowerTE</code> \u51fd\u6570\u7684\u8c03\u7528:</p> <pre><code>// In GraphExecutorCodegen:\n// relay::backend::LoweredOutput Codegen(tvm::IRModule mod, relay::Function func,tvm::runtime::String mod_name)\n\n...\n\nIRModule lowered_mod = tec::LowerTE(mod_name_, config_, [this](BaseFunc func) {\nif (func-&gt;GetAttr&lt;String&gt;(attr::kCompiler).defined()) {\nUpdateConstants(func, &amp;params_);\n}\ntec::UpdateFunctionMetadata(func, this-&gt;function_metadata_);\n})(mod);\nLOG(DEBUG) &lt;&lt; \"after complile TE:\" &lt;&lt; std::endl &lt;&lt; PrettyPrint(lowered_mod); // dmhj\n\n...\n</code></pre> <p>TE \u88ab lower \u4e4b\u540e\u7684 IR \u7531 tir Stmt \u7ec4\u6210\uff0c TE \u51fd\u6570\u88ab\u8f6c\u6362\u6210 PrimFunc(\u5143\u5f20\u91cf\u51fd\u6570)\uff0c \u5728 \u4e0b\u9762\u7684 IR \u4e2d \u53ef\u4ee5\u770b\u5230\u51fa\u73b0\u4e86 <code>Pointer</code>, <code>Buffer</code>, <code>AllocateNode</code> \u7b49 Stmt \u8282\u70b9\uff0c\u8fd9\u662f\u5728 TE \u548c Relay \u5c42\u7ea7\u4e0d\u4f1a\u51fa\u73b0\u7684\u62bd\u8c61</p> <pre><code>def @main(\n%data: Tensor[(1, 784), float32] , %weight1: Tensor[(128, 784), float32] , %bias1: Tensor[(128), float32] , %weight2: Tensor[(10, 128), float32] , %bias2: Tensor[(10), float32] , dst_layout=\"NC5n\", executor=meta[Executor][0], runtime=meta[Runtime][0], hash=\"e88b28184aebb4db\", src_layout=\"NC\", virtual_device=VirtualDevice(device_type=1, virtual_device_id=0, target=Target(id=1d233c937a0, kind='llvm', keys={'cpu'}, host=Target(id=1d233c94220, kind='llvm', keys={'cpu'})))\n) -&gt; Tensor[(1, 10), float32] {\n%0 = (%weight1,) ;\n%1 = call_lowered(@tvmgen_default_fused_layout_transform, %0, metadata={\"relay_attrs\"={__dict__={\"Primitive\"=1, \"hash\"=\"e9662aa5b8e67b96\", \"src_layout\"=\"NC\", \"dst_layout\"=\"NC8n\"}}, \"all_prim_fn_vars\"=['tvmgen_default_fused_layout_transform']}) ;\n%2 = (%data, %1, %bias1) ;\n%3 = (%weight2,) ;\n%4 = call_lowered(@tvmgen_default_fused_nn_contrib_dense_pack_expand_dims_add_nn_relu, %2, metadata={\"relay_attrs\"={__dict__={\"Primitive\"=1, \"hash\"=\"f360b4c42be956c4\", \"weight_layout\"=\"NC8n\"}}, \"all_prim_fn_vars\"=['tvmgen_default_fused_nn_contrib_dense_pack_expand_dims_add_nn_relu']}) ;\n%5 = call_lowered(@tvmgen_default_fused_layout_transform_1, %3, metadata={\"relay_attrs\"={__dict__={\"Primitive\"=1, \"hash\"=\"86451ec737a6a453\", \"src_layout\"=\"NC\", \"dst_layout\"=\"NC5n\"}}, \"all_prim_fn_vars\"=['tvmgen_default_fused_layout_transform_1']}) ;\n%6 = (%4, %5, %bias2) ;\ncall_lowered(@tvmgen_default_fused_nn_contrib_dense_pack_expand_dims_add_nn_relu_1, %6, metadata={\"relay_attrs\"={__dict__={\"Primitive\"=1, \"hash\"=\"32a532a5919d3a8b\", \"weight_layout\"=\"NC5n\"}}, \"all_prim_fn_vars\"=['tvmgen_default_fused_nn_contrib_dense_pack_expand_dims_add_nn_relu_1']}) }\n\n@tvmgen_default_fused_layout_transform = primfn(p0_1: handle, T_layout_trans_1: handle) -&gt; ()\nbuffers = {\np0: Buffer(p0_2: Pointer(float32), float32, [128, 784], []),\nT_layout_trans: Buffer(T_layout_trans_2: Pointer(float32), float32, [16, 784, 8], [])\n}\nbuffer_map = {p0_1: p0, T_layout_trans_1: T_layout_trans} {\nfor (ax0.ax1.fused: int32, 0, 12544) \"parallel\" {\nT_layout_trans_3: Buffer(T_layout_trans_2, float32, [100352], [])[ramp((ax0.ax1.fused*8), 1, 8)] = p0_3: Buffer(p0_2, float32, [100352], [])[\nramp(((floordiv(ax0.ax1.fused, 784)*6272) + floormod(ax0.ax1.fused, 784)), 784, 8)\n]\n}\n}\n\n@tvmgen_default_fused_layout_transform_1 = primfn(p0_5: handle, T_layout_trans_5: handle) -&gt; ()\nbuffers = {\np0_4: Buffer(p0_6: Pointer(float32), float32, [10, 128], []),\nT_layout_trans_4: Buffer(T_layout_trans_6: Pointer(float32), float32, [2, 128, 5], [])\n}\nbuffer_map = {p0_5: p0_4, T_layout_trans_5: T_layout_trans_4} {\nfor (ax0.ax1.fused_1: int32, 0, 256) \"parallel\" {\nT_layout_trans_7: Buffer(T_layout_trans_6, float32, [1280], [])[ramp((ax0.ax1.fused_1*5), 1, 5)] = p0_7: Buffer(p0_6, float32, [1280], [])[\nramp(((floordiv(ax0.ax1.fused_1, 128)*640) + floormod(ax0.ax1.fused_1, 128)), 128, 5)\n]\n}\n}\n\n@tvmgen_default_fused_nn_contrib_dense_pack_expand_dims_add_nn_relu = primfn(p0_9: handle, p1_1: handle, p2_1: handle, T_relu_1: handle) -&gt; ()\nattr = {\"from_legacy_te_schedule\": True, \"target\": Target(id=1d233c937a0, kind='llvm', keys={'cpu'}, host=Target(id=1d233c94220, kind='llvm', keys={'cpu'})), \"tir.noalias\": True, \"hash\": \"f360b4c42be956c4\", \"global_symbol\": \"tvmgen_default_fused_nn_contrib_dense_pack_expand_dims_add_nn_relu\"}\nbuffers = {\np0_8: Buffer(p0_10: Pointer(float32), float32, [1, 784], []),\np1: Buffer(p1_2: Pointer(float32), float32, [16, 784, 8], []),\np2: Buffer(p2_2: Pointer(float32), float32, [128], []),\nT_relu: Buffer(T_relu_2: Pointer(float32), float32, [1, 128], [])\n}\nbuffer_map = {p0_9: p0_8, p1_1: p1, p2_1: p2, T_relu_1: T_relu} {\nfor (ax1.outer.ax0.outer.fused: int32, 0, 4) \"parallel\" {\nallocate(compute: Pointer(global float32x8), float32x8, [4]), storage_scope = global;\nallocate(compute.global: Pointer(global float32x8), float32x8, [1]), storage_scope = global {\nfor (y.inner.outer.x.inner.outer.fused: int32, 0, 4) {\ncompute.global_1: Buffer(compute.global, float32x8, [1], [], align=32)[0] = broadcast(0f32, 8)\nfor (k.outer: int32, 0, 784) {\ncompute.global_1[0] = (compute.global_1[0] + (broadcast(p0_11: Buffer(p0_10, float32, [784], [])[k.outer], 8)*p1_3: Buffer(p1_2, float32, [100352], [])[ramp((((ax1.outer.ax0.outer.fused*25088) + (y.inner.outer.x.inner.outer.fused*6272)) + (k.outer*8)), 1, 8)]))\n}\ncompute_1: Buffer(compute, float32x8, [4], [])[y.inner.outer.x.inner.outer.fused] = compute.global_1[0]\n}\nfor (ax1.inner.outer: int32, 0, 4) {\nlet cse_var_1: int32 = ((ax1.outer.ax0.outer.fused*32) + (ax1.inner.outer*8))\nT_relu_3: Buffer(T_relu_2, float32, [128], [])[ramp(cse_var_1, 1, 8)] = max((compute_1[ax1.inner.outer] + p2_3: Buffer(p2_2, float32, [128], [])[ramp(cse_var_1, 1, 8)]), broadcast(0f32, 8))\n}\n}\n}\n}\n\n@tvmgen_default_fused_nn_contrib_dense_pack_expand_dims_add_nn_relu_1 = primfn(\np0_13: handle, p1_5: handle, p2_5: handle, T_relu_5: handle\n) -&gt; ()\nbuffers = {\np0_12: Buffer(p0_14: Pointer(float32), float32, [1, 128], []),\np1_4: Buffer(p1_6: Pointer(float32), float32, [2, 128, 5], []),\np2_4: Buffer(p2_6: Pointer(float32), float32, [10], []),\nT_relu_4: Buffer(T_relu_6: Pointer(float32), float32, [1, 10], [])\n}\nbuffer_map = {p0_13: p0_12, p1_5: p1_4, p2_5: p2_4, T_relu_5: T_relu_4} {\nfor (ax1.outer.ax0.outer.fused_1: int32, 0, 2) \"parallel\" {\nlet cse_var_1_1: int32 = (ax1.outer.ax0.outer.fused_1*5)\nallocate(compute.global_2: Pointer(global float32x5), float32x5, [1]), storage_scope = global {\ncompute.global_3: Buffer(compute.global_2, float32x5, [1], [], align=16)[0] = broadcast(0f32, 5)\nfor (k.outer_1: int32, 0, 128) {\ncompute.global_3[0] = (compute.global_3[0] + (broadcast(p0_15: Buffer(p0_14, float32, [128], [])[k.outer_1], 5)*p1_7: Buffer(p1_6, float32, [1280], [])[ramp(((ax1.outer.ax0.outer.fused_1*640) + (k.outer_1*5)), 1, 5)]))\n}\nT_relu_7: Buffer(T_relu_6, float32, [10], [])[ramp(cse_var_1_1, 1, 5)] = max((compute.global_4: Buffer(compute.global_2, float32x5, [1], [], align=16)[0] + p2_7: Buffer(p2_6, float32, [10], [])[ramp(cse_var_1_1, 1, 5)]), broadcast(0f32, 5))\n}\n}\n}\n</code></pre> <p>\u56fe\u4e2d \u7684 IR \u7701\u7565\u4e86 attributes \u4ee5\u53ca shape \u4fe1\u606f\u7b49</p> </li> <li> <p>\u63a5\u4e0b\u6765\u901a\u8fc7 Visitor \u7684\u65b9\u5f0fDFS\u904d\u5386\u521a\u624d\u5f97\u5230\u7684 IR \uff0c \u5c06 IR \u4e2d\u7684 CallNode, VarNode \u548c ConstantNode \u7b49\u6309\u7167\u76f8\u5e94\u7684\u89c4\u5219\u8f6c\u6362\u6210\u5bf9\u5e94\u7684 GraphNode; \u8fd9\u91cc\u503c\u5f97\u6ce8\u610f\u7684\u662f Relay GraphExecutor \u662f\u4e0d\u652f\u6301\u63a7\u5236\u6d41\u7684\uff0c\u56e0\u6b64\u5982\u679c Relay IR \u4e2d\u542b\u6709 If, Match \u7b49\uff0c \u5728\u8fd9\u91cc\u4f1a\u6784\u5efa\u5931\u8d25\uff1a</p> <pre><code>std::vector&lt;GraphNodeRef&gt; VisitExpr_(const VarNode* op) override {\nExpr expr = GetRef&lt;Expr&gt;(op);\nreturn var_map_[expr.get()];\n}\n\nstd::vector&lt;GraphNodeRef&gt; VisitExpr_(const IfNode* op) override {\nLOG(FATAL) &lt;&lt; \"Graph executor does not support control flow (found IfNode)\";\n}\n\nstd::vector&lt;GraphNodeRef&gt; VisitExpr_(const ConstructorNode* op) override {\nLOG(FATAL) &lt;&lt; \"Graph executor does not support ADTs (found ConstructorNode)\";\n}\n\nstd::vector&lt;GraphNodeRef&gt; VisitExpr_(const GlobalVarNode* op) override {\nLOG(FATAL) &lt;&lt; \"All GlobalVarNodes should be removed before graph executor's Codegen is called\";\n}\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c GraphNode \u4f1a\u88ab\u7ec4\u7ec7\u5728 <code>GraphExecutorCodegen</code> \u7684 <code>std::vector&lt;GraphObjectPtr&gt; nodes_</code> \u4e2d\u3002 \u8fd9\u4e2a\u56fe\u6700\u7ec8\u88ab\u5199\u5165 graph_json \u4e2d:</p> <pre><code>{\n\"nodes\": [\n{\n\"op\": \"null\",\n\"name\": \"data\",\n\"inputs\": []\n},\n{\n\"op\": \"null\",\n\"name\": \"weight1\",\n\"inputs\": []\n},\n{\n\"op\": \"null\",\n\"name\": \"bias1\",\n\"inputs\": []\n},\n{\n\"op\": \"null\",\n\"name\": \"weight2\",\n\"inputs\": []\n},\n{\n\"op\": \"null\",\n\"name\": \"bias2\",\n\"inputs\": []\n},\n{\n\"op\": \"tvm_op\",\n\"name\": \"tvmgen_default_fused_layout_transform\",\n\"attrs\": {\n\"hash\": \"e9662aa5b8e67b96\",\n\"num_inputs\": \"1\",\n\"src_layout\": \"NC\",\n\"dst_layout\": \"NC8n\",\n\"func_name\": \"tvmgen_default_fused_layout_transform\",\n\"flatten_data\": \"0\",\n\"num_outputs\": \"1\"\n},\n\"inputs\": [\n[1,0,0]\n]\n},\n{\n\"op\": \"tvm_op\",\n\"name\": \"tvmgen_default_fused_nn_contrib_dense_pack_expand_dims_add_nn_relu\",\n\"attrs\": {\n\"hash\": \"f360b4c42be956c4\",\n\"num_inputs\": \"3\",\n\"weight_layout\": \"NC8n\",\n\"func_name\": \"tvmgen_default_fused_nn_contrib_dense_pack_expand_dims_add_nn_relu\",\n\"flatten_data\": \"0\",\n\"num_outputs\": \"1\"\n},\n\"inputs\": [\n[0,0,0],\n[5,0,0],\n[2,0,0]\n]\n},\n{\n\"op\": \"tvm_op\",\n\"name\": \"tvmgen_default_fused_layout_transform_1\",\n\"attrs\": {\n\"hash\": \"86451ec737a6a453\",\n\"num_inputs\": \"1\",\n\"src_layout\": \"NC\",\n\"dst_layout\": \"NC5n\",\n\"func_name\": \"tvmgen_default_fused_layout_transform_1\",\n\"flatten_data\": \"0\",\n\"num_outputs\": \"1\"\n},\n\"inputs\": [\n[3,0,0]\n]\n},\n{\n\"op\": \"tvm_op\",\n\"name\": \"tvmgen_default_fused_nn_contrib_dense_pack_expand_dims_add_nn_relu_1\",\n\"attrs\": {\n\"hash\": \"32a532a5919d3a8b\",\n\"num_inputs\": \"3\",\n\"weight_layout\": \"NC5n\",\n\"func_name\": \"tvmgen_default_fused_nn_contrib_dense_pack_expand_dims_add_nn_relu_1\",\n\"flatten_data\": \"0\",\n\"num_outputs\": \"1\"\n},\n\"inputs\": [\n[6,0,0],\n[7,0,0],\n[4,0,0]\n]\n}\n],\n\"arg_nodes\": [0,1,2,3,4],\n\"heads\": [\n[8,0,0]\n],\n\"attrs\": {\n\"storage_id\": [\n\"list_int\",\n[0,1,2,3,4,5,6,7,8]\n],\n\"shape\": [\n\"list_shape\",\n[\n[1,784],\n[128,784],\n[128],\n[10,128],\n[10],\n[16,784,8],\n[1,28],\n[2,128,5],\n[1,10]\n]\n],\n\"device_index\": [\n\"list_int\",\n[1,1,1,1,1,1,1,1,1]\n],\n\"dltype\": [\n\"list_str\",\n[\"float32\",\"float32\",\"float32\",\"float32\",\"float32\",\"float32\",\"float32\",\"float32\",\"float32\"]\n]\n},\n\"node_row_ptr\": [0,1,2,3,4,5,6,7,8,9]\n}\n</code></pre> </li> </ol> </li> <li> <p>\u6700\u7ec8 <code>executor_factory = _executor_factory.GraphExecutorFactoryModule()</code> \u4f1a\u5c06</p> <ol> <li>\u8f93\u5165\u7684 Relay IR</li> <li>json\u8868\u793a\u7684 \u8ba1\u7b97\u6267\u884c\u56fe</li> <li>\u5bf9\u5e94\u7684\u6267\u884c\u5668</li> <li>TIRToRuntime build \u51fa\u7684 runtime.module</li> <li>\u4ee3\u7801\u751f\u6210\u7684 target</li> <li>\u4f18\u5316\u540e\u7684\u8ba1\u7b97\u56fe\u7684\u8f93\u5165\u53c2\u6570</li> <li>mod_name, func_metadata </li> </ol> <p>\u6253\u5305\u6210\u4e00\u4e2amodule\uff0c \u53ef\u4ee5\u6839\u636e\u8be5module\u4e2d\u7684\u4fe1\u606f\u6784\u5efa\u4e00\u4e2a graph_executor\uff0c \u5e76 \u5229\u7528 graph_executor \u52a0\u8f7d\u6267\u884c graph</p> </li> </ol> <p>\ud83d\udca1\u603b\u7ed3\u4e00\u4e0b: </p> <ol> <li> <p>c++ \u7aef\u7684 <code>BuildRelay</code> \u51fd\u6570\u662f\u901a\u7528\u63a5\u53e3 <code>relay.build</code> \u7684\u6838\u5fc3\uff0c \u5728\u4e0a\u9762\u8fc7\u7a0b\u4e2d\uff0c \u6211\u4eec\u6253\u51fa\u4e86 Relay, TE, TIR, graph_json \u7b49\u51e0\u79cd\u4e0d\u540c\u7684\u4e2d\u95f4\u8868\u793a\uff0c \u4ece Relay \u5230 TE\uff0c \u4eceTE \u5230 TIR\uff0c \u518d\u4ece TIR \u4e2d\u7684\u5143\u5f20\u91cf\u51fd\u6570\u88ab\u7ffb\u8bd1\u6210\u673a\u5668\u7801\uff0c \u6bcf\u4e00\u6b65\u90fd\u4f1a\u6267\u884c\u76f8\u5e94\u90e8\u5206\u7684\u4f18\u5316\u3002 \u81f3\u4e8e\u5177\u4f53\u505a\u4e86\u54ea\u4e9b\u4f18\u5316\uff0c TODO:</p> </li> <li> <p>\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\u901a\u8fc7\u8fd9\u6761\u8def\u5f84\uff0c\u6211\u4eec\u53ea\u80fd\u7f16\u8bd1 \u9759\u6001\u6a21\u578b\uff0c \u65e0\u8bba\u662f\u63a7\u5236\u6d41\u8fd8\u662f \u52a8\u6001 shape\uff0c \u652f\u6301\u7684\u90fd\u4e0d\u662f\u5f88\u597d\uff1b Relay \u7684\u540e\u7eed\u5de5\u4f5c nimble \u5728\u8fd9\u4e00\u65b9\u9762\u505a\u51fa\u4e86\u6539\u8fdb\uff0c\u53ef\u4ee5\u53c2\u8003: nimble\u3002 \u7b80\u5355\u6765\u8bb2\uff0c\u6211\u4eec\u4e0d\u518d\u4f9d\u8d56\u8fd9\u4e2a\u7b80\u5355\u5730 graph_executor, \u800c\u662f\u6784\u5efa\u4e86\u4e00\u4e2a\u865a\u62df\u673a\u8fdb\u884c\u8fd0\u884c\u65f6\u7684\u5206\u6790\u3001\u5185\u5b58\u5206\u914d\u3001\u7b97\u5b50\u6d3e\u53d1\u7b49\uff0c\u5728 Relax \u4e2d\u4e5f\u662f\u8fd9\u6837\u505a\u7684\uff0c\u56e0\u6b64\u63a5\u4e0b\u6765\u7684\u4e00\u8282\u4ee5 Relax \u4e3a\u4f8b\uff0c \u770b\u4e00\u4e0b TVM \u5982\u4f55\u652f\u6301\u52a8\u6001shape\uff0c \u52a8\u6001\u63a7\u5236\u6d41\uff0c \u5982\u4f55\u4f7f\u7528 VM \u8fdb\u884c\u76f8\u5e94\u652f\u6301\u3002</p> </li> </ol>"},{"location":"mlc/tvm-lowering.html#4-lower-relax","title":"4. Lower Relax","text":"<p><code>gen_call_tir_inputs</code> \u4e2d <code>_convert_te_arg</code> \u6ce8\u91ca\uff1a</p> <p>\u5728\u52a8\u6001\u5f62\u72b6\u7684\u60c5\u51b5\u4e0b\uff0c\u4f20\u5165\u7684\u53c2\u6570\u53ef\u80fd\u5305\u542b TIR \u53d8\u91cf\u3002 \u4f8b\u5982\uff0c\u53c2\u6570\u53ef\u4ee5\u662f\u5177\u6709\u7b26\u53f7\u5f62\u72b6\u7684 TensorStructInfo \u7684 Relax Var\uff0c\u6216\u8005\u53c2\u6570\u53ef\u4ee5\u662f\u5177\u6709\u7b26\u53f7\u53d8\u91cf\u7684 ShapeExpr\u3002 \u4e3a\u4e86\u4f7f\u751f\u6210\u7684 PrimFunc \u4e0e\u8c03\u7528\u8005 Relax \u51fd\u6570\u5177\u6709\u81ea\u53d8\u91cf\uff0c\u6211\u4eec\u5c06\u7528\u65b0\u7684\u53d8\u91cf\u66ff\u6362\u8f93\u5165\u53c2\u6570\u4e2d\u7684 TIR \u53d8\u91cf\uff0c\u8fd9\u662f\u901a\u8fc7\u7ef4\u62a4 TIR \u53d8\u91cf\u6620\u5c04\u6765\u5b8c\u6210\u7684\u3002</p>"},{"location":"mlc/tvm-relax.html","title":"TVM-Relax","text":"<p>Ref:</p> <ul> <li>Relax: Co-Designing High-Level Abstraction Towards TVM Unity\\</li> <li>Relax: TVM \u7684\u4e0b\u4e00\u4ee3\u56fe\u5c42\u7ea7 IR</li> <li>tlcpack/relax-wiki</li> </ul>"},{"location":"mlc/tvm-relax.html#dynamic-shape","title":"Dynamic Shape","text":"<p>Relax \u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684 \u52a8\u6001 tensor \u7c7b\u578b <code>DynTensorTypeNode</code>\uff0c \u5bf9\u6bd4\u539f\u672cTVM\u4e2d\u7684 \u9759\u6001 tensor\u7c7b\u578b <code>TensorTypeNode</code></p> <p><code>include/tvm/ir/tensor_type.h</code>:</p> <pre><code>class TensorTypeNode : public BaseTensorTypeNode {\npublic:\nArray&lt;PrimExpr&gt; shape;\nDataType dtype;\nTVM_DLL PrimExpr Size() const; // product of shape\nstatic constexpr const char* _type_key = \"relay.TensorType\";\nTVM_DECLARE_FINAL_OBJECT_INFO(TensorTypeNode, BaseTensorTypeNode);\n};\n</code></pre> <p><code>include/tvm/relax/type.h</code>:</p> <pre><code>class DynTensorTypeNode : public BaseTensorTypeNode {\npublic:\nint ndim; // number of dim; -1 denote tensor with unknwon number of dim\nDataType dtype; // content data type, use void to denote the dtype is unknown\ninline bool IsUnknownNdim() const { return ndim == kUnknownNDim; }\ninline bool IsUnknownDtype() const { return dtype.is_void(); }\nstatic constexpr const char* _type_key = \"relax.DynTensorType\";\nTVM_DECLARE_FINAL_OBJECT_INFO(DynTensorTypeNode, BaseTensorTypeNode);\n};\n</code></pre> <p>Dynamic shape \u662f TVM-Relay \u7684\u4e00\u5927\u77ed\u677f\uff0c\u6838\u5fc3\u539f\u56e0\u662f relay \u628aTensor\u7684shape\u4f5c\u4e3atype\u7684\u4fe1\u606f\u4e4b\u4e00\u5b58\u8fdb\u53bb\u4e86\uff08\u5373 Tensor[(m, n)]\u548cTensor[(m, 4)]\u662f\u4e0d\u540c\u7684type\uff0c\u4e14\u4e0d\u53ef\u5206\u6790\u3002relax\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684type\u53ebDynTensor\uff0c\u5176\u4e2d\u5305\u542b\u7684\u4fe1\u606f\u662fdtype\u548cshape\u7684\u7eac\u5ea6\uff0c\u4f46shape\u672c\u8eab\u7684\u8868\u8fbe\u5f0f\u662f\u72ec\u7acb\u5b58\u50a8\u7684\u3002\u4e5f\u5c31\u662fTensor[(m, n)]\u548cTensor[(, )]\u90fd\u662f\u540c\u4e00\u4e2atype\uff0c \u4f46\u662fTensor[(, )]\u548cTensor[(, , _)]\u662f\u4e0d\u540c\u7c7b\u578b\u3002\u8fd9\u6837\u4ece\u539f\u751f\u4e0a\u652f\u6301\u4e86symbolic shape\u3002</p>"},{"location":"mlc/tvm-relay.html","title":"TVM-Relay","text":"<p>\u672c\u6587 \u57fa\u4e8e tlc-pack/relax dc7072efe290d7e8c69d8e216311510981fc82e1</p>"},{"location":"mlc/tvm-relay.html#relay-a-new-ir-for-machine-learning-frameworks","title":"(\u4e00) \u8bba\u6587\uff1a Relay: A New IR for Machine Learning Frameworks","text":"<p>\u6587\u7ae0\u53d1\u5728PLDI 2018\uff0c \u8fd9\u65f6\u5019\u7684 Relay \u5df2\u7ecf\u652f\u6301\u63a7\u5236\u6d41\uff0c\u4f46\u8fd8\u4e0d\u652f\u6301\u52a8\u6001shape\uff0c \u540e\u7eednimble \u5728relay\u57fa\u7840\u4e0a\u505a\u4e86\u4e00\u4e9b\u6539\u8fdb\u3002</p>"},{"location":"mlc/tvm-relay.html#abstract","title":"ABSTRACT","text":"<p>\u6587\u7ae0\u63d0\u51fa\u4e86\u4e00\u79cd\u9ad8\u7ea7IR Relay\u3002 Relay \u88ab\u8bbe\u8ba1\u4e3a\u4e00\u79cd\u7eaf\u51fd\u6570\u5f0f\u3001\u9759\u6001\u7c7b\u578b\u7684\u8bed\u8a00\uff0c\u76ee\u6807\u662f\u5e73\u8861\u9ad8\u6548\u7f16\u8bd1\u3001\u8868\u73b0\u529b\u548c\u53ef\u79fb\u690d\u6027\u3002 \u6211\u4eec\u8ba8\u8bba Relay \u7684\u76ee\u6807\u5e76\u5f3a\u8c03\u5176\u91cd\u8981\u7684\u8bbe\u8ba1\u7ea6\u675f\u3002 Relay \u5b9e\u73b0\u4e3a NNVM \u7f16\u8bd1\u5668\u6846\u67b6\u7684\u4e00\u90e8\u5206\u3002</p>"},{"location":"mlc/tvm-relay.html#1-intro","title":"1. Intro","text":"<ul> <li> <p>1.1 \u73b0\u6709\u7684\u9ad8\u7ea7 IR</p> <p>\u8fd9\u9879\u5de5\u4f5c\u7684\u91cd\u70b9\u662f\u91cd\u65b0\u8bbe\u8ba1 TVM \u7f16\u8bd1\u6808\u7684\u9876\u5c42\u3002\u8fd9\u4e00\u5c42\u79f0\u4e3a NNVM\uff0c\u57fa\u4e8e\u8ba1\u7b97\u56fe\uff0c\u8ba1\u7b97\u56fe\u662f\u6700\u6d41\u884c\u7684\u53ef\u5fae\u5206\u8ba1\u7b97\u8868\u793a\u3002</p> <p>\u673a\u5668\u5b66\u4e60\u901a\u5e38\u4f9d\u8d56\u4e8e\u53ef\u5fae\u5206\u7684\u8ba1\u7b97\uff0c\u5373\u53ef\u4ee5\u8ba1\u7b97\u6570\u5b66\u5bfc\u6570\u7684\u8ba1\u7b97\u3002 \u4e3a\u4e86\u4fdd\u8bc1\u7528\u6237\u7a0b\u5e8f\u7684\u8fd9\u79cd\u7279\u6027\uff0c\u73b0\u6709\u6846\u67b6\u9650\u5236\u4e86\u7a0b\u5e8f\u7684\u8ba1\u7b97\u8868\u8fbe\u80fd\u529b\u3002 TensorFlow \u7b49\u6846\u67b6\u4f7f\u7528\u9759\u6001\u56fe\u8868\u793a\u53ef\u5fae\u5206\u8ba1\u7b97\uff0c\u9759\u6001\u56fe\u662f\u5177\u6709\u56fa\u5b9a\u62d3\u6251\u7ed3\u6784\u7684\u6570\u636e\u6d41\u56fe\u3002</p> <p>\u9759\u6001\u56fe\u5f88\u5bb9\u6613\u4f18\u5316\uff0c\u4f46\u9700\u8981\u7528\u6237\u5728\u6df1\u5ea6\u5d4c\u5165\u7684\u9886\u57df\u7279\u5b9a\u8bed\u8a00 (eDSL) \u4e2d\u6784\u5efa\u7a0b\u5e8f\uff0c\u800c\u4e14\u6ca1\u6709\u9ad8\u9636\u51fd\u6570\u8fd9\u6837\u7684\u62bd\u8c61\u3002</p> <p>Pytorch \u7b49\u6784\u5efa\u5177\u6709\u52a8\u6001\u62d3\u6251\u7684\u56fe\uff0c\u8fd9\u4e9b\u62d3\u6251 \u53ef\u4ee5\u4f9d\u8d56\u4e8e\u8fd0\u884c\u65f6\u6570\u636e \u5e76\u652f\u6301\u5927\u591a\u6570\u547d\u4ee4\u5f0f\u8ba1\u7b97\u7684\u5fae\u5206\u3002 \u8fd9\u79cd\u8868\u8fbe\u80fd\u529b\u5bf9\u7528\u6237\u6765\u8bf4\u5f88\u65b9\u4fbf\uff0c\u4f46\u9650\u5236\u4e86\u73b0\u6709\u6846\u67b6\u4f18\u5316\u56fe\u7684\u80fd\u529b\u3002 \u6b64\u5916\uff0cPyTorch \u7684\u6a21\u578b\u9700\u8981 Python \u89e3\u91ca\u5668\uff0c\u8fd9\u4f7f\u5f97\u90e8\u7f72\u5230\u65b0\u7684\u52a0\u901f\u5668\u548c FPGA \u6781\u5177\u6311\u6218\u6027\u3002</p> <p>\u603b\u4e4b\uff0c\u9759\u6001\u56fe\u6613\u4e8e\u4f18\u5316\uff0c\u4f46\u7f3a\u4e4f\u9ad8\u7ea7\u8bed\u8a00\u7684\u8868\u73b0\u529b\uff1b \u52a8\u6001\u56fe\u63d0\u4f9b\u4e86\u8fd9\u79cd\u7f3a\u5931\u7684\u8868\u73b0\u529b\uff0c\u4f46\u5f15\u5165\u4e86\u65b0\u7684\u7f16\u8bd1\u548c\u6267\u884c\u6311\u6218\uff0c\u5c24\u5176\u662f\u5728\u5f02\u6784\u786c\u4ef6\u548c FPGA \u4e0a\u3002</p> </li> <li> <p>1.2 Relay</p> <p>Relay \u65e8\u5728\u901a\u8fc7\u5728\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\u7684\u652f\u6301\u4e0b\u7ed3\u5408 \u9759\u6001\u56fe \u548c \u52a8\u6001\u56fe \u65b9\u6cd5\u7684\u89c1\u89e3\u6765\u5e73\u8861\u9ad8\u6548\u7f16\u8bd1\u3001\u8868\u8fbe\u80fd\u529b \u548c \u53ef\u79fb\u690d\u6027\u3002</p> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u8bbe\u8ba1 Relay \u4e0d\u662f\u4ece\u8ba1\u7b97\u56fe\u7684\u89d2\u5ea6\uff0c\u800c\u662f\u4ece\u53ef\u5fae\u8ba1\u7b97\u7684\u7f16\u7a0b\u8bed\u8a00\u7684\u89d2\u5ea6\u3002 \u8fd9\u79cd PL \u89c6\u89d2\u5c06\u4f7f Relay \u80fd\u591f\u5229\u7528\u5728 \u51fd\u6570\u5f0f\u7f16\u7a0b\u3001 \u7c7b\u578b\u7cfb\u7edf\u3001 synthesis\u3001 rewrite systems \u548c\u7ecf\u5178\u7f16\u8bd1\u5668\u6280\u672f\u65b9\u9762\u6570\u5341\u5e74\u7684\u7814\u7a76\u3002 \u6211\u4eec\u60f3\u5728\u672a\u6765\u5de5\u4f5c\u4e2d\u8bc1\u660e\u8fd9\u4e9b\u7279\u70b9\u5c06\u964d\u4f4e\u4ee5\u65b0\u52a0\u901f\u5668\u4e3a\u76ee\u6807\u7684\u6210\u672c\uff0c \u5e76\u5b9e\u73b0\u66f4\u591a\u4f18\u5316\u4ee5\u6539\u5584\u8bad\u7ec3\u548c\u63a8\u7406\u65f6\u95f4\u3001\u80fd\u6e90\u6d88\u8017\u548c\u7a7a\u95f4\u5229\u7528\u7387\u3002</p> </li> </ul> <p>\u8d21\u732e\uff1a</p> <ul> <li>Relay \u4e00\u79cd\u7528\u4e8e\u8868\u8fbe\u673a\u5668\u5b66\u4e60\u6a21\u578b\u7684\u65b0\u578b\u53ef\u5fae\u5206\u8bed\u8a00\u3002</li> <li>Relay \u7684\u9ad8\u9636\u81ea\u52a8\u5fae\u5206\u3002</li> <li>Relay \u7684 shape-dependent tensor type system</li> <li>A baseline evaluator \u548c\u57fa\u4e8eTVM \u6784\u5efa\u7684\u7c7b\u578b\u4e13\u7528\u7b97\u5b50\u7f16\u8bd1\u5668\u3002</li> </ul>"},{"location":"mlc/tvm-relay.html#2-background-and-related-work","title":"2. Background and Related Work","text":"<p>\u5f53\u524d\u7684 DL IR\uff0c\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d7\u5230\u4e86\u6570\u636e\u6d41\u7f16\u7a0b\u548c\u76f8\u5173\u8ba1\u7b97\u56fe\u62bd\u8c61\u7684\u542f\u53d1\uff0c\u8fd9\u4e9b\u8ba1\u7b97\u62bd\u8c61\u5728\u4ee5\u524d\u7684\u6846\u67b6\u4e2d\u5f88\u6d41\u884c\u3002</p> <p>\u4f8b\u5982\uff0cTensorFlow [4] \u662f Google \u4e4b\u524d DistBelief [11] \u7b49\u5de5\u4f5c\u7684\u8fed\u4ee3\u3002 \u8fd9\u4e9b\u6846\u67b6\u4ece\u6570\u636e\u6d41\u7f16\u7a0b\u8303\u4f8b\u4e2d\u53d1\u5c55\u800c\u6765\uff0c\u5728\u8fd9\u4e9b\u8303\u4f8b\u4e2d\uff0c\u62bd\u8c61\u662f\u5177\u6709\u8f93\u5165\u548c\u8f93\u51fa\u8fde\u63a5\u7684\u7b97\u5b50\u3002 \u8fd9\u4e9b\u8bed\u8a00\u63d0\u4f9b\u7684\u8bed\u4e49\u5df2\u5728\u4e4b\u524d\u7684\u5de5\u4f5c [5] \u4e2d\u8fdb\u884c\u4e86\u6982\u8ff0\u3002</p> <p>TensorFlow \u4f7f\u7528 \u539f\u8bed\u7b97\u5b50\u548c\u53d7\u9650\u7684\u63a7\u5236\u8fb9\uff08control edges\uff09\u6784\u9020\u6570\u636e\u6d41\u56fe\u6765\u8868\u793a\u53ef\u5fae\u7a0b\u5e8f\u3002 TensorFlow \u53ef\u4ee5\u88ab\u89c6\u4e3a\u6df1\u5ea6\u5d4c\u5165\u5f0f DSL (eDSL)\uff0c\u5176\u4e2d\u6267\u884c\u7528\u6237 Python \u811a\u672c\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u8ba1\u7b97\u56fe\uff0c\u7136\u540e\u53ef\u4ee5\u5728\u6267\u884c\u524d\u5bf9\u5176\u8fdb\u884c\u4f18\u5316\u548c\u8f6c\u6362\u3002 \u6b64\u5916\uff0c\u7531\u4e8e\u8be5\u56fe\u4ec5\u516c\u5f00\u9ad8\u7ea7\u8282\u70b9\uff0c\u56e0\u6b64\u7a0b\u5e8f\u53ef\u4ee5\u79fb\u690d\u5230\u5f02\u6784\u8bbe\u5907\uff0c\u5e76\u4e14\u5728\u7ed9\u5b9a\u8bbe\u5907\u4e0a\u6267\u884c\u5b50\u56fe\u53ea\u9700\u8981\u4e3a\u8be5\u8bbe\u5907\u5b9e\u73b0\u90a3\u4e9b\u64cd\u4f5c\u7b26\u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u79cd\u7f16\u7a0b\u6a21\u578b\u6709\u5c40\u9650\u6027\u3002 \u56e0\u4e3a\u62d3\u6251\u7ed3\u6784\u5728\u6267\u884c\u4e4b\u524d\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5 TensorFlow\uff081.0\uff09 \u4e0d\u9002\u5408\uff0c\u6709\u52a8\u6001\u5f62\u72b6\u7684\u6a21\u578b\u3002 \u867d\u7136\u786e\u5b9e\u5b58\u5728\u4e00\u4e2a\u5e93\u6765\u7f13\u89e3\u8fd9\u4e2a\u7279\u5b9a\u95ee\u9898\uff08\u53c2\u89c1 [24]\uff09\uff0c\u4f46\u8fd9\u79cd\u6a21\u5f0f\u8868\u660e\uff0c\u5982\u679c\u5c06\u6765\u5bf9\u65b0\u7684\u4f9d\u8d56\u9879\u611f\u5174\u8da3\uff0c\u4e5f\u5fc5\u987b\u7f16\u5199\u7c7b\u4f3c\u7684\u5e93\u6765\u89e3\u51b3\u6bcf\u4e2a\u95ee\u9898\uff0c\u8fd9\u9700\u8981\u5927\u91cf\u7684\u5de5\u7a0b\u5de5\u4f5c\u3002</p> <p>PyTorch [28]\u3001Gluon \u548c TensorFlow eager-mode [33] \u7b49\u52a8\u6001\u6846\u67b6 moving from the define-then-run model to the define-by-run model\u3002 PyTorch \u5728 Python \u4e2d\u5d4c\u5165\u4e86\u6784\u5efa\u52a8\u6001\u6570\u636e\u6d41\u56fe\u7684\u539f\u8bed\u3002 \u63a7\u5236\u6d41\u5728 Python \u89e3\u91ca\u5668\u4e2d\u6267\u884c\uff0c\u6570\u636e\u6d41\u7531\u6846\u67b6\u4ee3\u7801\u6267\u884c\u3002 \u4f46\u662f\uff0c\u5f53\u4f7f\u7528\u52a8\u6001\u6846\u67b6\u65f6\uff0c\u6709\u5173\u63a7\u5236\u6d41\u7684\u4fe1\u606f\u4f1a\u4e22\u5931\uff0c\u4ece\u800c\u964d\u4f4e\u4e86\u4f18\u5316\u5b83\u4eec\u7684\u80fd\u529b\u3002 \u6b64\u5916\uff0c\u52a8\u6001\u6846\u67b6\u9700\u8981\u5728\u56fe\u62d3\u6251\u53d1\u751f\u53d8\u5316\u65f6\u91cd\u65b0\u4f18\u5316\uff0c\u8fd9\u4f1a\u6d88\u8017 CPU \u5468\u671f\u4ee5\u53ca\u5728\u4e3b\u673a\u548c\u52a0\u901f\u5668\u4e4b\u95f4\u79fb\u52a8\u6570\u636e\u7684\u5f00\u9500\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7\u8f6c\u6362 Python \u4ee3\u7801\u6765\u89e3\u51b3\uff0c\u4f46\u5b9e\u9645\u4e0a\u4e0e Python \u662f\u8f93\u5165 IR \u7684\u9759\u6001\u6846\u67b6\u76f8\u540c\u3002</p> <p>\u5148\u524d\u5728\u9ad8\u9636\u5fae\u5206\u65b9\u9762\u7684\u5de5\u4f5c\u4e3a Relay \u8bbe\u8ba1\u63d0\u4f9b\u4e86\u6307\u5bfc\u3002\u6211\u4eec\u4ece\u81ea\u52a8\u5fae\u5206\u7684\u5404\u79cd\u5b9e\u73b0\u4e2d\u6c72\u53d6\u4e86\u7075\u611f [1\u30012\u30017\u300113\u300120\u300129\u300136]\u3002 \u6211\u4eec\u7279\u522b\u611f\u5174\u8da3\u7684\u662f\u53ef\u4ee5\u8ba1\u7b97\u9ad8\u9636\u7a0b\u5e8f\u7684\u9ad8\u9636\u68af\u5ea6\u7684\u6280\u672f\u3002</p> <p>\u6700\u8fd1\u5bf9 TVM \u7684\u7814\u7a76\u4e00\u76f4\u96c6\u4e2d\u5728\u4ea7\u751f\u9ad8\u6548\u7684\u7b97\u5b50\uff0c\u4f8b\u5982\u5e7f\u4e49\u77e9\u9635\u4e58\u6cd5 (GEMM) \u6216\u5377\u79ef\u3002 \u8fd9\u4e00\u7cfb\u5217\u7814\u7a76\u4fa7\u91cd\u4e8e\u4f4e\u7ea7\u6027\u80fd\uff0c\u4f46\u8bc1\u660e\u9700\u8981\u534f\u540c\u8c03\u6574\u9ad8\u7ea7\u8ba1\u7b97\u56fe\u3001\u7b97\u5b50\u548c\u52a0\u901f\u5668\u624d\u80fd\u5b9e\u73b0\u6700\u4f73\u6027\u80fd\u3002 \u8f93\u5165\u7a0b\u5e8f\u7684\u9ad8\u7ea7\u8f6c\u6362\u5bf9\u4e8e\u5f20\u91cf\u5316\u95ee\u9898\u5c24\u4e3a\u91cd\u8981\u3002 \u5f20\u91cf\u5316\u662f\u73b0\u6709\u7f16\u8bd1\u5668\u4e2d\u5411\u91cf\u5316\u7684\u7c7b\u4f3c\u8fc7\u7a0b \uff0c \u6d89\u53ca\u4f18\u5316\u5668\u5c06\u7a0b\u5e8f\u5206\u89e3\u548c\u5339\u914d\u5230\u66b4\u9732\u7684\u5e95\u5c42\u786c\u4ef6\u5f20\u91cf\u64cd\u4f5c\u3002 \u4e0e\u7c7b\u4f3c\u7684 SIMD \u539f\u8bed\u4e0d\u540c\uff0c\u7531\u4e8e\u662f\u591a\u7ef4\u7684\u3001\u6df7\u5408\u5927\u5c0f\u7684\u548c\u975e\u6709\u9650\u7684\uff0c\u8fd9\u4e2a\u95ee\u9898\u66f4\u5177\u6311\u6218\u6027\u3002</p> <p>TVM \u65e8\u5728\u5b9e\u73b0\u4e00\u7cfb\u5217\u57fa\u672c\u4f18\u5316\uff1a</p> <ul> <li>\u9ad8\u7ea7\u4f18\u5316\uff0c\u4f8b\u5982\u8fd0\u7b97\u7b26\u878d\u5408\u548c\u5e03\u5c40\u66f4\u6539</li> <li>\u5728\u56fe\u548c\u8fd0\u7b97\u7b26\u7ea7\u522b\u7684\u5185\u5b58\u91cd\u7528</li> <li>\u5f20\u91cf\u5316\u8ba1\u7b97</li> <li>\u5ef6\u8fdf\u9690\u85cf\uff08\u4f20\u7edf\u786c\u4ef6\u63d0\u4f9b\u8fd9\u79cd\u62bd\u8c61\uff0c\u4f46\u65b0\u7684\u52a0\u901f\u5668\u5c06\u8fd9\u79cd\u8d1f\u62c5\u63a8\u7ed9\u4e86\u7f16\u8bd1\u5668\u7f16\u5199\u8005\uff09</li> </ul> <p>\u6709\u591a\u9879\u76f8\u5173\u7684\u5de5\u7a0b\u5de5\u4f5c\uff0c\u4e3b\u8981\u6765\u81ea\u8c37\u6b4c\u548c Facebook\u3002 Facebook \u4e00\u76f4\u5728\u6784\u5efa\u4e00\u4e2a\u7531\u8bb8\u591a\u9879\u76ee\u7ec4\u6210\u7684\u9ad8\u6548 ML \u5806\u6808\uff0c\u5305\u62ec Tensor Comprehensions [35] \u548c Glow [31]\u3002 Tensor Comprehensions \u4f4d\u4e8e\u4e0e TVM \u76f8\u4f3c\u7684\u7a7a\u95f4\u4e2d\uff0c\u4f46\u91c7\u7528\u4e0d\u540c\u7684\u6280\u672f\uff0c\u4f8b\u5982\u4f7f\u7528\u591a\u9762\u4f53\u7f16\u8bd1\u800c\u4e0d\u662f\u7b97\u6cd5\u8c03\u5ea6\u3002 Glow \u7f16\u8bd1\u5668 [31] \u7c7b\u4f3c\u4e8e NNVM\uff0c\u65e8\u5728\u6210\u4e3a\u9ad8\u7ea7\u8ba1\u7b97\u56fe\u7684\u7f16\u8bd1\u5668\u3002 Glow \u7684\u8bbe\u8ba1\u66f4\u63a5\u8fd1\u73b0\u6709\u7684\u8ba1\u7b97\u56fe\uff0c\u4f3c\u4e4e\u4e0d\u662f\u4e00\u79cd\u5b8c\u6574\u7684\u8bed\u8a00\uff0c\u4e5f\u4e0d\u592a\u6ce8\u91cd\u5168\u6808\u8c03\u4f18\u3002</p> <p>TensorFlow \u7684 XLA \u4e0e\u5b8c\u6574\u7684 TVM \u7f16\u8bd1\u6808\u975e\u5e38\u76f8\u4f3c\uff0c\u4e13\u6ce8\u4e8e\u4e3a TensorFlow \u7684\u8ba1\u7b97\u56fe\u63d0\u4f9b\u8f83\u4f4e\u7ea7\u522b\u7684\u4e2d\u95f4\u8868\u793a\u3002 Relay \u65e8\u5728\u7528\u66f4\u9ad8\u5c42\u6b21\u7684\u62bd\u8c61\u6765\u53d6\u4ee3\u7528\u6237\u53ef\u89c1\u7684\u56fe\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u7528\u7eafPython\u7f16\u5199\u50cfTensorFlow\u548cPyTorch\u8fd9\u6837\u7684\u6846\u67b6\u3002</p>"},{"location":"mlc/tvm-relay.html#3-language","title":"3. Language","text":"<p>Relay \u662f\u4e00\u79cd\u9759\u6001\u7c7b\u578b\u7684\u3001\u7eaf\u51fd\u6570\u5f0f\u7684\u3001\u53ef\u5fae\u5206\u7684 IR\u3002 Relay \u4e0d\u662f\u7528\u4e8e\u7f16\u5199\u548c\u4f18\u5316\u9ad8\u6027\u80fd\u5185\u6838\u7684\u4f4e\u7ea7 IR\uff1b \u76f8\u53cd\uff0c\u5b83\u65e8\u5728\u53d6\u4ee3 NNVM \u7684\u8ba1\u7b97\u56fe\u4f5c\u4e3a NNVM \u7684\u8f93\u5165\u5c42\u3002 \u6211\u4eec\u5141\u8bb8\u4f7f\u7528 C \u6216 C++ \u7b49\u5916\u90e8\u8bed\u8a00\u6216 TVM \u6216 Tensor Comprehensions \u7b49\u8f83\u4f4e\u7ea7\u522b\u7684 IR \u5b9e\u73b0\u539f\u59cb\u8fd0\u7b97\u7b26\u3002 \u56e0\u4e3a Relay \u65e8\u5728\u4f5c\u4e3a TVM \u5806\u6808\u7684\u9876\u5c42 [9]\uff0c\u6211\u4eec\u4e0e TVM \u7d27\u5bc6\u96c6\u6210\u5e76\u4f7f\u7528\u5b83\u6765\u5b9e\u73b0\u548c\u4f18\u5316\u5185\u6838\u3002</p> <p>\u6211\u4eec\u7684\u76ee\u7684\u662f\u8ba9\u6211\u4eec\u7684\u65b0 IR \u6210\u4e3a\u7814\u7a76\u4eba\u5458\u4ee5 Edward \u548c Pyro \u7684\u98ce\u683c\u5b9e\u65bd\u65b0\u7684\u53ef\u5fae\u5206\u7f16\u7a0b\u8bed\u8a00\u548c\u6df1\u5ea6\u6982\u7387\u7f16\u7a0b\u8bed\u8a00\u7684\u4fbf\u6377\u624b\u6bb5\u3002</p> <p>\u6b63\u5982\u6211\u4eec\u5728\u7b2c 2 \u8282\u4e2d\u8ba8\u8bba\u7684\u90a3\u6837\uff0c\u5927\u591a\u6570\u6d41\u884c\u7684\u673a\u5668\u5b66\u4e60\u6846\u67b6\u6784\u5efa\u4e86\u4ee3\u8868\u7528\u6237\u7a0b\u5e8f\u7684\u8ba1\u7b97\u56fe\u3002 \u7531\u4e8e\u8fd9\u4e9b\u56fe\u672c\u8d28\u4e0a\u662f\u62bd\u8c61\u8bed\u6cd5\u6811 (AST) \u7684\u4fee\u6539\u5f62\u5f0f\uff0c\u6211\u4eec\u5c06\u5bf9\u8ba1\u7b97\u56fe\u6267\u884c\u7684\u8f6c\u6362\u548c\u5206\u6790\u89c6\u4e3a\u7a0b\u5e8f\u8f6c\u6362\u548c\u7a0b\u5e8f\u5206\u6790\u3002 \u867d\u7136\u5176\u4ed6 DL \u6846\u67b6\u4e5f\u91c7\u7528\u4e86\u8fd9\u79cd\u89c2\u70b9\uff0c\u4f46\u5b83\u4eec\u57fa\u4e8e\u56fe\u5f62\u7684\u65b9\u6cd5\u4f7f\u5f97\u96be\u4ee5\u4f7f\u7528\u4f20\u7edf\u7f16\u8bd1\u5668\u548c\u7f16\u7a0b\u8bed\u8a00\u6280\u672f\u7684\u5168\u90e8\u6b66\u5668\u5e93\u3002</p> <p>\u9759\u6001\u7c7b\u578b\u652f\u6301\u5c06\u6a21\u578b\u76f4\u63a5\u7f16\u8bd1\u5230\u5d4c\u5165\u5f0f\u786c\u4ef6\u548c\u52a0\u901f\u5668\u4e2d\uff0c\u8fd9\u5df2\u5728 TVM \u4e2d\u5f97\u5230\u8bc1\u660e\u3002 \u62e5\u6709\u50cf Relay \u8fd9\u6837\u7684 IR \u53ef\u4ee5\u4e3a\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7b49\u5e94\u7528\u7a0b\u5e8f\u90e8\u7f72\u66f4\u4e30\u5bcc\u7684\u52a8\u6001\u6a21\u578b\u3002 \u901a\u8fc7\u8fd9\u79cd\u89c2\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6570\u5341\u5e74\u7684\u7f16\u7a0b\u8bed\u8a00\u7814\u7a76\u6765\u5e2e\u52a9\u6211\u4eec\u8868\u8fbe\u548c\u7406\u89e3\u8fd9\u4e9b\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\uff0c\u4e0d\u662f\u5c06\u5176\u4f5c\u4e3a\u4e00\u79cd\u53d7\u9650\u7684\u6570\u636e\u6d41\u8bed\u8a00\uff0c\u800c\u662f\u4f5c\u4e3a\u4e00\u79cd\u5b8c\u6574\u7684\u7f16\u7a0b\u8bed\u8a00\u3002</p>"},{"location":"mlc/tvm-relay.html#31-grammar-and-design","title":"3.1. Grammar and Design","text":"<p>\u5b8c\u6574\u8bed\u8a00\u7684\u8bed\u6cd5\u53ef\u4ee5\u5728\u56fe 3 \u4e2d\u627e\u5230\u3002</p> <p>Relay \u662f\u4e00\u79cd\u5177\u6709\u95ed\u5305\u3001\u9012\u5f52\u3001\u6761\u4ef6\u3001\u8fd0\u7b97\u7b26\u548c\u5f20\u91cf\u7684\u51fd\u6570\u5f0f\u8bed\u8a00\u3002 Relay \u7684 IR \u5728\u8ba1\u7b97\u56fe\u4e0a\u6709\u4e24\u4e2a\u4e3b\u8981\u7684\u8bbe\u8ba1\u8d21\u732e\uff1a\u6dfb\u52a0\u51fd\u6570\u548c\u53ef\u4ee5\u6355\u83b7\u5f20\u91cf\u64cd\u4f5c\u5173\u7cfb\u7684\u4e30\u5bcc\u7c7b\u578b\u7cfb\u7edf\u3002</p> <p>\u4e3a\u4e86\u652f\u6301\u9ad8\u9636\uff08\u5728\u9ad8\u9636\u51fd\u6570\u7684\u610f\u4e49\u4e0a\uff09\u53ef\u5fae\u7a0b\u5e8f\uff0c\u6211\u4eec\u9700\u8981\u80fd\u591f\u652f\u6301\u8ba1\u7b97\u4efb\u610f\u51fd\u6570\u7684\u68af\u5ea6\u3002 \u6211\u4eec\u901a\u8fc7\u5f15\u5165 higher-order\u3001 higher-order (in both senses) reverse mode operator [29] \u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002 \u8fd9\u4e2a\u8fd0\u7b97\u7b26\u5141\u8bb8\u6211\u4eec\u8ba1\u7b97\u9ad8\u9636\u7a0b\u5e8f\u7684 n \u9636\u5bfc\u6570\uff0c\u5f00\u542f\u4e86\u533a\u5206\u7528\u51fd\u6570\u7f16\u7801\u7684\u4efb\u610f\u63a7\u5236\u7ed3\u6784\u7684\u80fd\u529b\u3002</p> <p>\u90e8\u5206\u53d7\u5230 DLVM [37] \u7684\u542f\u53d1\uff0cDLVM [37] \u662f\u4e00\u79cd\u795e\u7ecf\u7f51\u7edc DSL\uff0c\u5b83\u652f\u6301\u7528\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7a0b\u5e8f\u7684 CFG \u5f0f IR\uff0c\u5b83\u5f15\u5165\u4e86\u4e00\u79cd\u57fa\u4e8e\u6052\u5b9a\u5f20\u91cf\u5f62\u72b6\u548c\u7c7b\u578b\u7684\u5f20\u91cf\u7c7b\u578b\u7cfb\u7edf\uff0c Relay \u652f\u6301\u4e30\u5bcc\u7684\u7c7b\u578b\u7cfb\u7edf\uff0c\u5305\u62ec dependent typing for tensor shapes\uff0c \u4ece\u800c\u5141\u8bb8\u51fd\u6570\u7c7b\u578b\u7b7e\u540d\u6307\u5b9a\u53c2\u6570\uff08\u4f8b\u5982\u5c5e\u6027\u6216\u5176\u4ed6\u5f20\u91cf\uff09\u4e0e\u751f\u6210\u7684\u5f20\u91cf\u5f62\u72b6\u4e4b\u95f4\u7684\u5173\u7cfb\u3002</p>"},{"location":"mlc/tvm-relay.html#4-system-design","title":"4. System Design","text":"<p>NNVM \u76ee\u524d\u5c06 DL \u7a0b\u5e8f\u8868\u793a\u4e3a\u5305\u542b\u7b97\u5b50\u548c\u8f93\u5165/\u8f93\u51fa\u6570\u636e\u6d41\u7684\u9759\u6001\u8ba1\u7b97\u56fe\u3002 \u8be5\u56fe\u7684\u62d3\u6251\u7ed3\u6784\u662f\u56fa\u5b9a\u7684\uff0c\u5141\u8bb8\u76f4\u63a5\u7f16\u8bd1\u5230 TVM \u7684\u56fe\u8fd0\u884c\u65f6\u3002</p> <p>\u6211\u4eec\u9996\u5148\u5728 Python \u4e2d\u6784\u5efa\u4e86\u4e00\u4e2a\u539f\u578b\u6765\u9a8c\u8bc1\u6211\u4eec\u7684\u60f3\u6cd5\uff0c\u5e76\u5c1d\u8bd5\u8fdb\u884c\u8f6c\u6362\uff0c\u4f8b\u5982\u90e8\u5206\u6c42\u503c\u548c\u81ea\u52a8\u5fae\u5206\u3002</p> <p>Relay\u7531\u4e00\u7cfb\u5217\u4e92\u64cd\u4f5c\u7684\u57fa\u672c\u6a21\u5757\u7ec4\u6210\uff1a</p> <ul> <li>Python \u524d\u7aef\uff0c\u5c06 Python \u4ee3\u7801\u8f6c\u6362\u4e3a Relay \u7684 C++ \u6570\u636e\u7ed3\u6784</li> <li>\u7528\u4e8erelay\u7a0b\u5e8f\u81ea\u52a8\u5fae\u5206\u7684\u6a21\u5757</li> <li>\u5f62\u72b6\u76f8\u5173\u7684\u5f20\u91cf\u7c7b\u578b\u7cfb\u7edf</li> <li>\u7528\u4e8e\u539f\u578b\u8bbe\u8ba1\u548c\u8c03\u8bd5\u7684\u7b80\u5355evaluator </li> <li>\u57fa\u4e8eTVM \u6784\u5efa\u7684type-specialized operator compiler</li> <li>\u9ad8\u6548\u7684\u8fd0\u884c\u65f6\u7cfb\u7edf\uff08\u4ecd\u5728\u5f00\u53d1\u4e2d\uff09</li> </ul> <p>\u4e0b\u9762\uff0c\u6211\u4eec\u5c06\u63cf\u8ff0\u5df2\u7ecf\u539f\u578b\u5316\u7684\u6a21\u5757\u7684\u8bbe\u8ba1\u548c\u5b9e\u73b0\uff0c\u5e76\u8ba8\u8bba 5 \u4e2d\u6b63\u5728\u8fdb\u884c\u7684\u548c\u5c1a\u672a\u5b9e\u73b0\u7684\u7ec4\u4ef6\u3002</p>"},{"location":"mlc/tvm-relay.html#41-frontend","title":"4.1. Frontend","text":"<p>Relay \u76ee\u524d\u6709\u4e24\u4e2a\u63a5\u53e3\uff1a\u4e00\u4e2a\u53ef\u4ee5\u7528 Python \u6216 C++ \u7f16\u5199\u7684\u6587\u672c AST \u548c\u4e00\u4e2a Python \u524d\u7aef\u3002 \u6211\u4eec\u6253\u7b97\u6dfb\u52a0\u4e00\u4e2a JSON \u5e8f\u5217\u5316\u63a5\u53e3\uff0c\u4ee5\u4fbf\u4e0e\u5176\u4ed6\u7f16\u8bd1\u5668\u8f7b\u677e\u96c6\u6210\u3002</p> <p>Python \u524d\u7aef\u662f Relay \u9884\u671f\u7684\u9762\u5411\u7528\u6237\u7684\u4ea4\u4e92\u6a21\u5f0f\uff0c\u800c\u5176\u4ed6\u63a5\u53e3\u5141\u8bb8\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u4f7f\u7528 Relay \u7684 AST\u3002</p> <p>Python \u63a5\u53e3\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a\u4e00\u4e2a\u5e93\u548c\u4e00\u5bf9\u88c5\u9970\u5668\u3002 \u8be5\u5e93\u5305\u542b\u6807\u51c6\u7684 DL \u7b97\u5b50\u548c\u4e00\u4e9b\u7279\u5b9a\u4e8e relay \u7684\u51fd\u6570\u3002 \u8fd9\u5bf9\u88c5\u9970\u5668\u5c06 vanilla Python \u4ee3\u7801\u7684\u4e00\u4e2a\u5b50\u96c6\u8f6c\u6362\u4e3a Relay \u6587\u672c AST \u8868\u793a\uff0c\u5e76\u751f\u6210\u4e00\u4e2a\u5305\u88c5\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5c06\u4f7f\u7528 Relay \u7684\u4e00\u79cd\u6c42\u503c\u673a\u5236\u6765\u6267\u884c\u8be5\u4ee3\u7801\u3002</p> <p>\u5c3d\u7ba1 Relay \u7684\u6838\u5fc3\u662f\u7528 C++ \u7f16\u5199\u7684\uff0c\u4f46\u6211\u4eec\u80fd\u591f\u901a\u8fc7\u91cd\u7528 TVM \u7684 Node \u7cfb\u7edf\u5c06\u5185\u90e8\u7ed3\u6784\u66b4\u9732\u7ed9 Python\uff0c\u8fd9\u5141\u8bb8\u4e24\u79cd\u8bed\u8a00\u4e4b\u95f4\u7684\u4f4e\u5de5\u4f5c\u91cf\u4e92\u64cd\u4f5c\u6027\u3002 </p> <p>Python \u524d\u7aef\u53d7\u5230\u8bb8\u591a\u5176\u4ed6\u9879\u76ee\u7684\u542f\u53d1\uff0c\u8fd9\u4e9b\u9879\u76ee\u4f7f\u7528\u7c7b\u4f3c\u7684\u673a\u5236\u6765\u91cd\u5199 Python AST\uff0c\u4f8b\u5982 Tangent [38] [8]\u3002\u4f7f\u7528 Python \u4f5c\u4e3a\u6e90\u8bed\u8a00\u8fd8\u5141\u8bb8\u7528\u6237\u4f7f\u7528\u4ed6\u4eec\u7528\u4e8e\u8fdb\u884c\u6570\u636e\u5904\u7406\u548c\u90e8\u7f72\u7684\u76f8\u540c\u8bed\u8a00\u6765\u7f16\u5199\u548c\u6269\u5c55 Relay\u3002</p> <p>\u56fe 4 \u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u88c5\u9970\u5668\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7b80\u8981\u6982\u8ff0\u5b83\u4eec\u7684\u8bed\u4e49\u3002 \u8ba9\u6211\u4eec\u5148\u8bf4\u660e\u88c5\u9970\u5668\u7684\u63cf\u8ff0\uff0c\u6ce8\u610f\u5f53\u524d\u5e76\u672a\u5b9e\u73b0\u6b64\u793a\u4f8b\u4e2d\u7684\u6240\u6709\u529f\u80fd\uff0c\u800c\u662f\u4ee3\u8868\u6211\u4eec\u524d\u7aef\u7684\u8bbe\u8ba1\u548c\u7406\u60f3\u8bed\u6cd5\u3002</p> <p>\u4e3a\u4e86\u8bf4\u660e\u88c5\u9970\u5668\uff0c\u6211\u4eec\u7b80\u8981\u8ddf\u8e2a\u4e00\u4e0b\u524d\u7aef\u5982\u4f55\u5c06 4 \u4e2d\u7684\u7a0b\u5e8f\u8f6c\u6362\u4e3a Relay\u3002 \u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\uff0c\u4fee\u9970\u4e86\u4e09\u4e2aPython\u51fd\u6570\uff1a</p> <ul> <li><code>lenet</code> \uff1aLeNet \u6a21\u578b\u7684\u58f0\u660e</li> <li><code>loss</code> \uff1a\u6a21\u578b\u7684\u635f\u5931\u51fd\u6570</li> <li><code>train_lenet</code> \uff1a\u8bad\u7ec3\u5faa\u73af</li> </ul> <p>\u51fd\u6570\u7684\u6bcf\u4e2a\u53c2\u6570\u90fd\u9700\u8981\u4e00\u4e2a\u663e\u5f0f\u7684\u7c7b\u578b\u6ce8\u91ca\uff0c\u4f46\u662f\u5c40\u90e8\u53d8\u91cf\u8d4b\u503c\u7684\u7c7b\u578b\u53ef\u4ee5\u7701\u7565\uff0c\u7a0d\u540e\u7531\u540e\u7aef\u63a8\u65ad\u3002</p> <p>relay \u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u4efb\u4f55\u51fd\u6570\u8c03\u7528\u90fd\u5c06\u8f6c\u6362\u4e3a\u5185\u90e8\u6807\u8bc6\u7b26\uff0c\u5b83\u5fc5\u987b\u5728 Relay \u5916\u90e8\u5b9e\u73b0\u5e76\u5728\u8fd0\u884c\u65f6\u6ce8\u518c\u3002 TVM \u662f\u5b9e\u73b0\u5b83\u4eec\u7684\u9996\u9009\u673a\u5236\u3002</p> <p>\u4e3a\u4e86\u9632\u6b62\u5c06\u6a21\u578b\u53c2\u6570\u4f20\u9012\u7ed9\u6bcf\u4e2a\u9700\u8981\u5b83\u4eec\u7684\u51fd\u6570\uff0c\u6211\u4eec\u6709\u4e24\u4e2a\u72ec\u7acb\u7684\u88c5\u9970\u5668\uff1a <code>relay</code> \u548c <code>relay_model</code> \u3002 relay \u88c5\u9970\u5668\u58f0\u660e\u4e86\u4e00\u4e2a\u53ef\u4ee5\u5728\u6ca1\u6709\u4efb\u4f55\u9690\u85cf\u72b6\u6001\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u7684\u51fd\u6570\uff08\u56e0\u6b64\uff0c\u65e0\u6cd5\u8c03\u7528\u9700\u8981\u9690\u85cf\u72b6\u6001\u7684\u51fd\u6570\uff09\u3002 <code>relay_model</code> \u88c5\u9970\u5668\u58f0\u660e\u4e86\u4e00\u4e2a\u4e0d\u80fd\u9ed8\u8ba4\u8fd0\u884c\u7684\u51fd\u6570\uff0c\u800c\u662f\u5fc5\u987b\u9996\u5148\u901a\u8fc7\u8c03\u7528 <code>relay.create_model</code> \u6765\u5b9e\u4f8b\u5316\u3002 \u5f53\u4e3a <code>relay_model</code> \u4fee\u9970\u7684\u51fd\u6570\u521b\u5efa\u6a21\u578b\u65f6\uff0c\u4f1a\u5728\u51fd\u6570\u4f53\u4e2d\u641c\u7d22\u4efb\u4f55\u9700\u8981\u9690\u85cf\u53c2\u6570\u7684\u8c03\u7528\uff1b \u7136\u540e\u521d\u59cb\u5316\u8fd9\u4e9b\u8c03\u7528\u7684\u4efb\u4f55\u53c2\u6570\u3002 \u8bf7\u6ce8\u610f\uff0c\u591a\u6b21\u8c03\u7528\u540c\u4e00\u51fd\u6570\u4ecd\u4f1a\u751f\u6210\u591a\u7ec4\u9690\u85cf\u53c2\u6570\u3002 \u6bd4\u5982 lenet \u51fd\u6570\u4e2d\uff0c conv1 \u548c conv2 \u90fd\u6709\u81ea\u5df1\u7684\u9690\u85cf\u53c2\u6570\u3002 \u5f53\u524d\u5047\u8bbe\u6240\u6709\u6a21\u578b\u53c2\u6570\u7684\u521d\u59cb\u5316\u4e3a\u9ad8\u65af\u5206\u5e03\uff0c\u5176\u4e2d \u00b5 = 0 \u548c\u4e00\u4e9b\u5c0f\u7684 \u03c3 \u3002</p> <p>\u4e3a\u4e86\u8bad\u7ec3\u6a21\u578b\uff0c\u6211\u4eec\u6839\u636e\u6211\u4eec\u7684\u6a21\u578b\uff08\u5373 lenet\uff09\u5b9a\u4e49\u635f\u5931\u51fd\u6570\uff0c\u5e76\u4e14\u5728\u6211\u4eec\u7684\u8bad\u7ec3\u5faa\u73af\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 <code>relay.grad</code> \u6765\u8ba1\u7b97\u53c2\u6570\u76f8\u5bf9\u4e8e\u8f93\u51fa\u7684\u68af\u5ea6\u3002 \u7136\u540e\u6211\u4eec\u5c06\u751f\u6210\u7684\u68af\u5ea6\u901a\u8fc7\u7ba1\u9053\u4f20\u8f93\u5230 <code>relay.update_model_params</code> \u4ee5\u66f4\u65b0\u6211\u4eec\u7684\u53c2\u6570\uff08\u6b64\u793a\u4f8b\u4f7f\u7528\u666e\u901a\u968f\u673a\u68af\u5ea6\u4e0b\u964d\uff09\u3002 \u867d\u7136 Relay IR \u901a\u5e38\u662f\u529f\u80fd\u6027\u7684\uff0c\u4f46\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u5c06 relay.update_model_params \u516c\u5f00\u4e3a\u4e00\u79cd\u6709\u9650\u7684\u7a81\u53d8\u5f62\u5f0f\u3002</p> <p>\u8bad\u7ec3\u5b8c\u6210\u540e\uff0c <code>relay.export_model</code> \u8fd4\u56de\u8bad\u7ec3\u6a21\u578b\u7684\u53ef\u8c03\u7528\u7248\u672c\uff0c\u7136\u540e\u53ef\u4ee5\u5728\u539f\u59cb Python \u4e2d\u4f7f\u7528\u3002</p>"},{"location":"mlc/tvm-relay.html#42-automatic-differentiation","title":"4.2. Automatic Differentiation","text":"<p>\u5728 [29] \u4e2d\uff0c\u4f5c\u8005\u8bc1\u660e\u4e86\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u5f15\u5165\u5f15\u7528\u7684\u672c\u5730\u7a0b\u5e8f\u8f6c\u6362\u5728\u51fd\u6570\u5f0f\u8bed\u8a00\u4e2d\u6267\u884c\u53cd\u5411\u6a21\u5f0f\u81ea\u52a8\u5fae\u5206\u3002 \u6211\u4eec\u7684\u65b9\u6cd5\u53d7\u5230\u4ed6\u4eec\u7684\u542f\u53d1\uff0c\u5e76\u4e14\u4e0e\u4f7f\u7528\u53cc\u6570\u6267\u884c\u524d\u5411\u6a21\u5f0f\u81ea\u52a8\u5fae\u5206\u5bc6\u5207\u76f8\u5173\u3002 \u5728\u5bf9\u5076\u6570\u65b9\u6cd5\u4e2d\uff0c\u5b9e\u6570\u503c\u88ab\u8f6c\u6362\u4e3a\u539f\u59cb\u503c\u548c\u51fd\u6570\u5728\u8be5\u503c\u5904\u7684\u5bfc\u6570\u5bf9\uff08\u79f0\u4e3a\u201c\u5bf9\u5076\u6570\u201d\uff09\u3002 \u7136\u540e\u63d0\u5347\u51fd\u6570\u4e2d\u7684\u6240\u6709\u64cd\u4f5c\u4ee5\u5bf9\u53cc\u6570\u8fdb\u884c\u64cd\u4f5c\u3002</p> <p>\u6211\u4eec\u4e0d\u662f\u50cf\u6b63\u5411\u6a21\u5f0f\u90a3\u6837\u5c06\u6bcf\u4e2a\u503c\u4e0e\u5176\u504f\u5bfc\u6570\u914d\u5bf9\uff0c\u800c\u662f\u5c06\u6bcf\u4e2a\u5b9e\u6570\u503c\u4e0e real \u7c7b\u578b\u7684\u5f15\u7528\u914d\u5bf9\uff0c\u8868\u793a\u53cd\u5411\u6a21\u5f0f\u504f\u5bfc\u6570\u3002 \u5b9e\u6570\u7684\u9006\u6a21\u504f\u5bfc\u6570\u662f\u5b9e\u6570\u76f8\u5bf9\u4e8e\u8868\u793a\u51fd\u6570\u6700\u7ec8\u7ed3\u679c\u7684\u53d8\u91cf\u7684\u5bfc\u6570 [26]\u3002 \u6b64\u5916\uff0c\u5bf9\u4e8e\u6211\u4eec\u6267\u884c\u7684\u6bcf\u4e2a\u53cd\u5411\u6a21\u5f0f AD \u8f6c\u6362\uff0c\u6211\u4eec\u4ece\u4e00\u4e2a\u5355\u5143\u5230\u53e6\u4e00\u4e2a\u5355\u5143\u8fd4\u56de\u5bf9\u51fd\u6570\u7684\u5f15\u7528\uff0c\u79f0\u4e3a\u201c\u53cd\u5411\u4f20\u64ad\u5668\u201d\u3002 \u5bf9\u4e8e\u4e4b\u524d\u751f\u6210\u7684\u6bcf\u4e2a\u5b9e\u6570\uff0c\u53cd\u5411\u4f20\u64ad\u5668\u90fd\u4f1a\u6839\u636e\u94fe\u5f0f\u6cd5\u5219\u8fdb\u884c\u66f4\u65b0\uff0c\u4ee5\u83b7\u53d6\u5176\u504f\u5bfc\u6570\u5e76\u901a\u8fc7\u5f15\u7528\u5c06\u5176\u5411\u4e0a\u6e38\u4f20\u9012\u3002 \u7136\u540e\u53cd\u5411\u4f20\u64ad\u5668\u8c03\u7528\u5b83\u81ea\u5df1\u7684\u65e7\u7248\u672c\uff0c\u4ece\u800c\u5f62\u6210\u4e00\u4e2a\u95ed\u5305\u94fe\u6765\u66f4\u65b0\u6bcf\u4e2a\u504f\u5bfc\u6570\u3002 \u6709\u5173\u66f4\u8be6\u7ec6\u7684\u89e3\u91ca\uff0c\u8bf7\u53c2\u89c1 [29]\u3002</p> <p>\u6211\u4eec\u7528\u8fd4\u56de\u539f\u59cb\u503c\u548c\u96f6\u521d\u59cb\u5316\u5f15\u7528\u7684\u8f6c\u6362\u64cd\u4f5c\u66ff\u6362\u5b9e\u6570\u4e0a\u7684\u6bcf\u4e2a\u64cd\u4f5c\uff0c\u7136\u540e\u66f4\u65b0\u53cd\u5411\u4f20\u64ad\u5668\u4ee5\u6e05\u9664\u68af\u5ea6\u53c2\u8003\uff0c\u5411\u524d\u4f20\u64ad\u68af\u5ea6\u53c2\u8003\uff0c\u5e76\u8c03\u7528\u65e7\u7684\u53cd\u5411\u4f20\u64ad\u5668\u3002 \u7528\u66f4\u5177\u4f53\u7684 AD \u672f\u8bed\u6765\u8868\u8fbe\u5b83\uff0cWengert \u5217\u8868\u662f\u5728\u521b\u5efa\u65b0\u5b9e\u6570\u65f6\u52a8\u6001\u6784\u5efa\u7684\u3002 Wengert \u5217\u8868\u8868\u793a\u4e3a\u521b\u5efa\u53cd\u5411\u4f20\u64ad\u5668\u7684\u95ed\u5305\u5217\u8868\uff0c\u66f4\u65b0\u5217\u8868\u7684\u64cd\u4f5c\u4e0e\u5217\u8868\u6346\u7ed1\u5728\u4e00\u8d77\u3002</p> <p>\u5bf9\u4e8e\u6bcf\u4e2a\u6cdb\u578b\u64cd\u4f5c\uff0c\u5305\u62ec\u63a7\u5236\u6d41\u548c\u9ad8\u9636\u51fd\u6570\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8f6c\u6362\u5185\u90e8\u8868\u8fbe\u5f0f\u5e76\u63d0\u5347\u7c7b\u578b\u4ee5\u9002\u5e94\u65b0\u8868\u8fbe\u5f0f\u3002 \u8fd9\u4e0e\u4f20\u7edf\u53cc\u6570\u65b9\u6cd5\u4e2d\u6240\u505a\u7684\u76f8\u540c\u3002</p> <p>\u6b64\u5916\uff0c\u6211\u4eec\u4f7f\u7528\u68af\u5ea6\u8282\u70b9 (Grad expr) \u6269\u5c55\u8bed\u6cd5\u3002 \u5728\u68af\u5ea6\u8282\u70b9\u4e2d\uff0cexpr \u5e94\u8be5\u662f\u5b9e\u6570\u4e0e\u5b9e\u6570\u7684\u4e58\u79ef\u7684\u51fd\u6570\u3002 \u8f6c\u6362\u540e\u7684\u8868\u8fbe\u5f0f\u662f\u4e00\u4e2a\u65b0\u51fd\u6570\uff0c\u5b83\u8ba1\u7b97\u4e0e\u6240\u6709\u504f\u5bfc\u6570\u6346\u7ed1\u5728\u4e00\u8d77\u7684\u539f\u59cb\u51fd\u6570\u7684\u7ed3\u679c\u3002 \u8be5\u8282\u70b9\u662f\u901a\u8fc7\u6211\u4eec\u5b9e\u73b0\u53cd\u5411\u6a21\u5f0f\u81ea\u52a8\u5fae\u5206\u6765\u8f6c\u6362\u5185\u90e8 AST \u6765\u5b9e\u73b0\u7684\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u5b9e\u578b\u53c2\u6570\uff0c\u6211\u4eec\u5c06\u539f\u59cb\u53c2\u6570\u4e0e\u65b0\u7684\u96f6\u521d\u59cb\u5316\u5f15\u7528\u6346\u7ed1\u5728\u4e00\u8d77\u4f20\u9012\u7ed9\u8f6c\u6362\u540e\u7684\u51fd\u6570\u3002 \u6211\u4eec\u8c03\u7528\u53cd\u5411\u4f20\u64ad\u5668\uff0c\u63d0\u53d6\u4f20\u9012\u7684\u5f15\u7528\u4e2d\u7684\u503c\uff0c\u6e05\u9664\u5f15\u7528\uff0c\u5e76\u5c06\u63d0\u53d6\u7684\u503c\u8fd4\u56de\u5230\u5177\u6709\u539f\u59cb\u7ed3\u679c\u7684\u4ea7\u54c1\u4e2d\u3002</p> <p>\u6b64\u8f6c\u6362\u8981\u6c42\u6211\u4eec\u8f6c\u6362\u4f20\u9012\u7684\u51fd\u6570\u5185\u7684\u6bcf\u4e2a\u503c\uff0c\u56e0\u6b64\u8be5\u51fd\u6570\u4e0d\u5f97\u5305\u542b\u81ea\u7531\u53d8\u91cf\u3002 \uff08\u8fd9\u4e2a\u9650\u5236\u603b\u662f\u53ef\u4ee5\u901a\u8fc7 lambda \u63d0\u5347\u6765\u89c4\u907f\u3002\uff09\u7ed9\u5b9a\u4e00\u4e2a\u6ca1\u6709\u81ea\u7531\u53d8\u91cf\u7684\u4e2d\u7ee7\u7a0b\u5e8f\uff0c\u8f6c\u6362\u603b\u662f\u4ea7\u751f\u4e00\u4e2a\u6709\u6548\u7684\u4e2d\u7ee7\u7a0b\u5e8f\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u5177\u6709\u95ed\u5305\u5c5e\u6027\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u9ad8\u9636\u53cd\u5411\u6a21\u5f0f\uff0c\u5373\u4f7f\u5728\u5305\u542b\u95ed\u5305\u7684\u7a0b\u5e8f\u4e2d\u4e5f\u662f\u5982\u6b64\u3002 \u6211\u4eec\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5\u800c\u4e0d\u662f [29] \u4e2d\u7684\u65b9\u6cd5\uff0c\u539f\u56e0\u6709\u4ee5\u4e0b\u4e09\u4e2a\uff1a</p> <ol> <li>\u7b80\u5355\u6027\uff1aPearlmutter \u548c Siskind \u7684\u65b9\u6cd5\u9700\u8981\u5bf9 AST \u548c\u95ed\u5305\u8f6c\u6362\u8fdb\u884c\u53cd\u5c04\uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c\u6211\u4eec\u8981\u9075\u5faa [29]\uff0c\u6211\u4eec\u5c06\u9700\u8981\u7528\u6211\u4eec\u81ea\u5df1\u7684\u8bed\u8a00\u5b9e\u73b0\u53cd\u5c04\u3001\u4ee3\u6570\u6570\u636e\u7c7b\u578b\u548c\u95ed\u5305\u8f6c\u6362\u3002</li> <li>\u7c7b\u578b\u5316\uff1a\u6b64\u5916\uff0c[29] \u4e2d\u751f\u6210\u7684\u53cd\u5411\u4f20\u64ad\u5668\u5177\u6709\u4f9d\u8d56\u4e8e\u95ed\u5305\u5185\u81ea\u7531\u53d8\u91cf\u7684\u7c7b\u578b\u3002 \u8fd9\u610f\u5473\u7740\u53cd\u5411\u4f20\u64ad\u5668\u7684\u7c7b\u578b\u662f\u52a8\u6001\u7684\uff0c\u8fd9\u4f1a\u4f7f\u6211\u4eec\u7684\u7c7b\u578b\u7cfb\u7edf\u590d\u6742\u5316\u3002 3.\u6548\u7387\uff1a\u53cd\u5c04\u548c\u904d\u5386AST\u5e76\u4e0d\u5feb\u3002 \u867d\u7136 Pearlmutter \u548c Siskind \u63d0\u8bae\u4f7f\u7528\u90e8\u5206\u8bc4\u4f30\u6765\u6d88\u9664\u8fd9\u79cd\u5f00\u9500\uff0c\u4f46\u5b83\u5f15\u5165\u4e86\u53e6\u4e00\u5c42\u590d\u6742\u6027\u3002</li> </ol> <p>\u76ee\u524d\uff0c\u6211\u4eec\u4ec5\u901a\u8fc7\u516c\u5f00 Grad \u64cd\u4f5c\u6765\u4fdd\u6301 Relay \u7684 purity \u3002 \u7528\u6237\u4ee3\u7801\u6c38\u8fdc\u4e0d\u80fd\u4e0e\u4e0a\u8ff0\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u5f15\u7528\u8fdb\u884c\u4ea4\u4e92\uff1b \u8be5\u8fc7\u7a0b\u5b8c\u5168\u62bd\u8c61\u6389\u5f15\u7528\u5e76\u4ec5\u8fd4\u56de\u7ed3\u679c\u503c\u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5c06\u8f6c\u6362\u751f\u6210\u7684\u4ee3\u7801\u8f93\u5165\u4e3a lazy functional state threads \uff08monads\uff09\u6765\u4f7f\u8f6c\u6362\u4ea7\u751f\u7684\u4ee3\u7801\u53d8\u5f97pure\uff0c \u5982 [22] \u4e2d\u6240\u793a\u3002</p> <p>Relay \u4e2d\u81ea\u52a8\u5fae\u5206\u7684\u5b9e\u73b0\u5305\u62ec 449 \u884c C++\uff0c\u800c C++ \u540e\u7aef\u603b\u5171\u5927\u7ea6 10,000 \u884c\u3002</p>"},{"location":"mlc/tvm-relay.html#43-type-system","title":"4.3. Type System","text":"<p>\u6211\u4eec\u7684\u7c7b\u578b\u7cfb\u7edf\u662f\u57fa\u4e8e\u4f5c\u8005\u4e4b\u524d\u4f7f\u7528\u548c\u5b9e\u73b0 dependent type theory \u7684\u7ecf\u9a8c\u3002 \u53d7\u5230\u4f7f\u7528 small core languages \u7684\u7c7b\u578b\u7cfb\u7edf\u8bbe\u8ba1\u7684\u542f\u53d1\uff0c\u6211\u4eec\u4e00\u76f4\u4fdd\u6301\u5c0f\u578b\u8bed\u8a00 [12\u300118]\u3002</p> <p>\u6211\u4eec\u7684\u7c7b\u578b\u7cfb\u7edf\u5141\u8bb8\u5f62\u72b6\u4f9d\u8d56\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u5141\u8bb8\u7c7b\u578b\u5728\u53ef\u4ee5\u51fa\u73b0\u5728\u8868\u8fbe\u5f0f\u548c\u7c7b\u578b\u4e2d\u7684\u5f62\u72b6\u4e0a\u662f\u591a\u6001\u7684\u3002 \u8fd9\u79cd\u8bbe\u8ba1\u5141\u8bb8\u6211\u4eec\u5728\u7f16\u8bd1\u65f6\u6355\u83b7\u91cd\u8981\u7684\u5c5e\u6027\uff0c\u5c3d\u7ba1\u5b83\u6446\u8131\u4e86\u4f20\u7edf\u4f9d\u8d56\u7c7b\u578b\u7cfb\u7edf\u7684\u590d\u6742\u6027\u3002 \u91cd\u8981\u7684\u662f\uff0c\u6211\u4eec\u6709\u79cd\u7c7b\u89c4\u5219\u5f3a\u5236\u5f62\u72b6\u548c\u57fa\u672c\u7c7b\u578b\u90fd\u4e0e\u503c\u7c7b\u578b\u4e0d\u540c\u2014\u2014\u5373\u5f20\u91cf\u3001\u4e58\u79ef\u548c\u7bad\u5934\u7c7b\u578b\u3002</p> <p>\u5728\u8fd9\u4e2a\u8303\u4f8b\u4e2d\uff0c\u77e5\u9053\u6240\u6709\u503c\u90fd\u662f\u5f20\u91cf\u5141\u8bb8\u7f16\u8bd1\u5668\u7f16\u5199\u8005\u4ee5\u7edf\u4e00\u7684\u65b9\u5f0f\u8bbe\u8ba1\u548c\u5b9e\u73b0\u5bf9 AST \u7684\u4f18\u5316\u3002 \u4f8b\u5982\uff0c\u5982\u679c Relay \u7684\u7528\u6237\u60f3\u8981\u7f16\u5199\u4e00\u4e2a\u5c06\u8ba1\u7b97\u63d0\u5347\u4e00\u4e2a\u7ef4\u5ea6\u7684\u4f18\u5316\uff0c\u4ed6\u4eec\u53ef\u4ee5\u7edf\u4e00\u6dfb\u52a0\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u800c\u65e0\u9700\u5904\u7406\u6807\u91cf\u60c5\u51b5\u3002 \u8fd9\u5bf9\u4e8e\u66f4\u6539\u7ef4\u5ea6\u7684\u4f18\u5316\uff08\u4f8b\u5982\uff0c\u81ea\u52a8\u6279\u5904\u7406\u3001\u7a7a\u95f4\u6253\u5305\u6216\u5e03\u5c40\u66f4\u6539\uff09\u975e\u5e38\u6709\u7528\u3002 \u6211\u4eec\u5728 5 \u4e2d\u8ba8\u8bba\u4e86\u5bf9\u7c7b\u578b\u7cfb\u7edf\u7684\u53ef\u80fd\u6269\u5c55\u3002</p> <p>\u5c06\u5f20\u91cf\u5f62\u72b6\u7eb3\u5165\u7c7b\u578b\u7cfb\u7edf\u800c\u4e0d\u662f\u5c06\u5176\u4f5c\u4e3a\u5355\u72ec\u7684 \"\u5206\u6790\" \u7684\u51b3\u5b9a\u5141\u8bb8\u5728\u4f18\u5316\u7ba1\u9053\u7684\u4efb\u4f55\u9636\u6bb5\u8f7b\u677e\u5b58\u50a8\u548c\u63a8\u7406\u5f62\u72b6\u4fe1\u606f\uff0c\u5e76\u4f7f\u7528\u6237\u66f4\u5bb9\u6613\u660e\u786e \u5f20\u91cf\u5f62\u72b6\u53ca\u5176\u9884\u671f\u6548\u679c\u3002</p>"},{"location":"mlc/tvm-relay.html#5-future-work","title":"5. Future Work","text":""},{"location":"mlc/tvm-relay.html#51-runtime-system","title":"5.1. Runtime System","text":"<p>\u6211\u4eec\u5f53\u524d\u7684 evaluator \u662f\u7528\u4e8e\u5fae\u5206\u6d4b\u8bd5\u548c\u5b9e\u9a8c\u7684\u53c2\u8003\u5b9e\u73b0\u3002 \u8be5 evaluator \u4e0d\u8db3\u4ee5\u8fdb\u884c\u5b9e\u9a8c\u8bc4\u4f30\uff0c\u6211\u4eec\u5f53\u524d\u5de5\u4f5c\u7684\u4e3b\u8981\u65b9\u5411\u662f\u5176\u9ad8\u6548\u7684\u5bf9\u5e94\u90e8\u5206\u3002 \u8fd9\u4e2a\u6c42\u503c\u5668\u7684\u4e00\u4e2a\u6709\u8da3\u65b9\u9762\u662f\u5b83\u4f7f\u7528 TVM \u4f5c\u4e3a JIT \u6765\u751f\u6210\u7c7b\u578b\u4e13\u7528\u7684\u5f20\u91cf\u8fd0\u7b97\u7b26\u3002 \u4f18\u5316\u7684\u8fd0\u884c\u65f6\u7cfb\u7edf\uff0c\u65e8\u5728\u4f5c\u4e3a\u90e8\u7f72\u548c\u6267\u884c Relay \u7a0b\u5e8f\u7684\u4e3b\u8981\u65b9\u5f0f\uff0c\u4ecd\u5728\u5927\u529b\u5f00\u53d1\u4e2d\u3002</p> <p>\u4f20\u7edf\u8bed\u8a00\u5df2\u7ecf\u9488\u5bf9\u975e\u5e38\u5177\u4f53\u7684\u6267\u884c\u914d\u7f6e\u6587\u4ef6\u4f18\u5316\u4e86\u5b83\u4eec\u7684\u6267\u884c\u5f15\u64ce\u7684\u865a\u62df\u673a\uff0c\u5177\u6709\u957f\u5bff\u547d\u7684\u5806\u5206\u914d\u548c\u76f8\u5bf9\u8f83\u5c0f\u7684\u5806\u6808\u503c\u3002 DL \u5de5\u4f5c\u8d1f\u8f7d\u5177\u6709\u622a\u7136\u4e0d\u540c\u7684\u6267\u884c\u914d\u7f6e\u6587\u4ef6\uff0c\u901a\u5e38\u4e0d\u5728\u4f20\u7edf CPU \u4e0a\u6267\u884c\uff0c\u800c\u662f\u5728 GPU \u548c\u52a0\u901f\u5668\u7b49\u4e13\u7528\u8bbe\u5907\u4e0a\u6267\u884c\u3002</p> <p>\u5173\u4e8e\u503c\u7684\u751f\u547d\u5468\u671f\u4ee5\u53ca\u5982\u4f55\u5904\u7406\u5c31\u5730\u66f4\u65b0\u3001\u5206\u914d\u3001\u56de\u6536\u7b49\uff0c\u5b58\u5728\u8bb8\u591a\u95ee\u9898\u3002 \u8fd0\u884c\u65f6\u7cfb\u7edf\u9700\u8981\u51fd\u6570\u8c03\u7528\u5806\u6808\u7684\u65b0\u8868\u793a\u3001\u56f4\u7ed5\u4f5c\u7528\u57df\u7684\u65b0\u5206\u914d\u6a21\u5f0f\u4ee5\u53ca\u8eab\u4efd\u548c\u5206\u914d\u7684\u4e0d\u540c\u6982\u5ff5\u3002</p>"},{"location":"mlc/tvm-relay.html#52-optimizations","title":"5.2. Optimizations","text":"<p>Relay \u65e8\u5728\u63d0\u4f9b\u6df1\u5ea6\u5b66\u4e60\u7a0b\u5e8f\u7684\u5168\u7a0b\u5e8f\u8868\u793a\uff0c\u4f7f\u6211\u4eec\u80fd\u591f\u89e3\u51b3\u4e3b\u673a\u5207\u7247 [3]\u3001\u52a8\u6001\u7f51\u7edc\u3001\u5e03\u5c40\u66f4\u6539\u3001\u5ef6\u8fdf\u9690\u85cf\u4ee5\u53ca\u5e76\u884c\u548c\u5206\u5e03\u5f0f\u8c03\u5ea6\u7b49\u95ee\u9898\u3002 \u6211\u4eec\u5728\u8bbe\u8ba1 Relay \u65f6\u8003\u8651\u5230\u4e86\u8fd9\u4e9b\u76ee\u6807\uff0c\u5e76\u5e2e\u52a9\u89e3\u51b3 [9] \u4e2d\u786e\u5b9a\u7684\u5173\u952e\u4f18\u5316\u3002</p> <p>\u6211\u4eec\u8bbe\u60f3\u80fd\u591f\u5728\u4f18\u5316\u901a\u8fc7 Relay \u7a0b\u5e8f\u65f6\u6dfb\u52a0\u5176\u4ed6\u7cfb\u7edf\u7684\u529f\u80fd\uff0c\u4f8b\u5982 DyNet [25] \u4e2d\u7684 auto-batching \u3001\u5728\u5f53\u524d NNVM \u6846\u67b6\u4e2d\u5b8c\u6210\u7684\u8fd0\u7b97\u7b26\u878d\u5408\uff0c \u6216\u66f4\u6539\u5f20\u91cf\u7684\u5e03\u5c40\u3002 \u81ea\u52a8\u6279\u5904\u7406\u4f9d\u8d56\u4e8e\u4e86\u89e3\u672a\u6279\u5904\u7406\u64cd\u4f5c\u548c\u6279\u5904\u7406\u64cd\u4f5c\u4e4b\u95f4\u7684\u4e00\u7ec4\u8f6c\u6362\u7684\u80fd\u529b\uff0c\u5728\u6b63\u786e\u7684\u4f4d\u7f6e\u63d2\u5165\u9002\u5f53\u7684\u805a\u5408\u6307\u4ee4\uff0c\u4f8b\u5982\u6c42\u548c\u3002 \u7ed9\u5b9a\u7c7b\u578b\u4fe1\u606f\uff0c\u53ef\u4ee5\u4f7f\u7528\u989d\u5916\u7684\u6279\u6b21\u7ef4\u5ea6\u6269\u5c55\u67d0\u4e9b\u7a0b\u5e8f\uff0c\u63d2\u5165\u9002\u5f53\u7684\u8fd0\u7b97\u7b26\u4ee5\u4fdd\u7559\u7c7b\u578b\u548c\u8bed\u4e49\u3002</p>"},{"location":"mlc/tvm-relay.html#53-software-engineering","title":"5.3. Software Engineering","text":"<p>Relay \u65e2\u652f\u6301\u5355\u6b65\u8c03\u8bd5\u5668\uff0c\u4e5f\u652f\u6301\u5c06 Relay \u7a0b\u5e8f\u7f16\u8bd1\u4e3a Python \u4ee5\u9488\u5bf9\u5176\u4ed6\u673a\u5668\u5b66\u4e60\u6846\u67b6\u8fdb\u884c\u8c03\u8bd5\u548c\u5dee\u5f02\u6d4b\u8bd5\u7684\u80fd\u529b\u3002 \u6211\u4eec\u4f7f\u7528\u5b83\u6765\u6d4b\u8bd5\u81ea\u52a8\u5fae\u5206\uff0c\u65b9\u6cd5\u662f\u5c06 Relay \u7a0b\u5e8f\u7f16\u8bd1\u4e3a Python\uff0c\u4f7f\u7528\u201cautograd\u201dPython \u5e93\u8ba1\u7b97\u68af\u5ea6\uff0c\u7136\u540e\u4f7f\u7528property-based testing [10] \u68c0\u67e5\u68af\u5ea6\u7684\u7ed3\u679c\u3002</p>"},{"location":"mlc/tvm-relay.html#54-numeric-accuracy","title":"5.4. Numeric Accuracy","text":"<p>ML \u5de5\u4f5c\u8d1f\u8f7d\u5df2\u88ab\u8bc1\u660e\u5bf9\u7cbe\u5ea6\u4e0d\u654f\u611f\u3002 \u9274\u4e8e\u8fd9\u79cd\u5bf9\u4f4e\u7cbe\u5ea6\u7b97\u672f\u7684\u5bb9\u5fcd\u5ea6\uff0c\u6211\u4eec\u6e34\u671b\u91c7\u7528\u6700\u65b0\u7684\u6280\u672f\u6765\u81ea\u52a8\u91cd\u5199 numerical code \u6765\u52a0\u901f\u8ba1\u7b97\u3002 \u672a\u6765\u6211\u4eec\u5e0c\u671b\u8fdb\u4e00\u6b65\u6269\u5c55\u8fd9\u4e9b\u5de5\u5177\u5e76\u9488\u5bf9\u4e13\u95e8\u7684\u6570\u503c\u8868\u793a\uff0c\u5305\u62ec\u6df7\u5408\u5bbd\u5ea6\u548c\u5b9a\u70b9\u8ba1\u7b97\uff1b \u963b\u585e\u6d6e\u70b9\uff1b \u975e\u6807\u51c6\u7684\u3001\u7279\u5b9a\u4e8e\u52a0\u901f\u5668\u7684\u6570\u5b57\uff1b \u4ee5\u53ca\u65b0\u5174\u7684\u66ff\u4ee3\u6807\u51c6\uff08\u4f8b\u5982\uff0c\u5173\u4e8e unums \u548c posits [16] \u7684\u5de5\u4f5c\uff09\u3002</p>"},{"location":"mlc/tvm-relay.html#55-type-system-extensions","title":"5.5. Type System Extensions","text":"<p>\u4e00\u79cd\u8ba1\u5212\u4e2d\u7684\u7c7b\u578b\u7cfb\u7edf\u6269\u5c55\u662f\u5904\u7406\u5177\u6709\u90e8\u5206\u6307\u5b9a\u5f62\u72b6\u7684\u5f20\u91cf\uff0c\u5373\u67d0\u4e9b\u7ef4\u5ea6\u672a\u77e5\u7684\u5f62\u72b6\u3002 \u8fd9\u5bf9\u4e8e\u8bb8\u591a NLP \u5e94\u7528\u7a0b\u5e8f\u5f88\u6709\u7528\uff0c\u5728\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u6570\u636e\u53ef\u80fd\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u7ef4\u5ea6\u4e0a\u5448\u952f\u9f7f\u72b6\uff0c\u5e76\u4e14\u65e0\u6cd5\u7528\u56fa\u5b9a\u5f62\u72b6\u8868\u793a\u3002</p> <p>\u53e6\u4e00\u4e2a\u6269\u5c55\u662f\u6269\u5c55\u7c7b\u578b\u7cfb\u7edf\u4ee5\u8ddf\u8e2a  individual tensors\u2019 data layouts\u3002 Motivation\u662f\u6211\u4eec\u5728\u5199change-of-layout optimizations \u65f6\u9047\u5230\u7684\u56f0\u96be\uff0c\u8fd9\u4e24\u8005\u90fd\u5fc5\u987b\u63a8\u65ad\u73b0\u6709\u5e03\u5c40\u5e76\u786e\u4fdd\u6240\u6709\u7528\u9014\u90fd\u5df2\u8f6c\u6362\u3002 \u8fd9\u4e9b\u7c7b\u578b\u7684\u9519\u8bef\u5bfc\u81f4\u96be\u4ee5\u8c03\u8bd5\u7684\u4ee3\u7801\u6084\u65e0\u58f0\u606f\u5730\u4ea7\u751f\u4e0d\u6b63\u786e\u7684\u7ed3\u679c\u6216\u5d29\u6e83\u3002 \u901a\u8fc7\u4f7f\u8fd9\u4e9b\u5e03\u5c40\u66f4\u6539\u64cd\u4f5c\u660e\u786e\u5316\uff0c\u53ef\u4ee5\u56f4\u7ed5\u503c\u7684\u81ea\u52a8\u88c5\u7bb1\u548c\u62c6\u7bb1\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u6267\u884c\u4f18\u5316\u3002</p> <p>\u4e00\u4e2a\u66f4\u91cd\u8981\u7684\u6269\u5c55\u662f\u96c6\u6210\u4e00\u4e2a effect system\uff0c\u4ee5\u5141\u8bb8\u6211\u4eec\u5206\u79bb\u64cd\u4f5c\u4e0d\u540c\u8d44\u6e90\u7684\u4ee3\u7801\uff0c\u4f8b\u5982\u968f\u673a\u6570\u751f\u6210\u5668\u3001\u72b6\u6001\u3001I/O \u7b49\u3002 \u8fd9\u79cd\u53d8\u5316\u66f4\u4e3a\u6fc0\u8fdb\uff0c\u76ee\u524d\u4f5c\u4e3a\u5fc5\u987b\u7531\u7f16\u8bd1\u5668\u6267\u884c\u7684\u5206\u6790\u800c\u4fdd\u7559\u3002</p>"},{"location":"mlc/tvm-relay.html#6-conclusion","title":"6. Conclusion","text":"<p>\u6211\u4eec\u63cf\u8ff0\u4e86\u4e00\u4e2a in-progress implementation of Relay\uff1a \u4e00\u79cd\u7528\u4e8e\u9ad8\u6548\u7f16\u8bd1\u548c\u6267\u884c\u673a\u5668\u5b66\u4e60\u6a21\u578b\u7684\u65b0 IR\u3002 \u6211\u4eec\u7684\u521d\u59cb\u539f\u578b\u5b9e\u73b0\u4e86\u6211\u4eec\u5173\u4e8e\u7814\u7a76\u4eba\u5458\u5982\u4f55\u5728 Relay \u4e2d\u7f16\u5199\u6a21\u578b\u7684\u613f\u666f\uff0c\u5177\u6709\u539f\u59cb Python \u7684\u4eba\u4f53\u5de5\u7a0b\u5b66\u4ee5\u53ca PyTorch \u548c TensorFlow \u7b49\u7cfb\u7edf\u6240\u4eab\u6709\u7684\u4f18\u52bf\u3002 Relay \u7684\u5b9e\u73b0\u4ecd\u5728\u4e0d\u65ad\u53d8\u5316\uff0c\u6211\u4eec\u4e13\u6ce8\u4e8e\u63a2\u7d22\u7b2c 5 \u8282\u4e2d\u7684\u4e3b\u9898\u3002\u6211\u4eec\u76f8\u4fe1 Relay \u662f TVM \u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u5b83\u5c06\u4fc3\u8fdb\u5f53\u524d\u548c\u672a\u6765\u7684\u7814\u7a76\u5de5\u4f5c\u3002</p>"},{"location":"mlc/tvm-relay.html#type-system","title":"type system","text":"<p>Relay\u7684\u7c7b\u578b\u7cfb\u7edf\u5305\u62ec\u4ee5\u4e0b\u4e09\u4e2a\u5b50\u7c7b:</p> <ul> <li><code>PrimType</code>: type of primitive type values used in the low-level IR.</li> <li><code>FuncType</code>: type of a function.</li> <li><code>TensorType</code>: type of certain Tensor values in the expression.</li> </ul> <pre><code>class TypeNode : public Object {\npublic:\n// \u8bb0\u5f55\u6e90\u7801\u4f4d\u7f6e\u4fe1\u606f for debug\nmutable Span span;\n\nstatic constexpr const char* _type_key = \"Type\";\nstatic constexpr const uint32_t _type_child_slots = 14;\nTVM_DECLARE_BASE_OBJECT_INFO(TypeNode, Object);\n};\n</code></pre> <p>PrimType \u76f4\u63a5\u5bf9\u5e94\u5230Low-level IR\u7684\u57fa\u7840\u6570\u636e\u7c7b\u578b <pre><code>class PrimTypeNode : public TypeNode {\npublic:\nruntime::DataType dtype;\n// ...\n};\n</code></pre></p>"},{"location":"mlc/tvm-relay.html#expr","title":"\u8868\u8fbe\u5f0f Expr","text":""},{"location":"mlc/tvm-relay.html#let-bindings","title":"Let-Bindings","text":"<p>\u89c1 TVM: type system</p>"},{"location":"mlc/tvm-relay.html#adt","title":"ADT","text":"<p>\u5728 TVM \u4e2d\uff0c \u4f7f\u7528 ADT \u5b9a\u4e49\u4f5c\u4e3a\u63cf\u8ff0\u7ed3\u6784\u5316\u6570\u636e\u7684\u7edf\u4e00\u7c7b\uff0c\u5176\u4e2dADT\u76f8\u5173\u7684\u5b9a\u4e49\u4f4d\u4e8e<code>include/tvm/ir/adt.h</code> \u548c <code>include/tvm/relay/adt.h</code></p> <p>Algebraic data types (ADTs) \u7684\u6982\u5ff5\u6765\u81ea\u51fd\u6570\u5f0f\u7f16\u7a0b\uff0c\u7b80\u5355\u6765\u8bf4\uff0c\u4e00\u4e2aADT\u5b9a\u4e49\u542b\u6709\u591a\u4e2a\u6784\u9020\u51fd\u6570( <code>Constructor</code> )\uff0c\u6bcf\u4e2a\u6784\u9020\u51fd\u6570\u6709\u4e0d\u540c\u7684\u53c2\u6570\u7c7b\u578b\uff0c\u6bcf\u4e2aADT\u5b9e\u4f8b\u6784\u9020\u51fa\u6765\u540e\u53ea\u662f\u7b80\u5355\u5730\u5305\u542b\u5176\u6784\u9020\u65f6\u7684\u6240\u6709\u53c2\u6570\u503c\u3002</p> <p>\u4e0b\u9762\u662f\u5728Relay\u4e2d\u5b9a\u4e49\u4e00\u4e2aADT\u7684\u5177\u4f53\\(x\\)\u4f8b\u5b50:</p> <pre><code>g_type_var = relay.GlobalTypeVar(\"Either\")\ntype_var_a = relay.TypeVar(\"A\")\ntype_var_b = relay.TypeVar(\"B\")\nprog = relay.TypeData(\n    g_type_var,\n    [type_var_a, type_var_b],\n    [\n        relay.Constructor(\"Left\", [type_var_a], g_type_var),\n        relay.Constructor(\"Right\", [type_var_b], g_type_var),\n    ],\n)\nmod = tvm.IRModule()\nmod[glob_typ_var] = prog\n# we get ==&gt;\n\"\"\"\ntype Either[A, B] {\n  Left(A),\n  Right(B),\n}\n\"\"\"\n</code></pre> <p>\u5176\u4e2d\u7528\u4e8e\u8868\u793a\u4e00\u4e2a ADT \u7684\u6570\u636e\u7c7b\u578b\u662f <code>TypeData</code>\uff0c \u4e00\u4e2a TypeData \u5305\u542b:</p> <ol> <li>\u8be5 ADT \u7c7b\u578b\u7684\u540d\u79f0 (rust \u4e2d\u7684 <code>std::Result</code> )</li> <li>\u8be5 ADT \u7c7b\u578b\u6240\u63a5\u6536\u7684\u7c7b\u578b\u53c2\u6570\u5217\u8868 (rust <code>Result</code> \u5bf9\u5e94\u7684 <code>T</code>, <code>E</code>)</li> <li>\u8be5 ADT \u7c7b\u578b\u7684\u6784\u9020\u51fd\u6570\u5217\u8868 (rust <code>Result</code> \u5bf9\u5e94\u7684 <code>Ok()</code>, <code>Err()</code>)</li> </ol> <p>\u6211\u4eec\u53ef\u4ee5\u5411 ADT \u7684\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u4e2d\u4f20\u5165\u82e5\u5e72\u7c7b\u578b\u4f5c\u4e3a\u53c2\u6570\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b\uff1b <code>TypeData</code> \u5b9a\u4e49\u5982\u4e0b(\u4f4d\u4e8e<code>include/tvm/ir/adt.h</code>)\uff1a</p> <pre><code>class TypeDataNode : public TypeNode {\npublic:\nGlobalTypeVar header; // differently-named ADT-defs with same cons have different types\nArray&lt;TypeVar&gt; type_vars; // \u8be5 TypeData \u7684\u7c7b\u578b\u53c2\u6570\nArray&lt;Constructor&gt; constructors;  // \u8be5 TypeData \u7684\u6784\u9020\u51fd\u6570\nstatic constexpr const char* _type_key = \"relay.TypeData\";\nTVM_DECLARE_FINAL_OBJECT_INFO(TypeDataNode, TypeNode);\n};\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230 3 \u4e2a fileds \u5206\u522b\u5bf9\u5e94\u521a\u624d\u63d0\u5230\u7684\u4e00\u4e2a ADT \u76843\u90e8\u5206\u3002\u5176\u4e2d <code>Constructor</code> \u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>class ConstructorNode : public RelayExprNode {\npublic:\nString name_hint; // \u6784\u9020\u51fd\u6570\u7684\u540d\u5b57 (only a hint)\nArray&lt;Type&gt; inputs; // \u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u5217\u8868(\u6bcf\u4e2a\u53c2\u6570\u90fd\u662f\u4e00\u4e2a\u7c7b\u578b)\nGlobalTypeVar belong_to;  // \u8be5\u6784\u9020\u51fd\u6570\u5c06\u4f1a\u6784\u9020\u51fa\u54ea\u4e00\u79cd(\u7531\u4e00\u4e2aGlobalTypeVar\u6807\u8bc6\u7684)\u6570\u636e\u7c7b\u578b\nmutable int32_t tag = -1; // \u5728\u6784\u9020\u51fd\u6570\u8868\u4e2d\u7684index\uff0c \u5f53\u8be5type\u88ab\u6ce8\u518c\u7684\u65f6\u5019\u5c06\u88ab\u8bbe\u7f6e\nConstructorNode() {}\nstatic constexpr const char* _type_key = \"relay.Constructor\";\nTVM_DECLARE_FINAL_OBJECT_INFO(ConstructorNode, RelayExprNode);\n};\n</code></pre> <p>\u800c\u5728 Relay \u4e2d\u4f7f\u7528 ADT \u7684\u4f8b\u5b50\u5982\u4e0b\uff08\u4ee5\u4f7f\u7528\u521a\u624d\u5b9a\u4e49\u7684 <code>Either</code> \u4e3a\u4f8b\uff09</p> <pre><code>\n</code></pre>"},{"location":"mlc/tvm-tensorIR.html","title":"TVM-TensorIR","text":""},{"location":"mlc/tvm-tensorIR.html#_1","title":"(\u4e00)\u8bba\u6587","text":"<p>TensorIR: An Abstraction for Automatic Tensorized Program Optimization</p>"},{"location":"mlc/tvm-tensorIR.html#0","title":"0. \u6458\u8981","text":"<p>\u5728\u5404\u79cd\u8bbe\u5907\u4e0a\u90e8\u7f72\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u5df2\u7ecf\u6210\u4e3a\u4e00\u4e2a\u91cd\u8981\u7684\u8bdd\u9898\u3002 \u5404\u79cd\u5f20\u91cf\u8ba1\u7b97\u52a0\u901f\u5668\u4e3a\u5f20\u91cf\u8ba1\u7b97\u5e26\u6765\u4e86\u4e00\u7ec4\u591a\u6837\u5316\u7684\u52a0\u901f\u539f\u8bed\u3002 \u8fd9\u4e9b\u65b0\u7684\u52a0\u901f\u539f\u8bed\u4ee5\u53ca\u65b0\u5174\u7684\u673a\u5668\u5b66\u4e60\u6a21\u578b\u5e26\u6765\u4e86\u5de8\u5927\u7684\u5de5\u7a0b\u6311\u6218\u3002 \u672c\u6587\u4ecb\u7ecd TensorIR\uff0c\u4e00\u79cd\u65b0\u7684\u7f16\u8bd1\u5668\u62bd\u8c61\uff0c\u7528\u4e8e\u4f7f\u7528\u8fd9\u4e9b\u5f20\u91cf\u8ba1\u7b97\u539f\u8bed\u4f18\u5316\u7a0b\u5e8f\u3002 TensorIR \u5f52\u7eb3\u4e86\u73b0\u6709DLC\u4e2d\u4f7f\u7528\u7684\u5faa\u73af\u5d4c\u5957\u8868\u793a\uff0c\u5c06\u5f20\u91cf\u8ba1\u7b97\u4f5c\u4e3a\u4e00\u7b49\u516c\u6c11\u3002 \u5de5\u4f5c\u5728\u62bd\u8c61\u4e4b\u4e0a\u6784\u5efa\u4e86\u4e00\u4e2a\u7aef\u5230\u7aef\u6846\u67b6\uff0c\u4ee5\u81ea\u52a8\u4f18\u5316\u7ed9\u5b9a\u5f20\u91cf\u8ba1\u7b97\u539f\u8bed\u7684\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u3002 \u5b9e\u9a8c\u7ed3\u679c\u8868\u660e\uff0cTensorIR \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u786c\u4ef6\u540e\u7aef\uff0c\u53ef\u4ee5\u81ea\u52a8\u5e94\u7528\u5f20\u91cf\u8ba1\u7b97\u539f\u8bed\uff0c\u5e76\u63d0\u4f9b\u4e0e\u8de8\u5e73\u53f0\u7684\u6700\u5148\u8fdb\u7684\u624b\u52a8\u4f18\u5316\u7cfb\u7edf\u76f8\u5ab2\u7f8e\u7684\u6027\u80fd\u3002</p>"},{"location":"mlc/tvm-tensorIR.html#1-intro","title":"1. Intro","text":"<p>\u5728\u673a\u5668\u5b66\u4e60\u52a0\u901f\u76ee\u6807\u7684\u9a71\u52a8\u4e0b\uff0c\u73b0\u4ee3\u786c\u4ef6\u540e\u7aef\uff08\u4f8b\u5982\uff0cNvidia Tensor Core [31]\uff0cGoogle TPU [22]\uff09\u5f15\u5165\u4e86\u4e13\u95e8\u7684\u539f\u8bed\u6765\u52a0\u901f\u5f20\u91cf\u8ba1\u7b97\u3002 \u9886\u57df\u4e13\u5bb6\u4e5f\u5f00\u59cb\u5f00\u53d1\u5fae\u5185\u6838\u539f\u8bed(micro-kernel primitives)\uff0c\u5b83\u7cbe\u5fc3\u7ec4\u7ec7\u4e00\u7cfb\u5217\u9ad8\u5ea6\u4f18\u5316\u7684\u6307\u4ee4\u6765\u6267\u884c\u5b50\u8ba1\u7b97\uff0c\u4ee5\u52a0\u901f\u7279\u5b9a\u9886\u57df\u7684\u5f20\u91cf\u7b97\u5b50\u5e93\u3002 \u8fd9\u4e9b\u786c\u4ef6\u6307\u4ee4\u548c\u5fae\u5185\u6838\u539f\u8bed\u901a\u5e38\u5728\u591a\u7ef4\u5f20\u91cf\u533a\u57df\u4e0a\u8fd0\u884c\uff0c\u5e76\u6709\u6548\u5730\u6267\u884c \u591a\u7ef4load\u3001\u70b9\u79ef \u548c \u77e9\u9635\u4e58\u7b49\u5f20\u91cf\u8fd0\u7b97\uff08\u56fe 1\uff09\u3002 </p> <p>\u6587\u7ae0\u5c06\u8fd9\u4e9b\u5f20\u91cf\u8ba1\u7b97\u52a0\u901f\u5668\u751f\u6210\u7684\u6307\u4ee4\u79f0\u4e3a tensorized intrinsics \uff1b \u5c06\u5229\u7528tensorized intrinsics \u5bf9\u7a0b\u5e8f\u505a\u53d8\u6362\u7684\u8fc7\u7a0b\u79f0\u4e3a  tensorization\u3002 \u4e3a\u4e86\u5145\u5206\u5229\u7528\u8fd9\u4e9b\u786c\u4ef6\u540e\u7aef\uff0c\u73b0\u4ee3\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u9700\u8981\u4f18\u5316\u5305\u542b \u5206\u5c42\u5faa\u73af\u5d4c\u5957\u3001 multi-dimensional loads \u548c tensor intrinsics \u7684\u7a0b\u5e8f\u2014\u2014\u6587\u7ae0\u79f0\u8fd9\u4e2aproblem\u4e3a tensorized program optimization problem</p> <p>\u7591\u95ee</p> <p>\u6587\u7ae0\u4e2d\u63d0\u5230\u7684 \"micro-kernel primitives\"\u662f\u4ec0\u4e48\uff1f</p> <p>\u5f53\u524d\u7684\u5927\u591a\u6570\u5f20\u91cf\u7a0b\u5e8f\u90fd\u7531\u9886\u57df\u4e13\u5bb6\u4f18\u5316\uff0c\u4ed6\u4eec\u5c06 \u5f20\u91cf\u5316\u539f\u8bed \u4e0e \u591a\u7ef4\u5faa\u73af \u3001 \u7ebf\u7a0b\u6a21\u5f0f \u548c \u6570\u636e\u7f13\u5b58 \u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u4ee5\u5236\u4f5c\u4e13\u7528\u5185\u6838\u5e93\uff0c\u4f8b\u5982 Intel MKL-DNN [20]\u3001ARM Compute Library [3] \u548c NVIDIA cuDNN [11]\u3002 \u8fd9\u4e9b\u5e93\u968f\u540e\u88ab TensorFlow [1]\u3001PyTorch \u7b49\u673a\u5668\u5b66\u4e60\u6846\u67b6\u4f7f\u7528\u3002 \u7136\u800c\uff0c\u9700\u8981\u5de8\u5927\u7684\u5de5\u7a0b\u52aa\u529b\u6765\u652f\u6301\u4e0d\u65ad\u589e\u957f\u7684\u6a21\u578b\u548c\u540e\u7aef\u96c6\uff0c\u5e76\u4e14\u8fd9\u4e9b\u5e93\u9700\u8981\u8fed\u4ee3\u5468\u671f\u624d\u80fd\u9002\u5e94\u5feb\u901f\u53d8\u5316\u548c\u589e\u957f\u7684\u673a\u5668\u5b66\u4e60\u5e94\u7528\u7a0b\u5e8f\u3002</p> <p>\u672c\u6587\u4f7f\u7528\u81ea\u52a8\u7f16\u8bd1\u65b9\u6cd5\u89e3\u51b3 tensorized program optimization problem \u3002 \u5927\u591a\u6570\u8fc7\u53bb\u7684 DLC \u5de5\u4f5c [9, 43] \u9488\u5bf9\u7a0b\u5e8f\u4e2d\u591a\u5c42\u5faa\u73af\u505a\u81ea\u52a8\u5316\u641c\u7d22\u8c03\u4f18\uff0c\u4f46\u6ca1\u6709\u505a\u7a0b\u5e8f\u5f20\u91cf\u5316\u8fd9\u4ef6\u4e8b\u60c5\u3002 \u5c06 \u81ea\u52a8\u7a0b\u5e8f\u4f18\u5316 \u5f15\u5165tensorized programs\u5c06\u5145\u5206\u5229\u7528\u5f20\u91cf\u8ba1\u7b97\u52a0\u901f\u5668\u3002 \u6211\u4eec\u786e\u5b9a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\u7684\u4ee5\u4e0b\u4e3b\u8981\u6311\u6218\uff1a</p> <p>Abstraction for Tensorized Programs\u3002 \u8981\u4e3a\u5f20\u91cf\u5316\u7a0b\u5e8f\u6784\u5efa\u81ea\u52a8\u7f16\u8bd1\u5668\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u62bd\u8c61\uff0c\u5b83\u53ef\u4ee5\u5b9e\u7528\u5730\u6355\u83b7\u7ed9\u5b9a\u673a\u5668\u5b66\u4e60\u7b97\u5b50\u7684\u53ef\u80fd\u7b49\u6548\u5f20\u91cf\u5316\u8ba1\u7b97\u3002 </p> <ol> <li>\u8fd9\u5c42\u62bd\u8c61\u9700\u8981\u80fd\u591f \u8868\u793a\u4e0d\u540c\u786c\u4ef6\u540e\u7aef\u7684 \u591a\u7ef4\u8bbf\u5b58\u3001 \u7ebf\u7a0b\u5c42\u6b21\u7ed3\u6784 \u548c \u5f20\u91cf\u5316\u8ba1\u7b97\u539f\u8bed \u3002 </li> <li>\u62bd\u8c61\u8fd8\u9700\u8981\u5177\u6709\u8db3\u591f\u7684\u8868\u73b0\u529b\u6765\u8868\u793a ML \u7684\u5927\u591a\u6570\u7b97\u5b50\u3002</li> </ol> <p>Large Design Space of Possible Tensorized Program Optimizations\u3002 \u53e6\u4e00\u4e2a\u6311\u6218\u662f\u4e3a\u7ed9\u5b9a\u7684\u7b97\u5b50\u81ea\u52a8\u751f\u6210\u9ad8\u5ea6\u4f18\u5316\u7684 \u5f20\u91cf\u5316\u7a0b\u5e8f \u3002 DLC \u9700\u8981\u4f7f\u7528\u9886\u57df\u4e13\u5bb6\u53ef\u80fd\u4f7f\u7528\u7684 \u5305\u62ec loop tiling, threading, layout transformations \u7b49\u6280\u672f\u3002 \u91cd\u8981\u7684\u662f\uff0c\u8fd9\u4e9b\u53d8\u6362\u73b0\u5728\u9700\u8981\u7ed3\u5408\u5f20\u91cf\u8ba1\u7b97\u8fdb\u884c\uff0c\u4ece\u800c\u7ed9\u5206\u6790\u548c\u81ea\u52a8\u5316\u5e26\u6765\u989d\u5916\u7684\u590d\u6742\u6027\u3002 \u8fd9\u4e9b\u8f6c\u6362\u7684\u7ec4\u5408\u5f62\u6210\u4e86\u4e00\u4e2a\u5927\u7684\u641c\u7d22\u7a7a\u95f4\uff0c\u9700\u8981\u4e00\u79cd\u6709\u6548\u7684\u65b9\u6cd5\u6765\u4e3a\u7ed9\u5b9a\u7684\u641c\u7d22\u7a7a\u95f4\u627e\u5230\u4f18\u5316\u7684\u5f20\u91cf\u7a0b\u5e8f\u3002</p> <p>\u6587\u7ae0\u63d0\u51fa TensorIR\uff0can abstraction for automatic tensor program optimization \u6765\u89e3\u51b3\u4e0a\u8ff0\u6311\u6218\u3002 \u9996\u5148\u5f15\u5165\u4e86\u4e00\u4e2a\u540d\u4e3a <code>block</code> \u7684\u65b0\u7ed3\u6784\uff0c\u53ef\u4ee5 \u4ece\u5916\u90e8\u5faa\u73af\u5d4c\u5957\u4e2d\u5212\u5206\u548c\u9694\u79bb\u5f20\u91cf\u5316\u8ba1\u7b97\u533a\u57df(tensorized computation region)\u3002 \u65b0\u7684\u62bd\u8c61\u4f7f\u6211\u4eec\u80fd\u591f\u6709\u6548\u5730\u8868\u793a\u5f20\u91cf\u5316\u8ba1\u7b97\uff0c\u5e76\u5c06\u5b83\u4eec\u4e0e \u5faa\u73af\u5d4c\u5957\u3001 \u7ebf\u7a0b \u548c \u5185\u5b58\u5c42\u7ea7 \u76f8\u7ed3\u5408\u3002\u5de5\u4f5c\u8fd8\u5f15\u5165\u4e86\u7a0b\u5e8f\u8f6c\u6362\u539f\u8bed\u6765\u8868\u8fbe\u4e30\u5bcc\u7684\u6f5c\u5728\u4f18\u5316\u7a7a\u95f4\u3002 \u6211\u4eec\u5728\u62bd\u8c61\u548c\u8f6c\u6362\u539f\u8bed\u4e4b\u4e0a\u6784\u5efa\u4e86\u4e00\u79cd\u65b0\u9896\u7684\u81ea\u52a8\u8c03\u5ea6\u7b97\u6cd5\u3002 \u6b64\u5916\uff0cTensorIR \u8fd8\u53ef\u4ee5\u8868\u793a\u548c\u4f18\u5316\u5305\u542b\u4e0d\u89c4\u5219\u8ba1\u7b97\u548c\u5f20\u91cf\u8ba1\u7b97\u6df7\u5408\u7684\u7a0b\u5e8f\uff0c\u5c06\u53ef\u80fd\u7684\u652f\u6301\u6269\u5c55\u5230\u666e\u901a\u5f20\u91cf\u8868\u8fbe\u5f0f [9] \u4e4b\u5916\u3002 \u672c\u6587\u505a\u51fa\u4ee5\u4e0b\u8d21\u732e\uff1a</p> <ul> <li>\u9488\u5bf9\u5f20\u91cf\u5316\u7a0b\u5e8f\u63d0\u51fa\u4e86\u4e00\u79cd\u5168\u65b0\u7684\u62bd\u8c61\uff1b\u5728\u62bd\u8c61\u5c42\u7ea7\u4e0a\u53ef\u4ee5\u5c06 \u8ba1\u7b97\u5f20\u91cf\u5316 \u4ece\u4f20\u7edf\u7684 \u5faa\u73af\u53d8\u6362 \u4e2d\u5206\u79bb\u51fa\u6765\uff1b \u8be5\u62bd\u8c61\u8fd8\u5141\u8bb8\u6211\u4eec\u5bf9\u4e8e \u5404\u79cd\u5f62\u5f0f\u7684 \u5f20\u91cf\u5316\u8ba1\u7b97\u6307\u4ee4 \u3001 \u4ee5\u53ca\u5404\u79cd\u5404\u6837\u7684\u5f20\u91cf\u79ef\u7b97\u52a0\u901f\u5668 \u8fdb\u884c\u7edf\u4e00\u7684\u8868\u793a</li> <li>\u6784\u5efa\u4e86 \u53d8\u6362\u539f\u8bed \u80fd\u591f\u751f\u6210 \u4e30\u5bcc\u7684\u641c\u7d22\u7a7a\u95f4</li> <li>\u5b9e\u73b0\u4e86\u4e00\u4e2a tensorization-aware automatic scheduler</li> </ul>"},{"location":"mlc/tvm-tensorIR.html#7","title":"7. \u603b\u7ed3","text":"<p>\u6587\u7ae0\u63d0\u51fa\u4e86 TensorIR\uff0c\u4e00\u79cd\u81ea\u52a8\u5f20\u91cf\u5316\u7a0b\u5e8f\u4f18\u5316\u7684\u62bd\u8c61\u3002 </p> <ol> <li>\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u79f0\u4e3a <code>block</code> \u7684\u5173\u952e\u62bd\u8c61\uff0c\u5b83\u53ef\u4ee5\u9694\u79bb\u5f20\u91cf\u5316\u8ba1\u7b97\u5e76\u4e3a\u7a0b\u5e8f\u4f18\u5316\u63d0\u4f9b\u6709\u6548\u7684\u8f6c\u6362\u539f\u8bed\u3002</li> <li>\u6784\u5efa\u4e86\u4e00\u4e2a\u81ea\u52a8\u8c03\u5ea6\u7b97\u6cd5\uff0c\u4e0e\u5176\u4ed6\u4f18\u5316\u8054\u5408\u6267\u884c\u5f20\u91cf\u5316\u5e76\u751f\u6210\u9ad8\u6027\u80fd\u7a0b\u5e8f\u3002</li> </ol>"},{"location":"mlc/tvm-tensorIR.html#3-tensorir-abstraction","title":"3. TENSORIR ABSTRACTION","text":""},{"location":"mlc/tvm-tensorIR.html#31-block","title":"3.1. Block","text":"<p>TensorIR \u4e2d\u7684 \u4e00\u4e2a block \u8868\u793a\u5bf9 \u591a\u7ef4\u7f13\u51b2\u533a \u7684\u4e00\u4e2a\u5b50\u533a\u57df\u8fdb\u884c \u7684\u4e00\u5904\u5f20\u91cf\u5316\u8ba1\u7b97 \u3002 \u56fe 5 \u663e\u793a\u4e86\u77e9\u9635\u4e58\u6cd5 (matmul) \u8ba1\u7b97\u7684\u793a\u4f8b\u3002 block \u7684\u4e3b\u4f53\u7531\u4e00\u7ec4 block \u8fed\u4ee3\u5668\u53d8\u91cf \ud835\udc63\ud835\udc66\u3001\ud835\udc63\ud835\udc65\u3001\ud835\udc63\ud835\udc58 \u53c2\u6570\u5316\uff0c\u4ee3\u8868\u62bd\u8c61\u7684\u5f20\u91cf\u5316\u8ba1\u7b97\u3002 \u4f7f\u7528\u8fd9\u4e9b block \u8fed\u4ee3\u5668\u53d8\u91cf\u7684\u4e0d\u540c\u503c\u7ec4\u5408\u5b9e\u4f8b\u5316\uff0c \u53ef\u4ee5\u5f97\u5230\u4e0d\u540c\u7684\u5177\u4f53 block \u8fd0\u884c\u5b9e\u4f8b\u3002 \u8fd9\u4e9b\u8fed\u4ee3\u5668\u53d8\u91cf\u53ef\u4ee5\u7ed1\u5b9a\u5230\u5305\u542b\u5916\u90e8\u5faa\u73af\u8fed\u4ee3\u5668\u7684\u8868\u8fbe\u5f0f\u2014\u2014\u8fd9\u6837\u505a\u9690\u5f0f\u5730\u9650\u5b9a\u4e86 block \u5b9e\u4f8b\u7684\u6267\u884c\u987a\u5e8f\u3002</p> <p>Rationale:  block \u7684\u4e3b\u8981\u8bbe\u8ba1\u601d\u60f3\u662f\u9694\u79bb\u5f20\u91cf\u8ba1\u7b97\u2014\u2014 \u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5728\u4e0d\u67e5\u770b block body \u7684\u60c5\u51b5\u4e0b\u8f6c\u6362 block \u5916\u7684\u5faa\u73af\u5d4c\u5957\u3002 \u7136\u800c\uff0c\u4e0e\u6807\u91cf\u8ba1\u7b97\u4e0d\u540c\uff0c\u6211\u4eec\u53ef\u80fd\u65e0\u6cd5\u4ece\u4e0d\u900f\u660e\u7684\u5f20\u91cf\u8ba1\u7b97\u4f53\u4e2d\u63d0\u53d6\u8f6c\u6362\u6240\u9700\u7684\u4f9d\u8d56\u4fe1\u606f\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u4e00\u4e2a block signature\uff0c \u5176\u4e2d\u5305\u542b\u8db3\u591f\u7684\u8f6c\u6362\u4f9d\u8d56\u4fe1\u606f\u3002 \u6211\u4eec\u5728 \u00a73.2 \u4e2d\u8ba8\u8bba\u4e86\u8fd9\u4e9b\u8f6c\u6362\u3002 \u6b64\u5916\uff0c\u7b7e\u540d\u53ef\u7528\u4e8e\u5728\u8f6c\u6362\u8fc7\u7a0b\u4e2d\u72ec\u7acb\u9a8c\u8bc1\u8fed\u4ee3\u5668\u7ed1\u5b9a\u7684\u6b63\u786e\u6027\uff08\u66f4\u591a\u7ec6\u8282\u89c1\u00a73.3\uff09\u3002</p> <p>Block Iterator Domain:  \u867d\u7136\u53ef\u4ee5\u901a\u8fc7\u5c06 block \u8fed\u4ee3\u5668\u7ed1\u5b9a\u5230\u4efb\u4f55\u5faa\u73af\u5d4c\u5957\u6765\u5b9e\u4f8b\u5316 block \u7684\u4e3b\u4f53\u8ba1\u7b97\uff0c\u4f46\u5927\u591a\u6570\u5b9e\u4f8b\u5316\u5e76\u4e0d\u5bf9\u5e94\u4e8e\u76f8\u540c\u7684\u8ba1\u7b97\u3002 \u4e3a\u4e86\u4fdd\u8bc1\u8f6c\u6362\u4e4b\u95f4\u8ba1\u7b97\u7684\u4e00\u81f4\u6027\uff0c\u6211\u4eec\u5c06 iterator domain information \u548c \u8fed\u4ee3\u5668\u7684\u7ea6\u675f\u5b58 \u50a8\u5728 block \u7b7e\u540d\u4e2d\u3002 \u5bf9\u4e8e\u56fe 5 \u4e2d\u7684\u7279\u5b9a\u793a\u4f8b\uff0c\u6211\u4eec\u77e5\u9053 \ud835\udc63\ud835\udc65\u3001\ud835\udc63\ud835\udc66 \u548c \ud835\udc63\ud835\udc58 \u5fc5\u987b\u7ed1\u5b9a\u5230 iterators in domain domain [0, 16)\u3002 \u6b64\u5916\uff0c\u56e0\u4e3a \ud835\udc63\ud835\udc58 \u662f\u5f52\u7ea6\u8f74\uff0c\u6211\u4eec\u77e5\u9053\u6211\u4eec\u4e0d\u80fd\u5c06\u5b83\u7ed1\u5b9a\u5230\u5e76\u884c\u5faa\u73af\uff0c\u9664\u975e\u5f52\u7ea6\u662f\u539f\u5b50\u7684\u3002 \u57df\u7ea6\u675f\u4ecd\u7136\u4e3a\u5916\u5faa\u73af\u8f6c\u6362\u7559\u4e0b\u4e86\u5de8\u5927\u7684\u7a7a\u95f4\uff0c\u56e0\u4e3a\u6709\u591a\u79cd\u65b9\u6cd5\u53ef\u4ee5\u6784\u5efa\u6ee1\u8db3\u7ea6\u675f\u7684\u5faa\u73af\u3002 \u6211\u4eec\u7684\u57df\u7b7e\u540d\u53ef\u4ee5\u88ab\u89c6\u4e3a\u8868\u793a\u6574\u6570\u57df\u96c6\u548c\u8fed\u4ee3\u5668\u5173\u7cfb\u7684\u7279\u5b9a\u65b9\u5f0f\u3002 \u6211\u4eec\u9009\u62e9\u8fd9\u79cd\u7279\u5b9a\u8868\u793a\u662f\u56e0\u4e3a\u5b83\u7684\u5b9e\u73b0\u6548\u7387\u548c\u63a8\u7406\u7b80\u5355\u6027\uff0c\u4f46\u4e5f\u9700\u8981\u6307\u51fa\u76f8\u540c\u7684\u8bbe\u8ba1\u7406\u5ff5\u9002\u7528\u4e8e\u6574\u6570\u96c6\u548c relation \u7684\u5176\u4ed6\u5f62\u5f0f\u5316 domain \u8868\u793a [42]\u3002</p> <p>\u7591\u95ee</p> <p>We choose the particular representation due to its implementation efficiency and simplicity in reasoning, but would also point out that the same design philosophy applies to other formal domain representations of integer sets and relations [42].</p> <p>\u6574\u6570\u96c6\uff1f \u591a\u9762\u4f53\u6a21\u578b\uff1f</p> <p>Access Region and Dependency: \u4e3a\u4e86\u63d0\u4f9b\u8db3\u591f\u7684\u4f9d\u8d56\u4fe1\u606f\uff0cblock signature \u5305\u542bblock\u76f8\u5bf9\u4e8e\u591a\u7ef4\u7f13\u51b2\u533a\u7684\u8bbf\u95ee\u533a\u57df\u548c\u8bfb/\u5199\u4f9d\u8d56\u5173\u7cfb\u3002 \u5728\u56fe5\u4e2d\uff0c\u8be5 block:</p> <ul> <li>\u8bfb\u53d6\ud835\udc34[\ud835\udc63\ud835\udc66\u2217 4\uff1a\ud835\udc63\ud835\udc66\u2217 4 + 4\uff0c\ud835\udc63\ud835\udc58\u2217 4\uff1a\ud835\udc63\ud835\udc58 \u2217 4 + 4], \ud835\udc35[\ud835\udc63\ud835\udc58 \u2217 4 : \ud835\udc63\ud835\udc58 \u2217 4 + 4, \ud835\udc63\ud835\udc65 \u2217 4 : \ud835\udc63\ud835\udc65 \u2217 4 + 4]</li> <li>\u5199\u5165\ud835\udc36[\ud835\udc63\ud835\udc66 \u2217 4 : \ud835\udc63\ud835\udc66 \u2217 4 + 4, \ud835\udc63\ud835\udc65 \u2217 4 : \ud835\udc63\ud835\udc65 \u2217 4 + 4]</li> </ul> <p>\u8fd9\u79cd\u4f9d\u8d56\u4fe1\u606f\u5c06\u4f1a\u5728\u8f6c\u6362\u8fc7\u7a0b\u4e2d\u88ab\u4f7f\u7528\u3002 \u6211\u4eec\u53ea\u6807\u8bb0\u6bcf\u4e2ablock\u76f8\u5bf9\u4e8e\u591a\u7ef4\u7f13\u51b2\u533a\u800c\u4e0d\u662f\u5176\u4ed6\u8bed\u53e5\uff08block\uff09\u7684\u4f9d\u8d56\u6027\u3002 \u8fd9\u79cd\u95f4\u63a5\u6027\u4f7f\u5f97\u6211\u4eec\u80fd\u591f\u652f\u6301\u66f4\u5e7f\u6cdb\u7684\u53d8\u6362\uff0c \u4f8b\u5982\u6570\u636e\u5e03\u5c40\u8f6c\u6362\u548c re-computation \uff0c \u8fd9\u5728\u5f20\u91cf\u7a0b\u5e8f\u4f18\u5316\u4e2d\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002</p> <p>\u7591\u95ee</p> <p>We only mark each block\u2019s dependency with respect to the multidimensional buffers instead of other statements (blocks). This indirection enables a broader range of transformations, such as data layout transformation and re-computation which are essential in tensorized program optimization.</p> <p>\u662f\u4ec0\u4e48\u610f\u601d\uff1f</p> <p>Reduction Block and Initialization:   reduction \u8ba1\u7b97\u901a\u5e38\u5305\u542b\u521d\u59cb\u5316\u6b65\u9aa4\u548c\u66f4\u65b0\u6b65\u9aa4\u3002 \u6211\u4eec\u53ef\u4ee5\u81ea\u7136\u5730\u5c06 reduction \u8ba1\u7b97\u6620\u5c04\u5230\u4e24\u4e2a block \u4e2d\u3002 \u4f46\u662f\uff0c\u53e6\u4e00\u65b9\u9762\uff0c\u5171\u540c\u5236\u5b9a\u8fd9\u4e24\u4e2a\u6b65\u9aa4\u7684\u8c03\u5ea6\u51b3\u7b56\uff08\u4f8b\u5982 tiling \u548c conputation location\uff09\u901a\u5e38\u662f\u6709\u5e2e\u52a9\u7684\u3002 \u6211\u4eec\u4e3a\u6267\u884c reduction \u7684 block \u5f15\u5165\u4e86\u4e00\u4e2a\u53ef\u9009\u7684\u521d\u59cb\u5316\u8bed\u53e5\u3002 \u5728 reduction \u7684\u7b2c\u4e00\u6b21\u8fed\u4ee3\u671f\u95f4\u6267\u884c\u521d\u59cb\u5316\u8bed\u53e5\u3002 \u8fd9\u79cd reduction  block \u8868\u793a\u5728\u8f6c\u6362\u8fc7\u7a0b\u4e2d\u5f88\u6709\u7528\u3002 \u6211\u4eec\u63d0\u4f9b\u8f6c\u6362\u539f\u8bed\u4ee5\u5728\u57fa\u4e8e\u4e24\u4e2a block \u7684\u8868\u793a\u548c\u57fa\u4e8e\u521d\u59cb block \u7684\u8868\u793a\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4e3a\u4f4e\u7ea7\u4ee3\u7801\u751f\u6210\u9009\u62e9\u6700\u4f73\u8868\u793a\u3002</p>"},{"location":"mlc/tvm-tensorIR.html#32-scheduling-transformations","title":"3.2. Scheduling Transformations","text":"<p>\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u8f93\u5165\u7a0b\u5e8f\uff0c\u6211\u4eec\u9700\u8981\u751f\u6210\u5177\u6709\u7b49\u6548\u8bed\u4e49\u7684\u7a0b\u5e8f\u7684\u641c\u7d22\u7a7a\u95f4\u3002 \u6211\u4eec\u5f15\u5165\u539f\u8bed\u5c06 TensorIR \u7a0b\u5e8f\u8f6c\u6362\u4e3a\u7b49\u6548\u7684\u4f18\u5316\u7a0b\u5e8f\u3002 \u9075\u5faa\u5f20\u91cf\u7a0b\u5e8f\u4f18\u5316\u7684\u73b0\u6709\u7ea6\u5b9a [5\u30019\u300135]\uff0c\u6211\u4eec\u5c06\u6b64\u8fc7\u7a0b\u79f0\u4e3a Scheduling\u3002</p> <p>\u5982\u679c\u4e00\u4e2a block \u53ea\u5305\u542b loop nests with sub-block as its leaves.\uff0c\u5219\u8be5 block \u662f\u53ef\u8c03\u5ea6\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5206\u6790\u5b50 block \u7b7e\u540d\u53ca\u5176\u4f9d\u8d56\u4fe1\u606f\u6765\u8f6c\u6362\u53ef\u8c03\u5ea6 block \u5185\u7684\u5faa\u73af\u5d4c\u5957\u548c\u5b50 block \u8ba1\u7b97\u4f4d\u7f6e\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u53ef\u8c03\u5ea6 block \u53ef\u4ee5\u5305\u542b\u4e0d\u53ef\u8c03\u5ea6\u7684\u5b50 block \uff08\u4f8b\u5982\uff0c\u4e0d\u900f\u660e\u7684 Tensor Core \u8ba1\u7b97\uff09\u3002 \u4e0d\u900f\u660e block \u8fd8\u53ef\u4ee5\u5305\u542b\u53ef\u8c03\u5ea6\u7684\u5b50 block \u3002 \u57fa\u4e8e block \u9694\u79bb\uff0c\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u6709\u6548\u5730\u72ec\u7acb\u63a2\u7d22\u53ef\u8c03\u5ea6\u90e8\u5206\u7684\u641c\u7d22\u7a7a\u95f4\uff0c\u540c\u65f6\u4fdd\u6301\u76f8\u540c\u7684\u4e0d\u900f\u660e block \u3002 \u6211\u4eec\u5c06\u5728\u672c\u5c0f\u8282\u7684\u5176\u4f59\u90e8\u5206\u63cf\u8ff0\u8c03\u5ea6\u539f\u8bed\u3002</p> <p>Loop Transformations: \u5faa\u73aftiling\uff08split\u3001 reorder \uff09\u548c\u8ba1\u7b97\u4f4d\u7f6e mutation \u7b49\u5faa\u73af\u8f6c\u6362\u662f\u4f18\u5316\u7a0b\u5e8f\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u5185\u5b58\u5c40\u90e8\u6027\u7684\u91cd\u8981\u65b9\u6cd5\u3002 \u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u8fd9\u4e9b\u5faa\u73af\u8f6c\u6362\u539f\u8bed\uff08\u53c2\u89c1\u56fe 6 \u4e2d\u7684\u793a\u4f8b\uff09\u3002 \u4e0e\u73b0\u6709\u5f20\u91cf\u7f16\u8bd1\u5668\u76f4\u63a5\u63d0\u53d6\u6bcf\u4e2a\u53f6\u6807\u91cf\u8ba1\u7b97\u8bed\u53e5\u7684\u4f9d\u8d56\u5173\u7cfb\u7684\u505a\u6cd5\u4e0d\u540c\uff0c \u6211\u4eec\u4ec5\u901a\u8fc7\u68c0\u67e5 block \u7b7e\u540d\u6765\u8ba1\u7b97\u4f9d\u8d56\u5173\u7cfb\u3002 \u9664\u4e86\u5faa\u73af\u8f6c\u6362\uff0c\u6211\u4eec\u8fd8\u652f\u6301\u5c06\u5faa\u73af\u7ed1\u5b9a\u5230 GPU \u7ebf\u7a0b\u7684\u539f\u8bed\uff0c\u5e76\u63d0\u4f9b\u5411\u91cf\u5316\u548c\u5c55\u5f00\u7b49\u6ce8\u91ca\u63d0\u793a\u3002 \u8bf7\u6ce8\u610f\uff0c block \u9694\u79bb\u4e0d\u4f1a\u963b\u6b62\u8bb8\u591a\u91cd\u8981\u7684\u8de8 block \u534f\u4f5c\u4f18\u5316\uff08\u4f8b\u5982\u5185\u8054\u3001\u534f\u4f5c\u83b7\u53d6\uff09\u3002 \u6211\u4eec\u7684\u5faa\u73af\u53d8\u6362\u6db5\u76d6\u4e86\u4e4b\u524d\u5de5\u4f5c\u63d0\u4f9b\u7684\u5faa\u73af\u53d8\u6362\uff0c\u5b83\u5141\u8bb8 TensorIR \u91cd\u73b0\u7b2c 2 \u8282\u4e2d\u63d0\u5230\u7684\u641c\u7d22\u7a7a\u95f4\u3002</p> <p>Blockization:  \u5faa\u73af\u8f6c\u6362\u539f\u8bed\u4fdd\u7559 block \u7684\u6574\u4f53\u5c42\u6b21\u7ed3\u6784\u3002 \u6b63\u5982\u6211\u4eec\u5728\u7b2c 2 \u8282\u4e2d\u63d0\u5230\u7684\uff0c\u6709\u65f6\u901a\u8fc7\u5c06\u5b50\u533a\u57df\u8ba1\u7b97\u9694\u79bb\u5230\u4e00\u4e2a\u65b0\u7684\u5b50 block \u4e2d\u6765\u5212\u5206\u95ee\u9898\u662f\u6709\u5e2e\u52a9\u7684\u3002 \u6211\u4eec\u5c06\u8fd9\u79cd\u53d8\u6362\u79f0\u4e3a blockization \u3002 blockization \u7a0b\u5e8f\u4e0d\u518d\u57fa\u4e8e\u6807\u91cf\uff0c\u56e0\u4e3a\u65b0\u7684\u5b50 block \u5bf9\u5e94\u4e8e\u5f20\u91cf\u5316\u8ba1\u7b97\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 blockization \u6765\u9694\u79bb\u5f20\u91cf\u5316\u7684\u53ef\u80fd\u5019\u9009\u5bf9\u8c61\u3002 \u9664\u4e86 blockization \uff0c\u6211\u4eec\u8fd8\u5f15\u5165\u4e86\u53ef\u4ee5\u6539\u53d8 block \u5c42\u6b21\u7ed3\u6784\u7684\u539f\u8bed\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u5f15\u5165\u5b50 block \u4ee5\u5c06\u8f93\u5165\u6570\u636e\u7f13\u5b58\u5230\u5171\u4eab\u5185\u5b58\u4e2d\u7684\u7f13\u5b58\u539f\u8bed\u3002 \u6211\u4eec\u8fd8\u63d0\u4f9b\u5c06\u5355\u4e2a reduction-block \u8f6c\u6362\u5230 init-block \u52a0 update-block \u7684\u53d8\u6362\u539f\u8bed\u3002</p> <p>Separation of Scheduling and TensorIR: \u8bb8\u591a\u4ee5\u524d\u7684\u5f20\u91cf\u7f16\u8bd1\u5668(TVM-TE, Halide) \u4f9d\u8d56\u4e8e\u58f0\u660e\u5f0f\u8c03\u5ea6\u8bed\u8a00\u6765\u6784\u5efa\u8c03\u5ea6\u6811\u3002 \u5411\u8fd9\u4e9b\u7f16\u8bd1\u5668\u6dfb\u52a0\u65b0\u7684\u8c03\u5ea6\u539f\u8bed\u9700\u8981\u66f4\u6539\u8fd9\u4e9b\u7f16\u8bd1\u5668\u4e2d\u7684\u8c03\u5ea6\u6811\u6570\u636e\u7ed3\u6784\u548c\u76f8\u5e94\u7684 lowering \u89c4\u5219\u3002 \u6211\u4eec\u91c7\u7528\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u5c06\u6bcf\u4e2a\u8c03\u5ea6\u539f\u8bed\u5b9e\u73b0\u4e3a\u4ece\u4e00\u4e2a TensorIR \u7a0b\u5e8f\u5230\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u7684\u72ec\u7acb\u8f6c\u6362(\u7c7b\u4f3c\u4e8e\u4e00\u4e2a pass )\u3002 \u8fd9\u79cd\u8bbe\u8ba1\u66f4\u6613\u4e8e\u6269\u5c55\uff0c\u56e0\u4e3a\u4e0d\u540c\u7684\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u57fa\u4e8e\u7a33\u5b9a\u7684 TensorIR \u62bd\u8c61\u540c\u65f6\u5f00\u53d1\u65b0\u7684\u539f\u8bed\u3002 \u6b64\u5916\uff0c\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u5728\u4efb\u4f55\u8f6c\u6362\u9636\u6bb5\u6253\u5370\u51fa\u7a0b\u5e8f\u8fdb\u884c\u8c03\u8bd5\uff0c\u5e76\u5c06\u81ea\u52a8\u91cd\u5199\u4e0e\u8c03\u5ea6\u8f6c\u6362\u76f8\u7ed3\u5408\u3002</p>"},{"location":"mlc/tvm-tensorIR.html#33-validation","title":"3.3. Validation","text":"<p>block \u548c\u5176\u4e2d\u8bb0\u5f55\u7684 \u8bfb\u5199\u5173\u7cfb \u53ef\u7528\u4e8e\u9a8c\u8bc1 \u5faa\u73af\u5d4c\u5957\u7684\u6b63\u786e\u6027\u4ee5\u53ca\u7ebf\u7a0b\u5206\u914d\u7684\u6b63\u786e\u6027\u3002</p> <p>Loop Nest Validation: \u5faa\u73af\u5d4c\u5957\u9a8c\u8bc1\u68c0\u67e5\u5faa\u73af\u5d4c\u5957\u63d0\u4f9b\u7684\u8fed\u4ee3\u5668\u7ed1\u5b9a\u662f\u5426\u5339\u914d iterator domain \u7684\u7ea6\u675f\uff0c\u5305\u62ecdomain \u5927\u5c0f \u548c\u8fed\u4ee3\u5668\u72ec\u7acb\u6027\u4fe1\u606f\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4e24\u4e2a\u6570\u636e\u5e76\u884c\u5757\u8fed\u4ee3\u5668\u7ed1\u5b9a\u4e3a \ud835\udc631 = \ud835\udc56\uff1b \ud835\udc632 = \ud835\udc56 \u2217 2\uff0c\u5219\u5bf9\u5e94\u7684\u7a0b\u5e8f\u65e0\u6548\uff0c\u56e0\u4e3a\ud835\udc631\u548c\ud835\udc632\u4e0d\u72ec\u7acb\u3002 \u4f46\u662f\ud835\udc631 = \ud835\udc56/4\uff1b \ud835\udc632 = \ud835\udc56%4 \u53ef\u4ee5\u662f\u5408\u6cd5\u7ed1\u5b9a\u3002\u6211\u4eec\u6784\u5efa pattern-matchers \u4ee5\u627e\u5230\u4ece\u5faa\u73af\u8fed\u4ee3\u5668\u5230\u5757\u8fed\u4ee3\u5668\u53d8\u91cf\u7684\u51c6\u4eff\u5c04\u6620\u5c04\uff0c\u5e76\u4f7f\u7528\u8be5\u6a21\u5f0f\u6765\u9a8c\u8bc1\u7ed1\u5b9a\u7684 independence \u548c domain \u3002 \u9664\u4e86\u8fed\u4ee3\u5668\u57df\u9a8c\u8bc1\u4e4b\u5916\uff0c\u68c0\u67e5\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u5173\u7cfb\u4ee5\u786e\u4fdd\u5199\u5165\u7f13\u51b2\u533a\u7684\u751f\u4ea7\u8005\u5757\u59cb\u7ec8\u8986\u76d6\u4e0b\u6e38\u6d88\u8d39\u8005\u7684\u8bfb\u53d6\u533a\u57df\u4e5f\u5f88\u91cd\u8981\u3002</p> <p>Threading Validation: \u5728\u4e3a GPU \u548c\u5176\u4ed6\u652f\u6301\u7ebf\u7a0b\u7684\u52a0\u901f\u5668\u6784\u5efa\u7a0b\u5e8f\u65f6\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5bf9\u7ebf\u7a0b\u548c\u5185\u5b58\u5c42\u6b21\u7ed3\u6784\u8fdb\u884c\u989d\u5916\u7684\u9a8c\u8bc1\u3002 \u6211\u4eec\u8fdb\u884c\u4e09\u79cd\u9a8c\u8bc1\uff1a</p> <ol> <li>Threading Binding: \u786e\u4fdd\u7ed1\u5b9a\u5230\u540c\u4e00\u4e2a\u7ebf\u7a0b\u7684\u4e0d\u540c\u8fed\u4ee3\u5668\u662f\u4e00\u81f4\u7684\uff0c\u5e76\u4e14\u6ee1\u8db3\u540e\u7aef\u7684launching constraints</li> <li>Cooperative memory access: \u5bf9\u4e8e\u8de8\u7ebf\u7a0b\u534f\u4f5c\u751f\u6210\u5b58\u50a8\u5728\u5171\u4eab\u5185\u5b58\u4e2d\u7684\u7f13\u51b2\u533a\u7684 block\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd\u8be5 block \u6db5\u76d6\u540c\u4e00\u7ec4\u4e2d\u6240\u6709\u7ebf\u7a0b\u7684\u4e0b\u6e38\u9700\u6c42\u3002 \u540c\u65f6\uff0c\u4e3a\u8be5\u5757\u63d0\u4f9b\u8f93\u5165\u7684\u4e0a\u6e38\u5757\u9700\u8981\u8986\u76d6\u8be5\u7ec4\u4e2d\u6240\u6709\u7ebf\u7a0b\u5bf9\u8be5\u5757\u7684\u8bfb\u53d6\u9700\u6c42</li> <li>Execution scope: \u9a8c\u8bc1\u5f20\u91cf\u5185\u5728\u51fd\u6570\u662f\u5426\u5728\u6b63\u786e\u7684\u6267\u884c\u8303\u56f4\u5185\u8fd0\u884c\uff08\u4f8b\u5982\uff0cTensorCore \u9700\u8981\u5728 warp \u7ea7\u8fd0\u884c\uff09</li> </ol> <p>\u7591\u95ee</p> <p>\u56de\u5934\u518d\u770b\u8fd9\u4e00\u8282</p> <p>Correctness of Schedule Primitives: \u6211\u4eec\u5411\u6bcf\u4e2a\u8c03\u5ea6\u539f\u8bed\u6dfb\u52a0\u68c0\u67e5\u4ee5\u786e\u4fdd\u8f6c\u6362\u7684\u6b63\u786e\u6027\u3002 \u5f53\u8c03\u5ea6\u539f\u8bed\u4ec5\u66f4\u6539\u5faa\u73af\u5d4c\u5957\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u9a8c\u8bc1\u8fc7\u7a0b\u6765\u786e\u4fdd\u6b63\u786e\u6027\u3002 \u56e0\u4e3a\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5757\u8fed\u4ee3\u57df\u548c\u4f9d\u8d56\u5173\u7cfb\u4fdd\u6301\u4e0d\u53d8\u3002\u6211\u4eec\u53d1\u73b0\u66f4\u6539\u5757\u7684\u8c03\u5ea6\u539f\u8bed\uff08\u4f8b\u5982\uff0c\u5757\u5316\uff09\u7684\u7279\u5b9a\u4e8e\u539f\u8bed\u7684\u5fc5\u8981\u6761\u4ef6\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0cloop nest validation and threading validation \u7528\u4f5c\u68c0\u67e5\u4ee5\u8fc7\u6ee4\u6389\u65e0\u6548\u7684 TensorIR \u7a0b\u5e8f\uff0c\u5e76\u4e14\u8c03\u5ea6\u539f\u8bed\u68c0\u67e5\u7528\u4e8e\u786e\u4fdd\u8f6c\u6362\u524d\u540e TensorIR \u7a0b\u5e8f\u7684\u7b49\u6548\u6027\u3002 \u5f53\u7528\u6237\u9519\u8bef\u5730\u624b\u52a8\u5236\u4f5c\u3001\u5bfc\u5165\u548c\u8c03\u5ea6 TensorIR \u7a0b\u5e8f\u65f6\uff0c\u4ed6\u4eec\u5c06\u6536\u5230\u8b66\u544a\u6216\u9519\u8bef\u4fe1\u606f\u3002 \u5f53\u7528\u6237\u4f7f\u7528\u7f16\u8bd1\u5668\u81ea\u52a8\u751f\u6210\u7a0b\u5e8f\uff08\u5c06\u5728\u7b2c 4 \u8282\u4e2d\u8ba8\u8bba\uff09\u65f6\uff0c\u9a8c\u8bc1\u53ef\u4ee5\u5e2e\u52a9\u5728\u641c\u7d22\u7a7a\u95f4\u7684\u63a2\u7d22\u8fc7\u7a0b\u4e2d\u8fc7\u6ee4\u6389\u8bef\u62a5\u6848\u4f8b\u3002 \u56e0\u6b64\uff0c\u7528\u6237\u7a0b\u5e8f\u548c\u7f16\u8bd1\u7a0b\u5e8f\u90fd\u5c06\u53d7\u76ca\u4e8e\u9a8c\u8bc1\u3002</p>"},{"location":"mlc/tvm-tensorIR.html#4-auto-scheduling-tensorized-programs","title":"4. AUTO-SCHEDULING TENSORIZED PROGRAMS","text":"<p>\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u63cf\u8ff0\u4e86\u4e00\u4e2a tensorization-aware \u81ea\u52a8\u8c03\u5ea6\u7a0b\u5e8f\u6765\u641c\u7d22\u8c03\u4f18\u3002</p> <p>\u56fe 8 \u663e\u793a\u4e86\u6211\u4eec\u65b9\u6cd5\u7684\u6982\u89c8\u3002 \u6211\u4eec\u7684\u7cfb\u7edf\u5c06\u6765\u81ea\u7528\u6237\u7684\u5de5\u4f5c\u8d1f\u8f7d\u63cf\u8ff0\u548c\u5173\u4e8e\u786c\u4ef6\u5e73\u53f0\u7684\u5f20\u91cf\u5185\u5728\u63cf\u8ff0\u4f5c\u4e3a\u8f93\u5165\u3002 \u81ea\u52a8\u8c03\u5ea6\u7a0b\u5e8f\u9996\u5148\u901a\u8fc7\u68c0\u67e5\u8ba1\u7b97\u6a21\u5f0f\u6765\u751f\u6210\u7528\u4e8e\u5f20\u91cf\u5316\u7684\u5019\u9009\u5bf9\u8c61\u3002 \u7136\u540e\u5b83\u751f\u6210\u4f7f\u7528 \u5f20\u91cf\u5316\u8ba1\u7b97 \u7684\u7a0b\u5e8f\u8349\u56fe\u5019\u9009\uff0c\u7136\u540e\u6839\u636e\u8ba1\u7b97\u6a21\u5f0f\u51b3\u5b9a\u6570\u636e\u79fb\u52a8\u3002 \u5bf9\u4e8e\u7531\u5f20\u5316\u7a0b\u5e8f\u8349\u56fe\u5f15\u8d77\u7684\u7ed9\u5b9a\u641c\u7d22\u7a7a\u95f4\uff0c\u6211\u4eec\u6267\u884c\u7531 ML-based cost model \u6307\u5bfc\u7684\u8fdb\u5316\u641c\u7d22\u3002 \u6574\u4e2a\u8fc7\u7a0b\u4ee5\u5f20\u91cf\u5316\u4e3a\u4e2d\u5fc3\uff0c\u5e76\u5229\u7528\u65b0\u7684\u5757\u62bd\u8c61\u6765\u9694\u79bb\u5f20\u91cf\u5316\u8ba1\u7b97\u3002 \u6211\u4eec\u5c06\u5728\u540e\u7eed\u5c0f\u8282\u4e2d\u8ba8\u8bba\u6bcf\u4e2a\u6b65\u9aa4\u7684\u7ec6\u8282\u3002</p>"},{"location":"mlc/tvm-tensorIR.html#41-abstraction-for-tensor-intrinsics","title":"4.1. Abstraction for Tensor Intrinsics","text":"<p>\u4e3a\u4e86\u5728\u4f18\u5316\u4e2d\u4f7f\u7528\u5f20\u91cf\u6307\u4ee4\uff0c\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6765\u5411\u7cfb\u7edf\u63d0\u4f9b\u5b83\u7684\u8bed\u4e49\u548c\u540e\u7aef\u5b9e\u73b0\u3002 \u6211\u4eec\u7528\u76f8\u540c\u7684 TensorIR \u62bd\u8c61\u6765\u63cf\u8ff0\u7ed9\u5b9a\u786c\u4ef6\u540e\u7aef\u7684\u5f20\u91cf\u6307\u4ee4\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u5f20\u91cf\u5316\u6307\u4ee4\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u4e00\u4e2a\u7531\u4e24\u4e2a\u5757\u7ec4\u6210\u7684 <code>TensorIntrin</code> \u7ed3\u6784\u3002 \u4e00\u4e2a\u5757\u63cf\u8ff0\u4e86\u8ba1\u7b97\u8bed\u4e49\uff0c\u53e6\u4e00\u4e2a\u63d0\u4f9b\u4e86\u5f20\u91cf\u5316\u8ba1\u7b97\u7684\u4f4e\u7ea7\u5b9e\u73b0\u3002</p> <p>\u5728\u56fe 8 \u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5e26\u6709\u6807\u91cf\u4e3b\u4f53\ud835\udc36 [\ud835\udc56, \ud835\udc57] += \ud835\udc34[\ud835\udc56, \ud835\udc58] \u2217 \ud835\udc35[\ud835\udc58, \ud835\udc57] \u7684\u666e\u901a\u5faa\u73af\u5d4c\u5957\u6765\u8868\u793a\u8ba1\u7b97\u8bed\u4e49\u5e76\u4f7f\u7528\u5185\u90e8\u70b9\u79ef\u6307\u4ee4\u5b9e\u73b0\u6307\u4ee4 <code>\ud835\udc4e\ud835\udc50\ud835\udc50\ud835\udc52\ud835\udc59.\ud835\udc51\ud835\udc5c\ud835\udc61</code>\u3002 \u6211\u4eec\u8fd8\u901a\u8fc7 TensorIntrin \u4e2d\u7684\u591a\u7ef4\u7f13\u51b2\u533a\u89c4\u8303\u5305\u62ec\u6570\u636e\u7c7b\u578b\u3001\u5b58\u50a8\u8303\u56f4\u3001\u5185\u5b58\u5e03\u5c40\u548c\u8fde\u7eed\u6027\u7ea6\u675f\u3002 \u8fd9\u4e9b\u7ea6\u675f\u5728\u9a8c\u8bc1\u6b65\u9aa4\u4e2d\u4f7f\u7528\u3002</p> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5f20\u91cf\u6307\u4ee4\u901a\u5e38\u4e0e\u901a\u7528\u5e73\u53f0\u4e2d\u7684\u7279\u6b8a\u5185\u5b58\u8303\u56f4\u3001\u6570\u636e\u5e03\u5c40\u548c\u76f8\u5e94\u7684\u52a0\u8f7d/\u5b58\u50a8\u6307\u4ee4\u4e00\u8d77\u5e94\u7528\u3002 \u4f8b\u5982\uff0c\u5728 NVIDIA GPU \u4e0a\uff0c\u5982\u679c\u6211\u4eec\u51b3\u5b9a\u4f7f\u7528 <code>nvcuda::wmma::mma_sync</code> API \u6765\u6267\u884c\u5bc6\u96c6\u8ba1\u7b97\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u5e94\u7528 <code>nvcuda::wmma::load_matrix_sync</code> \u548c <code>nvcuda::wmma::store_matrix_sync</code> \u6765\u51c6\u5907\u8f93\u5165\u64cd\u4f5c\u6570\u548c \u5206\u522b\u68c0\u7d22\u8f93\u51fa\u7ed3\u679c\u3002 \u5728 ARM CPU \u4e0a\uff0c\u50cf <code>a64_gemm_u8_8\u00d712</code> \u8fd9\u6837\u7684\u5fae\u5185\u6838\u8981\u6c42\u64cd\u4f5c\u6570\u4ee5\u4ea4\u9519\u5e03\u5c40\u5b58\u50a8\u3002 \u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u901a\u8fc7\u4e3a\u5f20\u91cf\u8ba1\u7b97\u7684\u6bcf\u4e2a\u8f93\u5165\u548c\u8f93\u51fa\u64cd\u4f5c\u6570\u6307\u5b9a\u7279\u6b8a\u7684\u5b58\u50a8\u8303\u56f4\u6765\u544a\u77e5\u7cfb\u7edf\u8fd9\u4e9b\u7ea6\u675f\u3002</p>"},{"location":"mlc/tvm-tensorIR.html#42-tensorization-candidate-generation","title":"4.2. Tensorization Candidate Generation","text":"<p>\u7ed9\u5b9a\u4e00\u5bf9\u540e\u7aef\u76ee\u6807\u548c\u4e00\u4e2a\u8f93\u5165\u7a0b\u5e8f\uff0c\u6211\u4eec\u9996\u5148\u5c06\u7a0b\u5e8f\u4e3b\u4f53\u4e0e\u53ef\u80fd\u7684 TensorIntrin \u8fdb\u884c\u5339\u914d\uff0c\u4ee5\u751f\u6210\u5f20\u91cf\u5316\u5019\u9009\u5bf9\u8c61\u3002 \u6bd4\u8d5b\u4ee5\u6e10\u8fdb\u7684\u65b9\u5f0f\u8fdb\u884c\u3002 \u6211\u4eec\u9996\u5148\u5339\u914d\u8868\u8fbe\u5f0f\u6a21\u5f0f \ud835\udc36 [.] += \ud835\udc34[.] \u00d7 \ud835\udc35[.] \u800c\u4e0d\u8003\u8651\u7d22\u5f15\u3002 \u7136\u540e\uff0c\u6211\u4eec\u901a\u8fc7\u63d0\u51fa\u7d22\u5f15\u4e4b\u95f4\u53ef\u80fd\u7684\u6620\u5c04\u6765\u4f18\u5316\u5339\u914d\u3002 \u56fe 9 \u7ed9\u51fa\u4e86\u4e00\u4e2a\u904d\u5386\u5339\u914d\u8fc7\u7a0b\u7684\u793a\u4f8b\u3002 \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u77e9\u9635\u4e58\u6cd5\u5185\u5728\u51fd\u6570\u4f5c\u4e3a\u540e\u7aef\u63cf\u8ff0\u3002 \u8fd9\u4e2a\u5f20\u91cf\u672c\u5f81\u7684\u8ba1\u7b97\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u516c\u5f0f\u6765\u63cf\u8ff0</p>"},{"location":"mlc/tvm-tensorIR.html#43-tensorized-program-sketch-generation","title":"4.3. Tensorized Program Sketch Generation","text":"<p>\u5bf9\u4e8e\u4e00\u7ec4\u5019\u9009\u8005\uff0c\u6211\u4eec\u9700\u8981\u6784\u5efa\u5305\u542b\u5f20\u91cf\u5316\u7684\u5927\u578b\u7a0b\u5e8f\u641c\u7d22\u7a7a\u95f4\u3002 \u6211\u4eec\u5c06\u73b0\u6709\u7684\u5206\u5c42\u641c\u7d22\u7a7a\u95f4\u751f\u6210 [48] \u63a8\u5e7f\u5230\u5f20\u91cf\u8ba1\u7b97\u3002 \u6211\u4eec\u901a\u8fc7\u751f\u6210\u5305\u542b\u5f20\u91cf\u5316\u8ba1\u7b97\u7684\u7a0b\u5e8f\u8349\u56fe\u6765\u6784\u5efa\u641c\u7d22\u7a7a\u95f4\uff0c\u7136\u540e\u679a\u4e3e\u7531\u751f\u6210\u7684\u8349\u56fe\u5f15\u8d77\u7684\u9009\u62e9\u3002 \u5982\u56fe 8 \u53f3\u4fa7\u6240\u793a\uff0c\u7a0b\u5e8f\u8349\u56fe\u4fee\u590d\u4e86\u90e8\u5206\u7a0b\u5e8f\u7ed3\u6784\uff0c\u540c\u65f6\u4e3a\u5269\u4f59\u7684\u53c2\u6570\u9009\u62e9\u7559\u51fa\u7a7a\u95f4\uff0c\u4f8b\u5982\u5faa\u73af\u5e73\u94fa\u5927\u5c0f\u548c\u8ba1\u7b97\u7f13\u5b58\u51b3\u7b56\u3002 \u6211\u4eec\u901a\u8fc7\u8fed\u4ee3\u5e94\u7528\u9884\u5b9a\u4e49\u7684\u8349\u56fe\u751f\u6210\u89c4\u5219\u6765\u751f\u6210\u8349\u56fe\u3002 \u91cd\u8981\u7684\u662f\uff0c\u6211\u4eec\u9700\u8981\u901a\u8fc7\u67e5\u770b\u5757\u7b7e\u540d\u6765\u6784\u5efa\u9002\u7528\u4e8e\u5f20\u91cf\u8ba1\u7b97\u7684\u8349\u56fe\u751f\u6210\u89c4\u5219\uff0c\u5e76\u5728\u6211\u4eec\u7684\u5206\u6790\u8fc7\u7a0b\u4e2d\u5229\u7528\u8bbf\u95ee\u533a\u57df\u4fe1\u606f\u3002</p> <p>\u4f5c\u4e3a\u4e00\u7b49\u516c\u6c11\u7684\u6570\u636e\u79fb\u52a8\u3002 \u73b0\u6709\u7684\u5f20\u91cf\u7a0b\u5e8f\u81ea\u52a8\u8c03\u5ea6\u5668\u5c06\u5176\u8bbe\u8ba1\u91cd\u70b9\u653e\u5728\u8ba1\u7b97\u8c03\u5ea6\u4e0a\uff0c\u5e76\u4ee5\u6b21\u8981\u4f18\u5148\u7ea7\u5904\u7406\u4e0d\u540c\u5185\u5b58\u8303\u56f4\u4e4b\u95f4\u7684\u6570\u636e\u79fb\u52a8\u3002 \u7136\u800c\uff0c\u7531\u4e8e\u5f20\u91cf\u6307\u4ee4\u6781\u5927\u5730\u63d0\u9ad8\u4e86\u8ba1\u7b97\u7684\u541e\u5410\u91cf\uff0c\u6570\u636e\u79fb\u52a8\u6210\u4e3a\u5f20\u91cf\u7a0b\u5e8f\u7684\u74f6\u9888\u3002 \u6b64\u5916\uff0c\u6570\u636e\u79fb\u52a8\u51b3\u7b56\u901a\u5e38\u53d6\u51b3\u4e8e\u8ba1\u7b97\u8c03\u5ea6\u51b3\u7b56\uff0c\u5982\u5e73\u94fa\u3001\u7ebf\u7a0b\u7ed1\u5b9a\u3001\u6267\u884c\u8303\u56f4\u548c\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u6570\u636e\u6d41\u7c92\u5ea6\u3002 \u6211\u4eec\u91c7\u7528\u8fd9\u4e9b\u89c1\u89e3\u5e76\u5c06\u6570\u636e\u79fb\u52a8\u4f5c\u4e3a\u6211\u4eec\u7684\u81ea\u52a8\u8c03\u5ea6\u7a0b\u5e8f\u4e2d\u7684\u4e00\u7b49\u516c\u6c11\uff0c\u5e76\u5c06\u5b83\u4eec\u4e0e\u8ba1\u7b97\u8c03\u5ea6\u5206\u79bb\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u5c06 AutoCopy \u5757\u63d2\u5165\u8349\u56fe\u751f\u6210\u89c4\u5219\u51b3\u5b9a\u6267\u884c\u6570\u636e\u79fb\u52a8\u7684\u4f4d\u7f6e\uff08\u56fe 8\uff09\u3002 \u590d\u5236\u5757\u9690\u85cf\u4e86\u5185\u5b58\u8c03\u5ea6\u7ec6\u8282\uff0c\u53ea\u5728\u5757\u7b7e\u540d\u7ea7\u522b\u516c\u5f00\u5fc5\u8981\u7684\u7f13\u51b2\u533a\u8bbf\u95ee\u4fe1\u606f\u3002 \u9694\u79bb\u7684\u526f\u672c\u5757\u5141\u8bb8\u8349\u56fe\u751f\u6210\u72ec\u7acb\u505a\u51fa\u8ba1\u7b97\u8c03\u5ea6\u51b3\u7b56\uff0c\u800c\u65e0\u9700\u8003\u8651\u5982\u4f55\u8fdb\u884c\u6570\u636e\u79fb\u52a8\u3002 AutoCopy \u5757\u7684\u4e3b\u4f53\u63cf\u8ff0\u4e86\u6570\u636e\u79fb\u52a8\u4efb\u52a1\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5305\u62ec\u7f13\u51b2\u533a\u4f4d\u7f6e\u6620\u5c04\u3001\u7ebf\u7a0b\u548c\u5b58\u50a8\u8303\u56f4\u8981\u6c42\u3002 \u6570\u636e\u79fb\u52a8\u8c03\u5ea6\u7a0b\u5e8f\u5c06\u6b64\u4fe1\u606f\u4f5c\u4e3a\u8f93\u5165\u5e76\u6267\u884c\u4e0e\u5185\u5b58\u76f8\u5173\u7684\u8c03\u5ea6\u8f6c\u6362\uff0c\u4f8b\u5982\u63d2\u5165\u4e2d\u95f4\u7f13\u5b58\u9636\u6bb5\u3001\u5229\u7528\u6570\u636e\u79fb\u52a8\u5f20\u91cf\u6307\u4ee4\u3001\u77e2\u91cf\u5316\u3001\u534f\u4f5c\u83b7\u53d6\u6216\u8de8\u6b65\u586b\u5145\u4ee5\u907f\u514d\u5b58\u50a8\u4f53\u51b2\u7a81\u3002</p>"},{"location":"mlc/tvm-tensorIR.html#44-evolutionary-search","title":"4.4. Evolutionary Search","text":"<p>\u5728\u5f20\u91cf\u5316\u7a0b\u5e8f\u8349\u56fe\u751f\u6210\u9636\u6bb5\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u6570\u5341\u4ebf\u4e2a\u53ef\u80fd\u7684\u8bf1\u5bfc\u7a0b\u5e8f\u3002 \u6211\u4eec\u4f7f\u7528\u8fdb\u5316\u641c\u7d22\u6765\u63a2\u7d22\u7a7a\u95f4\u5e76\u627e\u5230\u4f18\u5316\u7684\u5f20\u91cf\u7a0b\u5e8f\u3002 \u6211\u4eec\u7684\u641c\u7d22\u4ece\u7ed9\u5b9a\u7a0b\u5e8f\u8349\u56fe\u7684\u9009\u62e9\u7684\u968f\u673a\u521d\u59cb\u5316\u5f00\u59cb\u3002 \u7136\u540e\u6211\u4eec\u5bf9\u5f53\u524d\u7684\u7a0b\u5e8f\u96c6\u6267\u884c\u7a81\u53d8\u3002 \u7136\u540e\uff0c\u6211\u4eec\u4ece\u53d8\u5f02\u7684\u5019\u9009\u7a0b\u5e8f\u4e2d\u9009\u62e9\u6709\u524d\u9014\u7684\u7a0b\u5e8f\uff0c\u5e76\u5728\u6211\u4eec\u611f\u5174\u8da3\u7684\u786c\u4ef6\u540e\u7aef\u4e0a\u5bf9\u5b83\u4eec\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5\u3002 \u6211\u4eec\u4ece\u8bc4\u4f30\u9636\u6bb5\u6536\u96c6\u6570\u636e\u4ee5\u66f4\u65b0\u5b66\u4e60\u6210\u672c\u6a21\u578b\u3002</p> <p>\u5f20\u91cf\u8ba1\u7b97\u7684\u6210\u672c\u6a21\u578b\u3002 \u6211\u4eec\u6784\u5efa\u4e86\u4e00\u4e2a\u57fa\u4e8e\u6210\u672c\u6a21\u578b\u7684\u63d0\u5347\u6811\u96c6\u6210 [7]\uff0c\u8be5\u6a21\u578b\u4f7f\u7528\u4ece\u7a0b\u5e8f\u4e2d\u63d0\u53d6\u7684\u7279\u5f81\u3002 \u7279\u5f81\u5411\u91cf\u5305\u542b\u4e0e\u5185\u5b58\u8bbf\u95ee\u6a21\u5f0f\u3001\u91cd\u7528\u548c\u5faa\u73af\u6ce8\u91ca\u76f8\u5173\u7684\u4fe1\u606f\u3002 \u91cd\u8981\u7684\u662f\uff0c\u6211\u4eec\u4ee5\u9694\u79bb\u7684\u65b9\u5f0f\u4ece\u533a\u5757\u7b7e\u540d\u548c\u533a\u5757\u4e3b\u4f53\u4e2d\u63d0\u53d6\u7279\u5f81\uff08\u4f8b\u5982\uff0c\u6807\u8bb0 Tensor Core \u7684\u4f7f\u7528\uff09\u3002 \u6211\u4eec\u7684\u6210\u672c\u6a21\u578b\u53ef\u4ee5\u770b\u4f5c\u662f\u5bf9\u5148\u524d\u5f20\u91cf\u7a0b\u5e8f\u65b9\u6cd5\u7684\u6cdb\u5316\u3002 \u6211\u4eec\u8ba4\u4e3a\uff0c\u5f20\u91cf\u5316\u7a0b\u5e8f\u7684\u6709\u6548\u6210\u672c\u6a21\u578b\u662f\u672a\u6765\u7814\u7a76\u7684\u4e00\u4e2a\u6709\u524d\u9014\u7684\u9886\u57df\u3002</p> <p>Validation \u7531\u4e8e\u5f20\u91cf\u5185\u5728\u7ea6\u675f\u6216\u65e0\u6548\u5faa\u73af\u5d4c\u5957\u5019\u9009\u8005\u672a\u6ee1\u8db3\u7ea6\u675f\uff0c\u5728\u641c\u7d22\u8fc7\u7a0b\u4e2d\u968f\u673a\u53d8\u5f02\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u751f\u6210\u65e0\u6548\u7a0b\u5e8f\u3002 \u8bef\u62a5\u7684\u53ef\u80fd\u6027\u9700\u8981\u5728\u641c\u7d22\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u9a8c\u8bc1\u6b65\u9aa4\u3002 \u6211\u4eec\u5e94\u7528 3.3 \u5c0f\u8282\u4e2d\u7684\u6280\u672f\u6765\u9a8c\u8bc1\u8fdb\u5316\u641c\u7d22\u4e2d\u7684\u5019\u9009\u7a0b\u5e8f\uff0c\u4ee5\u8bc6\u522b\u548c\u62d2\u7edd\u65e0\u6548\u7a0b\u5e8f\u3002 \u9a8c\u8bc1\u6b65\u9aa4\u51cf\u8f7b\u4e86\u8fdb\u5316\u641c\u7d22\u7b97\u6cd5\u7684\u8d1f\u62c5\uff0c\u5e76\u5141\u8bb8\u6211\u4eec\u5728\u641c\u7d22\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u5c11\u91cf\u8bef\u62a5\u3002</p>"},{"location":"mlc/tvm-tensorIR.html#6-relatedworks","title":"6. RELATEDWORKS","text":"<ul> <li> <p>\u5f88\u591a DL \u6846\u67b6\u4f7f\u7528vendor optimized libraries (e.g., cuDNN [11], MKLDNN [20], TensorRT [32], ArmComputeLibrary [3]) \u5bf9\u8ba1\u7b97\u8fdb\u884c\u52a0\u901f\uff1b \u8ba1\u7b97\u5bc6\u96c6\u578b\u7ebf\u6027\u4ee3\u6570\u7b97\u5b50\uff08\u77e9\u9635\u4e58\uff0c \u70b9\u4e58\uff09\u7684\u52a0\u901f \u5728 HPC\u9886\u57df\u5df2\u7ecf\u76f8\u5f53\u6210\u719f\uff1b divide-and-conquer \u662f\u5176\u4e2d\u7684\u91cd\u8981\u601d\u60f3</p> </li> <li> <p>DLC \u5bf9\u4e8e \u5f20\u91cf\u7a0b\u5e8f \u5f15\u5165\u4e86\u4e0d\u540c\u7684\u62bd\u8c61\uff1a </p> <ol> <li>Halide \u548c TVM \u4f7f\u7528\u8ba1\u7b97-\u8c03\u5ea6\u5206\u79bb\u7684\u601d\u60f3\uff0c\u7528scheduling language\u63cf\u8ff0\u8ba1\u7b97\uff1b Tensor Comprehensions [43], Tiramisu [5] and MLIR/Affine [26] \u4f7f\u7528 polyhedral model [42] \u6765\u5206\u6790\u5faa\u73af\u4f9d\u8d56\uff1b\u8fd9\u4e9b\u5de5\u4f5c optimize loop nests with scalar computation in a bottom-up way \u3002 </li> <li>Fireiron [17] and Stripe [46] \u4f7f\u7528\u5d4c\u5957\u591a\u9762\u4f53\u7ed3\u6784 \u4ee5 top-down fashion \u5bf9\u5f20\u91cf\u7a0b\u5e8f\u5efa\u6a21\uff1bIREE [40] \u662f\u4e00\u4e2a\u57fa\u4e8eMLIR\u7684\u7aef\u5230\u7aefcompiler which utilizes platform-specific optimization pipelines\uff1b TACO [12, 24, 38] is a compiler for sparse tensor algebra\uff1b Cortex [15] generalized tensor compilation to recursive computations\uff1b tensorIR \u7684\u5de5\u4f5c\u4e0e\u8fd9\u4e9b\u5de5\u4f5c\u6b63\u4ea4</li> </ol> </li> <li> <p>\u81ea\u52a8\u4f18\u5316\u662fDLC\u7684\u4e00\u4e2a\u91cd\u8981\u8bdd\u9898\uff1a</p> <p>AutoTVM [10] \u4f7f\u7528\u673a\u5668\u5b66\u4e60\u7684\u65b9\u6cd5\uff0c \u57fa\u4e8e\u6a21\u677f\u548c\u8bad\u7ec3\u597d\u7684 cost model \u8fdb\u884c\u81ea\u52a8\u641c\u7d22\uff1b Triton [41] \u5f15\u5165\u4e86 tile-based template representation\uff1b FlexTensor [50] \u53ef\u4ee5\u81ea\u52a8\u751f\u6210\u6a21\u677f\uff1b Halide \u4f7f\u7528 Monte-Carlo tree search [2] \u6765\u6784\u5efa\u4e00\u4e2a\u81ea\u52a8\u8c03\u5ea6\u5668\uff1b Ansor [48] \u4f7f\u7528 hierarchical search space \u6539\u8fdb\u4e86\u81ea\u52a8\u8c03\u5ea6\uff1b</p> </li> <li> <p>\u81ea\u52a8\u5411\u91cf\u5316\u662fcompiler \u9886\u57df\u7684\u4e00\u4e2a\u91cd\u8981\u8bdd\u9898\uff1a</p> <p>Tensorization can be viewed as a generalization of the vectorization problem to enable tensor intrinsic\u3002 \u5f20\u91cf\u5316(Tensorization)\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4e00\u79cd \u6cdb\u5316\u7684 \u5411\u91cf\u5316(vectorization) \u95ee\u9898\uff0c \u53ea\u4e0d\u8fc7\u4f7f\u7528\u7684\u662f tensor intrinsic \u800c\u4e0d\u662f\u4f20\u7edf\u7684 \u5411\u91cf\u5316\u6307\u4ee4\u3002\u6709 AKG [47]\uff0c UNIT [45]\uff0c AMOS [49] \u7b49\u5de5\u4f5c\u5173\u6ce8\u8fd9\u4e2a\u8bdd\u9898\u3002</p> </li> </ul>"},{"location":"mlc/tvm-tensorIR.html#_2","title":"(\u4e8c)\u4ee3\u7801","text":""},{"location":"mlc/tvm-tensorIR.html#0-tvm-script","title":"0. TVM-Script","text":""},{"location":"mlc/tvm-tensorIR.html#1-tensor-expression","title":"1. Tensor Expression","text":""},{"location":"mlc/tvm-tensorIR.html#2-topi","title":"2. TOPI","text":"<p>\u867d\u7136\u53ef\u4ee5\u901a\u8fc7 TensorIR \u6216\u5f20\u91cf\u8868\u8fbe\u5f0f (TE) \u4e3a\u6bcf\u4e2a\u7528\u4f8b\u76f4\u63a5\u6784\u9020\u7b97\u5b50\uff0c\u4f46\u8fd9\u5e26\u6765\u5f88\u591a\u91cd\u590d\u5de5\u4f5c\u3002 TOPI (Tensor operator inventory) \u63d0\u4f9b\u4e00\u7ec4\u9884\u5b9a\u4e49\u7684\u7b97\u5b50\uff08\u5728 TE \u6216 TIR \u4e2d\uff09\uff0c\u7531 numpy \u5b9a\u4e49\u5e76\u5728\u5e38\u89c1\u7684\u6df1\u5ea6\u5b66\u4e60\u5de5\u4f5c\u8d1f\u8f7d\u4e2d\u627e\u5230\u3002\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u4e00\u7ec4\u901a\u7528\u8c03\u5ea6\u6a21\u677f\uff0c\u4ee5\u83b7\u5f97\u8de8\u4e0d\u540c\u76ee\u6807\u5e73\u53f0\u7684\u9ad8\u6027\u80fd\u5b9e\u73b0\u3002</p>"},{"location":"mlc/tvm-type.html","title":"TVM-type system","text":"<p>\u672c\u6587 \u57fa\u4e8e tlc-pack/relax dc7072efe290d7e8c69d8e216311510981fc82e1</p> <p>Ref:</p> <ul> <li>\u6df1\u5ea6\u5b66\u4e60\u7f16\u8bd1\u5668 TVM \u4ee3\u7801\u4e32\u8bb2-\u77e5\u4e4e</li> <li>TVM\u7f16\u8bd1\u6d41\u7a0b\u4e0e\u4e2d\u95f4\u8868\u793a\u5206\u6790-\u77e5\u4e4e</li> <li>\u6df1\u5165\u7406\u89e3TVM\uff1aObject\u5bb6\u65cf\uff08\u4e8c\uff09-Wechat</li> <li>TVM-Doc: Pass Infrastructure</li> </ul>"},{"location":"mlc/tvm-type.html#1-runtime","title":"1. Runtime","text":""},{"location":"mlc/tvm-type.html#11-object","title":"1.1. Object","text":"<p>\u5bf9\u4e8e\u7c7b\u4f3c IR \u8fd9\u6837\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5929\u7136\u5c31\u5bf9\u5176\u6709 serialize/format/reflection \u7684\u9700\u6c42\u3002\u5728 TVM \u4e2d\uff0c\u989d\u5916\u8fd8\u6709 python binding/hash \u7b49\u9700\u6c42\uff0c\u4e8e\u662f TVM \u8981\u6c42\u6240\u6709\u8fd9\u6837\u7684\u6570\u636e\u7ed3\u6784\u7ee7\u627f\u81ea <code>Object</code> \u57fa\u7c7b\uff0c\u5e76\u6ce8\u518c\u5176\u5185\u90e8\u6240\u6709\u6210\u5458\uff1b \u7531 TVM \u7684\u7c7b\u578b\u6ce8\u518c\u7cfb\u7edf\u548c\u53cd\u5c04\u7cfb\u7edf\u7b49\u4e3a\u7ee7\u627f\u81ea Object \u7684\u5b50\u7c7b\u81ea\u52a8\u5b9e\u73b0\u5e8f\u5217\u5316\uff0c\u53cd\u5c04\uff0chash\u7b49\u529f\u80fd\u3002</p> <p>\u8fd9\u79cd\u65b9\u5f0f\u907f\u514d\u4e86\u4e3a\u65b0\u589e\u7684 Class \u5355\u72ec\u5b9e\u73b0 serialize/format/reflection/python binding/hash \u7b49\u529f\u80fd\uff0c \u5b9e\u73b0\u4e86\u4ee3\u7801\u91cd\u7528\u3002</p> <p><code>include/tvm/runtime/object.h</code>\u4e2d\u5b9a\u4e49\u4e86 <code>Object</code> \u548c <code>ObjectRef</code> \u4e24\u4e2a\u7c7b\u578b\uff0c <code>ObjectRef</code> \u53ef\u4ee5\u89c6\u4e3a <code>shared_ptr&lt;Object&gt;</code></p> <p>\u5220\u9664\u90e8\u5206\u51fd\u6570\u548c\u6210\u5458\uff0c<code>Object</code> \u7cbe\u7b80\u540e\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>class TVM_DLL Object {\npublic:\ntypedef void (*FDeleter)(Object* self);\nuint32_t type_index() const { return type_index_; }\nstatic uint32_t RuntimeTypeIndex() { return TypeIndex::kRoot; }\nstatic uint32_t _GetOrAllocRuntimeTypeIndex() { return TypeIndex::kRoot; }\n\nstatic constexpr const char* _type_key = \"runtime.Object\";\nstatic constexpr bool _type_final = false;\nstatic constexpr uint32_t _type_child_slots = 0;\nstatic constexpr uint32_t _type_index = TypeIndex::kDynamic;\n\nstatic constexpr bool _type_has_method_visit_attrs = true;\nstatic constexpr bool _type_has_method_sequal_reduce = false;\nstatic constexpr bool _type_has_method_shash_reduce = false;\n// Override the copy and assign constructors to do nothing.\n// This is to make sure only contents, but not deleter and ref_counter\n// are copied when a child class copies itself.\nObject() {}\nObject(const Object&amp; other) {}\nObject(Object&amp;&amp; other) {}\nObject&amp; operator=(const Object&amp; other) { return *this; }\nObject&amp; operator=(Object&amp;&amp; other) { return *this; }\n\nprotected:\nuint32_t type_index_{0};\nRefCounterType ref_counter_{0};\nFDeleter deleter_{nullptr};\n};\n</code></pre> <p>\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u7c7b\u578b\u9700\u8981\u7ee7\u627f <code>Object</code> \uff0c \u5e76\u4e14\u5f80\u5f80\u9700\u8981\u8003\u8651\u91cd\u5199 <code>Object</code> \u4e2d\u7684\u4e00\u4e9b\u6210\u5458\u53d8\u91cf\uff0c\u5176\u4e2d\u4e00\u90e8\u5206\u5982\u4e0b\uff1a</p> <ul> <li><code>_type_key</code> \u8868\u793a\u8be5\u7c7b\u578b\u7684\u5168\u5c40\u552f\u4e00\u5b57\u7b26\u4e32\u6807\u8bc6\u7b26\uff1b</li> <li> <p><code>_type_index</code> \u7528\u4e8e\u8bbe\u7f6e\u7c7b\u7684\u5168\u5c40\u552f\u4e00 <code>uint32_t</code> \u6807\u8bc6\u7b26\uff1b\u5728 <code>TypeIndex</code> \u7ed3\u6784\u4f53\u4e2d\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u679a\u4e3e\uff0cvalues\u5305\u62ec <code>kRoot = 0</code>, <code>kRuntimeModule = 1</code>\uff0c <code>kRuntimeNDArray = 2</code>\uff0c <code>kDynamic = kStaticIndexEnd</code> \u7b49\uff1b <code>Object</code> \u7684\u503c\u4e3a <code>kRoot</code>\uff1b \u5982\u679c\u4e00\u4e2a\u7c7b\u578b\u7684 <code>_type_index</code> \u88ab\u8bbe\u7f6e\u4e3a <code>kDynamic</code>\uff0c \u5219 TVM \u7684\u7c7b\u578b\u6ce8\u518c\u7cfb\u7edf(\u63a5\u4e0b\u6765\u4f1a\u63d0\u5230)\u4f1a\u5728\u8fd0\u884c\u65f6\u4e3a\u8be5\u7c7b\u578b(\u7531\u8be5\u7c7b\u578b\u7684 <code>_type_key</code> \u6807\u8bc6)\u5206\u914d\u4e00\u4e2a\u5bf9\u5e94\u7684 index\u3002 \u4ee5\u4e24\u4e2a<code>Object</code>\u7684\u5b50\u7c7b\u505a\u5bf9\u6bd4\uff1a</p> <p><code>include/tvm/runtime/module.h</code> \u4e2d\u58f0\u660e\u7684 <code>ModuleNode</code> \u7c7b\u578b: <pre><code>class TVM_DLL ModuleNode : public Object {\npublic:\n// \u8be5\u7c7b\u578b\u91cd\u5199\u4e86 `Object` \u4e2d\u7684 `_type_index` \u4e3a `TypeIndex::kRuntimeModule`\n// \u8fd0\u884c\u65f6\u901a\u8fc7 ModuleNode::RuntimeTypeIndex() \u83b7\u53d6\u7c7b\u578b\u7d22\u5f15\u65f6\uff0c\u4f1a\u8fd4\u56de TypeIndex::kRuntimeModule \u5bf9\u5e94\u7684\u503c\nstatic constexpr const uint32_t _type_index = TypeIndex::kRuntimeModule; // \u6ce8\u610f\u8fd9\u91cc\u7684\u91cd\u5199\nstatic constexpr const char* _type_key = \"runtime.Module\";\nTVM_DECLARE_FINAL_OBJECT_INFO(ModuleNode, Object);\n};\n</code></pre></p> <p><code>include/tvm/ir/expr.h</code> \u4e2d\u58f0\u660e\u7684 <code>BaseExprNode</code> \u7c7b\u578b: <pre><code>class BaseExprNode : public Object {\npublic:\n// \u8be5\u7c7b\u578b\u672a\u91cd\u5199 `Object` \u4e2d\u7684 `_type_index`\uff0c \u56e0\u6b64\u8be5\u7c7b\u578b\u7684 `_type_index` \u4e3a `TypeIndex::kDynamic`\n// TVM_DECLARE_BASE_OBJECT_INFO \u5b8f\u4e2d\u751f\u6210\u7684\u65b9\u6cd5 `RuntimeTypeIndex` \u5728\u7b2c\u4e00\u6b21\u88ab\u8c03\u7528\u65f6\u5c06\u4f1a\u89e6\u53d1\n// TVM \u7684 *\u7c7b\u578b\u6ce8\u518c\u7cfb\u7edf* \u5728\u8fd0\u884c\u65f6\u4e3a\u8be5\u7c7b\u578b\u5206\u914d\u4e00\u4e2a \u7c7b\u578b\u7d22\u5f15\n// \u8be5\u7c7b\u578b\u7684 \u7c7b\u578b\u7d22\u5f15 \u5e94\u5f53\u901a\u8fc7 RuntimeTypeIndex \u65b9\u6cd5\u6765\u8bbf\u95ee\n//\n// \u5176\u5b83\u81ea\u5b9a\u4e49\u7c7b\u578b\u540c\u7406\uff0c \u901a\u5e38\u8bbe\u7f6e `_type_index` \u4e3a `KDynamic`(default) \n// \u7531TVM \u7684 *\u7c7b\u578b\u6ce8\u518c\u7cfb\u7edf* \u4e3a\u8be5\u7c7b\u578b\u5206\u914d \u7c7b\u578b\u7d22\u5f15\nstatic constexpr const char* _type_key = \"BaseExpr\";\nstatic constexpr const uint32_t _type_child_slots = 62;\nTVM_DECLARE_BASE_OBJECT_INFO(BaseExprNode, Object);\n};\n</code></pre></p> <p>TVM \u4e2d\u7684 <code>TypeNode</code>\uff0c <code>BaseExprNode</code> \u4ee5\u53ca\u8fd9\u4e9b\u7c7b\u578b\u7684\u5b50\u7c7b\u5982 <code>PrimTypeNode</code>\uff0c <code>BaseTensorTypeNode</code>\uff0c <code>PrimExprNode</code>\uff0c <code>RelayExprNode</code>\u7b49\u5927\u90e8\u5206\u7c7b\u578b\u6ca1\u6709\u9884\u7559 <code>_type_index</code>\uff0c \u56e0\u6b64\u90fd\u7531 TVM\u7c7b\u578b\u6ce8\u518c\u7cfb\u7edf\u5728\u8fd0\u884c\u65f6\u7ba1\u7406 \u5176\u7c7b\u578b\u540d\u5bf9\u5e94\u7684\u7c7b\u578b\u7d22\u5f15(\u4e3a <code>_type_key</code> \u5206\u914d\u4e00\u4e2a <code>_type_index</code>)</p> <p>\u800c <code>PackedFuncObj</code>\uff0c <code>ModuleNode</code> \u7b49\u7c7b\u578b\u6709\u9884\u7559 <code>_type_index</code>\uff1b\u6240\u6709\u9884\u7559\u768410\u79cd\u7c7b\u578b\u7d22\u5f15\u5728 <code>TypeIndex</code> \u7ed3\u6784\u4f53\u4e2d\u53ef\u67e5</p> </li> <li> <p><code>_type_child_slots</code> \u8868\u793a\u8be5\u7c7b\u578b\u4e3a\u5b50\u7c7b\u9884\u7559\u7684index\u4e2a\u6570</p> </li> <li><code>_type_child_slots_can_overflow</code> \u6807\u8bc6\u662f\u5426\u53ef\u8d85\u8fc7 <code>_type_child_slots</code> \u5b9a\u4e49\u7684\u6570\u91cf</li> <li><code>_type_final</code> \u8868\u793a\u662f\u5426\u6ca1\u6709\u5b50\u7c7b\uff0c\u4e00\u822c\u901a\u8fc7 <code>TVM_DECLARE_FINAL_OBJECT_INFO</code> \u8fd9\u4e2a\u5b8f\u6765\u8bbe\u7f6e\uff0c \u800c\u4e0d\u662f\u624b\u52a8\u91cd\u5199</li> <li>TODO: <code>_type_has_method_sequal_reduce</code>, <code>_type_has_method_shash_reduce</code> \u7b49\u6807\u8bc6\u8be5\u7c7b\u578b\u7684 hash \u7b49\u529f\u80fd\u662f\u5426\u5b9e\u73b0\uff0c\u53ef\u4ee5\u53c2\u8003 TODO:</li> </ul> <p>\u5e76\u4e14\u5728 \u5b9a\u4e49\u8fc7\u7c7b\u4e4b\u540e\u8981 \u5728 TVM \u7684\u7c7b\u578b\u7cfb\u7edf\u4e2d\u4f7f\u7528 <code>TVM_REGISTER_OBJECT_TYPE</code> \u5b8f\u8fdb\u884c\u6ce8\u518c</p> <p>\u5728 TVM \u7684\u7c7b\u578b\u7cfb\u7edf\u4e2d\u6ce8\u518c\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a</p> <pre><code>// Create a base object\nclass BaseObj : public Object {\npublic:\nint field0;\n// _type_index \u9ed8\u8ba4\u4e3a TypeIndex::kDynamic (\u56e0\u4e3a Object \u4e2d\u5373\u4e3a\u8be5\u503c) \u8fd9\u4e00\u884c\u53ef\u4ee5\u4e0d\u5199\nstatic constexpr const uint32_t _type_index = TypeIndex::kDynamic;\nstatic constexpr const char* _type_key = \"test.BaseObj\";\nTVM_DECLARE_BASE_OBJECT_INFO(BaseObj, Object);\n};\n\nclass LeafObj : public BaseObj {\npublic:\n// fields\nint child_field0;\n// object properties\nstatic constexpr const char* _type_key = \"test.LeafObj\";\nTVM_DECLARE_FINAL_OBJECT_INFO(LeafObj, Object);\n};\n\n// The following code should be put into a cc file.\nTVM_REGISTER_OBJECT_TYPE(BaseObj);\nTVM_REGISTER_OBJECT_TYPE(LeafObj);\n\n// Usage example.\nvoid TestObjects() {\n// create an object\nObjectRef leaf_ref(make_object&lt;LeafObj&gt;());\n// cast to a specific instance\nconst LeafObj* leaf_ptr = leaf_ref.as&lt;LeafObj&gt;();\nICHECK(leaf_ptr != nullptr);\n// can also cast to the base class.\nICHECK(leaf_ref.as&lt;BaseObj&gt;() != nullptr);\n}\n</code></pre> <p>TVM \u63d0\u4f9b\u4e86 </p> <ol> <li><code>TVM_DECLARE_BASE_OBJECT_INFO(TypeName, ParentType)</code> </li> <li><code>TVM_DECLARE_FINAL_OBJECT_INFO(TypeName, ParentType)</code> </li> </ol> <p>\u4e24\u4e2a\u5b8f\u6765\u7b80\u5316\u751f\u6210\u91cd\u590d\u4ee3\u7801\uff1a</p> <p>\u5176\u4e2d <code>TVM_DECLARE_BASE_OBJECT_INFO</code> \u4e3b\u8981\u662f\u4e3a\u4e00\u4e2a\u540d\u79f0\u4e3a <code>TypeName</code> \u7684\u7c7b\u751f\u6210 <code>RuntimeTypeIndex()</code> \u548c <code>_GetOrAllocRuntimeTypeIndex()</code> \u2014\u2014 \u91cd\u5199 \u7236\u7c7b <code>Object</code> \u4e2d\u5bf9\u5e94\u7684\u8fd9\u4e24\u4e2a static \u65b9\u6cd5\u3002</p> <p>\u5177\u4f53\u5c55\u5f00\u5185\u5bb9\u5982\u4e0b\uff1a</p> <pre><code>static_assert(!ParentType::_type_final, \"ParentObj marked as final\");                       static uint32_t RuntimeTypeIndex() {                                                        static_assert(TypeName::_type_child_slots == 0 || ParentType::_type_child_slots == 0 ||   TypeName::_type_child_slots &lt; ParentType::_type_child_slots,            \"Need to set _type_child_slots when parent specifies it.\");                 if (TypeName::_type_index != ::tvm::runtime::TypeIndex::kDynamic) {                       return TypeName::_type_index;                                                           }                                                                                         return _GetOrAllocRuntimeTypeIndex();                                                     }                                                                                           static uint32_t _GetOrAllocRuntimeTypeIndex() {                                             static uint32_t tindex = Object::GetOrAllocRuntimeTypeIndex(                              TypeName::_type_key, TypeName::_type_index, ParentType::_GetOrAllocRuntimeTypeIndex(),\nTypeName::_type_child_slots, TypeName::_type_child_slots_can_overflow);               return tindex;                                                                            }\n</code></pre> <ul> <li> <p><code>_GetOrAllocRuntimeTypeIndex</code> \u7b80\u5355\u5730\u8c03\u7528\u7236\u7c7b <code>Object::GetOrAllocRuntimeTypeIndex</code> \u65b9\u6cd5\uff0c \u8be5\u65b9\u6cd5\u53c8\u4f1a\u8c03\u7528 <code>TypeContext</code> \u5355\u4f8b\u7684\uff1a<code>TypeContext::Global()-&gt;GetOrAllocRuntimeTypeIndex</code>\uff1b </p> <p>TypeContext \u7c7b\u58f0\u660e\u548c\u5b9e\u73b0\u90fd\u4f4d\u4e8e <code>src/runtime/object.cc</code>\u4e2d\uff0c \u5176\u8d1f\u8d23\u7ba1\u7406\u5206\u914d\uff0c \u9a8c\u8bc1 TVM \u4e2d\u7684\u7c7b\u578b\uff0c \u5176\u901a\u8fc7<code>Global</code>\u66b4\u9732\u5168\u5c40\u552f\u4e00\u5355\u4f8b\uff0c\u5176 <code>GetOrAllocRuntimeTypeIndex</code> \u65b9\u6cd5\u8d1f\u8d23\u4e3a\u4e00\u4e2a\u7c7b\u578b \u5206\u914d\u4e00\u4e2a index\uff0c \u5e76\u5efa\u7acb\u8be5\u7c7b\u578b <code>_type_key</code> \u4e0e index \u4e4b\u95f4\u7684\u53cc\u5411\u7d22\u5f15\u3002</p> <p>TypeContext \u4f7f\u7528\u4e00\u4e2a <code>std::vector&lt;TypeInfo&gt; type_table_;</code> \u5b58\u50a8 TVM \u4e2d\u6240\u6709\u6ce8\u518c\u8fc7\u7684\u7c7b\u578b\u4fe1\u606f\uff0c \u4e00\u4e2a\u7c7b\u578b\u7684index\u5373 \u5176\u7c7b\u578b\u4fe1\u606f\u5728 \u8be5\u8868\u4e2d\u7684\u7d22\u5f15\u4e0b\u6807\uff1b \u4e00\u4e2a\u7c7b\u578b\u5bf9\u5e94\u7684 <code>TypeInfo</code> \u5305\u62ec\u4e86\u8be5\u7c7b\u578b\u7684 name\uff0c index\uff0c parent_index\uff0c num_slots \u7b49\u4fe1\u606f</p> <p>TypeContext \u7684 <code>GetOrAllocRuntimeTypeIndex</code> \u65b9\u6cd5\u5728\u88ab\u8c03\u7528\u65f6\uff0c\u68c0\u67e5\u8868\u4e2d\u5bf9\u5e94\u7d22\u5f15\u9879\u662f\u5426\u5df2\u7ecf\u521d\u59cb\u5316\uff0c\u5982\u679c\u6ca1\u6709\u521d\u59cb\u5316\uff08\u8bf4\u660e\u8be5\u7c7b\u578b\u5c1a\u672a\u6ce8\u518c\u5230\u8be5Context\u4e2d\uff09\uff0c\u5219\u6784\u9020\u76f8\u5e94\u9879</p> </li> <li> <p><code>RuntimeTypeIndex</code> \u662f\u4e00\u4e2a\u7c7b\u578b\u5411\u5916\u90e8\u66b4\u9732\u4fe1\u606f\u7684\u63a5\u53e3\uff0c \u5916\u90e8\u901a\u8fc7\u8fd9\u4e2a\u51fd\u6570\u6765\u83b7\u5f97\u7c7b\u578b\u7d22\u5f15\u7b49\u76f8\u5173\u4fe1\u606f\u3002\u4e00\u4e2a\u5e94\u7528\u5b9e\u4f8b\uff1a\u5728<code>include/tvm/runtime/object.h</code> \u4e2d\u7684 <code>IsInstance</code> \u529f\u80fd\u4e3a Check if the object is an instance of <code>TargetType</code>\uff0c \u5176\u4e2d\u4f7f\u7528 <code>RuntimeTypeIndex</code> \u8fdb\u884c\u52a0\u901f\u68c0\u67e5\uff1a</p> <pre><code>template &lt;typename TargetType&gt;\ninline bool Object::IsInstance() const {\nif (std::is_same&lt;TargetType, Object&gt;::value) return true;\nif (TargetType::_type_final) {\nreturn type_index_ == TargetType::RuntimeTypeIndex();\n} else {\n// quick check using type_index\nuint32_t begin = TargetType::RuntimeTypeIndex();\nif (TargetType::_type_child_slots != 0) {\nuint32_t end = begin + TargetType::_type_child_slots;\nif (type_index_ &gt;= begin &amp;&amp; type_index_ &lt; end) return true;\n} else {\nif (type_index_ == begin) return true;\n}\nif (!TargetType::_type_child_slots_can_overflow) return false;\nif (type_index_ &lt; TargetType::RuntimeTypeIndex()) return false;\n// slow path using type hierarchy\nreturn DerivedFrom(TargetType::RuntimeTypeIndex());\n}\n}\n</code></pre> </li> </ul> <p>\ud83d\udca1\u603b\u4f53\u6765\u8bf4\uff0c\u901a\u8fc7\u540c\u6837\u7684 <code>_type_key</code> \u53ef\u4ee5\u5c06 C++ \u4e0e Python \u7684\u7c7b\u578b\u5339\u914d\u4e0a\uff0c\u800c\u8bbe\u8ba1 type_index \u5219\u662f\u4e3a\u4e86\u6027\u80fd\u8003\u8651\u3002\u5177\u4f53\u7684\u4e24\u8fb9\u7c7b\u578b\u5339\u914d\u53ef\u4ee5\u5728 <code>python/tvm/_ffi/_cython/object.pxi</code> \u67e5\u9605</p> <p>TODO: \u989d\u5916\u7684 serialize/format/reflection/python binding/hash \u7b49\u529f\u80fd\u5219\u5b9e\u73b0\u5728 <code>node</code> \u76ee\u5f55\u4e0b\u3002</p>"},{"location":"mlc/tvm-type.html#12-packedfunc","title":"1.2. PackedFunc","text":"<p>TVM runtime \u4e2d\u53e6\u4e00\u4e2a\u4e0e Object \u540c\u6837\u5e95\u5c42\u7684\u673a\u5236\u79f0\u4e3a FFI (Foreign Function Interface), \u8fd9\u4e2a\u673a\u5236\u7684\u76ee\u6807\u662f\u4e3a\u4e86\u4f7f\u5f97\u4efb\u610f\u8bed\u8a00\u4e0b\u5b9a\u4e49\u7684\u51fd\u6570\u90fd\u53ef\u4ee5\u88ab\u4efb\u610f\u5176\u4ed6\u8bed\u8a00\u8c03\u7528\u3002\u800c\u8fd9\u4e2a\u53ef\u4ee5\u88ab\u4efb\u610f\u8bed\u8a00\u8c03\u7528\u7684\u51fd\u6570\u7c7b\u578b\u662f <code>PackedFunc</code></p> <p>PackedFunc \u662f\u7c7b\u578b\u64e6\u9664\u7684\uff08\u5728\u540e\u9762\u4f1a\u89e3\u91ca\uff0c\u5176\u53c2\u6570\u53ea\u80fd\u4e3a\u4e00\u4e9b\u7279\u5b9a\u7c7b\u578b\uff09\uff0c\u8fd9\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u4ece\u52a8\u6001\u8bed\u8a00\uff08\u5982 Python\uff09\u4e2d\u8c03\u7528 PackedFunc\uff0c\u800c\u65e0\u9700\u4e3a\u6bcf\u4e2a\u521b\u5efa\u7684\u65b0\u7c7b\u578b\u51fd\u6570\u6dfb\u52a0\u989d\u5916\u7684\u80f6\u6c34\u4ee3\u7801\u3002\u8c03\u7528 PackedFunc \u65f6\uff0c\u5b83\u4f1a\u5c06\u8f93\u5165\u53c2\u6570\u6253\u5305\u5230 stack \u4e0a\u7684 <code>TVMArgs</code> \uff0c\u5e76\u901a\u8fc7 <code>TVMRetValue</code> \u83b7\u53d6\u7ed3\u679c\u3002</p> <p>\u8fd9\u91cc\u6bd4\u8f83\u6709\u610f\u601d\u7684\u662f <code>PackedFunc</code> \u7684 <code>operator()</code> \u91cd\u8f7d\uff1a</p> <pre><code>template &lt;typename... Args&gt;\ninline TVMRetValue operator()(Args&amp;&amp;... args) const{\nconst int kNumArgs = sizeof...(Args);\nconst int kArraySize = kNumArgs &gt; 0 ? kNumArgs : 1;\nTVMValue values[kArraySize];\nint type_codes[kArraySize];\ndetail::for_each(TVMArgsSetter(values, type_codes), std::forward&lt;Args&gt;(args)...);\nTVMRetValue rv;\n(static_cast&lt;PackedFuncObj*&gt;(data_.get()))\n-&gt;CallPacked(TVMArgs(values, type_codes, kNumArgs), &amp;rv);\nreturn rv;\n}\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u51fd\u6570\u5229\u7528\u4e86\u53d8\u957f\u6a21\u677f\u53c2\u6570\uff0c\u5e76\u4e14\u4e3a\u6211\u4eec\u521b\u5efa\u4e86 TVMArgs \u548c TVMRetValue\uff0c \u8fd9\u6837\u4e00\u6765\u6211\u4eec\u5229\u7528 <code>operator()</code> \u5c31\u53ef\u4ee5\u50cf\u8c03\u7528\u666e\u901a\u51fd\u6570\u4e00\u6837\u8c03\u7528 PackedFunc \u4e86\u3002</p> <p>\u4e00\u4e2a\u5728 C++ \u4e2d\u6784\u9020\u3001\u8c03\u7528 PackedFunc \u5e76\u6ce8\u518c\u5230\u5168\u5c40\u7684\u793a\u4f8b\u5982\u4e0b: <pre><code>#include &lt;tvm/runtime/packed_func.h&gt;\nvoid MyAdd(TVMArgs args, TVMRetValue* rv) {\nint a = args[0];  // \u81ea\u52a8\u5c06\u53c2\u6570\u8f6c\u6362\u4e3a\u6240\u9700\u7684\u7c7b\u578b\nint b = args[1];  // \u81ea\u52a8\u5c06\u53c2\u6570\u8f6c\u6362\u4e3a\u6240\u9700\u7684\u7c7b\u578b\n*rv = a + b;      // \u81ea\u52a8\u8d4b\u503c\u8fd4\u56de\u7ed9 rv\n}\nvoid CallPacked() {     // \u5728C++ \u4e2d \u8c03\u7528 PackedFunc\nPackedFunc myadd = PackedFunc(MyAdd);\nint c = myadd(1, 2);  // \u8fd4\u56de 3\n}\nTVM_REGISTER_GLOBAL(\"myadd\")  // \u5728 C++ \u4e2d\u6ce8\u518c\u4e00\u4e2a\u5168\u5c40 PackedFunc\n.set_body(MyAdd);\n</code></pre> \u4ee5\u4e0a\u4ee3\u7801\u5757\u4e2d\u5b9e\u4f8b\u5316\u4e86\u4e00\u4e2a PackedFunc <code>MyAdd</code> \u3002\u5b83\u6709\u4e24\u4e2a\u53c2\u6570\uff1a <code>args</code> \u4ee3\u8868\u8f93\u5165\u53c2\u6570\uff0c <code>rv</code> \u4ee3\u8868\u8fd4\u56de\u503c\u3002</p> <p>\u5728 Python \u4e2d\u8c03\u7528\u4e0a\u9762\u5728 C++ \u4e2d\u6ce8\u518c\u7684 PackedFunc <code>myadd</code>\uff1a</p> <pre><code>import tvm\nmyadd = tvm.get_global_func(\"myadd\")\nprint(myadd(1, 2))  # =&gt; 3\n</code></pre> <ol> <li> <p>\u8fd9\u91cc\u9996\u5148\u901a\u8fc7 <code>get_global_func</code> (\u4f4d\u4e8e<code>python/tvm/_ffi/registry.py</code> \u4e2d) \u6784\u9020\u4e86\u4e00\u4e2a <code>PackedFunc</code> \u5b9e\u4f8b\uff1b \u8fd9\u4e2a\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u662f\u901a\u8fc7 python \u7aef\u4f7f\u7528 ctypes \u6a21\u5757\u8c03\u7528 C++\u7aef\u901a\u8fc7 <code>c_runtime_api</code> \u66b4\u9732\u7684 <code>TVMFuncGetGlobal</code> \uff0c \u5728\u6ce8\u518c\u8868\u4e2d\u67e5\u627e\u5230\u540d\u4e3a<code>my_add</code>\u7684\u51fd\u6570\uff0c \u62ff\u5230handle:</p> <pre><code>def _get_global_func(name, allow_missing=False):\n    handle = PackedFuncHandle()\n    check_call(_LIB.TVMFuncGetGlobal(c_str(name), ctypes.byref(handle)))\n    if handle.value:\n        return _make_packed_func(handle, False)\n    if allow_missing:\n        return None\n    raise ValueError(\"Cannot find global function %s\" % name)\n</code></pre> </li> <li> <p>\u63a5\u4e0b\u6765\u7684<code>myadd(1, 2)</code> \u8c03\u7528\u4e86 <code>my_add</code> \u5b9e\u4f8b\u7684 <code>__call__</code> \u65b9\u6cd5\uff0c \u8be5\u65b9\u6cd5\u5b9e\u73b0\u5728<code>PackedFunc</code> \u7684\u7236\u7c7b <code>PackedFuncBase</code> \u4e2d(\u4f4d\u4e8e <code>python/tvm/_ffi/_ctypes/packed_func.py</code>)</p> </li> <li> <p>PackedFunc \u7684 <code>__call__</code> \u65b9\u6cd5\u4e8b\u5b9e\u4e0a\u662f\u4f7f\u7528 ctypes \u6a21\u5757\u8c03\u7528 C++\u7aef\u901a\u8fc7 <code>c_runtime_api</code> \u66b4\u9732\u7684 <code>TVMFuncCall</code> \uff0c \u5c06\u7ed3\u679c\u901a\u8fc7\u4f20\u5165\u7684 <code>TVMValue</code> \u8fd4\u56de\uff1a</p> <pre><code>class PackedFuncBase(object):\ndef __init__(self, handle, is_global):\n    self.handle = handle\n    self.is_global = is_global\ndef __call__(self, *args):\n    values, tcodes, num_args = _make_tvm_args(args, [])\n    ret_val, ret_tcode = TVMValue(), ctypes.c_int()\n    if (\n        _LIB.TVMFuncCall( # \u8c03\u7528 C++ \u4e2d \u901a\u8fc7 c_runtime_api \u66b4\u9732\u7684 TVMFuncCall\n            self.handle,\n            values,\n            tcodes,\n            ctypes.c_int(num_args),\n            ctypes.byref(ret_val),\n            ctypes.byref(ret_tcode),\n        )\n        != 0\n    ):\n        raise get_last_ffi_error()\n    return RETURN_SWITCH[ret_tcode.value](ret_val)\n</code></pre> <p>TVMFuncCall \u5bf9\u5e94\u7684 C++ \u7aef\u6ce8\u518c\uff1a</p> <pre><code>// include/tvm/runtime/c_runtime_api.h\nTVM_DLL int TVMFuncCall(TVMFunctionHandle func, TVMValue* arg_values, int* type_codes, int num_args,\nTVMValue* ret_val, int* ret_type_code);\n</code></pre> </li> </ol> <p>PackedFunc \u7684\u53c2\u6570\u7c7b\u578b\u53ef\u4ee5\u662f PackedFunc\uff0c\u800c\u4e14 TVM \u5141\u8bb8\u6211\u4eec\u5728 python \u7aef\u8fdb\u884c\u5168\u5c40\u6ce8\u518c\uff0c \u56e0\u6b64\u53ef\u4ee5\u5c06\u51fd\u6570\u4ece Python\uff08\u9700\u8981\u5148 wrap \u4e3a <code>PackedFunc</code> \uff09\u4f20\u9012\u7ed9 C++\uff0c\u5728C++\u4e2d\u56de\u8c03:</p> <pre><code>TVM_REGISTER_GLOBAL(\"callhello\")\n.set_body([](TVMArgs args, TVMRetValue* rv) {\nPackedFunc f = args[0];\nf(\"hello world\");\n});\n</code></pre> <pre><code>@tvm.register_func\ndef callback(msg):\n    print(msg)\ncallhello = tvm.get_global_func(\"callhello\")\ncallhello(f) # &gt;&gt;&gt;\"hello world\"\n</code></pre> <p>\u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4efb\u610f\u8bed\u8a00\u8c03\u7528\u4efb\u610f\u5176\u5b83\u8bed\u8a00\uff0c\u8fd9\u6837\u5c31\u901a\u8fc7 PackedFunc \u5b8c\u6210\u4e86 FFI\uff0c \u63a5\u4e0b\u6765\u770b\u4e00\u4e0b PackedFunc \u662f\u5982\u4f55\u5b9e\u73b0\u7c7b\u578b\u64e6\u9664\uff0c \u4ee5\u53ca\u5177\u4f53\u4fdd\u5b58\u4e86\u54ea\u4e9b\u4fe1\u606f\uff0c <code>PackedFunc</code> \u6e90\u7801\u5982\u4e0b(<code>include/tvm/runtime/packed_func.h</code>)\uff1a</p> <pre><code>class PackedFuncObj : public Object {\npublic:\nvoid PackedFuncObj::CallPacked(TVMArgs args, TVMRetValue* rv) const {\n(*f_call_packed_)(this, args, rv);\n}\nstatic constexpr const char* _type_key = \"runtime.PackedFunc\";\nstatic constexpr const uint32_t _type_index = TypeIndex::kRuntimePackedFunc;\nTVM_DECLARE_FINAL_OBJECT_INFO(PackedFuncObj, Object);\nprotected:\ntemplate &lt;class TPackedFuncSubObj&gt;\nstruct Extractor {\nstatic void Call(const PackedFuncObj* obj, TVMArgs args, TVMRetValue* rv);\n};\nPackedFuncObj() = delete;\nusing FCallPacked = void(const PackedFuncObj*, TVMArgs, TVMRetValue*);\nexplicit PackedFuncObj(FCallPacked* f_call_pack) : f_call_packed_(f_call_pack) {}\n\nFCallPacked* f_call_packed_;\n};\n</code></pre> <p>\u5176\u4e2d\u6d89\u53ca\u5230\u7684 PackedFunc \u7684\u53c2\u6570\u7c7b\u578b <code>TVMArgs</code> \u7b80\u5316\u5b9a\u4e49\u5982\u4e0b\uff08\u8fd4\u56de\u503c\u7c7b\u578b <code>TVMRetValue</code> \u7c7b\u4f3c\uff09\uff1a <pre><code>class TVMArgs {\npublic:\nconst TVMValue* values;\nconst int* type_codes;\nint num_args;\ninline TVMArgValue operator[](int i) const;\n};\n</code></pre></p> <p>\u53ef\u4ee5\u770b\u5230 <code>TVMArgs</code> \u5c31\u662f\u4e00\u4e2a <code>TVMValue</code> \u6570\u7ec4\uff1b \u800c <code>TVMValue</code> \u662f\u4e00\u4e2aunion\u7c7b\u578b\uff0c \u5b9a\u4e49\u4f4d\u4e8e <code>c_runtime_api.h</code>\uff1a</p> <pre><code>typedef union {\nint64_t v_int64;\ndouble v_float64;\nvoid* v_handle;\nconst char* v_str; // \u5b57\u7b26\u4e32\nDLDataType v_type; // dlpack \u6570\u636e\u7c7b\u578b\uff1b \u5305\u62ec\u6574\u578b, \u6d6e\u70b9, Bfloat\u7b49\nDLDevice v_device; // CPU CUDA \u7b49\n} TVMValue;\n</code></pre> <p>\u5176\u4e2d\u7684 <code>DLDataType</code> \u548c <code>DLDevice</code> \u5b9a\u4e49\u5728 <code>3rdparty/dlpack/include/dlpack/dlpack.h</code> \u4e2d\u3002 DLPack: Open In Memory Tensor Structure</p> <p>\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0cPackedFunc \u6700\u7ec8\u901a\u8fc7 TVMValue \u5b9e\u73b0\u4e86\u7c7b\u578b\u64e6\u9664\uff0c\u5373\u53c2\u6570\u53ea\u8981\u662f TVMValue \u4e2d\u7684\u4e00\u79cd\u7c7b\u578b\uff0c\u5373\u53ef\u5305\u88c5\u6210<code>TVMArgs</code>\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165 PackedFunc\uff1b\u5e38\u89c1\u7684\u53c2\u6570\u7c7b\u578b\u6709\uff1a</p> <ul> <li><code>int</code>, <code>float</code> and <code>string</code></li> <li><code>PackedFunc</code> \u672c\u8eab(\u901a\u8fc7 <code>v_handle</code> \u4f20\u9012)</li> <li><code>Module</code> for compiled modules((\u901a\u8fc7 <code>v_handle</code> \u4f20\u9012))</li> <li><code>DLTensor*</code>(\u89c1dlpack) for tensor object exchange</li> <li>TVM <code>Object</code> to represent any object in IR</li> </ul> <p>\ud83d\udca1PackedFunc \u5728 TVM \u7684 runtime \u4e2d\u626e\u6f14\u975e\u5e38\u91cd\u8981\u7684\u89d2\u8272\uff1a</p> <ul> <li>TVM \u7684\u6240\u6709\u7f16\u8bd1\u5668 pass \u51fd\u6570\u90fd\u4ee5 <code>PackedFunc</code> \u7684\u7c7b\u578b\u66b4\u9732\u7ed9\u524d\u7aef</li> <li>\u7f16\u8bd1\u597d\u7684\u6a21\u5757\u8fd8\u5c06\u7f16\u8bd1\u597d\u7684\u51fd\u6570\u4f5c\u4e3a <code>PackedFunc</code> \u7c7b\u578b\u8fd4\u56de</li> </ul>"},{"location":"mlc/tvm-type.html#13-module","title":"1.3. Module","text":"<p><code>runtime::Module</code> \u5b9a\u4e49\u5728 <code>include/tvm/module.h</code> \u4e2d\uff0c \u5728 TVM stack\u4e2d\u7528\u6765\u8868\u8fbe\u7f16\u8bd1\u540e\u7684\u7ed3\u679c\u3002 \u53ef\u4ee5\u7b80\u5355\u7684\u89c6\u4e3a <code>&lt;name, PackedFunc&gt;</code> \u7684\u4e00\u4e2a\u54c8\u5e0c\u8868\u3002 \u4e0d\u8fc7 <code>ModuleNode</code> \u4ec5\u4ec5\u662f\u4e00\u4e2a\u63a5\u53e3\uff0c \u5728\u4e0d\u540c\u7684 target \u6709\u4e0d\u540c\u7684\u7ee7\u627f\u5b9e\u73b0\u3002 \u4f8b\u5982\u5728\u7f16\u8bd1\u65f6\u6307\u5b9a target \u4e3a llvm\uff0c \u5219\u751f\u6210\u7684 runtime::Module \u80cc\u540e\u5c31\u662f\u4e00\u4e2a <code>LLVMModuleNode</code> (\u5b9a\u4e49\u5728 <code>src/target/llvm/llvm_module.cc</code>\u4e2d)\uff0c\u5176\u5b83<code>target</code>\u4e5f\u6709\u76f8\u5e94\u7684 <code>ModuleNode</code> \u7684\u5b50\u7c7b\u3002</p> <p><code>ModuleNode</code> \u7b80\u5316\u540e\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>class TVM_DLL ModuleNode : public Object {\npublic:\nvirtual ~ModuleNode() = default;\nvirtual const char* type_key() const = 0; // LLVMModuleNode: \"llvm\"\uff1b CUDAModuleNode: \"cuda\"\nvirtual PackedFunc GetFunction(const std::string&amp; name, const ObjectPtr&lt;Object&gt;&amp; sptr_to_self) = 0;\nvirtual void SaveToFile(const std::string&amp; file_name, const std::string&amp; format);\n\nPackedFunc GetFunction(const std::string&amp; name, bool query_imports = false);\nvoid Import(Module other);\nconst PackedFunc* GetFuncFromEnv(const std::string&amp; name);\n\nstatic constexpr const uint32_t _type_index = TypeIndex::kRuntimeModule;\nstatic constexpr const char* _type_key = \"runtime.Module\";\nTVM_DECLARE_FINAL_OBJECT_INFO(ModuleNode, Object); // NOTE! can still be sub-classed\nprotected:\nstd::vector&lt;Module&gt; imports_;   // modules this module depend on\nprivate:\nstd::unordered_map&lt;std::string, std::shared_ptr&lt;PackedFunc&gt;&gt; import_cache_;\nstd::mutex mutex_;\n};\n</code></pre> <p>\u63a5\u4e0b\u6765\u662f\u5b83\u7684\u4e24\u4e2a\u5e38\u7528\u5b50\u7c7b\u7684\u4f8b\u5b50\uff1a</p> <ul> <li> <p>\u5b50\u7c7b <code>LLVMModuleNode</code></p> <pre><code>class LLVMModuleNode final : public runtime::ModuleNode {\npublic:\n~LLVMModuleNode();\nconst char* type_key() const final { return \"llvm\"; }\nPackedFunc GetFunction(const std::string&amp; name, const ObjectPtr&lt;Object&gt;&amp; sptr_to_self) final;\nvoid SaveToFile(const std::string&amp; file_name, const std::string&amp; format) final;\nvoid Init(const IRModule&amp; mod, const Target&amp; target);\nvoid LoadIR(const std::string&amp; file_name);\nprivate:\nvoid LazyInitJIT();\nbool IsCompatibleWithHost(const llvm::TargetMachine* tm) const;\nvoid* GetGlobalAddr(const std::string&amp; name, const LLVMTarget&amp; llvm_target) const;\nvoid* GetFunctionAddr(const std::string&amp; name, const LLVMTarget&amp; llvm_target) const;\nstd::unique_ptr&lt;LLVMInstance&gt; llvm_instance_; // \u5305\u542b `llvm::LLVMContext` \u548c `llvm::Module`\nstd::mutex mutex_;                    // JIT lock\nllvm::ExecutionEngine* ee_{nullptr};  // execution engine for JIT etc.\nllvm::Module* module_{nullptr};       // module_owning_ptr_.get()\nstd::unique_ptr&lt;llvm::Module&gt; module_owning_ptr_; // EngineBuilder \u4f1a\u62ff\u8d70\u8be5 Module \u7684\u6240\u6709\u6743\nArray&lt;String&gt; function_names_;        // \u8be5 module \u5185\u58f0\u660e\u7684\u51fd\u6570\u540d\n};\n</code></pre> <p>\u6ce8\u610f\u5176\u4e2d\u7684 <code>void Init(const IRModule&amp;, const Target&amp;)</code> \uff0c \u8be5\u51fd\u6570\u662f tir IR \u7684 IRModule lower \u5230 LLVM \u540e\u7aef\u65f6\u4f1a\u88ab\u8c03\u7528\u7684\u51fd\u6570</p> </li> <li> <p>\u5b50\u7c7b <code>CUDAModuleNode</code></p> <pre><code>lass CUDAModuleNode : public runtime::ModuleNode {\npublic:\n~CUDAModuleNode();\nconst char* type_key() const final { return \"cuda\"; }\nPackedFunc GetFunction(const std::string&amp; name, const ObjectPtr&lt;Object&gt;&amp; sptr_to_self) final;\nvoid SaveToFile(const std::string&amp; file_name, const std::string&amp; format) final;\nprivate:\nstd::string data_;  // the binary data\nstd::string fmt_; // The format\nstd::unordered_map&lt;std::string, FunctionInfo&gt; fmap_;  // function information table.\nstd::string cuda_source_; // The cuda source.\nstd::array&lt;CUmodule, kMaxNumGPUs&gt; module_;  // Internal modules per GPU\nstd::mutex mutex_;  // internal mutex when updating the module\n};\n</code></pre> </li> </ul> <p>TODO:</p>"},{"location":"mlc/tvm-type.html#14-container","title":"1.4. Container","text":"<p>TVM \u4e2d\u8fd8\u91cd\u65b0\u5b9e\u73b0\u4e86\u4e00\u4e9b\u5e38\u7528\u7684 Container\uff0c\u4f8b\u5982<code>Map</code>, <code>Array</code>, <code>Optional</code>, <code>ADT</code> \u7b49\uff0c\u5b9a\u4e49\u5728 <code>include/tvm/runtime/container</code> \u4e2d\u3002</p> <p>\u5728\u6211\u7684\u7406\u89e3\u4e2d\uff0c \u91cd\u65b0\u5b9e\u73b0\u8fd9\u4e9b\u5bb9\u5668\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u80fd\u591f\u901a\u8fc7 FFI \u4f20\u9012\u8fd9\u4e9b\u5bb9\u5668\u3002 \u56e0\u4e3a\u8fd9\u4e9b\u5bb9\u5668\u6d3e\u751f\u81ea <code>Object</code>, \u56e0\u6b64\u80fd\u591f\u4f5c\u4e3a <code>TVMArgs</code> \u6216\u8005 <code>TVMRetValue</code> \u901a\u8fc7 PackedFunc \u8fdb\u884c\u4f20\u9012\uff0c \u800c STL \u4e2d\u7684\u5bb9\u5668\u5219\u65e0\u6cd5\u76f4\u63a5\u901a\u8fc7 PackedFunc \u4f20\u9012\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a</p> <ul> <li> <p>Relay \u4e2d\u6700\u5e38\u7528\u5230\u7684\u7c7b\u578b\u5c31\u662f <code>TensorType</code> \uff0c \u5728 C++ \u7aef \u5176\u5b9a\u4e49\u5982\u4e0b\uff1a     <pre><code>class TensorTypeNode : public BaseTensorTypeNode {\npublic:\nArray&lt;PrimExpr&gt; shape;\nDataType dtype;\nstatic constexpr const char* _type_key = \"relay.TensorType\";\nTVM_DECLARE_FINAL_OBJECT_INFO(TensorTypeNode, BaseTensorTypeNode);\n};\n\nclass TensorType : public Type {\npublic:\nTVM_DLL TensorType(Array&lt;PrimExpr&gt; shape, DataType dtype);\nTVM_DLL static TensorType Scalar(DataType dtype);\nTVM_DEFINE_OBJECT_REF_METHODS(TensorType, Type, TensorTypeNode);\n};\n</code></pre></p> <p>\u8fd9\u91cc\u53ef\u4ee5\u770b\u5230 <code>TensorType</code> \u7684\u6784\u9020\u51fd\u6570\u7684\u4e24\u4e2a\u53c2\u6570\u7c7b\u578b\u5206\u522b\u662f <code>Array&lt;PrimExpr&gt;</code> \u548c <code>DataType</code></p> </li> <li> <p>\u800c\u5728\u5bf9\u5e94\u7684 python \u7aef\uff0c <code>TensorType</code> \u5b9a\u4e49\u5728 <code>python/tvm/ir/tensor_type.py</code> \u4e2d\uff1a     <pre><code>@tvm._ffi.register_object(\"relay.TensorType\")\nclass TensorType(Type):\n    def __init__(self, shape, dtype=\"float32\"):\n        self.__init_handle_by_constructor__(_ffi_api.TensorType, shape, dtype)\n    @property\n    def concrete_shape(self):\n\"\"\"Get shape of the type as concrete tuple of int. \"\"\"\n        return tuple(int(x) for x in self.shape)\n    def __str__(self):\n        from tvm.relay import pretty_print  # pylint: disable=import-outside-toplevel\n        return pretty_print(self)\n</code></pre></p> </li> </ul> <p>\u56e0\u6b64\u5982\u679c\u6211\u4eec\u9700\u8981\u5728python\u7aef\u6784\u9020\u4e00\u4e2a TensorType\uff1a</p> <pre><code>t1 = relay.TensorType((3, 4), \"float32\")\n</code></pre> <p>\u5219\u6211\u4eec\u9996\u5148\u9700\u8981\u628a python \u7aef\u7684\u5143\u7ec4\u8f6c\u6362\u6210 <code>tvm.ir.runtime.Array</code>(\u5177\u4f53\u903b\u8f91\u4f4d\u4e8epython\u7aef\u7684<code>_make_tvm_args</code>)\uff0c \u518d\u901a\u8fc7 PackedFunc \u8fdb\u884c\u4f20\u9012\uff0c \u8fd9\u4e2a\u8f6c\u6362\u8fc7\u7a0b\u53ef\u4ee5\u901a\u8fc7\u8c03\u8bd5\u67e5\u770b\u3002</p> <p>\u540c\u6837\u7684\uff0c\u5bf9\u4e8epython\u4e2d\u4f20\u9012\u5b57\u5178\u5230 PackedFunc \u4e2d\u7684\u60c5\u51b5\uff0c\u4e5f\u9700\u8981\u5148\u8f6c\u6210 <code>tvm.ir.runtime.Map</code> \u7b49\u7b49\u8bf8\u5982\u6b64\u7c7b\u3002</p> <p>\ud83d\udca1\u7efc\u4e0a\u6240\u8ff0 Container \u7684\u5b9e\u73b0\u4f7f\u5f97 PackedFunc \u53ef\u4ee5\u4f20\u9012 array\uff0cmap \u7b49\u5e38\u89c1\u7684\u6570\u636e\u7ed3\u6784</p>"},{"location":"mlc/tvm-type.html#2-ir","title":"2. IR","text":""},{"location":"mlc/tvm-type.html#21-type","title":"2.1. Type","text":"<p>\u5c06 IR \u89c6\u4e3a\u4e00\u79cd\u76f8\u5bf9\u9ad8\u7ea7\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u6709\u4e24\u4e2a\u5173\u952e\u7684\u57fa\u7840\u6982\u5ff5\uff0c\u8868\u8fbe\u5f0f (Expr) \u548c \u8868\u8fbe\u5f0f\u7684 \u7c7b\u578b (Type)\u3002 <code>Type</code> \u7c7b\u4e3b\u8981\u8868\u793aTVM IR\u4e2d\u7684\u5404\u79cd\u7c7b\u578b\uff0c\u5305\u542bbool\u3001int8\uff0cfloat32\u7b49\u57fa\u7840\u6570\u636e\u7c7b\u578b\uff0c\u4ee5\u53ca\u5f20\u91cfTensor\u548c\u5143\u7ec4Tuple\u7b49\u7c7b\u578b\u3002 <code>Expr</code> \u5305\u62ec\u7b80\u5355\u7684\u5b9a\u4e49\u4e00\u4e2a\u5b57\u9762\u503c\uff0c\u4e5f\u5305\u62ec\u5b9a\u4e49\u4e00\u4e2a\u590d\u6742\u7684\u51fd\u6570\u3002</p> <p>\u5728 TVM \u4e2d\uff0c\u6709 Relay(\u5b9a\u4e49\u5728<code>include/tvm/relay/</code>\u4e2d)\uff0c Relax(\u5b9a\u4e49\u5728<code>include/tvm/relax/</code>\u4e2d)\uff0c tir(\u5b9a\u4e49\u5728<code>include/tvm/tir/</code>\u4e2d) \u7b49\u4e0d\u540c\u5c42\u7ea7\u7684IR\u3002 \u8fd9\u4e9b IR \u5171\u4eab\u540c\u4e00\u5957 IR \u57fa\u7840\u8bbe\u65bd(\u4e3b\u8981\u5b9a\u4e49\u5728 <code>include/tvm/ir/</code>\u4e2d)\uff0c \u5305\u62ec<code>type</code>\u548c<code>expr</code>\u7b49\uff1b\u5b9e\u73b0\u4e86\u5de5\u7a0b\u4e0a\u7684\u4ee3\u7801\u91cd\u7528\uff0c\u5212\u5206\u7684\u76f8\u5bf9\u6e05\u6670\uff08\u4e0d\u8fc7\u4ece\u4ee3\u7801\u89d2\u5ea6\u6765\u8bf4\uff0c\u8fd9\u4e9bIR\u4e4b\u95f4\u5e76\u975e\u5b8c\u5168\u9694\u79bb\uff0c \u4f8b\u5982 Relay \u4e2d\u5c31\u9700\u8981\u91cd\u7528 tir \u4e2d\u5b9a\u4e49\u7684 <code>Any</code> \u7c7b\u578b\uff09\u3002</p> <p>\u53cd\u5e94\u4e00\u4e2aIR\u7684\u62bd\u8c61\u5c42\u7ea7\u6700\u660e\u663e\u7684\u6807\u5fd7\u4e4b\u4e00\u662fIR\u6240\u5904\u7406\u7684 data type\uff0chigh-level IR \u591a\u7528\u6765\u5904\u7406Tensor\u6570\u636e\u7c7b\u578b\uff0c low-level IR \u5927\u591a\u7528\u6765\u5904\u7406Buffer\u6216\u6307\u9488\u7c7b\u578b\uff0c\u5728TVM <code>Type</code>\u7c7b\u4e2d\u53ef\u4ee5\u770b\u5230TVM\u5404\u4e2a\u5c42\u7ea7IR\u9700\u8981\u7684Type\u3002</p> <p>\u5728 <code>include/tvm/type.h</code> \u4e2d\u5b9a\u4e49\u4e86\u591a\u4e2a\u57fa\u7840\u7c7b\u578b\uff0c \u6240\u6709\u7c7b\u578b Node \u90fd\u7ee7\u627f\u81ea <code>TypeNode</code>:</p> <p><code>include/tvm/ir/type.h</code> \u4e2d <code>TypeNode</code> \u5b9a\u4e49\u5982\u4e0b\uff1a</p> <p><pre><code>class TypeNode : public Object {\npublic:\nmutable Span span; // points to the original source code. Reserved debug information\nstatic constexpr const char* _type_key = \"Type\";\nstatic constexpr const bool _type_has_method_sequal_reduce = true;\nstatic constexpr const bool _type_has_method_shash_reduce = true;\nstatic constexpr const uint32_t _type_child_slots = 14; // \u9884\u7559\u4e8614\u4e2a\u5b50\u7c7b\nTVM_DECLARE_BASE_OBJECT_INFO(TypeNode, Object);\n};\n</code></pre> \u4ecb\u7ecd\u8be5\u7c7b\u578b\u51e0\u4e2a\u5178\u578b\u7684\u5b50\u7c7b\uff1a</p> <ul> <li> <p><code>PrimTypeNode</code> \u5b9a\u4e49\u4f4d\u4e8e <code>include/tvm/ir/type.h</code> \u8868\u793a\u53ef\u4ee5\u76f4\u63a5\u6620\u5c04\u5230 low-level IR \u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u4ee3\u7801\u5982\u4e0b</p> <pre><code>class PrimTypeNode : public TypeNode {\npublic:\nruntime::DataType dtype;  // corresponding dtype field\nstatic constexpr const char* _type_key = \"PrimType\";\nTVM_DECLARE_FINAL_OBJECT_INFO(PrimTypeNode, TypeNode);\n};\n</code></pre> <p>\u5176\u4e2d <code>runtime::DataType</code> \u4f4d\u4e8e <code>include/tvm/data_type.h</code> \uff0c \u662f\u4e00\u4e2a\u5bf9\u4e8e <code>DLDataType</code> \u7684\u5c01\u88c5\uff0c \u63d0\u4f9b\u4e86\u989d\u5916\u7684\u7c7b\u578b\u68c0\u67e5\u65b9\u6cd5\u7b49\u3002\u5176\u53ef\u9009\u7684\u503c\u5305\u62ec\uff1a</p> <pre><code>enum TypeCode {\nkInt = kDLInt,\nkUInt = kDLUInt,\nkFloat = kDLFloat,\nkHandle = TVMArgTypeCode::kTVMOpaqueHandle,\nkBFloat = kDLBfloat,\nkCustomBegin = 129\n};\n</code></pre> </li> <li> <p><code>TensorTypeNode</code> \u5b9a\u4e49\u4f4d\u4e8e <code>include/tvm/ir/tensor_type.h</code> \u662f\u4e00\u79cd Polymorphic tensor type</p> <pre><code>class BaseTensorTypeNode : public TypeNode {\npublic:\nstatic constexpr const char* _type_key = \"relay.BaseTensorType\";\nstatic constexpr const uint32_t _type_child_slots = 1;\nTVM_DECLARE_BASE_OBJECT_INFO(BaseTensorTypeNode, TypeNode);\n};\n\nclass TensorTypeNode : public BaseTensorTypeNode {\npublic:\nstatic constexpr const char* _type_key = \"relay.TensorType\";\nArray&lt;PrimExpr&gt; shape;          // tensor shape, represented by PrimExpr\nDataType dtype;                 // content data type\nTVM_DLL PrimExpr Size() const;  // return product of elements in the shape\nTVM_DECLARE_FINAL_OBJECT_INFO(TensorTypeNode, BaseTensorTypeNode);\n};\n</code></pre> <p><code>TensorType</code> \u662f relay \u4e2d\u6700\u5e38\u7528\u5230\u7684\u7c7b\u578b\uff1b <code>TensorType</code> has a fixed dimension, data type</p> <p><code>TensorTypeNode</code> \u4e2d\u6709\u4e00\u4e2a <code>shape</code> field\uff0c \u8fd9\u8868\u793ashape\u662f TensorType\u7684\u4e00\u90e8\u5206\uff1b TODO:\u5373 Tensor[(4, 4)]\u548cTensor[(Any, 4)]\u662f\u4e0d\u540c\u7684type (<code>Any</code> \u662f<code>PrimExpr</code>\u7684\u5b50\u7c7b\uff0c\u7528\u4e8e\u5728Relay\u4e2d\u8868\u793a dynamic shape)\uff1b \u5728relax\u4e2d\u5f15\u5165\u4e86\u4e00\u4e2a\u4e0e\u4e4b\u76f8\u5bf9\u7684 \u5f20\u91cf\u7c7b\u578b <code>DynTensorType</code>(\u4f4d\u4e8e<code>include/tvm/relax/type.h</code>)\uff0c \u5177\u4f53\u53ef\u89c1 TODO:</p> </li> <li> <p><code>FunctypeNode</code> \u5b9a\u4e49\u4f4d\u4e8e <code>include/tvm/ir/type.h</code> \u53ef\u4ee5\u770b\u4f5cC++\u4e2d\u7684 template function</p> <pre><code>class FuncTypeNode : public TypeNode {\npublic:\nArray&lt;Type&gt; arg_types;    // type of arguments\nType ret_type;            // type of return value\n// The following fields are used in polymorphic(template) functions\n// For normal functions, the following two fields will be empty.\n/* The type parameters of the function */\nArray&lt;TypeVar&gt; type_params;\n/* potential constraint the type need to obey; For further purposes. */\nArray&lt;TypeConstraint&gt; type_constraints;\nstatic constexpr const char* _type_key = \"FuncType\";\nTVM_DECLARE_FINAL_OBJECT_INFO(FuncTypeNode, TypeNode);\n};\n</code></pre> </li> </ul> <p>\u540c\u65f6Relay\u4e2d\u8fd8\u63d0\u4f9b\u4e86\u63cf\u8ff0Relay\u51fd\u6570\u7684\u8f93\u5165\u548c\u8f93\u51fa\u7c7b\u578b\u4e4b\u95f4\u5173\u7cfb\u7684\u7c7b\u578b\u5173\u7cfb\u7279\u6027\uff0c\u5141\u8bb8\u7528\u6237\u6269\u5c55\u7c7b\u578b\u63a8\u65ad\uff0c\u65b9\u4fbf\u7b97\u5b50\u7684shape\u63a8\u7406\u3002</p>"},{"location":"mlc/tvm-type.html#22-expr","title":"2.2. Expr","text":"<p>\u8868\u8fbe\u5f0f expression \u4e3b\u8981\u5904\u7406\u5404\u79cd\u7c7b\u578b\u7684\u6570\u636e\uff0c\u4ee5\u53ca\u8868\u793aIR\u8bed\u53e5\u4e2d\u63a7\u5236\u7ed3\u6784\u3001\u5206\u652f\u4fe1\u606f\uff0c\u5176\u6d3e\u751f\u4e5f\u8981\u6bd4Type\u7c7b\u66f4\u52a0\u590d\u6742\u4e00\u4e9b\u3002\u5728TVM\u4e2d\uff0c \u8868\u8fbe\u5f0f\u4f7f\u7528 <code>Expr</code> \u7c7b\u6765\u8868\u793a\uff0c \u5176\u6709\u4e24\u4e2a\u76f4\u63a5\u5b50\u7c7b\uff1a <code>RelayExpr</code> \u548c <code>PrimExpr</code> \u3002 </p> <p>\u6b64\u5916\u7ee7\u627f\u81ea Object \u7684 <code>Stmt</code> \u5728\u540e\u6587\u4f1a\u4ecb\u7ecd\u5230\uff0c\u4e5f\u662fIR\u4e2d\u7684\u5143\u7d20\uff0c\u4e0e Expr \u7684\u533a\u522b\u5728\u4e8e\uff1a <code>Stmt</code> \u8868\u793aif\u5224\u65ad\u3001\u8d4b\u503c\uff0c\u4e0d\u5904\u7406Type\u7c7b\u578b\u7684\u6570\u636e\u503c\uff0c\u76f8\u5f53\u4e8e\u9648\u8ff0\u8bed\u53e5\u3002</p> <p>\u63a5\u4e0b\u6765\u5173\u6ce8 tir \u4e2d\u5bf9\u5e94\u7684 <code>PrimExpr</code> \u548c Relay IR \u4e2d\u5bf9\u5e94\u7684 <code>RelayExpr</code>\uff1a </p> <ul> <li> <p><code>PrimExprNode</code>: \u5b9a\u4e49\u5728<code>include/tvm/ir.h</code>\uff1b\u5176\u6d3e\u751f\u5b50\u7c7b\u4e3b\u8981\u5728 <code>tir</code> \u6a21\u5757\u4e2d\u5b9a\u4e49\uff0c\u53ef\u4ee5\u76f8\u5bf9\u76f4\u63a5\u5730\u6620\u5c04\u5230 low-level code:</p> <pre><code>class PrimExprNode : public BaseExprNode {\npublic:\nDataType dtype; // POD \u7c7b\u578b; \u662f\u4e00\u4e2a\u5bf9\u4e8e `DLDataType` \u7684\u5c01\u88c5\nstatic constexpr const char* _type_key = \"PrimExpr\";\nstatic constexpr const uint32_t _type_child_slots = 38;\nTVM_DECLARE_BASE_OBJECT_INFO(PrimExprNode, BaseExprNode);\n};\n</code></pre> <p><code>PrimExprNode</code> \u91cc\u7684 <code>DataType</code> \u4e0eType\u4e00\u8282\u91cc <code>TypeNode</code> \u4e2d\u7684 <code>runtime::DataType</code> \u662f\u540c\u4e00\u4e2a\u7c7b\u578b\uff0c\u5373 \u4e00\u4e2a\u5bf9\u4e8e dlpack \u4e2d <code>DLDataType</code> \u7c7b\u578b\u7684\u5c01\u88c5\u3002</p> <p>\u56e0\u6b64\uff0cprimitive expression \u7684evaluation\u7ed3\u679ctype\u4e3a POD \u7c7b\u578b\u2014\u2014\u5728 <code>ir.h</code> \u4e2d\u8fd8\u4e3a <code>PrimExpr</code> \u91cd\u8f7d\u4e86\u56db\u5219\u8fd0\u7b97\uff0c\u903b\u8f91\u8fd0\u7b97\u7b49\u8fd0\u7b97\u7b26</p> <p>\u5176\u5b50\u7c7b\u5305\u62ec:</p> <ol> <li><code>BinaryOpNode</code>(\u5176\u5b50\u7c7b\u6709 <code>Add</code>, <code>Mod</code>, <code>Mul</code>, <code>Min</code> \u7b49\u4e8c\u5143op), <code>CmpOpNode</code>, <code>AndNode</code>, <code>OrNode</code>, <code>NotNode</code> \u7b49\u57fa\u672c\u7684\u7b97\u6570\u8fd0\u7b97\u548c\u903b\u8f91\u8fd0\u7b97\u8868\u8fbe\u5f0f\uff1b</li> <li><code>FloatImmNode</code>, <code>IntImmNode</code>, <code>StringImmNode</code> \u7b49\u5e38\u91cf\u8868\u8fbe\u5f0f</li> <li><code>CastNode</code>, <code>BroadCastNode</code>, <code>LoadNode</code>, <code>BufferLoadNode</code>, <code>ProducerLoadNode</code> \u7b49\u6570\u636e\u64cd\u4f5c\u8868\u8fbe\u5f0f</li> <li><code>LetNode</code>, <code>VarNode</code>, <code>SelectNode</code>, <code>ReduceNode</code>, <code>CallNode</code> \u7b49\u8868\u8fbe\u5f0f</li> <li>...</li> </ol> <p></p> </li> <li> <p><code>RelayExprNode</code>: \u4e3b\u8981\u5728 <code>relay</code> \u6a21\u5757\u4e2d\u5b9a\u4e49\uff0c <code>RelayExpr</code> \u662f\u6240\u6709\u7684 non-primitive expressions \u7684\u57fa\u7c7b</p> <pre><code>class RelayExprNode : public BaseExprNode {\npublic:\n// \u5728type inference\u4e4b\u524d\uff0c\u8be5\u503c\u53ef\u4e3a undefined\n// \u5e8f\u5217\u5316 \u65f6\u8be5\u5b57\u6bb5\u5c06\u88ab\u4e22\u5f03\nmutable Type checked_type_ = Type(nullptr); // result of type checking.\n// Stores the result of structure information of the\n// expression that encapsulate both static shape and\n// runtime information such as shape.\nmutable Optional&lt;ObjectRef&gt; struct_info_ = Optional&lt;ObjectRef&gt;();\ninline const Type&amp; checked_type() const;\ntemplate &lt;typename TTypeNode&gt;\ninline const TTypeNode* type_as() const;\n// \u8be5 filed \u63cf\u8ff0\u4e86\u4e00\u4e2a Expr \u7684\u6c42\u503c\u7ed3\u679c\u88ab\u5b58\u653e\u5728\u54ea\u91cc\n// first-order values (tuples, references, ADTs) \u5404\u5b57\u6bb5\u5fc5\u987b\u5b58\u5728\u76f8\u540c\u7684 virtual device \u4e0a\n// \u5bf9\u4e8e\u51fd\u6570\u7c7b\u578b\uff0c \u8868\u793a\u51fd\u6570\u8c03\u7528\u8fd4\u56de\u503c\u7684\u5b58\u50a8device\uff0c \u800c\u4e0d\u662f\u51fd\u6570\u672c\u8eab\u7684\u5b58\u50a8device\n// VirtualDevice \u7684 `target` field \u63cf\u8ff0\u4e86\u51fd\u6570\u4f53\u8be5\u5982\u4f55\u88ab\u7f16\u8bd1\n// \u51fd\u6570\u8c03\u7528\u8fd4\u56de\u503c\u6240\u5728\u7684device \u4e0e \u51fd\u6570 body\u7684\u5b58\u50a8 device \u76f8\u540c\n// `src/relay/transforms/device_planner.cc` \u4e2d\u6709\u8be6\u7ec6\u5185\u5bb9\n// *type of virtual_device_ needs to be ObjectRef to avoid a circular import* ???\nmutable ObjectRef virtual_device_;\nVirtualDevice virtual_device() const;\nstatic constexpr const char* _type_key = \"RelayExpr\";\nstatic constexpr const uint32_t _type_child_slots = 22;\nTVM_DECLARE_BASE_OBJECT_INFO(RelayExprNode, BaseExprNode);\n};\n</code></pre> <p></p> <ol> <li> <p>RelayExpr \u4e2d\u6709\u4e24\u79cd\u53d8\u91cf\uff1a\u5168\u5c40\u53d8\u91cf <code>GlobalVar</code> \u548c\u5c40\u90e8\u53d8\u91cf <code>Var</code> \uff0c\u5728 relay IR \u7684 text-format \u4e2d\u4f7f\u7528\u4e0d\u540c\u7684\u524d\u7f00\u8868\u793a(<code>@</code>\u3001<code>%</code>)\uff0c\u5c40\u90e8\u53d8\u91cf\u4e00\u822c\u7528\u4f5c\u51fd\u6570\u7684\u53c2\u6570\u6216\u8005\u914d\u5408<code>let</code>\u8868\u8fbe\u5f0f\u7ed1\u5b9a\u4f7f\u7528</p> </li> <li> <p>Constant \u8868\u793a\u5e38\u91cf\u5f20\u91cf\u7c7b\u578b\u3002\u6839\u636e\u4e0d\u540c\u5f20\u91cf\u7ef4\u5ea6\u8868\u793a\u4e0d\u540c\u7684\u5e38\u91cf\uff0c\u6bd4\u5982\u6807\u91cf\u5e38\u91cf\u3001\u6570\u7ec4\u5e38\u91cf\uff0cRelayExpr \u4e2d\u5e38\u91cf\u8868\u8fbe\u5f0f\u4f7f\u7528 NDArray \u8868\u793a\uff1b \u8fd9\u91cc\u53ef\u4ee5\u5bf9\u6bd4 tir \u4e2d\u7684\u5e38\u91cf\u8868\u8fbe\u5f0f\uff1a \u5728tir \u4e2d\uff0c \u5e38\u91cf\u8868\u8fbe\u5f0f\u6709 <code>FloatImm</code>, <code>IntImm</code> \u7b49\u4e0d\u540c\u7c7b\u578b\u7528\u4e8e\u8868\u793a scalar\uff0c \u800c\u5728relay \u4e2d\u7684\u5e38\u91cf\u8868\u8fbe\u5f0f\u5219\u662f\u8868\u793a tensor</p> </li> </ol> </li> </ul> <p>\ud83d\udca1\u4ece\u5bf9\u4e8eLet\uff0c Match\uff0c Constructor \u7b49\u8868\u8fbe\u5f0f\u7684\u652f\u6301\u53ef\u4ee5\u770b\u51fa\uff0cRelay\u76f8\u6bd4\u4e8e\u4f20\u7edf\u7684\u6570\u636e\u6d41\u56fe \u6dfb\u52a0\u4e86\u66f4\u591a\u51fd\u6570\u5f0f\u7684\u652f\u6301\uff0c\u66f4\u5177\u4f53\u7684\u4fe1\u606f\u53ef\u4ee5\u53c2\u8003 relayIR</p>"},{"location":"mlc/tvm-type.html#221-let-binding","title":"2.2.1. Let-Binding","text":"<p>\u5173\u4e8e\u4e3a\u4ec0\u4e48\u9700\u8981 Let-binding\uff0c \u5728\u8fd9\u4e2a RFC \u91cc\u7684\u4f8b\u5b50\u53ef\u80fd\u6bd4\u5b98\u7f51\u5199\u7684\u66f4\u8be6\u7ec6\u4e00\u4e9b\uff1a TVM-Disc: Basic Block Normal Form</p> <p>\u7b80\u5355\u6765\u8bf4\u5c31\u662f\uff1a</p> <ul> <li> <p>Graph form \u7684 IR \u5bf9\u4e8e\u6a21\u5f0f\u5339\u914d\u548c\u56fe\u91cd\u5199\u975e\u5e38\u53cb\u597d\uff0c\u4f46\u662f graph-form \u5b58\u5728 \u6c42\u503c\u987a\u5e8f\u4e0d\u660e\u786e\uff0c \u65e0\u6cd5\u76f4\u63a5\u8868\u8fbescope\u8bed\u4e49 \u7684\u95ee\u9898\u3002graph-form \u901a\u5e38\u610f\u5473\u7740\u5b50\u56fe\u4e4b\u95f4\u7684\u6c42\u503c\u987a\u5e8f\u53ef\u4ee5\u4efb\u610f\u91cd\u6392\uff1b\u5bf9\u4e8e\u6ca1\u6709 effect \u7684 blocks(\u5373\u5b50\u56fe) \u4e4b\u95f4 \u8fdb\u884c\u6c42\u503c\u987a\u5e8f\u91cd\u6392\u662fok\u7684\uff0c\u4f46\u5982\u679c\u4e00\u4e2a block \u6709effect\uff08\u6bd4\u5982\u8bf4\u4f1a\u6539\u53d8\u53e6\u4e00\u4e2ablock\u4e5f\u7528\u5230\u7684\u4e00\u4e2a\u5168\u5c40\u72b6\u6001\u7b49\uff09\uff0c\u5219\u8be5block\u7684\u8ba1\u7b97\u987a\u5e8f\uff0cor \u8be5block\u4e0e\u5176\u5b83\u76f8\u5173 block \u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u5e94\u5f53\u88ab\u660e\u786e\u5b9a\u4e49\uff0c\u800c graph-form \u4f1a\u56e0\u4e3a\u7f3a\u5931\u8868\u8fbescope\u7684\u80fd\u529b\uff0c\u548c\u7f3a\u5931\u5b9a\u4e49block\u4e4b\u95f4\u8ba1\u7b97\u987a\u5e8f\u7684\u80fd\u529b\uff0c\u5bfc\u81f4\u8bed\u4e49\u6a21\u7cca(semantic ambiguity)\u3002\u5728Introduction to Relay IR \u4e2d\u6709\u4e24\u4e2a\u4f8b\u5b50\uff0c\u4e0b\u9762\u662fRFC\u4e2d\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a</p> <p></p> </li> <li> <p>\u5982\u679c\u6211\u4eec\u4f7f\u7528\u5e26\u6709\u663e\u5f0f let-binding \u7684 ANF\uff0c \u90a3\u4e48\u6211\u4eec\u80fd\u660e\u786e\u8ba1\u7b97\u8303\u56f4\uff0c\u4ee5\u53ca\u9700\u8981\u526f\u4f5c\u7528\u7684\u503c\u7684\u987a\u5e8f\u3002\u4f46\u662f\u4f7f\u7528 let-binding \u5728\u8fdb\u884c\u6a21\u5f0f\u5339\u914d\u7684\u65f6\u5019\u4f1a\u76f8\u5bf9\u56f0\u96be\u4e00\u4e9b\u3002</p> </li> </ul> <p>TVM \u7684\u56fe\u7ea7IR Relay \u9009\u62e9\u540c\u65f6\u652f\u6301 let-binding \u548c DAG \u5f62\u5f0f\uff0c\u4e24\u8005\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362\u3002</p> <ul> <li>\u5728 <code>test_pass_to_graph_normal_form</code>\uff0c <code>test_pass_to_a_normal_form</code>\uff0c <code>test_pass_to_basic_block_normal_form</code>\u4e2d\u6709 \u4e0d\u540c form \u4e4b\u95f4\u7684\u8f6c\u6362 pass \u5177\u4f53\u5e94\u7528</li> </ul> <p><code>Let</code>\u7684\u5177\u4f53\u5b9e\u73b0\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>class LetNode : public ExprNode {\nprotected:\n// LetNode uses own deleter to indirectly call non-recursive destructor\nObject::FDeleter saved_deleter_;\nstatic void Deleter_(Object* ptr);\npublic:\nVar var;    // The variable we bind to\nExpr value; // The value we bind var to\nExpr body;  // The body of the let binding\nstatic constexpr const char* _type_key = \"relay.Let\";\nTVM_DECLARE_FINAL_OBJECT_INFO(LetNode, ExprNode);\n};\n</code></pre> <p><code>tir</code> \u4e2d\u4e5f\u652f\u6301<code>Let</code>:</p> <pre><code>class LetNode : public PrimExprNode {\npublic:\nVar var;        // The variable\nPrimExpr value; // The value to be binded\nPrimExpr body;  // The result expression\nstatic constexpr const char* _type_key = \"tir.Let\";\nTVM_DECLARE_FINAL_OBJECT_INFO(LetNode, PrimExprNode);\n};\n</code></pre> <ul> <li>\u5728 <code>tests/python/relay/test_ir_parser.py</code> \u4e2d\u6709 <code>Let</code> \u7684\u5177\u4f53\u7528\u4f8b\u53ef\u4ee5\u53c2\u8003</li> </ul>"},{"location":"mlc/tvm-type.html#23-op","title":"2.3. Op","text":"<p>Relay \u548c tir \u7684 Op \u90fd\u662f RelayExpr (<code>include/tvm/ir/op.h</code>)\uff1a</p> <pre><code>class OpNode : public RelayExprNode {\npublic:\nString name;\nString description;\nmutable FuncType op_type;\nArray&lt;AttrFieldInfo&gt; arguments;\n\nString attrs_type_key;\nuint32_t attrs_type_index{0};\n\nint32_t num_inputs = -1;  // input arguments to the operator; -1 means variable length\n\nint32_t support_level = 10; // The lower the more priority\n\nstatic constexpr const char* _type_key = \"Op\";\nTVM_DECLARE_FINAL_OBJECT_INFO(OpNode, RelayExprNode);\nprivate:\n// Program internal unique index of operator.\n// Used to help index the program.\nuint32_t index_{0};\n// whether this is a primitive op. -1 means unknown.\nmutable int is_primitive_{-1};\n};\n</code></pre> <p>TVM \u5728 C++ \u7aef\u4f7f\u7528 <code>RELAY_REGISTER_OP</code> \u673a\u5236\u7edf\u4e00\u7ba1\u7406 Relay Op\uff0c\u8fd9\u91cc\u4ee5 Relay \u5b9a\u4e49\u7684 <code>dense</code> Op \u7684\u4f8b\u5b50\u6765\u7406\u89e3\uff0c\u4f4d\u4e8e<code>src/relay/op/nn/nn.cc</code> \u4e2d:</p> <pre><code>Expr MakeDense(Expr data, Expr weight, IndexExpr units, DataType out_dtype) {\nauto attrs = make_object&lt;DenseAttrs&gt;();\nattrs-&gt;units = units;\nattrs-&gt;out_dtype = out_dtype;\nstatic const Op&amp; op = Op::Get(\"nn.dense\");\nreturn Call(op, {data, weight}, Attrs(attrs), {});\n}\n\nTVM_REGISTER_GLOBAL(\"relay.op.nn._make.dense\").set_body_typed(MakeDense);\n\nRELAY_REGISTER_OP(\"nn.dense\")\n.describe(/*\u7701\u7565*/)\n.set_attrs_type&lt;DenseAttrs&gt;()\n.set_num_inputs(2)\n.add_argument(\"data\", \"nD Tensor\", \"Input data.\")\n.add_argument(\"weight\", \"2D Tensor\", \"Weight matrix.\")\n.set_support_level(1)\n.set_attr&lt;FInferCorrectLayout&gt;(\"FInferCorrectLayout\", DenseInferCorrectLayout)\n.add_type_rel(\"Dense\", MatmulRel&lt;DenseAttrs&gt;)\n.set_attr&lt;TOpPattern&gt;(\"TOpPattern\", kOutEWiseFusable);\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u6700\u7ec8\u8fd4\u56de\u7684\u5c31\u662f\u4e00\u4e2a <code>CallNode</code>\uff0c Op \u662f <code>dense</code>\u3002</p>"},{"location":"mlc/tvm-type.html#24-irmodule","title":"2.4. IRModule","text":"<p>\u5b9a\u4e49\u5728 <code>include/tvm/ir/module.h</code> \u4e2d</p> <pre><code>class IRModuleNode : public Object {\npublic:\nMap&lt;GlobalVar, BaseFunc&gt; functions;               // global-var =&gt; global-function\nMap&lt;GlobalTypeVar, TypeData&gt; type_definitions;    // global-type-var =&gt; ADT-type-data\nMap&lt;String, GlobalVar&gt; global_var_map_;           // string-name =&gt; global-var\nMap&lt;String, GlobalTypeVar&gt; global_type_var_map_;  // string-name =&gt; global-type-var\nSourceMap source_map; // source map for the module\nDictAttrs attrs;      // \u5b58\u50a8\u8be5 module \u7684\u5143\u4fe1\u606f\n\nstd::unordered_map&lt;int32_t, Constructor&gt; constructor_tag_map_;  // constructor-tags =&gt; constructor\nstd::unordered_set&lt;String&gt; import_set_; // files previously imported\n\nTVM_DLL void Add(const GlobalVar&amp; var, const BaseFunc&amp; func, bool update = false);\nTVM_DLL void AddTypeDef(const GlobalTypeVar&amp; var, const TypeData&amp; type, bool update = false);\nTVM_DLL GlobalVar GetGlobalVar(const String&amp; str) const;\nTVM_DLL GlobalTypeVar GetGlobalTypeVar(const String&amp; str) const;\nTVM_DLL void Import(const String&amp; path);  // Import Relay code from path.\nstatic constexpr const char* _type_key = \"IRModule\";\nTVM_DECLARE_FINAL_OBJECT_INFO(IRModuleNode, Object);\n};\n</code></pre> <p>TODO:</p>"},{"location":"mlc/tvm-type.html#25-schedule","title":"2.5. Schedule","text":"<p>TODO:</p>"},{"location":"mlc/tvm-type.html#26-pass","title":"2.6. Pass","text":"<p>TVM \u7684Pass \u57fa\u7840\u8bbe\u65bd\u5b9a\u4e49\u4e86\u4e00\u4e2a\u865a\u57fa\u7c7b: <code>Pass</code>\uff0c\u4ee5\u53ca \u5b9e\u73b0 Pass \u7ba1\u7406\u7684 <code>PassContext</code>(\u7c7b\u4f3c LLVM \u4e2d\u7684 PassManeger) \u7b49\uff0c \u5b83\u4eec\u7684\u5b9a\u4e49\u5728 <code>include/tvm/ir/transform.h</code> \u4e2d</p> <p>\u8be5\u6587\u4ef6\u5b9e\u73b0\u4e86\u4e00\u4e2a pass \u7ba1\u7406\u5668\u3002 Pass \u7ba1\u7406\u5668\u7ba1\u7406\u5728\u7ed9\u5b9a\u7684 AST \u5355\u5143 \u4e0a\u7ba1\u7406 IRModule -&gt; IRModule \u7684\u8f6c\u6362 Passes\u3002 \u8be5\u8bbe\u8ba1\u7684\u7075\u611f\u4e3b\u8981\u6765\u81ea LLVM \u7684 pass \u7ba1\u7406\u5668\u548c\u6267\u884c \u5f20\u91cf -&gt; \u5f20\u91cf \u8f6c\u6362\u7684\u73b0\u4ee3\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6</p> <p>\u4f20\u7edf\u7f16\u8bd1\u5668pass \u7ba1\u7406\u5668\u7684\u804c\u8d23\u901a\u5e38\u5305\u62ec\uff1a </p> <ul> <li>\u7ec4\u7ec7\u4f18\u5316 Pass \u7684\u6267\u884c\u987a\u5e8f\uff0c\u4f46\u4e0d\u4e00\u5b9a\u662f\u6700\u4f73\u987a\u5e8f</li> <li>\u6536\u96c6\u6240\u9700\u7684\u5206\u6790\u4fe1\u606f\u5e76\u53ca\u65f6\u66f4\u65b0</li> <li>\u51cf\u5c11\u4e3a\u7f16\u8bd1\u5668\u5f00\u53d1\u4eba\u5458\u7b49\u5b9e\u65bd\u65b0 Pass \u6240\u9700\u7684\u5de5\u4f5c\u91cf</li> </ul> <p>\u4e0e LLVM \u7684 pass \u7ba1\u7406\u5668\u7c7b\u4f3c\uff0c\u6211\u4eec\u5c06 Relay/Relax pass \u7ba1\u7406\u5668\u8bbe\u8ba1\u4e3a\u4ee5\u4e0d\u540c\u7684\u7c92\u5ea6\u5de5\u4f5c\uff0c\u5373\u6a21\u5757\u7ea7\u522b\u3001\u51fd\u6570\u7ea7\u522b\uff0c\u4ee5\u53ca sequential passes that contains a host of passes\u3002</p> <p>\u4f46\u6211\u4eec\u8fd8\u8003\u8651\u4e86\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff08\u4f8b\u5982 Pytorch \u548c Gluon \u7b49\uff09\u7684\u8981\u6c42/\u7ea6\u5b9a\uff0c\u4ece\u800c\u6269\u5c55\u4e86\u4f20\u7edf Pass \u7ba1\u7406\u5668\u7684\u529f\u80fd\u3002 Relay/Relax  Pass \u7ba1\u7406\u5668\u4e2d\u7684\u6bcf\u4e2a Pass \u90fd\u6267\u884c IRModule -&gt; IRModule \u8f6c\u6362\u3002 \u6240\u6709\u4e0d\u540c\u7c7b\u578b\u7684\u4f20\u9012\uff0c\u5305\u62ec sequential-level pass object\uff0c\u672c\u8d28\u4e0a\u90fd\u662f\u4f20\u9012\u5bf9\u8c61\u3002 \u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5316 Relay/Relax pass \u7684\u5f00\u53d1\u548c\u6d4b\u8bd5\u7684\u65b9\u6cd5\u3002 \u4f8b\u5982\uff0c\u4f7f\u7528 Pass \u7ba1\u7406\u5668\uff0c\u5916\u90e8\u7528\u6237\u5c06\u80fd\u591f\u6b63\u786e\u5b89\u6392\u81ea\u5b9a\u4e49 Pass \uff0c\u800c\u65e0\u9700\u4fee\u6539\u5355\u4e2a\u624b\u5de5\u5236\u4f5c\u7684 Pass \u8ba2\u5355\u3002</p> <p>\u5c06\u6765\u6211\u4eec\u9700\u8981\u63cf\u8ff0 Pass \u4e4b\u95f4\u7684\u7ea6\u675f\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u4fdd\u7559\u4e0d\u540c Pass \u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u5e76\u5728\u67d0\u4e2a Pass \u5b8c\u6210\u65f6\u9a8c\u8bc1\u5b83\u4eec</p> <p>\u6211\u4eec\u8fd8\u9700\u8981\u5b58\u50a8\u8f85\u52a9\u4fe1\u606f\u5e76\u5bfc\u5165\u9519\u8bef\u62a5\u544a\u7cfb\u7edf</p> <p>\u5176\u4e2d Pass \u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>class PassNode : public Object {\npublic:\nvirtual ~PassNode() {}\nvirtual PassInfo Info() const = 0;\nIRModule operator()(IRModule mod) const {\nreturn this-&gt;operator()(std::move(mod), PassContext::Current());\n}\nvirtual IRModule operator()(IRModule mod, const PassContext&amp; pass_ctx) const = 0;\nstatic constexpr const char* _type_key = \"transform.Pass\";\nTVM_DECLARE_BASE_OBJECT_INFO(PassNode, Object);\n};\n</code></pre> <p>\u4ece\u63cf\u8ff0\u4e2d\u53ef\u4ee5\u77e5\u9053\uff0c Pass \u505a\u4e00\u4e2a IRModule to IRModule \u7684\u53d8\u6362\u3002\u6211\u4eec\u9700\u8981\u6ce8\u610f\u4e24\u4e2a\u7c7b\u578b\uff0c <code>PassInfo</code> \u4e0e <code>PassContext</code> \u3002 \u8fd9\u91cc\u9996\u5148\u6765\u770b PassInfo\uff0c \u8be5\u7c7b\u578b\u8868\u793a\u4e00\u4e2a Pass \u7684 metadata, \u6bcf\u4e2a\u5177\u4f53\u7684 Pass \u5b9e\u73b0\u90fd\u8981\u63d0\u4f9b PassInfo \u4fe1\u606f</p> <pre><code>class PassInfoNode : public Object {\npublic:\nint opt_level;  // \u542f\u7528\u8be5 pass \u7684\u6700\u5c0f opt_level\nString name;    // pass \u540d\u5b57\nbool traceable; // \u8be5 pass \u662f\u5426\u53ef\u88ab trace\nArray&lt;String&gt; required; // \u6267\u884c\u5f53\u524d pass \u6240\u9700\u8981\u7684\u524d\u7f6e pass\n\nstatic constexpr const char* _type_key = \"transform.PassInfo\";\nstatic constexpr bool _type_has_method_sequal_reduce = false;\nTVM_DECLARE_FINAL_OBJECT_INFO(PassInfoNode, Object);\n};\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u6bcf\u4e2a Pass \u5b9e\u73b0\u9700\u8981\u4f7f\u7528\u5b57\u7b26\u4e32\u547d\u540d\uff0c\u5e76\u8bbe\u5b9a\u597d\u4f9d\u8d56\u7684\u524d\u7f6e Pass\uff0c\u4ece\u800c\u786e\u5b9a\u591a\u4e2a Pass \u7684\u6267\u884c\u987a\u5e8f\u3002</p> <p>\u518d\u770b PassContext</p> <pre><code>class PassContextNode : public Object {\npublic:\nint opt_level{2};             // \u9ed8\u8ba4 opt_level\nArray&lt;String&gt; required_pass;  // \u9700\u8981\u7684 pass \u5217\u8868\nArray&lt;String&gt; disabled_pass;  // \u7981\u7528\u7684 pass \u5217\u8868\nmutable Optional&lt;DiagnosticContext&gt; diag_ctx; // \u8bca\u65ad\u4fe1\u606f\u76f8\u5173\nMap&lt;String, ObjectRef&gt; config;  // Pass specific configurations\nArray&lt;instrument::PassInstrument&gt; instruments;  // pass instrument implementations\nmutable Array&lt;ObjectRef&gt; trace_stack; // relax\u7684Trace stack\nOptional&lt;Map&lt;String, Bool&gt;&gt; make_traceable; // \u5f85\u8ffd\u8e2a\u7684 passes\nmutable int num_evals{0}; // Number of evaluations conducted in the pass pipeline\nOptional&lt;ObjectRef&gt; tuning_api_database;  // Database for tuning API\n\nstatic constexpr const char* _type_key = \"transform.PassContext\";\nTVM_DECLARE_FINAL_OBJECT_INFO(PassContextNode, Object);\n};\n</code></pre> <p>\u987e\u540d\u601d\u4e49\uff0c\u662f\u591a\u4e2a Pass \u6267\u884c\u8fc7\u7a0b\u4e2d\u7684\u5171\u540c\u4e0a\u4e0b\u6587\uff0c \u5176\u4e2d\u7684 <code>instruments</code> \u662f\u63d0\u4f9b\u7ed9\u5f00\u53d1\u8005\u7684\u4e00\u4e2a\u5de5\u5177\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e9b\u51fd\u6570\u8fd0\u884c\u5728\u6bcf\u4e2aPass\u7684\u8fd0\u884c\u524d\u540e\u6216\u8005\u5176\u4ed6\u65f6\u673a\uff0c\u8fd9\u4e9b\u51fd\u6570\u6253\u5305\u5230\u4e00\u8d77\u79f0\u4e3a <code>PassInstrument</code> \u6ce8\u518c\u5230 <code>PassContext</code> \u4e2d\u3002</p> <p>\u901a\u8fc7 <code>PassContext::Current()</code> \u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a thread local \u7684\u5f53\u524d\u751f\u6548\u7684 <code>PassContext</code> \uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c Python <code>with</code> \u7684\u8bed\u6cd5\u8986\u76d6\u5f53\u524d\u751f\u6548\u7684 PassContext, \u5982\u4e0b</p> <p><pre><code>auto new_ctx = PassContext::Create();\nctx-&gt;opt_level = 3;\nWith&lt;PassContext&gt; scope(ctx);\n// pass context in effect.\n</code></pre> \u8fd9\u5bf9\u5e94\u4e86\u5728 python \u4e2d\u6211\u4eec\u7ecf\u5e38\u4f7f\u7528 <code>relay.build</code> \u65f6\u76f8\u5e94\u7684\u4ee3\u7801\uff1a</p> <pre><code>with tvm.transform.PassContext(opt_level=3):\n  rt_lib = relay.build(ir_mod=ir_mod, target=\"llvm\")\n</code></pre> <p>TVM \u4e2d\u5b9e\u73b0\u4e86\u4e09\u4e2a\u5c42\u7ea7\u7684 Pass\uff08\u5b9e\u9645\u4e0a\u5728relax\u4e2d\u53c8\u5f15\u5165\u4e86 <code>DataflowBlockPass</code> \u8fd9\u4e2d\u7c7b\u578b\u7684pass\uff09\uff0c\u5728 PassNode \u7684\u8fd9\u4e09\u4e2a\u5b50\u7c7b\u4e2d\u901a\u8fc7 <code>pass_func</code> \u6210\u5458\u6765\u63cf\u8ff0\u4e00\u4e2a pass \u5177\u4f53\u600e\u6837\u5bf9\u4e00\u4e2a IRModule\u3001Function\u7b49\u505a\u8f6c\u6362</p> <ol> <li> <p>Module-Level</p> <p>Module\u7ea7\u522b pass \u65e8\u5728\u5b9e\u73b0\u5168\u5c40\u5206\u6790/\u4f18\u5316\uff0c\u5373\u8fc7\u7a0b\u95f4\u4f18\u5316\uff08IPO\uff09\u7b49\uff0c\u7c7b\u4f3c\u4e8e LLVM \u4e2d\u7684 module pass\u3002</p> <p>Relay \u4e2d\u4e00\u4e9b\u9700\u8981 Module \u5168\u5c40\u56fe\u7684\u5178\u578b pass\uff0c\u5982 A-normal form \u8f6c\u6362\u548c lambda \u63d0\u5347\u7b49\uff0c\u90fd\u5c5e\u4e8e\u8fd9\u4e2a\u96c6\u5408\u3002\u6b64\u7ea7\u522b\u7684 pass \u53ef\u4ee5\u5b8c\u5168\u63a7\u5236\u7ed9\u5b9a\u7684 relay \u7a0b\u5e8f\uff0c\u5305\u62ec\u6dfb\u52a0\u548c\u5220\u9664\u51fd\u6570\u3002</p> <pre><code>class ModulePassNode : public PassNode {\npublic:\nPassInfo pass_info;\n// `pass_func` \u63cf\u7ed8\u4e86\u771f\u6b63\u7684\u4f18\u5316\u3002 \u4f8b\u5982: \u5728`pass_func` \u4e2d\u5b9e\u73b0\u6b7b\u4ee3\u7801\u6d88\u9664\u7b97\u6cd5\n// \u5e76\u8ba9\u5b83\u5728 module \u4e0a\u8fd0\u884c\u3002\u5b83\u5c06\u5220\u9664\u6b7b\u4ee3\u7801\uff0c\u5305\u62ec module \u4e2d\u672a\u4f7f\u7528\u7684\u51fd\u6570\u3002\nruntime::TypedPackedFunc&lt;IRModule(IRModule, PassContext)&gt; pass_func;\n\n// Apply a pass, IRModule =&gt; IRModule: \u8fd4\u56de\u66f4\u65b0\u540e\u7684 IRModule.\nIRModule operator()(IRModule mod, const PassContext&amp; pass_ctx) const final;\nstatic constexpr const char* _type_key = \"transform.ModulePass\";\nTVM_DECLARE_FINAL_OBJECT_INFO(ModulePassNode, PassNode);\n};\n</code></pre> <ul> <li>Relay \u4e2d\u7684 Module-level Pass\uff1a<code>InferType</code>, <code>ToBasicBlockNormalForm</code>, <code>ToANormalForm</code>, <code>ToGraphNormalForm</code>, <code>PartitionGraph</code>, <code>PartialEval</code>, <code>RemoveUnusedFunctions</code>, <code>RemoveStandaloneReshapes</code> \u7b49</li> <li>tir \u4e2d\u7684 Module-level Pass\uff1a<code>VerifySSA</code>, <code>SplitHostDevice</code>, <code>ExtractPrimFuncConstants</code>, <code>MakePackedAPI</code> \u7b49</li> </ul> </li> <li> <p>Function-Level</p> <p>\u51fd\u6570\u7ea7 pass \u7528\u4e8e\u5bf9\u7ed9\u5b9a\u7684 Relay/tir module \u8fdb\u884c\u5404\u79cd\u51fd\u6570\u5185\u7684\u4f18\u5316\u3002 \u5b83\u6bcf\u6b21\u4ece module \u7684\u51fd\u6570\u5217\u8868\u4e2d\u83b7\u53d6\u4e00\u4e2a\u51fd\u6570\u8fdb\u884c\u4f18\u5316\uff0c\u5e76\u4ea7\u751f\u4e00\u4e2a\u91cd\u5199\u7684 Relay Function \u6216 tir PrimFunc\u3002 \u5927\u90e8\u5206 pass \u90fd\u53ef\u4ee5\u5f52\u4e3a\u8fd9\u4e00\u7c7b\uff0c\u6bd4\u5982 Relay \u4e2d\u5e38\u89c1\u7684\u5b50\u8868\u8fbe\u5f0f\u6d88\u9664\u548c\u63a8\u7406\u7b80\u5316\uff0c\u4ee5\u53ca tir \u4e2d\u7684\u5411\u91cf\u5316\u548c flattening storage \u7b49\u3002</p> <p>\u8fd9\u4e2a\u7ea7\u522b\u7684 Pass \u4f7f\u7528 <code>PrimFuncPassNode</code>(tir) \u548c <code>FuncPassNode</code>(relay, relax) \u6765\u8868\u793a\uff0c  \u5176\u4e2d relay \u7684 <code>FuncPassNode</code> \u5b9e\u73b0\u5982\u4e0b\uff1a</p> <pre><code>class FunctionPassNode : public PassNode {\npublic:\nPassInfo pass_info;\n// `pass_func` \u63cf\u8ff0\u771f\u6b63\u7684\u4f18\u5316\uff0c\u76f8\u540c\u7684 `pass_func` \u5e94\u7528\u4e8e module \u4e2d\u6bcf\u4e2a\u51fd\u6570\nruntime::TypedPackedFunc&lt;Function(Function, IRModule, PassContext)&gt; pass_func;\nFunctionPassNode() = default;\nIRModule operator()(IRModule mod, const PassContext&amp; pass_ctx) const final;\nstatic constexpr const char* _type_key = \"relay.FunctionPass\";\nTVM_DECLARE_FINAL_OBJECT_INFO(FunctionPassNode, PassNode);\n};\n</code></pre> <ul> <li>Relay \u4e2d\u7684 Function-level Pass\uff1a<code>FuseOps</code>, <code>DynamicToStatic</code>(\u7b80\u5355\u7684\u4e00\u4e2a\u4f8b\u5b50), <code>ConvertLayout</code>, <code>DeFuseOps</code>, <code>DeadCodeElimination</code>, <code>FoldConstant</code>, <code>Inline</code>, <code>EliminateCommonSubexpr</code>(ECS), <code>SimplifyExpr</code> \u7b49</li> <li>tir \u4e2d\u7684 Function-level Pass\uff1a<code>LowerIntrin</code>, <code>InjectPrefetch</code>, <code>StorageFlatten</code>, <code>StorageRewrite</code>, <code>LoopPartition</code>, <code>VectorizeLoop</code>, <code>UnrollLoop</code>, <code>RemoveNoOp</code>, <code>CommonSubexprElimTIR</code>(ECS), <code>Simplify</code>\u7b49</li> </ul> </li> <li> <p>Sequential</p> <p>\u7c7b\u4f3c pytorch \u91cc\u9762\u7684 nn.Sequential, \u5305\u542b\u4e86\u4e00\u5806\u53ef\u6267\u884c\u7684Pass\u6309\u7167\u987a\u5e8f\u6267\u884c\u3002\u76ee\u524d\u5728 Relay \u4e2d\u53ea\u6709\u5c11\u6570 pass \u88ab\u653e\u5165\u8be5\u7ec4\u3002</p> <pre><code>class SequentialPassNode : PassNode {\nPassInfo pass_info;\n// Passes need to be executed.\nArray&lt;Pass&gt; passes;\nbool PassEnabled(const PassInfo&amp; info) const;\nModule operator()(const Module&amp; mod, const PassContext&amp; pass_ctx) const final;\n};\n</code></pre> <p>\u4f8b\u5982\uff0c relay \u7684 <code>FoldScaleAxis</code> Pass \u9700\u8981\u5728\u5185\u90e8\u8c03\u5ea6 <code>ForwardFoldScaleAxis</code> \u548c <code>BackwardFoldScaleAxis</code> \u3002 \u4e14\u5e94\u5f53\u5148\u6267\u884c <code>BackwardFoldScaleAxis</code> \u3002\u56e0\u6b64\uff0c\u8fd9\u4e2a Pass \u662f SequentialPass \u7684\u7406\u60f3\u5019\u9009\u3002</p> </li> </ol> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u4ee5 Relay \u4e2d\u7684 <code>FoldConstant</code> pass \u4e3a\u4f8b\u6765\u770b\u4e00\u4e0b relay \u4e2d\u7684 pass \u7684\u7ba1\u7406\u548c\u4f7f\u7528\uff0c\u5b9e\u9a8c\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>import numpy as np\nimport tvm\nfrom tvm import relay\n\ncons1 = relay.const(np.ones((3,3)))\ncons2 = relay.const(np.ones((3,3)))\n\nright = relay.var(\"right\")\nleft = relay.var(\"left\")\nlet = relay.Let(right, cons1*cons2, relay.Let(left, cons1* cons2 + cons1* cons2, left + right))\n# \u5373 (cons1 * cons2) * 3\nmain = relay.Function([], let)\n\nprint(relay.transform.FoldConstant())\n\nseq = tvm.transform.Sequential(\n    [\n        relay.transform.FoldConstant(),\n    ]\n)\n\nmod = tvm.IRModule({\"main\":main})\nprint(mod)\nprint(f\"{'='*20}After FoldConstant{'='*20}\")\nwith tvm.transform.PassContext(opt_level=3):\n  opt_mod = seq(mod)\nprint(opt_mod)\n</code></pre> <p>\u7a0b\u5e8f\u8f93\u51fa\u5982\u4e0b\uff1a</p> <pre><code>Run Function pass: FoldConstant at the optimization level 2\ndef @main() {\n  let %right = multiply(meta[relay.Constant][0], meta[relay.Constant][1]);\n  %0 = multiply(meta[relay.Constant][0], meta[relay.Constant][1]);\n  %1 = multiply(meta[relay.Constant][0], meta[relay.Constant][1]);\n  let %left = add(%0, %1);\n  add(%left, %right)\n}\n\n\n====================After FoldConstant====================\n\ndef @main() -&gt; Tensor[(3, 3), float32] {\n  meta[relay.Constant][0] /* ty=Tensor[(3, 3), float32] */\n}\n</code></pre> <ol> <li> <p>\u9996\u5148\u5173\u6ce8\u7a0b\u5e8f\u4e2d\u7684 <code>relay.transform.FoldConstant()</code>\uff0c\u8fd9\u91cc\u7684\u8c03\u7528\u5c06\u6784\u9020\u4e00\u4e2a<code>FunctionPass</code> \u5bf9\u8c61\uff0c \u8c03\u7528\u5bf9\u5e94\u5728c++\u4e2d\u7684 <code>src/relay/transform/fold_constant.cc</code>\uff1a</p> <pre><code>Pass FoldConstant(bool fold_qnn) {\nruntime::TypedPackedFunc&lt;Function(Function, IRModule, PassContext)&gt; pass_func =\n[=](Function f, IRModule m, PassContext) {\nreturn Downcast&lt;Function&gt;(\nConstantFolder(m, fold_qnn).VisitExpr(f));\n};\nreturn CreateFunctionPass(pass_func, 2, \"FoldConstant\", {});\n}\n\nTVM_REGISTER_GLOBAL(\"relay._transform.FoldConstant\").set_body_typed(FoldConstant);\n</code></pre> <p>\u524d\u9762\u8bf4\u5230\uff0c pass \u7684\u6838\u5fc3\u903b\u8f91\u5728\u4e8e <code>pass_func</code>\uff0c \u800c\u5bf9\u4e8e relay \u7684 <code>FoldConstant</code> \u8fd9\u4e2a pass \u6765\u8bf4\uff0c \u5176\u5b9e\u73b0\u903b\u8f91\u5728\u4e8e <code>ConstantFolder</code>\u7684 <code>VisitExpr</code> \u65b9\u6cd5\uff1a</p> </li> <li> <p>\u56e0\u6b64\u63a5\u4e0b\u6765\u5173\u6ce8 <code>ConstantFolder</code>\uff1a     <pre><code>class ConstantFolder : public MixedModeMutator {\npublic:\nexplicit ConstantFolder(IRModule module, bool fold_qnn);\n\nprivate:\nusing ExprMutator::VisitExpr_;\n\nExpr VisitExpr_(const LetNode* let_node) final;\nExpr VisitExpr_(const FunctionNode* function_node) final;\nExpr VisitExpr_(const IfNode* if_node) final;\n\nExpr Rewrite_(const CallNode* pre_call_node, const Expr&amp; post) final;\nExpr Rewrite_(const TupleGetItemNode* tuple_get_item_node,\nconst Expr&amp; post_tuple_get_item) final;\n\n// Constant evaluate an expression.\nExpr ConstEvaluate(const Expr&amp; expr);\n\nOptional&lt;Expr&gt; EvaluateShapeOf(const Call&amp; call);\nOptional&lt;Expr&gt; EvaluateNdarraySize(const Call&amp; call);\n\nExpr CastValue(const Expr&amp; value, DataType dtype);\n\nOptional&lt;tvm::Array&lt;IndexExpr&gt;&gt; GetConstantShape(const Expr&amp; input);\n\n// Module\nIRModule module_;\n// Whether to fold constants for QNN operations.\nbool fold_qnn_;\n// The kDLCPU device assumed to be available to the compiler. Used only when evaluating\n// sub-expressions.\nDevice eval_cpu_dev_{kDLCPU, /*device_id=*/0};\n// The target for the above device assumed to be available to the compiler. Used only when\n// evaluating sub-expressions.\nTarget eval_cpu_target_{\"llvm\"};\n// Cache the following ops for equivalence checking in this pass.\nconst Op&amp; device_copy_op_;\nconst Op&amp; shape_of_op_;\nconst Op&amp; vm_shape_of_op_;\nconst Op&amp; cast_op_;\nconst Op&amp; ndarray_size_op_;\n// True if currently within a \"primitive\" Relay Function.\nbool inside_primitive_ = false;\n};\n</code></pre></p> <p>\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6574\u4e2a\u51fd\u6570\u53ea\u6709\u4e00\u4e2a <code>Let</code> Node\uff0c\u56e0\u6b64\u4f8b\u5b50\u4e2d\u8fdb\u884c\u5e38\u91cf\u6298\u53e0\u6700\u6838\u5fc3\u7684\u903b\u8f91\u5728\u4e8e <code>Expr VisitExpr_(const LetNode* let_node)</code>\uff1a</p> <p><pre><code>// \u91cd\u5199\u4e86 ExprMutator \u4e2d\u7684\u65b9\u6cd5\nExpr VisitExpr_(const LetNode* let_node) final {\nauto pre_visit = [this](const LetNode* op) {\n// Rely on the Memoizer to cache pre-visit values\nExpr new_value = Mutate(op-&gt;value);\nif (IsSimpleConstant(new_value)) {\n// Inline new value (along with any on_device annotation wrapping it) at all occurrences of\n// the variable.\n//\n// We need to retain any \"on_device\" annotation so that downstream 'device aware'\n// passes can still retrieve the virtual device for the constant in its new position(s). Eg:\n//   def @f(..., result_virtual_device=D) {\n//     let %x = on_device(... something we eval to a constant..., virtual_device=E)\n//     @f(..., %x, ...)\n//   }\n// Here the default virtual device is D, whereas the argument %x to @f is on E (and @f\n// expects that). No on_device annotation is required in the call according to the\n// convention used by the device-aware visitors.\n//\n// However once we've inlined the constant we need to insert an on_device, again to\n// respect the convention used by the device-aware visitors.\n//   def @f(..., result_virtual_device=D) {\n//     @f(..., on_device(...the constant..., virtual_device=E), ...)\n//   }\nVLOG(1) &lt;&lt; \"Replacing let-binding for \" &lt;&lt; op-&gt;var-&gt;name_hint()\n&lt;&lt; \" with constant:\" &lt;&lt; std::endl\n&lt;&lt; PrettyPrint(new_value);\nmemo_[op-&gt;var] = new_value;\n} else {\nthis-&gt;Mutate(op-&gt;var);\n}\n};\nauto post_visit = [this](const LetNode* op) {\nExpr expr = GetRef&lt;Expr&gt;(op);\n// Rely on the Memoizer to cache pre-visit values\nExpr new_value = this-&gt;Mutate(op-&gt;value);\nif (IsSimpleConstant(new_value)) {\n// The let-bound value has been inlined, drop the let-binding itself.\nthis-&gt;memo_[expr] = Mutate(op-&gt;body);\n} else {\nVar new_var = Downcast&lt;Var&gt;(this-&gt;Mutate(op-&gt;var));\nExpr new_body = this-&gt;Mutate(op-&gt;body);\nif (new_var.same_as(op-&gt;var) &amp;&amp; new_value.same_as(op-&gt;value) &amp;&amp;\nnew_body.same_as(op-&gt;body)) {\nthis-&gt;memo_[expr] = expr;\n} else {\nthis-&gt;memo_[expr] = Let(new_var, new_value, new_body, op-&gt;span);\n}\n}\n};\nExpandANormalForm(let_node, pre_visit, post_visit);\nreturn memo_[GetRef&lt;Expr&gt;(let_node)];\n}\n</code></pre> 3. \u4ee3\u7801\u4e2d\u7684 <code>opt_mod = seq(mod)</code> \u5c06\u4f1a\u8c03\u7528 Pass \u7c7b\u7684 <code>operator()</code> \u65b9\u6cd5\uff1a</p> <pre><code>TVM_REGISTER_GLOBAL(\"transform.RunPass\").set_body_typed([](Pass pass, IRModule mod) {\nreturn pass(std::move(mod));\n});\n</code></pre> <p>\u800c <code>IRModule Pass::operator()(IRModule mod) const</code> \u5b9e\u73b0\u5982\u4e0b\uff1a</p> <pre><code>IRModule Pass::operator()(IRModule mod) const {\nreturn this-&gt;operator()(std::move(mod), PassContext::Current());\n}\n\nIRModule Pass::operator()(IRModule mod, const PassContext&amp; pass_ctx) const {\nconst PassNode* node = operator-&gt;();\nconst PassInfo&amp; pass_info = node-&gt;Info();\n\nIRModule ret;\nret = node-&gt;operator()(std::move(mod), pass_ctx);\n\nreturn std::move(ret);\n}\n</code></pre> <p>\u5bf9\u4e8e\u6211\u4eec\u6267\u884c\u7684 FoldConstant pass \u800c\u8a00\uff0c \u8fd9\u91cc\u7684 node \u5c31\u662f</p> </li> </ol>"},{"location":"mlc/tvm-type.html#3-target","title":"3. Target","text":"<p>\u5df2\u77e5 TVM \u7684 \u7f16\u8bd1\u6d41\u7a0b\u5927\u4f53\u56fe\u4e0b\uff1a</p> <p>\u5728\u524d\u9762\u4ecb\u7ecd\u4e86 runtime \u7684\u673a\u5236\u4ee5\u53ca IR \u4e4b\u540e\uff0c \u9700\u8981\u5173\u6ce8\u7684\u5c31\u662f target\uff0c target \u6a21\u5757\u4e3b\u8981\u529f\u80fd\u662f Target \u63cf\u8ff0 \u4ee5\u53ca codgen module\uff0c\u5728 TVM \u4e2d\u4f7f\u7528 <code>Target</code> \u6765\u63cf\u8ff0\u4ee3\u7801\u751f\u6210\u7684\u76ee\u6807\u8bbe\u5907\u4fe1\u606f (\u58f0\u660e\u4f4d\u4e8e <code>include/tvm/target/target.h</code>)\uff1a</p> <pre><code>class TargetNode : public Object {\npublic:\nTargetKind kind;                  // target device \u7684\u79cd\u7c7b\nOptional&lt;ObjectRef&gt; host;         // Target host \u4fe1\u606f(\u5fc5\u987b\u4e3a Target \u7c7b\u578b)\nString tag;                       // target \u7684tag\uff0c\u53ef\u4ee5\u4e3a\u7a7a\nArray&lt;String&gt; keys;               // target \u7684 keys\nMap&lt;String, ObjectRef&gt; attrs;     // target \u7684\u5c5e\u6027\u5408\u96c6\nMap&lt;String, ObjectRef&gt; features;  // Target features\n\nTVM_DLL Map&lt;String, ObjectRef&gt; Export() const;  // \u5bfc\u51fa\u4e3a JSON-like config\nstatic constexpr const char* _type_key = \"Target\";\nstatic constexpr const bool _type_has_method_sequal_reduce = true;\nstatic constexpr const bool _type_has_method_shash_reduce = true;\nTVM_DECLARE_FINAL_OBJECT_INFO(TargetNode, Object);\nprivate:\nmutable std::string str_repr_;  // \u5185\u90e8\u5b57\u7b26\u4e32\u8868\u793a\n};\n</code></pre> <p>\u800c <code>TargetKind</code> \u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>class TargetKindNode : public Object {\npublic:\nString name;                    // \u76ee\u6807\u8bbe\u5907\u79cd\u7c7b \u7684 \u5b57\u7b26\u4e32\u540d\u79f0\nint default_device_type;        // \u76ee\u6807\u8bbe\u5907\u79cd\u7c7b \u7684 device\nArray&lt;String&gt; default_keys;     // \u76ee\u6807\u8bbe\u5907\u79cd\u7c7b\u7684\u9ed8\u8ba4 keys\nPackedFunc preprocessor;        // preprocess on target creation\nFTVMTargetParser target_parser; // parse a JSON target during creation\n\nstatic constexpr const char* _type_key = \"TargetKind\";\nTVM_DECLARE_FINAL_OBJECT_INFO(TargetKindNode, Object);\nprivate:\n// \u5b58\u50a8\u76ee\u6807\u7279\u5b9a\u5c5e\u6027\u6240\u9700\u7684 type_key \u548c type_index\nstruct ValueTypeInfo {\nString type_key;\nuint32_t type_index;\nstd::unique_ptr&lt;ValueTypeInfo&gt; key;\nstd::unique_ptr&lt;ValueTypeInfo&gt; val;\n};\nstd::unordered_map&lt;String, ValueTypeInfo&gt; key2vtype_; // target-key's attr =&gt; type information\nstd::unordered_map&lt;String, ObjectRef&gt; key2default_;   // target-key's attr =&gt; default value\nuint32_t index_;  // \u7528\u4e8e\u5c5e\u6027\u6ce8\u518c\u8868\u5185\u90e8\u67e5\u627e\u7684\u7d22\u5f15\n};\n</code></pre> <p>TODO: \u4e00\u4e2a\u4f8b\u5b50</p>"},{"location":"rust/rust-attributes.html","title":"\u5c5e\u6027(Attributes)","text":"<p>ref: </p> <ul> <li>Rust Reference-Attributes-cn</li> <li>Rust Reference-Attributes-en</li> </ul> <p>\u5199\u8fd9\u4e00\u7bc7\u7684\u51fa\u53d1\u70b9\u662f\u4e86\u89e3rust\u4e2d\u7684\u6761\u4ef6\u7f16\u8bd1\u3002</p> <p>rust - How do I use conditional compilation with <code>cfg</code> and Cargo? - Stack Overflow</p> <p>rust\u4e2d\u7684\u6761\u4ef6\u7f16\u8bd1\u901a\u8fc7\u5c5e\u6027(Attributes)\u6765\u5b9e\u73b0\u3002\u5c5e\u6027\u662f\u6839\u636e\u540d\u79f0\u3001\u7ea6\u5b9a\u3001\u8bed\u8a00\u548c\u7f16\u8bd1\u5668\u7248\u672c\u89e3\u91ca\u7684\u901a\u7528\u3001free-form\u7684\u5143\u6570\u636e\u3002</p> <ul> <li> <p>\u5185\u90e8\u5c5e\u6027(Inner attributes)\uff1a\u5f62\u5f0f\u4e3a<code>#![]</code>\u4f8b\u5982<code>#![allow(unused_variables)]</code>\uff1b \u5bf9\u5176\u4f5c\u7528\u57df\u5185\u6240\u6709\u5185\u5bb9\u751f\u6548\u3002</p> </li> <li> <p>\u5916\u90e8\u5c5e\u6027(Outer attributes)\uff1a\u5f62\u5f0f\u4e3a<code>#[]</code>\u4f8b\u5982<code>#[test]</code> \u628a\u4e00\u4e2a\u51fd\u6570\u6807\u8bb0\u4e3a\u6d4b\u8bd5function\uff1b\u5bf9\u5176\u540e\u7d27\u8ddf\u7684\u4e00\u9879\u5185\u5bb9\u751f\u6548\u3002</p> </li> </ul> <ul> <li>The outer attribute is placed outside something - i.e. before the struct, or function, or module. This is usually what you want. </li> <li>The inner attribute is placed inside something. This is the only way to place attributes on the crate (by writing them in the root of it), and AFAIK this use-case is the only one where you'll really want them.</li> </ul> <p>\u5c5e\u6027\u53ef\u4ee5\u5206\u4e3a\u5982\u4e0b\u51e0\u7c7b\uff1a</p> <ol> <li> <p>\u5185\u7f6e\u5c5e\u6027(Built-in attributes)</p> <ul> <li> <p>\u6761\u4ef6\u7f16\u8bd1(Conditional compilation)</p> <ul> <li> <p><code>cfg</code> \u2014 \u63a7\u5236\u6761\u4ef6\u7f16\u8bd1</p> <pre><code>// A conditionally-compiled module\n#[cfg(target_os = \"linux\")]\nmod bar { /* ... */ }\n</code></pre> </li> <li> <p><code>cfg_attr</code> \u2014 \u9009\u62e9\u6027\u5305\u542b\u5c5e\u6027</p> </li> </ul> </li> <li> <p>\u6d4b\u8bd5(Testing)</p> <ul> <li> <p><code>test</code> \u2014 \u5c06\u51fd\u6570\u6807\u8bb0\u4e3a\u6d4b\u8bd5\u51fd\u6570</p> <pre><code>// A function marked as a unit test\n#[test]\nfn test_foo() { /* ... */ }\n</code></pre> </li> <li> <p><code>ignore</code> \u2014 \u7981\u6b62\u6d4b\u8bd5\u6b64\u51fd\u6570</p> <pre><code>#[test]\n#[ignore = \"not yet implemented\"]\nfn test_bar() { /* ... */ }\n</code></pre> </li> <li> <p><code>should_panic</code> \u2014 \u8868\u793a\u6d4b\u8bd5\u5e94\u8be5\u4ea7\u751f panic</p> </li> </ul> </li> <li> <p>\u8bca\u65ad(Diagnostics)</p> <ul> <li> <p><code>allow\u3001warn\u3001deny\u3001forbid</code> \u2014 \u66f4\u6539\u9ed8\u8ba4\u7684 lint\u68c0\u67e5\u7ea7\u522b\u3002</p> <pre><code>// A lint attribute used to suppress a warning/error\n#[allow(non_camel_case_types)]\ntype int8_t = i8;\n</code></pre> </li> <li> <p><code>deprecated</code> \u2014 \u751f\u6210\u5f03\u7528\u901a\u77e5\u3002</p> </li> <li><code>must_use</code> \u2014 \u4e3a\u672a\u4f7f\u7528\u7684\u503c\u751f\u6210 lint \u63d0\u9192\u3002</li> </ul> </li> </ul> <p>...</p> </li> <li> <p>\u5b8f\u5c5e\u6027(Macro attributes)</p> </li> <li> <p>\u6d3e\u751f\u5b8f\u7684\u8f85\u52a9\u5c5e\u6027(Derive macro helper attributes)</p> </li> <li> <p>\u5916\u90e8\u5de5\u5177\u5c5e\u6027(Tool attributes)</p> <p>\u6ce8\u610f: rustc \u76ee\u524d\u80fd\u8bc6\u522b\u7684\u5de5\u5177\u662f \u201cclippy\u201d \u548c \u201crustfmt\u201d\u3002</p> <p>\u8fd9\u79cd\u5c5e\u6027\u683c\u5f0f\uff1a\u7b2c\u4e00\u4e2a\u5b57\u6bb5\u662f\u5916\u90e8\u5de5\u5177\u7684\u540d\u79f0\uff0c\u540e\u7eed\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u5b57\u6bb5\u7531\u5de5\u5177\u51b3\u5b9a\u3002\u4f8b\u5982\uff1a</p> <pre><code>// Tells the rustfmt tool to not format the following element.\n#[rustfmt::skip]\nstruct S {}\n// Controls the \"cyclomatic complexity\" threshold for the clippy tool.\n#[clippy::cyclomatic_complexity = \"100\"]\npub fn f() {}\n</code></pre> <p>\u5176\u4e2d<code>rustfmt</code>\u548c<code>clippy</code>\u662f\u4e24\u4e2a\u5b98\u65b9\u63d0\u4f9b\u7684\u5de5\u5177<code>rust-clippy</code>\u548c<code>rust-fmt</code>\uff0c\u524d\u8005\u7528\u4e8e\u68c0\u67e5\u4ee3\u7801\uff1a</p> <p>\u5728\u7f16\u7a0b\u5b9e\u8df5\u4e2d\uff0c\u5c06\u6709\u52a9\u4e8e\u5c06\u4ee3\u7801\u5199\u7684\u5bb9\u6613\u7ef4\u62a4\uff0c\u8d28\u91cf\u5408\u4e4e\u4e00\u5b9a\u89c4\u8303\u7684\u505a\u6cd5\uff0c\u79f0\u4e3aLinting\uff0c\u5728Rust\u4e2d\uff0c\u76f8\u5e94\u7684\u5de5\u5177\u662f<code>clippy</code>\u3002</p> <p>\u540e\u8005\u7528\u4e8e\u683c\u5f0f\u5316\u4ee3\u7801</p> </li> </ol>"},{"location":"rust/rust-macro.html","title":"Rust-macro","text":"<p>\u4f7f\u7528 <code>macro_rules!</code> \u7684 \u58f0\u660e\uff08Declarative\uff09\u5b8f\uff0c\u548c\u4e09\u79cd \u8fc7\u7a0b\uff08Procedural\uff09\u5b8f\uff1a</p> <ul> <li>\u81ea\u5b9a\u4e49<code>#[derive]</code>\u5b8f\u5728\u7ed3\u6784\u4f53\u548c\u679a\u4e3e\u4e0a\u6307\u5b9a\u901a\u8fc7 derive \u5c5e\u6027\u6dfb\u52a0\u7684\u4ee3\u7801</li> <li>\u7c7b\u5c5e\u6027\u5b8f\uff08Attribute-like macro\uff09\u5b9a\u4e49\u53ef\u7528\u4e8e\u4efb\u610f\u9879\u7684\u81ea\u5b9a\u4e49\u5c5e\u6027</li> <li>\u7c7b\u51fd\u6570\u5b8f\u770b\u8d77\u6765\u50cf\u51fd\u6570\u4e0d\u8fc7\u4f5c\u7528\u4e8e\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7684 token</li> </ul> <p>\u5b8f\u548c\u51fd\u6570\u533a\u522b\uff1f - \u5b8f\u662f\u4e00\u79cd\u4e3a\u5199\u5176\u4ed6\u4ee3\u7801\u800c\u5199\u4ee3\u7801\u7684\u65b9\u5f0f\uff0c\u5373\u6240\u8c13\u7684 \u5143\u7f16\u7a0b\uff08metaprogramming\uff09\u3002\u81ea\u5b9a\u4e49<code>#[derive]</code>\u5b8f\uff0c\u4f8b\u5982\u751f\u6210\u5404\u79cd<code>trait</code>\u7684\u5b9e\u73b0\u3002</p> <ul> <li>\u5b8f\u80fd\u591f\u63a5\u53d7\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570(<code>println!</code>)\u3002\u800c\u4e14\uff0c\u5b8f\u53ef\u4ee5\u5728\u7f16\u8bd1\u5668\u7ffb\u8bd1\u4ee3\u7801\u524d\u5c55\u5f00\uff0c\u4f8b\u5982\uff0c\u5b8f\u53ef\u4ee5\u5728\u4e00\u4e2a\u7ed9\u5b9a\u7c7b\u578b\u4e0a\u5b9e\u73b0 trait \u3002\u800c\u51fd\u6570\u5219\u4e0d\u884c\uff0c\u56e0\u4e3a\u51fd\u6570\u662f\u5728\u8fd0\u884c\u65f6\u88ab\u8c03\u7528\uff0c\u540c\u65f6 trait \u9700\u8981\u5728\u7f16\u8bd1\u65f6\u5b9e\u73b0\u3002</li> </ul> <p>\u5b8f\u548c\u51fd\u6570\u7684\u6700\u540e\u4e00\u4e2a\u91cd\u8981\u7684\u533a\u522b\u662f\uff1a\u5728\u4e00\u4e2a\u6587\u4ef6\u91cc\u8c03\u7528\u5b8f\u4e4b\u524d\u5fc5\u987b\u5b9a\u4e49\u5b83\uff0c\u6216\u5c06\u5176\u5f15\u5165\u4f5c\u7528\u57df\uff0c\u800c\u51fd\u6570\u5219\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u5b9a\u4e49\u548c\u8c03\u7528\u3002</p>"},{"location":"rust/rust-macro.html#declarative-macro","title":"\u58f0\u660e\u5b8f(Declarative Macro)","text":"<p>\u4f7f\u7528 <code>macro_rules!</code> \u8fdb\u884c\u58f0\u660e\uff0c\u662frust\u4e2d\u6700\u5e38\u7528\u7684\u5b8f\u3002\u5b83\u5141\u8bb8\u6211\u4eec\u7f16\u5199\u4e00\u4e9b\u7c7b\u4f3c rust <code>match</code> \u8868\u8fbe\u5f0f\u7684\u4ee3\u7801\uff0c\u63a5\u6536\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u4e0e\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u8fdb\u884c\u6a21\u5f0f\u5339\u914d\uff0c\u7136\u540e\u6839\u636e\u6a21\u5f0f\u5339\u914d\u6267\u884c\u76f8\u5173\u4ee3\u7801\u3002</p> <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5316\u7684<code>vec!</code>\u5b8f\uff1a</p> <pre><code>#[macro_export]\nmacro_rules! vec {\n( $( $x:expr ),* ) =&gt; {\n{\nlet mut temp_vec = Vec::new();\n$(\ntemp_vec.push($x);\n)*\ntemp_vec\n}\n};\n}\n</code></pre> <ol> <li><code>#[macro_export]</code> \u6ce8\u89e3\u8868\u660e\u53ea\u8981\u5bfc\u5165\u4e86\u5b9a\u4e49\u8fd9\u4e2a\u5b8f\u7684crate\uff0c\u8be5\u5b8f\u5c31\u5e94\u8be5\u662f\u53ef\u7528\u7684\u3002 \u5982\u679c\u6ca1\u6709\u8be5\u6ce8\u89e3\uff0c\u8fd9\u4e2a\u5b8f\u4e0d\u80fd\u88ab\u5f15\u5165\u4f5c\u7528\u57df\u3002</li> <li>\u63a5\u7740\u4f7f\u7528 macro_rules! \u548c\u5b8f\u540d\u79f0\u5f00\u59cb\u5b8f\u5b9a\u4e49\uff0c\u4e14\u6240\u5b9a\u4e49\u7684\u5b8f\u5e76 \u4e0d\u5e26 \u611f\u53f9\u53f7\u3002\u540d\u5b57\u540e\u8ddf\u5927\u62ec\u53f7\u8868\u793a\u5b8f\u5b9a\u4e49\u4f53\uff0c\u5728\u8be5\u4f8b\u4e2d\u5b8f\u540d\u79f0\u662f vec \u3002</li> <li></li> </ol>"},{"location":"rust/rust-macro.html#procedure-macro","title":"\u8fc7\u7a0b\u5b8f(Procedure Macro)","text":"<p>\u6709\u4e09\u79cd\u7c7b\u578b\u7684\u8fc7\u7a0b\u5b8f\uff08\u81ea\u5b9a\u4e49\u6d3e\u751f\uff08derive\uff09\uff0c\u7c7b\u5c5e\u6027\u548c\u7c7b\u51fd\u6570\uff09\uff0c\u4e0d\u8fc7\u5b83\u4eec\u7684\u5de5\u4f5c\u65b9\u5f0f\u90fd\u7c7b\u4f3c\u3002</p> <p>\u8fc7\u7a0b\u5b8f\u63a5\u6536Rust\u4ee3\u7801\u4f5c\u4e3a\u8f93\u5165\uff0c\u5728\u8fd9\u4e9b\u4ee3\u7801\u4e0a\u8fdb\u884c\u64cd\u4f5c\uff0c\u7136\u540e\u4ea7\u751f\u53e6\u4e00\u4e9b\u4ee3\u7801\u4f5c\u4e3a\u8f93\u51fa\uff0c\u800c\u975e\u50cf\u58f0\u660e\u5f0f\u5b8f\u90a3\u6837\u5339\u914d\u5bf9\u5e94\u6a21\u5f0f\u7136\u540e\u4ee5\u53e6\u4e00\u90e8\u5206\u4ee3\u7801\u66ff\u6362\u5f53\u524d\u4ee3\u7801\u3002</p>"},{"location":"rust/rust-macro.html#derive-macro","title":"\u81ea\u5b9a\u4e49\u6d3e\u751f\u5b8f(Derive macro)","text":"<p>\u7528\u4e8e<code>struct</code>\u3001<code>enum</code>\u3001<code>union</code>\u7c7b\u578b\uff0c\u53ef\u4e3a\u5176\u5b9e\u73b0\u51fd\u6570\u6216<code>trait</code>\u3002</p>"},{"location":"rust/rust-macro.html#attribute-like-macro","title":"\u7c7b\u5c5e\u6027\u5b8f(Attribute-like macro)","text":"<p>\u7c7b\u5c5e\u6027\u5b8f\u4e0e\u81ea\u5b9a\u4e49\u6d3e\u751f\u5b8f\u76f8\u4f3c\uff0c\u4e0d\u540c\u4e8e\u4e3a<code>derive</code>\u5c5e\u6027\u751f\u6210\u4ee3\u7801\uff0c\u5b83\u4eec\u5141\u8bb8\u4f60\u521b\u5efa\u65b0\u7684attribute\u3002<code>derive</code> \u53ea\u80fd\u7528\u4e8e\u7ed3\u6784\u4f53\u548c\u679a\u4e3e\uff1b\u5c5e\u6027\u8fd8\u53ef\u4ee5\u7528\u4e8e\u5176\u5b83\u7684\uff0c\u6bd4\u5982\u51fd\u6570\u3002</p> <p>\u4f5c\u4e3a\u4e00\u4e2a\u4f7f\u7528\u7c7b\u5c5e\u6027\u5b8f\u7684\u4f8b\u5b50\uff0c\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a<code>route</code>\u7684\u5c5e\u6027\u7528\u4e8e\u6807\u6ce8web\u6846\u67b6\u4e2d\u8def\u7531\u7684\u51fd\u6570\uff1a <pre><code>#[route(GET, \"/\")]\nfn index() {\n</code></pre> <code>#[route]</code>\u5c5e\u6027\u5c06\u7531\u6846\u67b6\u672c\u8eab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u8fc7\u7a0b\u5b8f\u3002\u5176\u5b8f\u5b9a\u4e49\u7684\u51fd\u6570\u7b7e\u540d\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a</p> <pre><code>#[proc_macro_attribute]\npub fn route(attr: TokenStream, item: TokenStream) -&gt; TokenStream {\n</code></pre>"},{"location":"rust/rust-macro.html#function-like-macro","title":"\u7c7b\u51fd\u6570\u5b8f(Function-like macro)","text":"<p>\u7528\u6cd5\u4e0e\u666e\u901a\u7684\u89c4\u5219\u5b8f\u7c7b\u4f3c\uff0c\u4f46\u529f\u80fd\u66f4\u52a0\u5f3a\u5927\uff0c\u53ef\u5b9e\u73b0\u4efb\u610f\u8bed\u6cd5\u6811\u5c42\u9762\u7684\u8f6c\u6362\u529f\u80fd\u3002</p>"},{"location":"rust/rust-modules.html","title":"Rust-modules","text":"<p>\u5b98\u65b9\u6587\u6863\u7ed9\u51fa\u7684\u5173\u952e\u5b57\u89e3\u91ca\u5982\u4e0b\uff1a</p> <ul> <li>\u5305\uff08Packages\uff09\uff1a Cargo \u7684\u4e00\u4e2a\u529f\u80fd\uff0c\u5b83\u5141\u8bb8\u4f60\u6784\u5efa\u3001\u6d4b\u8bd5\u548c\u5206\u4eab crate\u3002</li> <li>Crates \uff1a\u4e00\u4e2a\u6a21\u5757\u7684\u6811\u5f62\u7ed3\u6784\uff0c\u5b83\u5f62\u6210\u4e86\u5e93\u6216\u4e8c\u8fdb\u5236\u9879\u76ee\u3002</li> <li>\u6a21\u5757\uff08Modules\uff09\u548c use\uff1a \u5141\u8bb8\u4f60\u63a7\u5236\u4f5c\u7528\u57df\u548c\u8def\u5f84\u7684\u79c1\u6709\u6027\u3002</li> <li>\u8def\u5f84\uff08path\uff09\uff1a\u4e00\u4e2a\u547d\u540d\u4f8b\u5982\u7ed3\u6784\u4f53\u3001\u51fd\u6570\u6216\u6a21\u5757\u7b49\u9879\u7684\u65b9\u5f0f</li> </ul>"},{"location":"rust/rust-modules.html#package-crate","title":"Package \u548c Crate","text":"<p>\u5305\uff08package\uff09\u662f\u63d0\u4f9b\u4e00\u7cfb\u5217\u529f\u80fd\u7684\u4e00\u4e2a\u6216\u8005\u591a\u4e2a crate</p> <p>\u4e00\u4e2a\u5305\uff08package\uff09 \u4f1a\u5305\u542b\u6709\u4e00\u4e2a <code>Cargo.toml</code> \u6587\u4ef6\uff0c\u9610\u8ff0\u5982\u4f55\u53bb\u6784\u5efa\u8fd9\u4e9b crate</p> <p>\u5173\u4e8e<code>package</code>\u548c<code>crate</code>\u6709\u4ee5\u4e0b\u51e0\u6761\u89c4\u5219\uff1a</p> <ul> <li>\u4e00\u4e2a<code>package</code>\u5305\u542b0\u4e2a\u62161\u4e2a<code>lib crate</code>(\u5e93)</li> <li>\u4e00\u4e2a<code>package</code>\u5305\u542b\u4efb\u610f\u591a\u4e2a<code>bin crate</code>(\u53ef\u6267\u884c)</li> <li>\u4e00\u4e2a<code>package</code>\u81f3\u5c11\u5305\u542b1\u4e2a<code>lib crate</code>(\u5e93)\u62161\u4e2a <code>bin crate</code>(\u4e8c\u8fdb\u5236)</li> </ul> <p>\u53e6\u6709\u4e24\u6761\u9ed8\u8ba4\u89c4\u5b9a\uff1a</p> <ul> <li>\u9ed8\u8ba4<code>src/main.rs</code>\u662f<code>bin crate</code>\u7684\u6839\uff0c\u4e14\u5176\u540d\u5b57\u5c31\u662fpackage\u7684\u540d\u5b57</li> <li>\u9ed8\u8ba4<code>src/lib.rs</code>\u662f<code>lib crate</code>\u7684\u6839\uff0c\u4e14\u5176\u540d\u5b57\u5c31\u662fpackage\u7684\u540d\u5b57</li> </ul> <p>\u6ce8\u89e3\uff1abin crate\u5c31\u662f\u5305\u542bmain\u51fd\u6570\u7684<code>.rs</code>\u6587\u4ef6</p> <p>\u53e6\u6709\u5173\u4e8e <code>bin crate</code>\u89c4\u5219\u5982\u4e0b\uff1a</p> <ul> <li>\u5982\u679c\u4e00\u4e2a<code>package</code>\u6709\u591a\u4e2a<code>bin crate</code>\uff0c\u53ef\u4ee5\u653e\u5728<code>src/bin</code>\u4e0b</li> </ul> <p></p> <p>\u5982\u4e0a\u56fe\u6240\u793a\u7684<code>package</code>\u5185\u67093\u4e2a<code>bin crate</code>\uff0c\u53ef\u4ee5\u770b\u5230\u76f4\u63a5<code>cargo r</code>\u4f1a\u62a5\u9519\u65e0\u6cd5determine\u54ea\u4e00\u4e2abin\uff08\u4e0d\u8fc7\u5b9e\u9645\u4e0a\u4ed6\u4eec\u4e09\u4e2a\u90fd\u88ab\u7f16\u8bd1\u4e86\uff09\uff0c\u63d0\u793a\u4e2d\u770b\u5230\u6709\u4e09\u4e2a<code>bin crate</code>\u4ed6\u4eec\u7684\u540d\u5b57\u5206\u522b\u662f<code>hello, hi, myf</code>\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u7684package\u7684\u540d\u5b57\u662f<code>myf</code>\uff0c\u800c<code>src/bin</code>\u4e0b\u4e24\u4e2a\u6587\u4ef6\u5206\u522b\u53eb\u505a<code>hello hi</code></p>"},{"location":"rust/rust-modules.html#crate-mod","title":"Crate \u548c mod","text":"<p>\u4f7f\u7528<code>mod</code>\u5173\u952e\u5b57\u5b9a\u4e49\u4e00\u4e2a<code>module</code>\uff0c\u6a21\u5757\u53ef\u4ee5\u5d4c\u5957\u6784\u6210<code>mod</code>\u6811</p> <ul> <li> <p>\u5b50<code>mod</code>\u53ef\u4ee5\u4f7f\u7528\u7236<code>mod</code>\u4e2d\u7684\u5185\u5bb9</p> </li> <li> <p>\u5b50<code>mod</code>\u548c\u7236<code>mod</code>\u53ef\u4ee5\u4e0d\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u5982\u56fe\u6240\u793a\uff1a</p> </li> </ul> <p></p> <p>\u5728<code>main.rs</code>\u4e2d\u4f7f\u7528\u4e86<code>mod parent</code>\u58f0\u660e\u4e86\u4e00\u4e2a\u540d\u4e3a<code>parent</code>\u7684mod\uff08\u8be5mod\u5728<code>src/parent</code>\u76ee\u5f55\u4e0b\u88ab\u5b9a\u4e49\uff09\uff0c\u4ece\u800c\u62fc\u63a5\u4e86\u4e00\u4e2amod\u6811</p> <p><code>parent mod</code>\u6709\u4e24\u4e2a\u5b50<code>mod</code>\u5206\u522b\u662f<code>son</code>\u548c<code>daughter</code></p> <ul> <li><code>mod</code>\u548c\u6587\u4ef6\u6620\u5c04\u5173\u7cfb:<ul> <li><code>&lt;module_name&gt;.rs</code></li> <li><code>&lt;module_name&gt;/mod.rs</code></li> </ul> </li> </ul> <p>\u53ef\u4ee5\u4f7f\u7528\u4e0a\u8ff0\u4e24\u79cd\u65b9\u5f0f\u53bb\u8de8\u6587\u4ef6\u5b9a\u4e49\u4e00\u4e2a<code>mod</code></p> <ul> <li> <p>\u7efc\u4e0a\u6240\u8ff0<code>mod</code>\u6811\u548c\u6587\u4ef6\u6811\u5176\u5b9e\u5e76\u6ca1\u6709\u592a\u5927\u5173\u7cfb\uff0c\u662f\u901a\u8fc7<code>mod</code>\u5173\u952e\u5b57\u624b\u52a8\u7ec4\u6210\u7684\u4e00\u4e2a<code>mod</code>\u6811\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u9700\u8981\u8bb0\u4f4f\uff1a</p> </li> <li> <p>\u4f7f\u7528<code>pub</code>\u624d\u80fd\u66b4\u9732\u7ed9\u5916\u90e8</p> </li> <li>\u53ef\u4ee5\u4f7f\u7528<code>crate</code>\u5173\u952e\u5b57\u4ece\u7edd\u5bf9\u8def\u5f84\uff08<code>mod tree</code> \u6839\u8282\u70b9\uff09\u5bfb\u627e</li> <li>\u4f7f\u7528<code>super</code>\u5173\u952e\u5b57\u4ece\u7236<code>mod</code>\uff08<code>mod tree</code> \u7236\u8282\u70b9\uff09\u5bfb\u627e</li> <li><code>lib.rs</code>\u548c<code>main.rs</code>\u5206\u522b\u662f\u4e24\u4e2aroot\u8282\u70b9</li> </ul>"},{"location":"rust/rust-network.html","title":"Rust-network","text":""},{"location":"rust/rust-network.html#stdnetwork","title":"<code>std::network</code>","text":"<p>\u6807\u51c6\u5e93\u7684<code>net</code> moudle\u63d0\u4f9b\u4e86 TCP/UDP \u8fde\u63a5\u7684\u57fa\u672c\u539f\u8bed</p> <ul> <li> <p><code>TcpListener</code> \u548c <code>TcpStream</code> provide functionality for communication over TCP</p> </li> <li> <p><code>UdpSocket</code> provides functionality for communication over UDP</p> </li> <li> <p><code>IpAddr</code> \u8868\u793aIPV4\u6216IPV6\u7c7b\u578b; <code>Ipv4Addr</code> \u548c <code>Ipv6Addr</code> \u662f\u5bf9\u5e94\u7684 IPv4 \u548cIPv6 \u5730\u5740</p> </li> <li> <p><code>SocketAddr</code> \u8868\u793a IPv4 \u6216 IPv6 \u7684socket\u5730\u5740; <code>SocketAddrV4</code> and <code>SocketAddrV6</code> \u662f\u5bf9\u5e94\u7684 IPv4 \u548cIPv6 socket\u5730\u5740</p> </li> <li> <p><code>ToSocketAddrs</code> \u662f\u4e00\u4e2a\u7528\u4e8e\u628a\u5176\u5b83\u7c7b\u578b\uff08\u6bd4\u5982<code>&amp;str</code>\uff0c<code>SocketAddrV6</code>\uff0c<code>(IpAddr, u16)</code>\uff0c<code>(&amp;str, u16)</code>\u7b49\uff09\u8f6c\u6210 <code>SocketAddr</code> \u7c7b\u578b\u7684trait\uff0c\u4ece\u800c\u66f4\u597d\u7684\u4e0e <code>TcpListener</code>, <code>TcpStream</code> or <code>UdpSocket</code> \u7b49\u7c7b\u578b\u4ea4\u4e92</p> </li> </ul> <p>[<code>TcpStream::connect</code>] is an example of an function that utilizes <code>ToSocketAddrs</code> as a trait bound on its parameter in order to accept different types:</p> <pre><code>use std::net::{TcpStream, Ipv4Addr};\n// #[stable(feature = \"rust1\", since = \"1.0.0\")]\n// pub fn bind&lt;A: ToSocketAddrs&gt;(addr: A) -&gt; io::Result&lt;TcpListener&gt; {\n//     super::each_addr(addr, net_imp::TcpListener::bind).map(TcpListener)\n// }\nlet stream = TcpStream::connect((\"127.0.0.1\", 443)); // or\nlet stream = TcpStream::connect(\"127.0.0.1:443\"); // or\nlet stream = TcpStream::connect((Ipv4Addr::new(127, 0, 0, 1), 443));\n</code></pre> <ul> <li>module\u4e2d\u7684\u5176\u5b83\u7c7b\u578b\u662f\u6b64module\u4e2d\u7684\u53c2\u6570\u7c7b\u578b\u6216\u8fd4\u56de\u503c\u7c7b\u578b</li> </ul> <p>\u9700\u8981\u6ce8\u610f\uff1a\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0cRust\u9ed8\u8ba4\u7981\u7528\u5bf9\u5b50\u8fdb\u7a0b\u7ee7\u627f\u5957\u63a5\u5b57\u5bf9\u8c61\u3002\u4f8b\u5982\uff0c\u901a\u8fc7\u5728UNIX\u7cfb\u7edf\u4e2d\u4f7f\u7528<code>CLOEXEC</code>\u6807\u5fd7\u6216\u5728Windows\u4e2d\u4f7f\u7528<code>HANDLE_FLAG_INHERIT</code>\u6807\u5fd7\u3002</p>"},{"location":"rust/rust-network.html#tokio","title":"tokio","text":""},{"location":"rust/rust-option.html","title":"Rust-Option","text":""},{"location":"rust/rust-option.html#rust-option_1","title":"Rust \u7684 Option\u679a\u4e3e","text":"<p>Option\u662f\u4e00\u4e2a\u679a\u4e3e\u7c7b\u578b\uff0c\u5b9a\u4e49\u5982\u4e0b\uff0c</p> <pre><code>enum Option&lt;T&gt; {\nSome(T),\nNone,\n}\n</code></pre>"},{"location":"rust/rust-option.html#option","title":"\u521d\u59cb\u5316Option\uff1a","text":"<p>\u4f7f\u7528<code>let x = Some(T)</code>\uff0c\u7f16\u8bd1\u5668\u53ef\u4ee5\u81ea\u52a8\u63a8\u65adx\u5bf9\u5e94\u7684\u679a\u4e3e\u7c7b\u578b\uff0c\u5982<code>let some_string = Some(\"a string\");</code></p> <p>\u4f46\u4f7f\u7528<code>None</code>\u5219\u4e0d\u53ef\u4ee5\u5982\u6b64\uff1a</p> <p>\u56e0\u4e3a\u7f16\u8bd1\u5668\u53ea\u901a\u8fc7 <code>None</code> \u503c\u65e0\u6cd5\u63a8\u65ad\u51fa <code>Some</code> \u6210\u5458\u4fdd\u5b58\u7684\u503c\u7684\u7c7b\u578b\u3002</p> <p>\u9700\u8981\u4e8b\u5148\u58f0\u660e<code>Option</code>\u7684\u7c7b\u578b\uff0c\u5982<code>let absent_number: Option&lt;i32&gt; = None;</code></p>"},{"location":"rust/rust-option.html#option_1","title":"\u89e3\u5f00Option\uff1a","text":"<ul> <li>\u53ef\u4ee5\u4f7f\u7528 <code>match</code> \u8bed\u53e5\u6765\u89e3\u5f00 <code>Option</code></li> <li>\u53ef\u4ee5\u4f7f\u7528<code>unwrap()</code>\u6765\u83b7\u5f97<code>Option</code>\u4e2d\u7684<code>Some</code>\uff0c\u4f46\u5982\u679c\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u83b7\u5f97<code>None</code>\u7684\u65f6\u5019\u7a0b\u5e8f\u5c06\u4f1apanic</li> </ul>"},{"location":"rust/rust-option.html#monad-operation","title":"Monad operation","text":"<p>\u5b9e\u9645\u4e0a <code>Option</code> \u662f\u4e00\u4e2aMonad\uff0c\u4f7f\u7528<code>Option</code>\u7684\u7f16\u7a0b\u8303\u5f0f\u5e94\u8be5\u662f\u51fd\u6570\u5f0f\u7684\uff0c\u800c\u4e0d\u662f\u603b\u662f\u5148\u4f7f\u7528<code>match</code> \u6216\u8005<code>unwrap*()</code>\u53d6\u51fa\u5176\u4e2d\u7684\u503c\u3002\u4e0b\u9762\u662f\u4e0e ChatGPT\u7684\u5bf9\u8bdd\uff1a</p> <p>\ud83d\udc0b: Show me an example of monad in rust</p> <p>\ud83e\uddad: Here's an example of using monads in Rust:</p> <pre><code>use std::option::Option;\n\nfn add_two_numbers(x: i32, y: i32) -&gt; Option&lt;i32&gt; {\nSome(x + y)\n}\n\nfn square_number(x: i32) -&gt; Option&lt;i32&gt; {\nSome(x * x)\n}\n\nfn main() {\nlet result = add_two_numbers(2, 3)\n.and_then(square_number)\n.unwrap_or(-1);\n\nprintln!(\"Result: {}\", result);\n}\n</code></pre> <p>In this example, we have two functions <code>add_two_numbers</code> and <code>square_number</code> that each return an <code>Option</code> monad. The <code>and_then</code> method is used to chain these functions together and perform a calculation on the result of the first function before passing it to the next. The <code>unwrap_or</code> method is used to provide a default value if either of the functions return None.</p> <p>In this example, the calculation <code>add_two_numbers(2, 3)</code> results in <code>Some(5)</code>, which is then passed to <code>square_number</code> and returns <code>Some(25)</code>. Finally, the value is unwrapped to <code>25</code> and printed to the console.</p> <p>\ud83d\udc0b: What's the difference between this programming paradigm and first checking whether the value exists, and then calculating</p> <p>\ud83e\uddad: The main difference between using monads and checking for values before performing a calculation is the way that error handling and control flow are managed.</p> <p>\u5728\u6267\u884c\u8ba1\u7b97\u4e4b\u524d\u68c0\u67e5\u503c\u65f6\uff0c\u901a\u5e38\u4f1a\u4f7f\u7528 <code>if</code> \u8bed\u53e5\u68c0\u67e5\u503c\u662f\u5426\u5b58\u5728\u4e14\u6709\u6548\uff0c\u5982\u679c\u5b58\u5728\u5219\u6267\u884c\u8ba1\u7b97\u3002 \u8fd9\u79cd\u65b9\u6cd5\u901a\u5e38\u4f1a\u5bfc\u81f4\u5d4c\u5957\u7684 <code>if</code> \u8bed\u53e5\uff0c\u5e76\u53ef\u80fd\u5bfc\u81f4\u4ee3\u7801\u96be\u4ee5\u9605\u8bfb\u548c\u7ef4\u62a4\u3002</p> <p>\u76f8\u53cd\uff0c\u5f53\u4f7f\u7528 monad \u65f6\uff0c\u9519\u8bef\u5904\u7406\u548c\u63a7\u5236\u6d41\u4ee5 \u58f0\u660e\u5f0f \u7684\u65b9\u6cd5\u5904\u7406\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 monad \u5c06\u64cd\u4f5c\u94fe\u63a5\u5728\u4e00\u8d77\u5e76\u81ea\u52a8\u5904\u7406\u9519\u8bef\u60c5\u51b5\uff0c\u800c\u4e0d\u9700\u8981\u663e\u5f0f\u6761\u4ef6\u5224\u65ad\uff0c\u4e0d\u4f7f\u7528\u5d4c\u5957\u7684 <code>if</code> \u8bed\u53e5\u3002 \u8fd9\u4f7f\u5f97\u4ee3\u7801\u66f4\u5e72\u51c0\u3001\u66f4\u7b80\u6d01\u3001\u66f4\u6613\u4e8e\u9605\u8bfb\u548c\u7ef4\u62a4\u3002</p> <p>For example, consider the following code that checks for values before performing a calculation:</p> <p><pre><code>let x = get_input();\nlet y = get_input();\n\nif x.is_some() &amp;&amp; y.is_some() {\nlet x = x.unwrap();\nlet y = y.unwrap();\nlet result = x + y;\nprintln!(\"Result: {}\", result);\n} else {\nprintln!(\"Error: invalid input\");\n}\n</code></pre> \u6b64\u4ee3\u7801\u4f7f\u7528 <code>is_some</code> \u65b9\u6cd5\u68c0\u67e5 x \u548c y \u662f\u5426\u4e3a <code>Some</code> \u503c\uff0c\u5982\u679c\u662f\uff0c\u5219\u89e3\u5305\u5e76\u6267\u884c\u8ba1\u7b97\u3002</p> <p>Here's the same code written using monads:</p> <pre><code>let result = get_input()\n.and_then(|x| get_input().map(|y| x + y))\n.unwrap_or_else(|| println!(\"Error: invalid input\"));\n\nprintln!(\"Result: {}\", result);\n</code></pre> <p>\u5728\u8fd9\u6bb5\u4ee3\u7801\u4e2d\uff0c <code>and_then</code> \u65b9\u6cd5\u7528\u4e8e\u5c06\u4e24\u4e2a <code>get_input</code> \u8c03\u7528\u94fe\u63a5\u5728\u4e00\u8d77\u5e76\u6267\u884c\u8ba1\u7b97\uff0c <code>unwrap_or_else</code> \u65b9\u6cd5\u7528\u4e8e\u5904\u7406\u9519\u8bef\u60c5\u51b5\u3002 \u7ed3\u679c\u4e0e\u524d\u9762\u7684\u793a\u4f8b\u76f8\u540c\uff0c\u4f46\u4ee3\u7801\u66f4\u5e72\u51c0\u3001\u66f4\u7b80\u6d01\u3002</p>"},{"location":"rust/rust-option.html#optiont","title":"\u4f7f\u7528<code>Option&lt;T&gt;</code> \u4e3a\u4ec0\u4e48\u6bd4\u4f7f\u7528\u7a7a\u503c\u8981\u597d\uff1f","text":"<p>Option\u89e3\u51b3\u4e86\u7a7a\u503c\u5f15\u53d1\u7684\u4e00\u7cfb\u5217\u95ee\u9898\uff1f\uff1f\uff1f</p> <p>\u7a7a\u503c\u7684\u95ee\u9898\u5728\u4e8e\u5f53\u4f60\u5c1d\u8bd5\u50cf\u4e00\u4e2a\u975e\u7a7a\u503c\u90a3\u6837\u4f7f\u7528\u4e00\u4e2a\u7a7a\u503c\uff0c\u4f1a\u51fa\u73b0\u67d0\u79cd\u5f62\u5f0f\u7684\u9519\u8bef\uff1f\uff1f\uff1f</p> <p>\u800c\u56e0\u4e3a <code>Option&lt;T&gt;</code> \u548c <code>T</code>\uff08\u8fd9\u91cc <code>T</code> \u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\uff09\u662f\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u7f16\u8bd1\u5668\u4e0d\u5141\u8bb8\u50cf\u4f7f\u7528\u4e00\u4e2a\u80af\u5b9a\u6709\u6548\u7684\u503c\u90a3\u6837\u4f7f\u7528 <code>Option&lt;T&gt;</code>\u3002\u4f8b\u5982\uff0c\u8fd9\u6bb5\u4ee3\u7801\u4e0d\u80fd\u7f16\u8bd1\uff0c\u56e0\u4e3a\u5b83\u5c1d\u8bd5\u5c06 <code>Option&lt;i8&gt;</code> \u4e0e <code>i8</code> \u76f8\u52a0\uff1a</p> <pre><code>let x: i8 = 5;\nlet y: Option&lt;i8&gt; = Some(5);\nlet sum = x + y;\n</code></pre> <p>\u5f53\u5728 Rust \u4e2d\u62e5\u6709\u4e00\u4e2a\u50cf <code>i8</code> \u8fd9\u6837\u7c7b\u578b\u7684\u503c\u65f6\uff0c\u7f16\u8bd1\u5668\u786e\u4fdd\u5b83\u603b\u662f\u6709\u4e00\u4e2a\u6709\u6548\u7684\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u81ea\u4fe1\u4f7f\u7528\u800c\u65e0\u9700\u505a\u7a7a\u503c\u68c0\u67e5\u3002\u53ea\u6709\u5f53\u4f7f\u7528 <code>Option&lt;i8&gt;</code>\uff08\u6216\u8005\u4efb\u4f55\u7528\u5230\u7684\u7c7b\u578b\uff09\u7684\u65f6\u5019\u9700\u8981\u62c5\u5fc3\u53ef\u80fd\u6ca1\u6709\u503c\uff0c\u800c\u7f16\u8bd1\u5668\u4f1a\u786e\u4fdd\u6211\u4eec\u5728\u4f7f\u7528\u503c\u4e4b\u524d\u5904\u7406\u4e86\u4e3a\u7a7a\u7684\u60c5\u51b5\u3002</p> <p>\u5728\u5bf9 <code>Option&lt;T&gt;</code> \u8fdb\u884c <code>T</code> \u7684\u8fd0\u7b97\u4e4b\u524d\u5fc5\u987b\u5c06\u5176\u8f6c\u6362\u4e3a <code>T</code>\u3002\u901a\u5e38\u8fd9\u80fd\u5e2e\u52a9\u6211\u4eec\u6355\u83b7\u5230\u7a7a\u503c\u6700\u5e38\u89c1\u7684\u95ee\u9898\u4e4b\u4e00\uff1a\u5047\u8bbe\u67d0\u503c\u4e0d\u4e3a\u7a7a\u4f46\u5b9e\u9645\u4e0a\u4e3a\u7a7a\u7684\u60c5\u51b5\u3002</p> <p>\u4e3a\u4e86\u62e5\u6709\u4e00\u4e2a\u53ef\u80fd\u4e3a\u7a7a\u7684\u503c\uff0c\u4f60\u5fc5\u987b\u8981\u663e\u5f0f\u7684\u5c06\u5176\u653e\u5165\u5bf9\u5e94\u7c7b\u578b\u7684 <code>Option&lt;T&gt;</code> \u4e2d\u3002\u63a5\u7740\uff0c\u5f53\u4f7f\u7528\u8fd9\u4e2a\u503c\u65f6\uff0c\u5fc5\u987b\u660e\u786e\u7684\u5904\u7406\u503c\u4e3a\u7a7a\u7684\u60c5\u51b5\u3002\u53ea\u8981\u4e00\u4e2a\u503c\u4e0d\u662f <code>Option&lt;T&gt;</code> \u7c7b\u578b\uff0c\u4f60\u5c31 \u53ef\u4ee5 \u5b89\u5168\u7684\u8ba4\u5b9a\u5b83\u7684\u503c\u4e0d\u4e3a\u7a7a\u3002\u4e5f\u5c31\u662f\u4ece\u8bed\u6cd5\u7684\u5c42\u9762\u4e0a\u5f3a\u5236\u7a0b\u5e8f\u5458\u4e8b\u5148\u5bf9\u53ef\u80fd\u51fa\u73b0\u7a7a\u503c\u7684\u5730\u65b9\u8fdb\u884c\u5904\u7406\u3002</p>"},{"location":"rust/rust-smart%20pointer.html","title":"Rust-smart pointer","text":"<p>CS 242: Smart pointers (stanford-cs242.github.io)</p> <p>Rust\u5185\u5b58\u7ba1\u7406\u7684\u57fa\u672c\u539f\u5219:</p> <ul> <li>Having several immutable references (<code>&amp;T</code>) to the object (also known as aliasing).</li> <li>Having one mutable reference (<code>&amp;mut T</code>) to the object (also known as mutability).</li> </ul> <p></p>"},{"location":"rust/rust-smart%20pointer.html#raw-pointers","title":"Raw pointers","text":"<p>\u5c3d\u7ba1\u4e0d\u7ecf\u5e38\u4f7f\u7528\uff0cRust\u6709\u539f\u59cb\u6307\u9488\u7684\u57fa\u672c\u7c7b\u578b\uff1a <code>*const T</code> \u548c <code>*mut T</code>\uff1b\u8fd9\u4e9b\u6307\u9488\u4e0eC\u8bed\u8a00\u4e2d\u7684\u6307\u9488\u5b8c\u5168\u4e00\u6837\uff0c\u5b83\u4eec\u5b9e\u9645\u4e0a\u53ea\u662f\u5185\u5b58\u5730\u5740\uff0c\u6ca1\u6709\u68c0\u67e5\u5185\u5b58\u5b89\u5168\u3002</p> <pre><code>let x: i32 = 1;\nlet xptr: &amp;i32 = &amp;x;\nlet xraw: *const i32 = xptr as *const i32;\n\nlet mut y: i32 = 2;\nlet yptr: &amp;mut i32 = &amp;mut y;\nlet yraw: *mut i32 = yptr as *mut i32;\nlet yraw2: *mut i32 = yptr as *mut i32;\n</code></pre> <p>\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u6211\u4eec\u83b7\u5f97\u4e86<code>yraw</code>\u548c<code>yraw2</code>\u4e24\u4e2a\u53ef\u53d8\u6307\u9488\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58\uff0c\u8fd9\u8fdd\u80cc\u4e86Rust\u5185\u5b58\u7ba1\u7406\u7684\u57fa\u672c\u539f\u5219\u3002</p> <p>\u4f46\u4e8b\u5b9e\u4e0a\u521b\u5efa\u6307\u9488\u53ef\u4ee5\u5728safe rust\u4e2d\u4f7f\u7528\uff0c\u4f46\u662f\u89e3\u5f15\u7528\u53ea\u80fd\u5728<code>unsafe</code>\u4e2d\u4e86\uff1a</p> <pre><code>println!(\"{}\", unsafe { *yraw });\nunsafe { *yraw = 3; }\n</code></pre>"},{"location":"rust/rust-smart%20pointer.html#box","title":"Box","text":"<p>\u8d44\u6e90\u5206\u914d\u5728\u5806\u4e0a\uff0c\u4f9d\u9760<code>Deref</code>\u548c<code>Drop</code>\u6765\u7ba1\u7406\u5806\u4e0a\u7684\u8d44\u6e90\uff0c\u96f6\u8fd0\u884c\u65f6\u5f00\u9500\uff0c\u7c7b\u4f3cC++\u7684unique_ptr\uff0c\u662f\u6700\u5e38\u7528\u7684\u5957\u5a03\u3002</p> <p>\u6bd4\u5982\u5c1d\u8bd5\u5b9a\u4e49\u9012\u5f52\u7c7b\u578b\uff08\u94fe\u8868\uff09\u65f6</p> <pre><code>pub enum List {\nEmpty,\nElem(i32, List),\n}\n</code></pre> <p>\u56e0\u4e3a\u7f16\u8bd1\u671f\u65e0\u6cd5\u786e\u5b9a\u5927\u5c0f\uff0c\u56e0\u6b64\u65e0\u6cd5\u7f16\u8bd1\u901a\u8fc7\uff1b\u8fd9\u65f6\u53ef\u4ee5\u7528<code>Box</code>\u5305\u8d77\u6765<code>Elem</code></p> <ul> <li><code>Box::new(v)</code> \uff1a \u521b\u5efa\uff0c\u79fb\u52a8\u8bed\u4e49\uff0c\u72ec\u5360\u6240\u6709\u6743 - move\uff0c\u5141\u8bb8\u4f7f\u7528<code>*</code>\u8f6c\u79fb\u672c\u4f53\u6240\u6709\u6743</li> <li>\u4e0d\u53ef\u53d8\u501f\u7528\uff1a<code>Box::borrow()</code>\u3001<code>Box::as_ref()</code>\u3001<code>Box::deref()</code></li> <li>\u53ef\u53d8\u501f\u7528\uff1a<code>Box::borrow_mut()</code>\u3001<code>Box::as_mut()</code>\u3001<code>Box::deref_mut()</code></li> </ul>"},{"location":"rust/rust-smart%20pointer.html#_1","title":"\u76f8\u5173\u65b9\u6cd5","text":"<ul> <li><code>Box::into_raw()</code>\u8f6c\u6362\u4e3a\u88f8\u6307\u9488<code>*mut T</code>\uff0c\u4ece\u800c\u53ef\u4ee5\u901a\u8fc7<code>unsafe</code>\u6765\u4fee\u6539\u672c\u6765\u4e0d\u4f1a\u88ab\u4fee\u6539\u7684\u2014\u2014Box\u4e2d\u7684\u503c</li> <li><code>Box::from_raw()</code>\u4e3a<code>into_raw()</code>\u7684\u5bf9\u5e94\u63a5\u53e3\uff0c(\u6253\u5370\u88f8\u6307\u9488\u53ef\u4ee5\u83b7\u5f97\u5176\u5730\u5740)</li> <li><code>Box::leak()</code>\u5c06Box\u8f6c\u6362\u4e3a\u53ef\u53d8\u5f15\u7528<code>&amp;mut T</code></li> </ul>"},{"location":"rust/rust-smart%20pointer.html#box_1","title":"\u5b9e\u73b0\u81ea\u5df1\u7684Box","text":"<pre><code>#[derive(Debug)]\nstruct MyBox&lt;T&gt; {\nptr: *mut T,\n}\nimpl&lt;T&gt; MyBox&lt;T&gt; {\nfn new(t: T) -&gt; MyBox&lt;T&gt; {\nlet ptr = unsafe {\nlet layout = Layout::for_value(&amp;t);\nlet mut ptr = alloc(layout) as *mut T;\nptr::copy(&amp;t as *const T, ptr, layout.size());\nptr\n};\n// \u5982\u679c\u6ca1\u6709\u8fd9\u4e00\u53e5\uff0c\u5728 \u9000\u51fa\u5f53\u524d\u51fd\u6570\u4f5c\u7528\u57df\u65f6\n// \u4f1a\u8c03\u7528 `drop(t)`\uff0c\u60f3\u8c61\u4e00\u4e0b\u5982\u679c T \u662f `String`, `Vec`\u7b49\u7c7b\u578b\n// \u4f1a\u53d1\u751f\u4ec0\u4e48?\nmem::forget(t); MyBox { ptr }\n}\n}\n</code></pre> <ul> <li> <p>\u9996\u5148\u58f0\u660e\u4e00\u4e2a<code>MyBox</code>\u5305\u88c5\u88f8\u6307\u9488<code>*mut T</code></p> </li> <li> <p>\u7136\u540e\u521b\u5efa\u4e00\u4e2a<code>Layout</code>\u5b9e\u4f8b\u2014\u2014\u63cf\u8ff0\u5185\u5b58\u5757\u5927\u5c0f\u548c\u5185\u5b58\u5bf9\u9f50\u89c4\u5219</p> </li> <li> <p>\u4f7f\u7528<code>alloc</code>\u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58\u2014\u2014Rust\u5bf9\u4e0b\u5c42\u5185\u5b58\u5206\u914d\u5668(<code>jemalloc</code>)\u7684\u8f7b\u5ea6\u5305\u88c5</p> </li> <li> <p>\u7136\u540e\u4f7f\u7528 <code>ptr::copy</code> (\u7b49\u4ef7\u4e8e<code>memcpy</code>)\u628a\u5185\u5b58\u590d\u5236\u5230\u521a\u5206\u914d\u7684\u5806\u5185\u5b58\u4e0a</p> </li> <li> <p>The <code>mem::forget</code> says \u201cdon\u2019t try to call destructors on <code>t</code>, just forget about it.\u201d\uff1a</p> <p>If our <code>Box&lt;T&gt;</code> contains a type that has pointers somewhere else, e.g. a <code>Box&lt;Box&lt;i32&gt;&gt;</code>, we don\u2019t want to memcpy the box bits but then have Rust still destruct the original <code>Box&lt;i32&gt;</code>, meaning our memcpy\u2019d version now points to invalid data. Here, <code>mem::forget</code> ensures that the destructors don\u2019t run until we call them in <code>Box::drop</code>. </p> </li> <li> <p>\u6700\u540e\u8fd4\u56de<code>MyBox</code></p> </li> </ul> <p>\u901a\u8fc7<code>Deref</code> trait\u5b9e\u73b0\u89e3\u5f15\u7528\uff1a</p> <p>\u76f4\u63a5\u89e3\u5f15\u7528<code>*y</code>\u662f\u4e0d\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u5c1a\u672a\u5728\u8be5\u7c7b\u578b\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\u3002\u4e3a\u4e86\u542f\u7528 <code>*</code> \u8fd0\u7b97\u7b26\u7684\u89e3\u5f15\u7528\u529f\u80fd\uff0c\u9700\u8981\u5b9e\u73b0 <code>Deref</code> trait\u3002</p> <p>\u6ca1\u6709 <code>Deref</code> trait \u7684\u8bdd\uff0c\u7f16\u8bd1\u5668\u53ea\u4f1a\u89e3\u5f15\u7528 <code>&amp;</code> \u5f15\u7528\u7c7b\u578b\u3002<code>deref</code> \u65b9\u6cd5\u5411\u7f16\u8bd1\u5668\u63d0\u4f9b\u4e86\u83b7\u53d6\u4efb\u4f55\u5b9e\u73b0\u4e86 <code>Deref</code> trait \u7684\u7c7b\u578b\u7684\u503c\uff0c\u5e76\u4e14\u8c03\u7528\u8fd9\u4e2a\u7c7b\u578b\u7684 <code>deref</code> \u65b9\u6cd5\u6765\u83b7\u53d6\u4e00\u4e2a\u5b83\u77e5\u9053\u5982\u4f55\u89e3\u5f15\u7528\u7684 <code>&amp;</code> \u5f15\u7528\u7684\u80fd\u529b\u3002</p> <p>\u5f53\u6211\u4eec\u8f93\u5165 <code>*y</code> \u65f6\uff0cRust \u4e8b\u5b9e\u4e0a\u5728\u5e95\u5c42\u8fd0\u884c\u4e86<code>*(y.deref())</code></p> <pre><code>impl&lt;T&gt; Deref for MyBox&lt;T&gt; {\ntype Target = T;\nfn deref(&amp;self) -&gt; &amp;Self::Target {\nunsafe{&amp;*self.ptr}\n}\n}\n</code></pre> <p>\u8868\u8fbe\u5f0f<code>&amp;*self.ptr</code>\u770b\u8d77\u6765\u5f88\u602a\u3002\u5728C\u8bed\u4e49\u4e0b\uff0c<code>&amp;*x == x</code>\u5341\u5206\u663e\u7136\u3002\u4f46\u662f\u5728\u8fd9\u91cc\uff0c\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7684\u610f\u601d\u662f\uff1a\u89e3\u5f15\u7528\u539f\u59cb\u6307\u9488(\u5fc5\u987b\u5728<code>unsafe</code>\u4e2d)\uff0c\u7136\u540e\u4f7f\u4e00\u4e2a\u5b89\u5168\u6307\u9488(\u5373\u5f15\u7528<code>&amp;</code>)\u6307\u5411\u8be5\u539f\u59cb\u503c\u3002</p> <p>\u540c\u7406\u901a\u8fc7\u5b9e\u73b0<code>DerefMut</code>trait\u5b9e\u73b0\u8fd4\u56de\u53ef\u53d8\u5f15\u7528\u7684\u529f\u80fd\uff1a</p> <pre><code>impl&lt;T&gt; DerefMut for MyBox&lt;T&gt; {\nfn deref_mut(&amp;mut self) -&gt; &amp;mut Self::Target {\nunsafe{&amp;mut *self.ptr}\n}\n}\n</code></pre> <p>Deref \u5f3a\u5236\u8f6c\u6362\uff08deref coercions\uff09\u662f Rust \u5728\u51fd\u6570\u6216\u65b9\u6cd5\u4f20\u53c2\u4e0a\u7684\u4e00\u79cd\u4fbf\u5229\u3002\u5176\u5c06\u5b9e\u73b0\u4e86 <code>Deref</code> \u7684\u7c7b\u578b\u7684\u5f15\u7528\u8f6c\u6362\u4e3a\u539f\u59cb\u7c7b\u578b\u901a\u8fc7 <code>Deref</code> \u6240\u80fd\u591f\u8f6c\u6362\u7684\u7c7b\u578b\u7684\u5f15\u7528\u3002\u5f53\u8fd9\u79cd\u7279\u5b9a\u7c7b\u578b\u7684\u5f15\u7528\u4f5c\u4e3a\u5b9e\u53c2\u4f20\u9012\u7ed9\u548c\u5f62\u53c2\u7c7b\u578b\u4e0d\u540c\u7684\u51fd\u6570\u6216\u65b9\u6cd5\u65f6\uff0cDeref \u5f3a\u5236\u8f6c\u6362\u5c06\u81ea\u52a8\u53d1\u751f\u3002</p> <p>\u4f8b\u5982\uff1a\u63a5\u6536<code>&amp;str</code>\u4e3a\u53c2\u6570\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u5c06<code>&amp;String</code>\u76f4\u63a5\u4f20\u5165\uff0c\u7531\u4e8e<code>String</code>\u7c7b\u578b\u5b9e\u73b0\u4e86<code>Deref</code>\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u8f6c\u6362 </p> <p>\u6700\u540e\u6211\u4eec\u901a\u8fc7\u5b9e\u73b0<code>Drop</code>trait\u6765\u91ca\u653e\u5185\u5b58\uff1a</p> <pre><code>impl&lt;T&gt; Drop for MyBox&lt;T&gt; {\nfn drop(&amp;mut self) {\nunsafe {\nlet layout = Layout::for_value(&amp;*self.ptr);\nmem::drop(ptr::read(self.ptr));\ndealloc(self.ptr as *mut u8, layout);\n}\n}\n}\n</code></pre> <p>\u7c7b\u4f3cC++\u7684\u6790\u6784\u51fd\u6570\uff1b\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u8c03\u7528<code>dealloc</code>(\u7b49\u4ef7\u4e8eC\u4e2d\u7684<code>free</code>)\u91ca\u653e\u5806\u4e0a\u7684\u5185\u5b58</p>"},{"location":"rust/rust-smart%20pointer.html#rc-and-weak","title":"<code>Rc</code> and <code>Weak</code>","text":"<p>\u6709\u4e9b\u60c5\u51b5\u5355\u4e2a\u503c\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u6240\u6709\u8005\u3002\u4f8b\u5982\uff0c\u5728\u56fe\u6570\u636e\u7ed3\u6784\u4e2d\uff0c\u591a\u4e2a\u8fb9\u53ef\u80fd\u6307\u5411\u76f8\u540c\u7684\u8282\u70b9\uff0c\u800c\u8fd9\u4e2a\u8282\u70b9\u4ece\u6982\u5ff5\u4e0a\u8bb2\u4e3a\u6240\u6709\u6307\u5411\u5b83\u7684\u8fb9\u6240\u62e5\u6709\u3002\u8282\u70b9\u76f4\u5230\u6ca1\u6709\u4efb\u4f55\u8fb9\u6307\u5411\u5b83\u4e4b\u524d\u90fd\u4e0d\u5e94\u8be5\u88ab\u6e05\u7406\u3002\u4e3a\u4e86\u542f\u7528\u591a\u6240\u6709\u6743\uff0cRust \u6709\u4e00\u4e2a\u53eb\u505a <code>Rc&lt;T&gt;</code> \u7684\u7c7b\u578b\u3002\u5176\u540d\u79f0\u4e3a \u5f15\u7528\u8ba1\u6570\uff08reference counting\uff09\u7684\u7f29\u5199</p> <p>\u8d44\u6e90\u5206\u914d\u5728\u5806\u4e0a\uff0c\u4f9d\u9760<code>Deref</code>\u548c<code>Drop</code>\u6765\u7ba1\u7406\u5806\u4e0a\u7684\u8d44\u6e90\uff0c\u4f7f\u7528\u5f15\u7528\u8ba1\u6570\u7b97\u6cd5\uff0c\u7c7b\u4f3cC++\u4e2dshared_ptr</p> <p><code>Rc::clone()</code>\u5c06\u5f15\u7528\u8ba1\u6570+1\uff0c\u4e0d\u4f1a\u771f\u7684\u590d\u5236\u5bf9\u8c61</p> <p><code>Rc</code>\u6ca1\u6709\u5b9e\u73b0<code>DerefMut</code>\uff0c\u56e0\u6b64\u5176\u7ba1\u7406\u7684\u662f\u4e0d\u53ef\u53d8\u5f15\u7528</p> <p>\u5faa\u73af\u5f15\u7528\u53ef\u80fd\u4f1a\u4ea7\u751f\u5185\u5b58\u6cc4\u9732\uff1a\u56e0\u4e3a\u4e24\u4e2a\u5bf9\u8c61\u76f8\u4e92\u5f15\u7528\uff0c\u6700\u7ec8\u90fd\u4e0d\u4f1a\u5f97\u5230\u91ca\u653e</p>"},{"location":"rust/rust-smart%20pointer.html#refcell","title":"RefCell","text":"<p><code>Rc</code>\u7ba1\u7406\u7684\u662f\u4e0d\u53ef\u53d8\u5f15\u7528\uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c\u6211\u4eec\u9009\u62e9\u7528\u5176\u7ba1\u7406\u5806\u4e0a\u5185\u5b58\uff0c\u5219\u6211\u4eec\u5c3d\u7ba1\u53ef\u4ee5<code>clone()</code>\u51fa\u591a\u4e2a\u5f15\u7528\uff0c\u4f46\u8fd9\u4e9b\u5f15\u7528\u90fd\u4e0d\u88ab\u5141\u8bb8\u6539\u53d8\u5806\u4e0a\u5185\u5b58\u3002\u4f46\u5f88\u591a\u65f6\u5019\u6211\u4eec\u9700\u8981\u5bf9\u5176\u4fee\u6539(\u4ecd\u7136\u8003\u8651\u56fe)</p> <p><code>RefCell</code>\u662f\u4e00\u4e2a\u5b9e\u73b0\u4e86\u5f15\u7528\u8ba1\u6570\u7684\u6307\u9488\uff0c\u540c\u65f6\u53ef\u4ee5\u4fee\u6539\u7ba1\u7406\u7684\u5185\u5b58\u3002\u8fd9\u4f3c\u4e4e\u542c\u8d77\u6765\u8fdd\u80ccRust\u5185\u5b58\u7ba1\u7406\u7684\u57fa\u672c\u539f\u5219\uff1b\u4f46\u4e8b\u5b9e\u4e0a\u53ea\u662f\u628a\u8fd9\u4e2a\u68c0\u67e5\u4ece\u7f16\u8bd1\u671f\u63a8\u8fdf\u5230\u4e86\u8fd0\u884c\u65f6\uff1a</p> <pre><code>let x: RefCell&lt;i32&gt; = RefCell::new(1);\n{\nlet xptr1: Ref&lt;'_, i32&gt; = x.try_borrow().unwrap();\nlet xptr2: Ref&lt;'_, i32&gt; = x.try_borrow().unwrap();\nassert_eq!(*xptr1, 1);\nassert_eq!(*xptr2, 1);\n\n// If we have any immutable borrows active, we can't have a mutable borrow\nassert!(match x.try_borrow_mut() { Err(_) =&gt; true, Ok(_) =&gt; false });\n}\n{\nlet mut xmut: RefMut&lt;'_, i32&gt; = x.try_borrow_mut().unwrap();\n*xmut = 3;\n\n// If we have a single mutable borrow active, no further borrows are permitted\nassert!(match x.try_borrow_mut() { Err(_) =&gt; true, Ok(_) =&gt; false });\nassert!(match x.try_borrow() { Err(_) =&gt; true, Ok(_) =&gt; false });\n}\n</code></pre> <p>API\uff1a</p> <pre><code>let ref1 = RefCell::new(Node::new(1i32, None, None));\n</code></pre> <ul> <li><code>as_ptr()</code>\uff0c\u8f6c\u6210\u88f8\u6307\u9488\uff1a<code>let p1: *mut Node&lt;i32&gt; = ref1.as_ptr();</code></li> </ul>"},{"location":"rust/rust-smart%20pointer.html#cell","title":"Cell","text":"<p>Cell\u662f\u4e00\u79cd\u63d0\u4f9b\u5185\u90e8\u53ef\u53d8\u6027\u7684\u5bb9\u5668\uff0c\u7c7b\u4f3c\u667a\u80fd\u624b\u673a\u7535\u6c60\uff0c\u770b\u4f3c\u4e0d\u53ef\u6362\uff0c\u6253\u5f00\u76d6\u5b50\u540e\u662f\u53ef\u4ee5\u6362\u7684</p> <p>\u9002\u5408\u5b9e\u73b0\u4e86Copy\u7684\u7c7b\u578b\uff0c\u6216\u8005\u4f53\u79ef\u5c0f\u7684struct\uff0c\u56e0\u4e3aget\u65b9\u6cd5\u662f\u76f4\u63a5\u6309\u4f4d\u590d\u5236\u7684\u3002 \u65e0\u8fd0\u884c\u65f6\u5f00\u9500\uff0c\u8fd0\u884c\u65f6\u5b89\u5168</p> <p><code>Cell</code> \u4e0d\u662f Rust \u4e2d\u7684\u4e00\u79cd\u667a\u80fd\u6307\u9488\uff0c\u800c\u662f\u4e00\u79cd\u5185\u90e8\u53ef\u53d8\u6027\u7684\u5bb9\u5668\u3002 \u5185\u90e8\u53ef\u53d8\u6027\uff08Interior mutability\uff09\u662f Rust \u4e2d\u7684\u4e00\u4e2a\u8bbe\u8ba1\u6a21\u5f0f\uff0c \u6307\u5c3d\u7ba1\u88ab\u5305\u88c5\u5728\u4e0d\u53ef\u53d8\u5f15\u7528\u4e2d\u4f46\u4ecd\u53ef\u4ee5\u53ef\u53d8\u7684\u7c7b\u578b\u3002\u5728 Rust \u4e2d\uff0c\u8fd9\u901a\u5e38\u662f\u4f7f\u7528\u4e0d\u5b89\u5168\u4ee3\u7801\u5b9e\u73b0\u7684\uff0c <code>Cell</code> \u548c <code>RefCell</code> \u7c7b\u578b\u63d0\u4f9b\u4e86\u4e00\u79cd\u5b89\u5168\u4fbf\u6377\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u5185\u90e8\u53ef\u53d8\u6027\u3002 </p> <p><code>Cell</code> \u7528\u4e8e\u5305\u88c5\u503c\u5e76\u5141\u8bb8\u5b83\u4eec\u5728\u5355\u7ebf\u7a0b\u73af\u5883\u4e2d\u53ef\u53d8\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u57fa\u4e8e\u7c7b\u578b\u7684\u673a\u5236\u6765\u6539\u53d8\u5b58\u50a8\u5728\u5185\u90e8\u7684\u503c\uff0c\u5e76\u786e\u4fdd\u5b58\u50a8\u7684\u503c\u5728 <code>Cell</code> \u7684\u751f\u547d\u5468\u671f\u5185\u4fdd\u6301\u6709\u6548\u3002 </p> <p>\u56e0\u6b64\uff0c\u867d\u7136 <code>Cell</code> \u786e\u5b9e\u63d0\u4f9b\u4e86\u4e00\u79cd\u7ba1\u7406\u503c\u7684\u751f\u547d\u5468\u671f\u548c\u6240\u6709\u6743\u7684\u65b9\u6cd5\uff0c\u4f46\u5b83\u4e0d\u662f\u4f20\u7edf\u610f\u4e49\u4e0a\u7684\u667a\u80fd\u6307\u9488\u7c7b\u578b\uff0c\u56e0\u4e3a\u5b83\u4e0d\u7ba1\u7406\u5185\u5b58\u5206\u914d\u6216\u91ca\u653e\u3002\u76f8\u53cd\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u5185\u90e8\u53ef\u53d8\u6027\u673a\u5236\u3002</p>"},{"location":"rust/rust-smart%20pointer.html#_2","title":"\u603b\u7ed3","text":"<p>\u5176\u5b9e\u667a\u80fd\u6307\u9488\u53ea\u6709\u4e0d\u8ba1\u6570\u7684<code>Box</code>\u548c\u8ba1\u6570\u5f15\u7528<code>Rc</code>\u4e24\u79cd\uff1b</p> <p>\u56e0\u4e3aRust\u7684\u81ea\u52a8\u89e3\u5f15\u7528\u7684\u7279\u6027\uff0c\u4f7f\u7528<code>Box</code>\u6216<code>Rc</code>\u5305\u88c5\u7684\u5bf9\u8c61\u65f6\u53ef\u4ee5\u50cf\u76f4\u63a5\u4f7f\u7528\u5176\u5185\u90e8\u503c\u4e00\u6837\u76f4\u63a5\u8c03\u7528\u65b9\u6cd5\u3001\u53d6\u503c\uff1a</p> <pre><code>let b1 = Box::new(Node::new(1,None,None));\nprintln!(\"{:?}\", b1.value);\nlet rc1 = Rc::new(Node::new(2,None,None));\nlet rc2 = rc1.clone();\nlet rc3 = &amp;rc2;\nprintln!(\"{:?}\", rc3.value);\n</code></pre>"},{"location":"rust/rust-str.html","title":"Rust-str","text":""},{"location":"rust/rust-str.html#char","title":"Char","text":"<p>\u5728rust\u4e2d<code>char</code>\u7c7b\u578b\u8868\u793a\u5355\u4e2a\u5b57\u7b26\u3002\u66f4\u5177\u4f53\u5730\u8bf4\uff0c<code>char</code>\u5b9e\u9645\u4e0a\u662f\u201cUnicode \u6807\u91cf\u503c\u201d(Unicode Scalar Value)\u3002</p> <p>\u8fd9\u91cc\u6d89\u53ca\u5230Unicode \u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u5177\u4f53\u6765\u8bf4</p> <ul> <li> <p>Unicode \u662f\u5b57\u7b26\u96c6\uff1b\u4e3a\u6bcf\u4e00\u4e2a\u5b57\u7b26\u5206\u914d\u4e00\u4e2a\u552f\u4e00\u7684ID(code point)\u3002code point \u53d6\u503c\u8303\u56f4\u662f0-10FFFF\u3002   \u4f8b\u5982\u5b57\u7b260\u7684unicode number\u8bb0\u4f5c<code>U+0030</code>\uff0c\u5b57\u7b261\u662f<code>U+0031</code>\uff0c\u5b57\u7b26\u662f<code>U+1F495</code></p> </li> <li> <p>UTF-8 \u662f\u7f16\u7801\u89c4\u5219\u7684\u4e00\u79cd\uff1b\u7f16\u7801\u89c4\u5219\u662f\u5c06\u4e00\u4e2acode point \u8f6c\u6362\u4e3a\u5b57\u8282\u5e8f\u5217\u7684\u89c4\u5219\uff1b\u6709UTF-8\uff0cUTF-16\u7b49 \u5176\u4e2dUTF8\u662f\u4e00\u5957\u4ee5 8 \u4f4d\u4e3a\u4e00\u4e2a\u7f16\u7801\u5355\u4f4d\u7684\u53ef\u53d8\u957f\u7f16\u7801\uff0c\u89c4\u5219\u5982\u4e0b\uff1a</p> </li> </ul> <p>U+ 0000 ~ U+  007F: 0XXXXXXX</p> <p>U+ 0080 ~ U+  07FF: 110XXXXX 10XXXXXX</p> <p>U+ 0800 ~ U+  FFFF: 1110XXXX 10XXXXXX 10XXXXXX</p> <p>U+10000 ~ U+10FFFF: 11110XXX 10XXXXXX 10XXXXXX 10XXXXXX</p> <p>\u6309\u7167\u4e0a\u8ff0\u89c4\u5219\u53ef\u4ee5\u77e5\u9053\uff0c\u6570\u5b57\u5b57\u7b26utf8\u7f16\u7801\u540e\u662f1\u4e2a\u5b57\u8282\uff0c\u82f1\u6587\u5b57\u6bcd\u4f7f\u7528utf8\u7f16\u7801\u540e\u4e5f\u662f1\u4e2a\u5b57\u8282\uff0c\u800cemoji\u7f16\u7801\u540e\u662f4\u4e2a\u5b57\u8282</p> <p>Unicode Scalar Value\u4e0eUnicode Code Point\u7c7b\u4f3c\uff0c\u6709\u6240\u4e0d\u540c\uff0c\u4f46\u4e00\u822c\u90fd\u7528\u4e00\u4e2a4\u5b57\u8282\u6574\u6570\u6765\u8868\u793a\uff1a</p> <p><code>Unicode Scalar Value</code> is any <code>Unicode code point</code> except high-surrogate and low-surrogate code points. In other words, the ranges of integers 0 to D7FF and E000 to 10FFFF inclusive.</p> <p>\u56e0\u6b64\u5728rust\u4e2d<code>char</code>\u53ef\u4ee5\u76f4\u63a5\u7531<code>u32</code>\u7c7b\u578b\u8f6c\u6362\u800c\u6765:</p> <pre><code>let c0 = char::from_u32(48).unwrap();\nlet c1 = char::from_u32(49).unwrap();\nlet ce;\nunsafe { ce = char::from_u32_unchecked(0x1F495) }\nprintln!(\"{c0}, {c1}, {ce}\");// output: 0, 1, \ud83d\udc95\n</code></pre>"},{"location":"rust/rust-str.html#string","title":"String","text":"<p><code>std::string::String</code>\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>#[derive(PartialOrd, Eq, Ord)]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"String\")]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub struct String {\nvec: Vec&lt;u8&gt;,\n}\n</code></pre>"},{"location":"rust/rust-str.html#_1","title":"\u7f16\u7801\u95ee\u9898","text":"<p>\u4e0d\u540c\u4e8eC++\u4e2d\u7684<code>std::string</code>\u4e0d\u89c4\u5b9a\u7f16\u7801\u65b9\u5f0f\uff0crust\u4e2d\u7684<code>std::string::String</code>\u603b\u662f\u4f7f\u7528utf-8\u7f16\u7801\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c <code>struct String</code>\u5185\u90e8\u7684\u5b57\u8282vector\u5b58\u50a8\u7684\u603b\u662f\u8be5\u5b57\u7b26\u4e32\u7684utf-8\u7f16\u7801\u5e8f\u5217(\u7c7b\u4f3cC++20\u4e2d\u5f15\u5165\u7684<code>std::u8string</code>)\u3002</p> <p>\u4f7f\u7528 utf-8 encode\u540e\u5b58\u50a8\u76f8\u6bd4\u4e8e\u76f4\u63a5\u5b58\u50a8\u5bf9\u5e94\u7684char\u6570\u7ec4(\u5373unicode scalar value \u6570\u7ec4 or\u8bf4\u662futf32\u7f16\u7801\uff0c)\u8282\u7701\u7a7a\u95f4\uff1a <pre><code>let ss = String::from(\"123abc\");\nlet ss_utf8_len = ss.len();\nlet ss_chars_len = ss.chars().map(|x| mem::size_of_val(&amp;x)).sum::&lt;usize&gt;();\nprintln!(\"{}\", ss_utf8_len);    // 6\nprintln!(\"{}\", ss_chars_len);   // 24\n</code></pre> <code>String</code>\u4e0d\u5141\u8bb8\u4f7f\u7528\u4e0b\u6807\u7d22\u5f15\uff0c\u56e0\u4e3a\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u5bf9\u4e00\u4e2a\u5b57\u7b26\u4e32\u4f7f\u7528\u7d22\u5f15\uff0c \u662f\u671f\u671b\u83b7\u53d6\u5230\u8be5\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2cn\u4e2a\"\u5b57\u7b26\"\u3002 \u4f46\u662f\u56e0\u4e3a<code>String</code>\u91c7\u7528\u4e86utf8\u7f16\u7801\uff0c\u6ca1\u529e\u6cd5\u5728\u5e38\u91cf\u65f6\u95f4\u5185\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u7b2cn\u4e2a\u5b57\u7b26\uff08\u56e0\u4e3a\u6bcf\u4e2a\u5b57\u7b26\u7684\u957f\u5ea6\u53ef\u80fd\u662f\u4e0d\u4e00\u6837\u7684\uff09\uff0c\u53ea\u80fd\u901a\u8fc7\uff1a <pre><code>ss.chars().nth(n); // \u83b7\u53d6ss\u7684\u7b2cn\u4e2a char\n</code></pre> \u7406\u8bba\u4e0a\u6765\u8bf4\u6211\u4eec\u80fd\u5728\u5e38\u91cf\u65f6\u95f4\u5185\u7d22\u5f15\u5230\u7684\u662f\u201c\u8be5\u5b57\u7b26\u4e32\u7684utf8\u7f16\u7801\u5e8f\u5217\u4e2d\u7b2cn\u4e2a\u5b57\u8282\u201d\uff0c\u4f46\u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684index\u8fd4\u56de\u4e00\u4e2au8\u5b57\u7b26\uff0c\u600e\u4e48\u8bf4\u90fd\u6709\u70b9\u602a\u3002\u8003\u8651\u4e0a\u8ff0\u539f\u56e0\uff0c<code>std::string::String</code>\u4e0d\u5141\u8bb8\u4f7f\u7528\u4e0b\u6807\u7d22\u5f15\u3002</p>"},{"location":"rust/rust-str.html#method","title":"method","text":"<ul> <li> <p><code>String</code>\u5b9e\u73b0\u4e86<code>Deref&lt;Target = str&gt;</code>\uff0c\u56e0\u6b64<code>String</code>\u62e5\u6709<code>str</code>\u7c7b\u578b\u7684\u5168\u90e8\u65b9\u6cd5(\u53c2\u89c1Deref\u76f8\u5173\u7279\u6027)     <pre><code>impl ops::Deref for String {\ntype Target = str;\n\n#[inline]\nfn deref(&amp;self) -&gt; &amp;str {\nunsafe { str::from_utf8_unchecked(&amp;self.vec) }\n}\n}\n</code></pre>     \u800c<code>str::from_utf8_unchecked</code> \u5b9e\u73b0\u5982\u4e0b\uff1a     <pre><code>pub const unsafe fn from_utf8_unchecked(v: &amp;[u8]) -&gt; &amp;str {\n// SAFETY: the caller must guarantee that the bytes `v` are valid UTF-8.\n// Also relies on `&amp;str` and `&amp;[u8]` having the same layout.\nunsafe { mem::transmute(v) }\n}\n</code></pre>     \u5176\u4e2d<code>mem::transmute</code>\u5c06<code>&amp;[u8]</code>\u89e3\u91ca\u4e3a<code>&amp;str</code>\u3002\u56e0\u6b64\u5bf9\u4e8e\u5f62\u53c2\u4e3a<code>&amp;str</code>\u7684\u51fd\u6570\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u4f20\u5165<code>String</code>\u4f5c\u4e3a\u5b9e\u53c2\u3002</p> <p>\u800c\u4e14\u4ece<code>String</code>\u5230<code>&amp;str</code>\u7684\u8f6c\u6362\u51e0\u4e4e\u6ca1\u6709\u989d\u5916\u5f00\u9500\uff0c\u56e0\u6b64\u9664\u975e\u6709\u7279\u6b8a\u8bbe\u8ba1\uff0c\u628a\u63a5\u6536\u5b57\u7b26\u4e32\u4e3a\u53c2\u6570\u7684\u51fd\u6570\u4e2d\u53c2\u6570\u7c7b\u578b\u8bbe\u7f6e\u4e3a<code>&amp;str</code>\u603b\u662f\u6ca1\u9519\uff1b\u540c\u6837\u4e5f\u9002\u7528\u4e8e<code>Vec&lt;T&gt;</code>\u548c<code>&amp;[T]</code>\u7b49\u3002</p> </li> <li> <p>\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86<code>String</code>\u4e0e\u5176\u5bf9\u5e94utf8\u7f16\u7801\u5e8f\u5217\u7684\u53cc\u5411\u8f6c\u6362\u3002</p> <p>\u901a\u8fc7<code>String</code>\u7684<code>fn into_bytes(self) -&gt; Vec&lt;u8&gt;</code>\u65b9\u6cd5\u8fd4\u56de\u8be5\u5b57\u7b26\u4e32\u7684utf8\u7f16\u7801\u5e8f\u5217(\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u6d88\u8d39\u6389string\u672c\u8eab\uff0c\u5982\u679c\u53ea\u9700\u8981\u4e00\u4e2a\u5f15\u7528 or )\uff1b\u800c\u4e0e\u4e4b\u76f8\u5bf9\u7684\u9006\u64cd\u4f5c\u662f<code>fn from_utf8(vec: Vec&lt;u8&gt;) -&gt; Result&lt;String, FromUtf8Error&gt;</code>\uff0c\u5373\u9a8c\u8bc1\u4e00\u4e2a<code>Vec&lt;u8&gt;</code>\u662f\u5426\u662f\u5408\u6cd5\u7684utf8\u7f16\u7801\u5e8f\u5217\uff0c\u5982\u679c\u5408\u6cd5\u5c31\u6620\u5c04\u4e3a<code>String</code>\u3002</p> </li> <li> <p><code>String</code>\u8fd8\u53ef\u4ee5\u4e0e\u5176\u5bf9\u5e94utf16\u7f16\u7801\u5e8f\u5217\u7684\u53cc\u5411\u8f6c\u6362\u3002</p> <p>\u901a\u8fc7<code>str</code>\u7684<code>fn encode_utf16(&amp;self) -&gt; EncodeUtf16&lt;'_&gt;</code>\u65b9\u6cd5\u8fd4\u56de\u8be5\u5b57\u7b26\u4e32\u7684utf16\u7f16\u7801\u5e8f\u5217\uff1b\u800c\u4e0e\u4e4b\u76f8\u5bf9\u7684\u9006\u64cd\u4f5c\u662f<code>String</code>\u7684method<code>fn from_utf16(v: &amp;[u16]) -&gt; Result&lt;String, FromUtf16Error&gt;</code>\uff0c\u5373\u5c06\u4e00\u4e2a<code>&amp;[u16]</code>\u901a\u8fc7utf16\u7f16\u7801\u65b9\u5f0f\u6620\u5c04\u4e3a<code>String</code>\u3002</p> </li> <li> <p>\u800c<code>String</code>\u7684<code>len()</code>\u65b9\u6cd5\u8fd4\u56de\u7684\u4e5f\u662f\u5b57\u7b26\u4e32\u7684utf8\u7f16\u7801\u957f\u5ea6\uff0c\u5373\uff1a     <pre><code>pub fn len(&amp;self) -&gt; usize {\nself.vec.len()\n}\n// =============================================\nlet s1 = String::from(\"\u6211\u7684Blog\");\nprintln!(\"{}\", s1.len()) //output: 10; &lt;==10=3+3+1+1+1+1\n</code></pre></p> </li> </ul>"},{"location":"rust/rust-str.html#trait","title":"Trait","text":"<p><code>std::string</code>\u6a21\u5757\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2atrait<code>ToString</code>\uff0c\u4f46\u662f\u8be5trait\u4e0d\u5e94\u5f53\u7531\u7528\u6237\u624b\u52a8\u5b9e\u73b0\uff1a</p> <p>This trait is automatically implemented for any type which implements the <code>Display</code> trait. As such, <code>ToString</code> shouldn\u2019t be implemented directly: <code>Display</code> should be implemented instead, and you get the <code>ToString</code> implementation for free.</p>"},{"location":"rust/rust-str.html#osstring","title":"OsString","text":"<p>A type that can represent owned, mutable platform-native strings, but is cheaply inter-convertible with Rust strings.</p>"},{"location":"rust/rust-study.html","title":"Rust \u5165\u95e8\u8bb0\u5f55","text":""},{"location":"rust/rust-study.html#_1","title":"\u53d8\u91cf","text":""},{"location":"rust/rust-study.html#const","title":"const","text":"<p>\u5b9a\u4e49\u5e38\u91cf\u4f7f\u7528const\u800c\u4e0d\u662flet</p> <p>Rust \u4e2d<code>let</code>\u5b9a\u4e49\u7684 Variable \u867d\u7136\u9ed8\u8ba4\u4e0d\u53ef\u53d8\uff0c\u4f46\u662f\u4e0econst\u8fd8\u662f\u5b58\u5728\u533a\u522b\uff1a</p> <ul> <li>constant \u7684\u751f\u547d\u5468\u671f\u662f\u6574\u4e2a\u4f5c\u7528\u57df</li> <li>\u7f16\u8bd1\u5668\u53ef\u4ee5\u63a8\u65ad variable \u7684\u7c7b\u578b\uff0c\u4f46\u662f\u5b9a\u4e49 constant \u5fc5\u987b\u663e\u5f0f\u58f0\u660e\u7c7b\u578b</li> </ul> <p>constant\u5fc5\u987b\u4f7f\u7528 <code>constant expression</code> \u6765\u8bbe\u7f6e\uff0c\u5982\uff1a</p> <pre><code>// 1. \u5e38\u91cf\u8868\u8fbe\u5f0f\nconst LEN: usize = 2*16;\n// 2. const fn\nimpl A {\nconst fn new () -&gt; A {\nA{\na: 0,\nb: 0,\nc: 0\n}\n}\n}\nconst TST: A = A::new();\n</code></pre>"},{"location":"rust/rust-study.html#_2","title":"\u6570\u636e\u7c7b\u578b","text":"<p>rust \u6709\u4e24\u79cd\u6570\u636e\u7c7b\u578b\uff1a scalar and compound\uff0c\u5373\u6240\u8c13\u7b80\u5355\u7c7b\u578b\u548c\u590d\u5408\u7c7b\u578b</p> <p>\u8bb0\u4f4f Rust is a statically typed language, \u8fd9\u610f\u5473\u7740rust\u9700\u8981\u5728\u7f16\u8bd1\u671f\u77e5\u9053\u6240\u6709\u53d8\u91cf\u7684\u7c7b\u578b\uff08\u60f3\u60f3js\u6216python?\uff09</p> <p>Scalar\uff1a</p> <ul> <li> <p>integers, </p> </li> <li> <p>floating-point numbers, </p> </li> <li> <p>Booleans, and </p> </li> <li> <p>characters</p> </li> </ul>"},{"location":"rust/rust-study.html#integer","title":"\u5173\u4e8e integer\u7684\u6ea2\u51fa\uff1a","text":"<ul> <li> <p>debug\u6a21\u5f0f\u7f16\u8bd1\u65f6\uff1arust\u6267\u884cinteger overflow chek\u3002\u5982\u679c\u7a0b\u5e8f\u8fd0\u884c\u65f6\u53d1\u751f\u6574\u6570\u6ea2\u51fa\uff0c\u4f1a\u76f4\u63a5panic\uff1b</p> </li> <li> <p>release\u6a21\u5f0f\u7f16\u8bd1\u65f6(<code>cargo build --release</code>)\uff1arust\u4e0d\u6267\u884cinteger overflow check\u3002\u5982\u679c\u7a0b\u5e8f\u8fd0\u884c\u65f6\u53d1\u751f\u6574\u6570\u6ea2\u51fa\uff0c\u5c06\u8fdb\u884cwrap\uff08\u4e0eC\u8bed\u8a00\u9ed8\u8ba4\u884c\u4e3a\u76f8\u540c\uff09\uff0c\u5373\uff0c\u5927\u4e8e\u8be5\u7c7b\u578b\u6700\u5927\u503c\u7684\u6570\u503c\u5c06\u4f1a\u201cwrap around\u201d\u5230\u8be5\u7c7b\u578b\u53ef\u4ee5\u5bb9\u7eb3\u7684\u6700\u5c0f\u503c\u3002\u5728 u8 \u7684\u60c5\u51b5\u4e0b\uff0c256 \u53d8\u4e3a 0\uff0c257 \u53d8\u4e3a 1\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002</p> <p>\u5982\u679c\u8981\u663e\u5f0fwrap\uff0c\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u5e93\u7c7b\u578b <code>Wrapping</code>\uff08\u4f46\u662f\uff0c\u53ef\u80fd\u662f\u6211\u773c\u754c\u7a84\uff0c\u4ece\u672a\u89c1\u4eba\u4f7f\u7528\u8fc7\uff09\uff1a <pre><code>let zero = Wrapping(0u8);\nlet tff = Wrapping(255u8);\nprintln!(\"{}\", zero + tff + tff);\n// 254\n</code></pre></p> </li> </ul>"},{"location":"rust/rust-study.html#char","title":"char\u7c7b\u578b","text":"<p>Note</p> <p>\u5173\u4e8e\u5b57\u7b26\u548c\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u66f4\u8be6\u7ec6\u7684\u89e3\u91ca\u89c1rust-str</p> <p>\u4e0eC\u8bed\u8a00\u4e2d\u7684\u7b80\u5355\u4f7f\u75288\u4f4d\u6709\u7b26\u53f7\u6574\u578b\u6765\u4ee3\u8868<code>char</code>\u7c7b\u578b\u4e0d\u540c\uff1a</p> <p>Rust \u4e2d <code>char</code> \u7c7b\u578b\u662f4\u5b57\u8282\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5b57\u7b26\u8868\u793a\u4e00\u4e2a <code>Unicode Scalar Value</code>,which means it can represent a lot more than just ASCII.</p> <p>Unicode Scalar Values range from <code>U+0000</code> to <code>U+D7FF</code> and <code>U+E000</code> to <code>U+10FFFF</code> inclusive</p> <pre><code>let c = '\u7aef';\nprintln!(\"{} is {} bytes\", c, size_of_val(&amp;c));\n// \u7aef is 4 bytes\nlet mut b = [0; 4];\nlet result = '\u7aef'.encode_utf8(&amp;mut b);\nprintln!(\"result len: {} bytes\",result.len());\n// result len: 3 bytes\nlet result = 'd'.encode_utf8(&amp;mut b);\nprintln!(\"result len: {} bytes\",result.len());\n// result len: 1 bytes\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u7f16\u7801\u6210utf-8\u4e4b\u540e\uff0c\u4e00\u4e2a\u4e2d\u6587\u53603\u4e2a\u5b57\u8282\uff0c\u82f1\u6587\u5360\u4e00\u4e2a\u5b57\u8282\u3002</p>"},{"location":"rust/rust-study.html#compound","title":"\u590d\u5408\u6570\u636e\u7c7b\u578b(compound)","text":"<p>tuple\uff1a</p> <pre><code>let cat = (\"Furry McFurson\", 3.5);\nlet (name,age) = cat;\nprint!(\"{}\", cat.0);\nprintln!(\"{} is {} years old.\", name, age);\n</code></pre>"},{"location":"rust/rust-study.html#_3","title":"\u51fd\u6570","text":"<p>Function bodies are made up of a series of statements optionally ending in an expression. </p>"},{"location":"rust/rust-study.html#statement-expression","title":"\u8bed\u53e5statement \u548c \u8868\u8fbe\u5f0fexpression","text":"<p>TL;DR: Statements do not return a value. Expressions evaluate to a resulting value. </p> <p>Rust is an expression-based language, this is an important distinction to understand. Other languages don\u2019t have the same distinctions, so let\u2019s look at what statements and expressions are and how their differences affect the bodies of functions. </p> <pre><code>let x = (let y = 6);\n</code></pre> <p><code>let y = 6</code>\u8bed\u53e5\u4e0d\u8fd4\u56de\u503c\uff0c\u6240\u4ee5 x \u6ca1\u6709\u4efb\u4f55\u4e1c\u897f\u53ef\u4ee5\u7ed1\u5b9a\u3002\u8fd9\u4e0e\u5176\u4ed6\u8bed\u8a00\uff08\u4f8b\u5982 C \u548c Ruby\uff09\u4e2d\u53d1\u751f\u7684\u60c5\u51b5\u4e0d\u540c\uff0cC\u7684\u8d4b\u503c\u8bed\u53e5\u8fd4\u56de\u8d4b\u503c\u7684\u503c\uff0c\u56e0\u6b64\u53ef\u4ee5\u5199<code>int x = y = 3</code>\uff08\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48C++\u4e2d\uff0c\u4e3a\u4e00\u4e2a\u81ea\u5b9a\u4e49class\u5b9a\u4e49<code>operator=</code>\u9700\u8981\u8fd4\u56de<code>Object&amp;</code>\uff09\uff0c\u800c\u5728rust\u662f\u4e0d\u53ef\u884c\u7684\u3002</p> <p>\u8868\u8fbe\u5f0f\u53ef\u4ee5\u662f\u8bed\u53e5\u7684\u4e00\u90e8\u5206\uff1a<code>let y = 6</code>\u4e2d\u7684<code>6</code>\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5b83\u8ba1\u7b97\u51fa\u7684\u503c\u662f<code>6</code>\uff1b\u51fd\u6570\u8c03\u7528\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff1b\u5b8f\u8c03\u7528\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff1b\u6211\u4eec\u7528\u6765\u521b\u5efa\u65b0\u4f5c\u7528\u57df\u7684\u5927\u62ec\u53f7\uff08\u4ee3\u7801\u5757\uff09 <code>{}</code> \u4e5f\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u4f8b\u5982\uff1a <pre><code>fn main() {\nlet y = {\nlet x = 3;\nx + 1\n};\n\nprintln!(\"The value of y is: {}\", y);\n}\n</code></pre></p>"},{"location":"rust/rust-study.html#ownership","title":"Ownership(\u6240\u6709\u6743)","text":"<ul> <li> <p>\u5206\u914d\u548c\u8bbf\u95ee stack\u4e0a\u7684\u6570\u636e\u5feb\u4e8eheap\u4e0a\u7684\u6570\u636e</p> <p>Pushing to the stack is faster than allocating on the heap\u3002\u56e0\u4e3a\u5206\u914d\u6808\u53d8\u91cf\u4e0d\u5fc5\u641c\u7d22\u5b58\u50a8\u65b0\u6570\u636e\u7684\u4f4d\u7f6e\uff1b\u53ea\u9700\u8981\u79fb\u52a8\u6808\u9876\u6307\u9488\uff08ESP\uff09\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u5728\u5806\u4e0a\u5206\u914d\u7a7a\u95f4\u9700\u8981\u66f4\u591a\u7684\u5de5\u4f5c\uff0c\u56e0\u4e3a\u5206\u914d\u5668\u5fc5\u987b\u9996\u5148\u627e\u5230\u8db3\u591f\u5927\u7684\u7a7a\u95f4\u6765\u5b58\u653e\u6570\u636e\uff0c\u7136\u540e\u8fdb\u884c\u6807\u8bb0\uff0c\u4e3a\u4e0b\u4e00\u6b21\u5206\u914d\u505a\u51c6\u5907\u3002</p> <p>Accessing data in the heap is slower than accessing data on the stack\u3002 \u4e3b\u8981\u662fcache\u7684\u539f\u56e0\uff0c\u5728\u5185\u5b58\u4e2d\u8df3\u52a8\u5c0f\uff0c\u5c40\u90e8\u6027\u597d\uff0c\u901f\u5ea6\u5c31\u4f1a\u66f4\u5feb\u3002\u540c\u6837\u7684\u9053\u7406\uff0c\u5728\u5806\u4e0a\u5206\u914d\u5927\u91cf\u7684\u7a7a\u95f4\u4e5f\u4f1a\u82b1\u8d39\u65f6\u95f4\u3002</p> </li> </ul> <p>\u6240\u6709\u6743\u7684\u89c4\u5219\uff1a</p> <ul> <li>Rust \u4e2d\u7684\u6bcf\u4e00\u4e2a\u503c\u90fd\u6709\u4e00\u4e2a\u88ab\u79f0\u4e3a\u5176 \u6240\u6709\u8005\uff08owner\uff09\u7684\u53d8\u91cf\u3002</li> <li>\u503c\u5728\u4efb\u4e00\u65f6\u523b\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u6240\u6709\u8005\u3002</li> <li>\u5f53\u6240\u6709\u8005\uff08\u53d8\u91cf\uff09\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u8fd9\u4e2a\u503c\u5c06\u88ab\u4e22\u5f03\u3002</li> </ul> <p>\u8003\u8651C++\u4e2d\u7684<code>unique_ptr</code></p>"},{"location":"rust/rust-study.html#referenceborrowing","title":"\u5f15\u7528(reference)\u548c\u501f\u7528(borrowing)","text":"<p>TL;DR</p> <p>\u5173\u4e8e\u5f15\u7528\u7684\u4e24\u4e2a\u6761\u4ef6\uff1a</p> <ul> <li>\u5728\u4efb\u610f\u7ed9\u5b9a\u65f6\u95f4\uff0c\u8981\u4e48 \u53ea\u80fd\u6709\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\uff0c\u8981\u4e48 \u53ea\u80fd\u6709\u591a\u4e2a\u4e0d\u53ef\u53d8\u5f15\u7528\u3002</li> <li>\u5f15\u7528\u5fc5\u987b\u603b\u662f\u6709\u6548\u7684(\u7f16\u8bd1\u5668\u68c0\u67e5\u5e76\u7981\u6b62Dangling References)\u3002</li> </ul> <p>\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a\u5f15\u7528\u7684\u884c\u4e3a\u79f0\u4e3a \u501f\u7528\uff08borrowing\uff09</p> <p>\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u66f4\u5e0c\u671b\u80fd\u8bbf\u95ee\u6570\u636e\uff0c\u540c\u65f6\u4e0d\u53d6\u5f97\u5176\u6240\u6709\u6743\u3002\u4e3a\u5b9e\u73b0\u8fd9\u70b9\uff0cRust \u4f7f\u7528 \u4e86\u501f\u7528\uff08borrowing\uff09\u673a\u5236\u3002\u5bf9\u8c61\u53ef\u4ee5\u901a\u8fc7\u5f15\u7528\uff08<code>&amp;T</code>\uff09\u6765\u4f20\u9012\uff0c\u4ece\u800c\u53d6\u4ee3\u901a\u8fc7 \u503c\uff08<code>T</code>\uff09\u6765\u4f20\u9012\u3002</p> <p>\u53e6\u5916\u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff1a</p> <p>\u4e00\u4e2a\u6570\u636e\u53ef\u4ee5\u6709\u591a\u4e2a\u4e0d\u53ef\u53d8\u501f\u7528\uff0c\u4f46\u662f\u5728\u4f7f\u7528\u6570\u636e\u7684\u4e0d\u53ef\u53d8\u501f\u7528\u7684\u540c\u65f6\uff0c\u4e0d\u80fd\u4f7f\u7528\u6570\u636e\u7684\u53ef\u53d8\u501f\u7528\u3002</p> <p>\u6216\u8005\u8bf4\uff0c\u540c\u4e00\u65f6\u95f4\u5185\u53ea\u5141\u8bb8\u4e00\u4e2a\u53ef\u53d8\u501f\u7528\u3002\u4ec5\u5f53\u6700\u540e\u4e00\u6b21\u4f7f\u7528\u53ef\u53d8\u501f\u7528\u4e4b\u540e\uff0c\u539f\u59cb\u6570\u636e\u624d\u53ef\u4ee5\u518d\u6b21\u501f\u7528\u3002\u5982\u4e0b\u4f8b\u5b50\uff1a</p> <pre><code>struct Point { x: i32, y: i32, z: i32 }\n\nfn main() {\nlet mut point = Point { x: 0, y: 0, z: 0 };\nlet borrowed_point = &amp;point;\nlet another_borrow = &amp;point;\n// \u6570\u636e\u53ef\u4ee5\u901a\u8fc7\u5f15\u7528\u6216\u539f\u59cb\u7c7b\u578b\u6765\u8bbf\u95ee\nprintln!(\"Point has coordinates: ({}, {}, {})\",\nborrowed_point.x, another_borrow.y, point.z); // \u62a5\u9519\uff01`point` \u4e0d\u80fd\u4ee5\u53ef\u53d8\u65b9\u5f0f\u501f\u7528\uff0c\u56e0\u4e3a\u5f53\u524d\u8fd8\u6709\u4e0d\u53ef\u53d8\u501f\u7528\u3002\n// let mutable_borrow = &amp;mut point;\n// TODO ^ \u8bd5\u4e00\u8bd5\u53bb\u6389\u6b64\u884c\u6ce8\u91ca\n\n// \u88ab\u501f\u7528\u7684\u503c\u5728\u8fd9\u91cc\u88ab\u91cd\u65b0\u4f7f\u7528\nprintln!(\"Point has coordinates: ({}, {}, {})\",\nborrowed_point.x, another_borrow.y, point.z);\n// \u4e0d\u53ef\u53d8\u7684\u5f15\u7528\u4e0d\u518d\u7528\u4e8e\u5176\u4f59\u7684\u4ee3\u7801\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u53ef\u53d8\u7684\u5f15\u7528\u91cd\u65b0\u501f\u7528\u3002\nlet mutable_borrow = &amp;mut point;\n// \u901a\u8fc7\u53ef\u53d8\u5f15\u7528\u6765\u4fee\u6539\u6570\u636e\nmutable_borrow.x = 5;\nmutable_borrow.y = 2;\nmutable_borrow.z = 1;\n// \u62a5\u9519\uff01\u4e0d\u80fd\u518d\u4ee5\u4e0d\u53ef\u53d8\u65b9\u5f0f\u6765\u501f\u7528 `point`\uff0c\u56e0\u4e3a\u5b83\u5f53\u524d\u5df2\u7ecf\u88ab\u53ef\u53d8\u501f\u7528\u3002\n// let y = &amp;point.y;\n// TODO ^ \u8bd5\u4e00\u8bd5\u53bb\u6389\u6b64\u884c\u6ce8\u91ca\n\n// \u62a5\u9519\uff01\u65e0\u6cd5\u6253\u5370\uff0c\u56e0\u4e3a `println!` \u7528\u5230\u4e86\u4e00\u4e2a\u4e0d\u53ef\u53d8\u5f15\u7528\u3002\n// println!(\"Point Z coordinate is {}\", point.z);\n// TODO ^ \u8bd5\u4e00\u8bd5\u53bb\u6389\u6b64\u884c\u6ce8\u91ca\n\n// \u6b63\u5e38\u8fd0\u884c\uff01\u53ef\u53d8\u5f15\u7528\u80fd\u591f\u4ee5\u4e0d\u53ef\u53d8\u7c7b\u578b\u4f20\u5165 `println!`\nprintln!(\"Point has coordinates: ({}, {}, {})\",\nmutable_borrow.x, mutable_borrow.y, mutable_borrow.z);\n\n// \u53ef\u53d8\u5f15\u7528\u4e0d\u518d\u7528\u4e8e\u5176\u4f59\u7684\u4ee3\u7801\uff0c\u56e0\u6b64\u53ef\u4ee5\u91cd\u65b0\u501f\u7528\nlet new_borrowed_point = &amp;point;\nprintln!(\"Point now has coordinates: ({}, {}, {})\",\nnew_borrowed_point.x, new_borrowed_point.y, new_borrowed_point.z);\n}\n</code></pre>"},{"location":"rust/rust-study.html#macro","title":"Macro(\u5b8f)","text":"<p>Note</p> <p>\u8fd9\u4e00\u90e8\u5206\u8be6\u7ec6\u4fe1\u606f\u89c1rust-macro</p> <p>\u5173\u4e8emacro\u7684\u58f0\u660e\u4f4d\u7f6e\uff1a</p> <p>In order to use a macro outside of its module, you need to do something special to the module to lift the macro out into its parent.</p> <p>The same trick also works on \"extern crate\" statements for crates that have exported macros, if you've seen any of those around.</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>#[macro_export]\nmod macros {\nmacro_rules! my_macro {\n() =&gt; {\nprintln!(\"Check out my macro!\");\n};\n}\n}\n\nfn main() {\nmy_macro!();\n}\n</code></pre> <p>\u5fc5\u987b\u4f7f\u7528<code>#[macro_export]</code>\uff0c\u800c\u4e0d\u80fd<code>macros::my_macro!()</code></p>"},{"location":"rust/rust-study.html#string","title":"String","text":"<p>Note</p> <p>\u5173\u4e8e\u5b57\u7b26\u548c\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u66f4\u8be6\u7ec6\u7684\u89e3\u91ca\u89c1rust-str</p> <p>string\u4e0d\u80fd\u4f7f\u7528 index\u3002</p> <p>rust\u4e2d\u7684String\u5b58\u50a8\u65b9\u5f0f\uff1a</p> <pre><code>#[derive(PartialOrd, Eq, Ord)]\npub struct String {\nvec: Vec&lt;u8&gt;,\n}\n</code></pre> <p>\u5728<code>string.rs</code>\u4e2d\u53ef\u4ee5\u5f88\u6e05\u695a\u7684\u770b\u5230\uff0cString\u53ea\u662f\u5bf9<code>Vec&lt;u8&gt;</code>\u505a\u4e86\u4e00\u4e2a\u5305\u88c5</p> <p>\u56e0\u6b64 \u4ece Rust \u7684\u89d2\u5ea6\u6765\u8bb2\uff0c\u4e8b\u5b9e\u4e0a\u6709\u4e09\u79cd\u76f8\u5173\u65b9\u5f0f\u53ef\u4ee5\u7406\u89e3\u5b57\u7b26\u4e32\uff1a\u5b57\u8282\u3001\u6807\u91cf\u503c\u548c\u5b57\u5f62\u7c07\uff08\u6700\u63a5\u8fd1\u4eba\u4eec\u773c\u4e2d \u5b57\u6bcd \u7684\u6982\u5ff5\uff09\u3002</p>"},{"location":"rust/rust-study.html#type-conversion","title":"Type Conversion","text":""},{"location":"rust/rust-study.html#errors","title":"Errors","text":"<p>\u4f7f\u7528backtrace\uff1a</p> <p>\u5728powershell\u4e2d\uff1a</p> <pre><code>$env:RUST_BACKTRACE=1 ; cargo run\n</code></pre> <p>\u5728linux \u7ec8\u7aef\u4e2d\uff1a</p> <pre><code>RUST_BACKTRACE=1 cargo run\n</code></pre>"},{"location":"rust/rust-study.html#_4","title":"\u9519\u8bef\u5904\u7406\u6307\u5bfc\u539f\u5219","text":"<p>\u5728\u5f53\u6709\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6709\u5bb3\u72b6\u6001\u7684\u60c5\u51b5\u4e0b\u5efa\u8bae\u4f7f\u7528 <code>panic!</code> \u2014\u2014 \u6709\u5bb3\u72b6\u6001\u662f\u6307\u5f53\u4e00\u4e9b\u5047\u8bbe\u3001\u4fdd\u8bc1\u3001\u534f\u8bae\u6216\u4e0d\u53ef\u53d8\u6027\u88ab\u6253\u7834\u7684\u72b6\u6001\uff0c\u4f8b\u5982\u65e0\u6548\u7684\u503c\u3001\u81ea\u76f8\u77db\u76fe\u7684\u503c\u6216\u8005\u88ab\u4f20\u9012\u4e86\u4e0d\u5b58\u5728\u7684\u503c \u2014\u2014 \u5916\u52a0\u5982\u4e0b\u51e0\u79cd\u60c5\u51b5\uff1a</p> <p>\u6709\u5bb3\u72b6\u6001\u662f\u975e\u9884\u671f\u7684\u884c\u4e3a\uff0c\u4e0e\u5076\u5c14\u4f1a\u53d1\u751f\u7684\u884c\u4e3a\u76f8\u5bf9\uff0c\u6bd4\u5982\u7528\u6237\u8f93\u5165\u4e86\u9519\u8bef\u683c\u5f0f\u7684\u6570\u636e\u3002 \u5728\u6b64\u4e4b\u540e\u4ee3\u7801\u7684\u8fd0\u884c\u4f9d\u8d56\u4e8e\u4e0d\u5904\u4e8e\u8fd9\u79cd\u6709\u5bb3\u72b6\u6001\uff0c\u800c\u4e0d\u662f\u5728\u6bcf\u4e00\u6b65\u90fd\u68c0\u67e5\u662f\u5426\u6709\u95ee\u9898\u3002 \u6ca1\u6709\u53ef\u884c\u7684\u624b\u6bb5\u6765\u5c06\u6709\u5bb3\u72b6\u6001\u4fe1\u606f\u7f16\u7801\u8fdb\u6240\u4f7f\u7528\u7684\u7c7b\u578b\u4e2d\u7684\u60c5\u51b5\u3002\u6211\u4eec\u4f1a\u5728\u7b2c\u5341\u4e03\u7ae0 \u201c\u5c06\u72b6\u6001\u548c\u884c\u4e3a\u7f16\u7801\u4e3a\u7c7b\u578b\u201d \u90e8\u5206\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u8bf4\u660e\u6211\u4eec\u7684\u610f\u601d\u3002 \u5982\u679c\u522b\u4eba\u8c03\u7528\u4f60\u7684\u4ee3\u7801\u5e76\u4f20\u9012\u4e86\u4e00\u4e2a\u6ca1\u6709\u610f\u4e49\u7684\u503c\uff0c\u6700\u597d\u7684\u60c5\u51b5\u4e5f\u8bb8\u5c31\u662f<code>panic!</code>\u5e76\u8b66\u544a\u4f7f\u7528\u4f60\u7684\u5e93\u7684\u4eba\u4ed6\u7684\u4ee3\u7801\u4e2d\u6709 bug \u4ee5\u4fbf\u4ed6\u80fd\u5728\u5f00\u53d1\u65f6\u5c31\u4fee\u590d\u5b83\u3002\u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u4f60\u6b63\u5728\u8c03\u7528\u4e0d\u53d7\u4f60\u63a7\u5236\u7684\u5916\u90e8\u4ee3\u7801\uff0c\u5e76\u4e14\u5b83\u8fd4\u56de\u4e86\u4e00\u4e2a\u4f60\u65e0\u6cd5\u4fee\u590d\u7684\u65e0\u6548\u72b6\u6001\uff0c\u90a3\u4e48 <code>panic!</code> \u5f80\u5f80\u662f\u5408\u9002\u7684\u3002</p> <p>\u7136\u800c\u5f53\u9519\u8bef\u9884\u671f\u4f1a\u51fa\u73b0\u65f6\uff0c\u8fd4\u56de <code>Result</code> \u4ecd\u8981\u6bd4\u8c03\u7528 <code>panic!</code> \u66f4\u4e3a\u5408\u9002\u3002\u8fd9\u6837\u7684\u4f8b\u5b50\u5305\u62ec\u89e3\u6790\u5668\u63a5\u6536\u5230\u683c\u5f0f\u9519\u8bef\u7684\u6570\u636e\uff0c\u6216\u8005 HTTP \u8bf7\u6c42\u8fd4\u56de\u4e86\u4e00\u4e2a\u8868\u660e\u89e6\u53d1\u4e86\u9650\u6d41\u7684\u72b6\u6001\u3002\u5728\u8fd9\u4e9b\u4f8b\u5b50\u4e2d\uff0c\u5e94\u8be5\u901a\u8fc7\u8fd4\u56de <code>Result</code> \u6765\u8868\u660e\u5931\u8d25\u9884\u671f\u662f\u53ef\u80fd\u7684\uff0c\u8fd9\u6837\u5c06\u6709\u5bb3\u72b6\u6001\u5411\u4e0a\u4f20\u64ad\uff0c\u8c03\u7528\u8005\u5c31\u53ef\u4ee5\u51b3\u5b9a\u8be5\u5982\u4f55\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\u3002\u4f7f\u7528 <code>panic!</code> \u6765\u5904\u7406\u8fd9\u4e9b\u60c5\u51b5\u5c31\u4e0d\u662f\u6700\u597d\u7684\u9009\u62e9\u3002</p>"},{"location":"rust/rust-study.html#pattern-match","title":"Pattern match","text":"<p>\u4e0b\u9762\u4ecb\u7ecd\u6a21\u5f0f\u5339\u914d\u7684\u6240\u6709\u8bed\u6cd5</p>"},{"location":"rust/rust-study.html#1","title":"1. \u5339\u914d\u547d\u540d\u53d8\u91cf","text":"<pre><code>fn main() {\nlet x = Some(5);\nlet y = 10;\n\nmatch x {\nSome(50) =&gt; println!(\"Got 50\"),\nSome(y) =&gt; println!(\"Matched, y = {:?}\", y),\n_ =&gt; println!(\"Default case, x = {:?}\", x),\n}\n\nprintln!(\"at the end: x = {:?}, y = {:?}\", x, y);\n}\n</code></pre> <p>\u200b   \u8ba9\u6211\u4eec\u770b\u770b\u5f53 <code>match</code> \u8bed\u53e5\u8fd0\u884c\u7684\u65f6\u5019\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u7b2c\u4e00\u4e2a\u5339\u914d\u5206\u652f\u7684\u6a21\u5f0f\u5e76\u4e0d\u5339\u914d <code>x</code> \u4e2d\u5b9a\u4e49\u7684\u503c\uff0c\u6240\u4ee5\u4ee3\u7801\u7ee7\u7eed\u6267\u884c\u3002</p> <p>\u200b   \u7b2c\u4e8c\u4e2a\u5339\u914d\u5206\u652f\u4e2d\u7684\u6a21\u5f0f\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u53d8\u91cf <code>y</code>\uff0c\u5b83\u4f1a\u5339\u914d\u4efb\u4f55 <code>Some</code> \u4e2d\u7684\u503c\u3002\u56e0\u4e3a\u6211\u4eec\u5728 <code>match</code> \u8868\u8fbe\u5f0f\u7684\u65b0\u4f5c\u7528\u57df\u4e2d\uff0c\u8fd9\u662f\u4e00\u4e2a\u65b0\u53d8\u91cf\uff0c\u800c\u4e0d\u662f\u5f00\u5934\u58f0\u660e\u4e3a\u503c 10 \u7684\u90a3\u4e2a <code>y</code>\u3002\u8fd9\u4e2a\u65b0\u7684 <code>y</code> \u7ed1\u5b9a\u4f1a\u5339\u914d\u4efb\u4f55 <code>Some</code> \u4e2d\u7684\u503c\uff0c\u5728\u8fd9\u91cc\u662f <code>x</code> \u4e2d\u7684\u503c\u3002\u56e0\u6b64\u8fd9\u4e2a <code>y</code> \u7ed1\u5b9a\u4e86 <code>x</code> \u4e2d <code>Some</code> \u5185\u90e8\u7684\u503c\u3002\u8fd9\u4e2a\u503c\u662f 5\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5206\u652f\u7684\u8868\u8fbe\u5f0f\u5c06\u4f1a\u6267\u884c\u5e76\u6253\u5370\u51fa <code>Matched, y = 5</code>\u3002</p> <p><code>match</code> \u4f1a\u5f00\u59cb\u4e00\u4e2a\u65b0\u4f5c\u7528\u57df</p>"},{"location":"rust/rust-study.html#2","title":"2. \u591a\u4e2a\u6a21\u5f0f&amp;\u8303\u56f4\u5339\u914d","text":"<ul> <li>\u5728 <code>match</code> \u8868\u8fbe\u5f0f\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>|</code> \u8bed\u6cd5\u5339\u914d\u591a\u4e2a\u6a21\u5f0f\uff0c\u5b83\u4ee3\u8868 \u6216\uff08or\uff09\u7684\u610f\u601d\u3002</li> <li><code>..=</code> \u8bed\u6cd5\u5141\u8bb8\u4f60\u5339\u914d\u4e00\u4e2a\u95ed\u533a\u95f4\u8303\u56f4\u5185\u7684\u503c\u3002\uff08\u6ce8\u610f\u53ea\u5141\u8bb8\u95ed\u533a\u95f4\uff09</li> </ul>"},{"location":"rust/rust-study.html#3","title":"3. \u89e3\u6784\u5339\u914d","text":"<p>\u7ed3\u6784\u5339\u914d\u5143\u7ec4\u3001\u679a\u4e3e\u3001\u7ed3\u6784\u4f53\u7b49</p> <pre><code>enum Message {\nQuit,\nMove { x: i32, y: i32 },\nWrite(String),\nChangeColor(i32, i32, i32),\n}\n\nfn main() {\nlet msg = Message::ChangeColor(0, 160, 255);\n\nmatch msg {\nMessage::Quit =&gt; {\nprintln!(\"The Quit variant has no data to destructure.\")\n}\nMessage::Move { x, y } =&gt; {//\u89e3\u6784\u5339\u914d\u7ed3\u6784\u4f53\nprintln!(\n\"Move in the x direction {} and in the y direction {}\",\nx,\ny\n);\n}\nMessage::Write(text) =&gt; println!(\"Text message: {}\", text),//\u666e\u901a\u7684\u5339\u914d\nMessage::ChangeColor(r, g, b) =&gt; {//\u89e3\u6784\u5339\u914d\u5143\u7ec4\nprintln!(\n\"Change the color to red {}, green {}, and blue {}\",\nr,\ng,\nb\n)\n}\n}\n}\n</code></pre> <p>\u5728\u89e3\u6784\u5339\u914d\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>..</code> \u5ffd\u7565\u5269\u4f59\u503c\uff1a</p> <p>\u5bf9\u4e8e\u6709\u591a\u4e2a\u90e8\u5206\u7684\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>..</code> \u8bed\u6cd5\u6765\u53ea\u4f7f\u7528\u90e8\u5206\u5e76\u5ffd\u7565\u5176\u5b83\u503c\uff0c\u540c\u65f6\u907f\u514d\u4e0d\u5f97\u4e0d\u6bcf\u4e00\u4e2a\u5ffd\u7565\u503c\u5217\u51fa\u4e0b\u5212\u7ebf\u3002<code>..</code> \u6a21\u5f0f\u4f1a\u5ffd\u7565\u6a21\u5f0f\u4e2d\u5269\u4f59\u7684\u4efb\u4f55\u6ca1\u6709\u663e\u5f0f\u5339\u914d\u7684\u503c\u90e8\u5206\u3002\u5728\u793a\u4f8b 18-23 \u4e2d\uff0c\u6709\u4e00\u4e2a <code>Point</code> \u7ed3\u6784\u4f53\u5b58\u653e\u4e86\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7684\u5750\u6807\u3002\u5728 <code>match</code> \u8868\u8fbe\u5f0f\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u53ea\u64cd\u4f5c <code>x</code> \u5750\u6807\u5e76\u5ffd\u7565 <code>y</code> \u548c <code>z</code> \u5b57\u6bb5\u7684\u503c\uff1a</p> <pre><code>struct Point {\nx: i32,\ny: i32,\nz: i32,\n}\n\nlet origin = Point { x: 0, y: 0, z: 0 };\n\nmatch origin {\nPoint { x, .. } =&gt; println!(\"x is {}\", x),\n}\n</code></pre>"},{"location":"rust/rust-study.html#4","title":"4. @ \u7ed1\u5b9a","text":"<p>at \u8fd0\u7b97\u7b26\uff08<code>@</code>\uff09\u5141\u8bb8\u6211\u4eec\u5728\u521b\u5efa\u4e00\u4e2a\u5b58\u653e\u503c\u7684\u53d8\u91cf\u7684\u540c\u65f6\u6d4b\u8bd5\u5176\u503c\u662f\u5426\u5339\u914d\u6a21\u5f0f\u3002\u793a\u4f8b 18-29 \u5c55\u793a\u4e86\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8fd9\u91cc\u6211\u4eec\u5e0c\u671b\u6d4b\u8bd5 <code>Message::Hello</code> \u7684 <code>id</code> \u5b57\u6bb5\u662f\u5426\u4f4d\u4e8e <code>3..=7</code> \u8303\u56f4\u5185\uff0c\u540c\u65f6\u4e5f\u5e0c\u671b\u80fd\u5c06\u5176\u503c\u7ed1\u5b9a\u5230 <code>id_variable</code> \u53d8\u91cf\u4e2d\u4ee5\u4fbf\u6b64\u5206\u652f\u76f8\u5173\u8054\u7684\u4ee3\u7801\u53ef\u4ee5\u4f7f\u7528\u5b83\u3002\u53ef\u4ee5\u5c06 <code>id_variable</code> \u547d\u540d\u4e3a <code>id</code>\uff0c\u4e0e\u5b57\u6bb5\u540c\u540d\uff0c\u4e0d\u8fc7\u51fa\u4e8e\u793a\u4f8b\u7684\u76ee\u7684\u8fd9\u91cc\u9009\u62e9\u4e86\u4e0d\u540c\u7684\u540d\u79f0\u3002</p>"},{"location":"rust/rust-study.html#trait","title":"Trait","text":""},{"location":"rust/rust-study.html#trait_1","title":"trait \u4f5c\u4e3a\u53c2\u6570","text":"<p>\u77e5\u9053\u4e86\u5982\u4f55\u5b9a\u4e49 trait \u548c\u5728\u7c7b\u578b\u4e0a\u5b9e\u73b0\u8fd9\u4e9b trait \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u63a2\u7d22\u4e00\u4e0b\u5982\u4f55\u4f7f\u7528 trait \u6765\u63a5\u53d7\u591a\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u53c2\u6570\u3002</p> <p>\u793a\u4f8b\u4e2d\u4e3a <code>NewsArticle</code> \u548c <code>Tweet</code> \u7c7b\u578b\u5b9e\u73b0\u4e86 <code>Summary</code> trait\u3002\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570 <code>notify</code> \u6765\u8c03\u7528\u5176\u53c2\u6570 <code>item</code> \u4e0a\u7684 <code>summarize</code> \u65b9\u6cd5\uff0c\u8be5\u53c2\u6570\u662f\u5b9e\u73b0\u4e86 <code>Summary</code> trait \u7684\u67d0\u79cd\u7c7b\u578b\u3002\u4e3a\u6b64\u53ef\u4ee5\u4f7f\u7528 <code>impl Trait</code> \u8bed\u6cd5\uff0c\u50cf\u8fd9\u6837\uff1a</p> <pre><code>pub fn notify(item: impl Summary) {\nprintln!(\"Breaking news! {}\", item.summarize());\n}\n</code></pre> <p>\u5bf9\u4e8e <code>item</code> \u53c2\u6570\uff0c\u6211\u4eec\u6307\u5b9a\u4e86 <code>impl</code> \u5173\u952e\u5b57\u548c trait \u540d\u79f0\uff0c\u800c\u4e0d\u662f\u5177\u4f53\u7684\u7c7b\u578b\u3002\u8be5\u53c2\u6570\u652f\u6301\u4efb\u4f55\u5b9e\u73b0\u4e86\u6307\u5b9a trait \u7684\u7c7b\u578b\u3002\u5728 <code>notify</code> \u51fd\u6570\u4f53\u4e2d\uff0c\u53ef\u4ee5\u8c03\u7528\u4efb\u4f55\u6765\u81ea <code>Summary</code> trait \u7684\u65b9\u6cd5\uff0c\u6bd4\u5982 <code>summarize</code>\u3002\u6211\u4eec\u53ef\u4ee5\u4f20\u9012\u4efb\u4f55 <code>NewsArticle</code> \u6216 <code>Tweet</code> \u7684\u5b9e\u4f8b\u6765\u8c03\u7528 <code>notify</code>\u3002\u4efb\u4f55\u7528\u5176\u5b83\u5982 <code>String</code> \u6216 <code>i32</code> \u7684\u7c7b\u578b\u8c03\u7528\u8be5\u51fd\u6570\u7684\u4ee3\u7801\u90fd\u4e0d\u80fd\u7f16\u8bd1\uff0c\u56e0\u4e3a\u5b83\u4eec\u6ca1\u6709\u5b9e\u73b0 <code>Summary</code>\u3002</p> <p><code>impl Trait</code> \u8bed\u6cd5\u9002\u7528\u4e8e\u76f4\u89c2\u7684\u4f8b\u5b50\uff0c\u5b83\u4e0d\u8fc7\u662f\u4e00\u4e2a\u8f83\u957f\u5f62\u5f0f\u7684\u8bed\u6cd5\u7cd6\u3002\u8fd9\u88ab\u79f0\u4e3a trait bound\uff0c\u8fd9\u770b\u8d77\u6765\u50cf\uff1a</p> <pre><code>pub fn notify&lt;T: Summary&gt;(item: T) {\nprintln!(\"Breaking news! {}\", item.summarize());\n}\n</code></pre> <p>\u8fd9\u4e0e\u4e4b\u524d\u7684\u4f8b\u5b50\u76f8\u540c\uff0c\u4e0d\u8fc7\u7a0d\u5fae\u5197\u957f\u4e86\u4e00\u4e9b\u3002trait bound \u4e0e\u6cdb\u578b\u53c2\u6570\u58f0\u660e\u5728\u4e00\u8d77\uff0c\u4f4d\u4e8e\u5c16\u62ec\u53f7\u4e2d\u7684\u5192\u53f7\u540e\u9762\u3002</p>"},{"location":"rust/rust-study.html#where","title":"where","text":"<p>Rust \u6709\u53e6\u4e00\u4e2a\u5728\u51fd\u6570\u7b7e\u540d\u4e4b\u540e\u7684 <code>where</code> \u4ece\u53e5\u4e2d\u6307\u5b9a trait bound \u7684\u8bed\u6cd5\u3002\u6240\u4ee5\u9664\u4e86\u8fd9\u4e48\u5199\uff1a</p> <pre><code>fn some_function&lt;T: Display + Clone, U: Clone + Debug&gt;(t: T, u: U) -&gt; i32 {\n</code></pre> <p>\u8fd8\u53ef\u4ee5\u50cf\u8fd9\u6837\u4f7f\u7528 <code>where</code> \u4ece\u53e5\uff1a</p> <pre><code>fn some_function&lt;T, U&gt;(t: T, u: U) -&gt; i32\n    where T: Display + Clone,\nU: Clone + Debug\n{\n</code></pre> <p>\u8fd9\u4e2a\u51fd\u6570\u7b7e\u540d\u5c31\u663e\u5f97\u4e0d\u90a3\u4e48\u6742\u4e71\uff0c\u51fd\u6570\u540d\u3001\u53c2\u6570\u5217\u8868\u548c\u8fd4\u56de\u503c\u7c7b\u578b\u90fd\u79bb\u5f97\u5f88\u8fd1\uff0c\u770b\u8d77\u6765\u7c7b\u4f3c\u6ca1\u6709\u5f88\u591a trait bounds \u7684\u51fd\u6570\u3002</p>"},{"location":"rust/rust-study.html#_5","title":"\u751f\u547d\u5468\u671f","text":"<p>\u6bcf\u4e00\u4e2a\u5f15\u7528\u90fd\u6709\u4e00\u4e2a\u751f\u547d\u5468\u671f\u3002</p> <p>\u751f\u547d\u5468\u671f\u5728\u51fd\u6570\u4e2d\u7528\u6765\u89e3\u51b3\u60ac\u5782\u5f15\u7528\u7684\u95ee\u9898\uff1a\u5373\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5f15\u7528\uff0cRust\u8981\u4fdd\u8bc1\u8fd9\u4e2a\u5f15\u7528\u662f\u6709\u6548\u7684</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>fn longest(x: &amp;str, y: &amp;str) -&gt; &amp;str {\nif x.len() &gt; y.len() {\nx\n} else {\ny\n}\n}\n</code></pre> <p>\u5c06\u4e0d\u80fd\u88ab\u7f16\u8bd1\u901a\u8fc7\uff0c\u56e0\u4e3a x or y\u90fd\u6709\u53ef\u80fd\u662f\u4e00\u4e2a\u60ac\u5782\u5f15\u7528\uff0c\u8003\u8651\u4ee5\u4e0b\u60c5\u51b5\uff1a</p> <pre><code>fn main() {\nlet string1 = String::from(\"xyz\");\nlet result;\n{\nlet string2 = String::from(\"long string is long\");\nresult = longest(string1.as_str(), string2.as_str());\n}\nprintln!(\"The longest string is {}\", result);\n}\n</code></pre> <p>(result\u4e3astring2\u7684\u5f15\u7528\uff0c\u5728\u79bb\u5f00\u4f5c\u7528\u57df\u540e\u5931\u6548)</p> <p>\u5f53\u4ece\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5f15\u7528\uff0c\u8fd4\u56de\u503c\u7684\u751f\u547d\u5468\u671f\u53c2\u6570\u9700\u8981\u4e0e\u4e00\u4e2a\u53c2\u6570\u7684\u751f\u547d\u5468\u671f\u53c2\u6570\u76f8\u5339\u914d\u3002</p> <pre><code>fn longest&lt;'a&gt;(x: &amp;str, y: &amp;str) -&gt; &amp;'a str {\nlet result = String::from(\"really long string\");\nresult.as_str()\n}\n</code></pre> <p>\u5982\u56fe\u6240\u793a\uff1a\u8fd4\u56de\u7684\u5f15\u7528 \u6ca1\u6709 \u6307\u5411\u4efb\u4f55\u4e00\u4e2a\u53c2\u6570\uff0c\u90a3\u4e48\u552f\u4e00\u7684\u53ef\u80fd\u5c31\u662f\u5b83\u6307\u5411\u4e00\u4e2a\u51fd\u6570\u5185\u90e8\u521b\u5efa\u7684\u503c\uff0c\u5b83\u5c06\u4f1a\u662f\u4e00\u4e2a\u60ac\u5782\u5f15\u7528\uff0c\u56e0\u4e3a\u5b83\u5c06\u4f1a\u5728\u51fd\u6570\u7ed3\u675f\u65f6\u79bb\u5f00\u4f5c\u7528\u57df\u3002</p>"},{"location":"rust/rust-study.html#lifetime-elision","title":"\u751f\u547d\u5468\u671f\u7701\u7565\uff08Lifetime Elision\uff09","text":"<pre><code>fn first_word(s: &amp;str) -&gt; &amp;str {\nlet bytes = s.as_bytes();\n\nfor (i, &amp;item) in bytes.iter().enumerate() {\nif item == b' ' {\nreturn &amp;s[0..i];\n}\n}\n\n&amp;s[..]\n}\n</code></pre> <p>\u4e0a\u8ff0\u4ee3\u7801\u53ef\u4ee5\u7f16\u8bd1\u901a\u8fc7\u3002</p> <p>\u8fd9\u4e2a\u51fd\u6570\u6ca1\u6709\u751f\u547d\u5468\u671f\u6ce8\u89e3\u5374\u80fd\u7f16\u8bd1\u662f\u7531\u4e8e\u4e00\u4e9b\u5386\u53f2\u539f\u56e0\uff1a\u5728\u65e9\u671f\u7248\u672c\uff08pre-1.0\uff09\u7684 Rust \u4e2d\uff0c\u8fd9\u7684\u786e\u662f\u4e0d\u80fd\u7f16\u8bd1\u7684\u3002</p> <p>\u5728\u7f16\u5199\u4e86\u5f88\u591a Rust \u4ee3\u7801\u540e\uff0cRust \u56e2\u961f\u53d1\u73b0\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b Rust \u7a0b\u5e8f\u5458\u4eec\u603b\u662f\u91cd\u590d\u5730\u7f16\u5199\u4e00\u6a21\u4e00\u6837\u7684\u751f\u547d\u5468\u671f\u6ce8\u89e3\u3002\u8fd9\u4e9b\u573a\u666f\u662f\u53ef\u9884\u6d4b\u7684\u5e76\u4e14\u9075\u5faa\u51e0\u4e2a\u660e\u786e\u7684\u6a21\u5f0f\u3002\u63a5\u7740 Rust \u56e2\u961f\u5c31\u628a\u8fd9\u4e9b\u6a21\u5f0f\u7f16\u7801\u8fdb\u4e86 Rust \u7f16\u8bd1\u5668\u4e2d\uff0c\u5982\u6b64\u501f\u7528\u68c0\u67e5\u5668\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\u5c31\u80fd\u63a8\u65ad\u51fa\u751f\u547d\u5468\u671f\u800c\u4e0d\u518d\u5f3a\u5236\u7a0b\u5e8f\u5458\u663e\u5f0f\u7684\u589e\u52a0\u6ce8\u89e3\u3002</p>"},{"location":"rust/rust-study.html#_6","title":"\u9759\u6001\u751f\u547d\u5468\u671f","text":"<p>\u8fd9\u91cc\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u751f\u547d\u5468\u671f\u503c\u5f97\u8ba8\u8bba\uff1a<code>'static</code>\uff0c\u5176\u751f\u547d\u5468\u671f\u80fd\u591f\u5b58\u6d3b\u4e8e\u6574\u4e2a\u7a0b\u5e8f\u671f\u95f4\u3002\u6240\u6709\u7684\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u90fd\u62e5\u6709 <code>'static</code> \u751f\u547d\u5468\u671f\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u9009\u62e9\u50cf\u4e0b\u9762\u8fd9\u6837\u6807\u6ce8\u51fa\u6765\uff1a</p> <pre><code>let s: &amp;'static str = \"I have a static lifetime.\";\n</code></pre> <p>\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u6587\u672c\u88ab\u76f4\u63a5\u50a8\u5b58\u5728\u7a0b\u5e8f\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u800c\u8fd9\u4e2a\u6587\u4ef6\u603b\u662f\u53ef\u7528\u7684\u3002\u56e0\u6b64\u6240\u6709\u7684\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u90fd\u662f <code>'static</code> \u7684\u3002</p>"},{"location":"rust/rust-study.html#_7","title":"\u591a\u7ebf\u7a0b","text":"<p><code>spawn()</code>\u53ef\u4ee5\u8239\u8230\u4e00\u4e2a\u5b50\u7ebf\u7a0b\uff0c\u8fd4\u56de\u4e00\u4e2a<code>JoinHandle</code>\u53e5\u67c4\uff0c\u53ef\u4ee5\u4f7f\u7528<code>join()</code>\u65b9\u6cd5\u8fdb\u884c\u963b\u585e</p> <p><code>move</code> \u95ed\u5305\uff0c\u7ecf\u5e38\u4e0e <code>thread::spawn</code> \u4e00\u8d77\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u6211\u4eec\u5728\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u4f7f\u7528\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u7684\u6570\u636e\u3002</p> <p>\u5728\u53c2\u6570\u5217\u8868\u524d\u4f7f\u7528 <code>move</code> \u5173\u952e\u5b57\u5f3a\u5236\u95ed\u5305\u83b7\u53d6\u5176\u4f7f\u7528\u7684\u73af\u5883\u503c\u7684\u6240\u6709\u6743\u3002\u8fd9\u4e2a\u6280\u5de7\u5728\u521b\u5efa\u65b0\u7ebf\u7a0b\u5c06\u503c\u7684\u6240\u6709\u6743\u4ece\u4e00\u4e2a\u7ebf\u7a0b\u79fb\u52a8\u5230\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u65f6\u6700\u4e3a\u5b9e\u7528\u3002\uff08\u8fd9\u4e00\u70b9\u4e0eC++\u5f88\u4e0d\u540c\uff0c\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u4e8e\u7f16\u8bd1\u671f\u675c\u7edd\u4e86\u8d44\u6e90\u7ade\u4e89\u95ee\u9898\uff09</p>"},{"location":"rust/rust-study.html#_8","title":"\u6d88\u606f\u4f20\u9012","text":"<p>\u4e00\u4e2a\u65e5\u76ca\u6d41\u884c\u7684\u786e\u4fdd\u5b89\u5168\u5e76\u53d1\u7684\u65b9\u5f0f\u662f \u6d88\u606f\u4f20\u9012\uff08message passing\uff09\uff0c\u8fd9\u91cc\u7ebf\u7a0b\u6216 actor \u901a\u8fc7\u53d1\u9001\u5305\u542b\u6570\u636e\u7684\u6d88\u606f\u6765\u76f8\u4e92\u6c9f\u901a\u3002\u8fd9\u4e2a\u601d\u60f3\u6765\u6e90\u4e8e Go \u7f16\u7a0b\u8bed\u8a00\u6587\u6863\u4e2d \u7684\u53e3\u53f7\uff1a\u201c\u4e0d\u8981\u901a\u8fc7\u5171\u4eab\u5185\u5b58\u6765\u901a\u8baf\uff1b\u800c\u662f\u901a\u8fc7\u901a\u8baf\u6765\u5171\u4eab\u5185\u5b58\u3002\u201d\uff08\u201cDo not communicate by sharing memory; instead, share memory by communicating.\u201d\uff09</p> <p>Rust \u4e2d\u4e00\u4e2a\u5b9e\u73b0\u6d88\u606f\u4f20\u9012\u5e76\u53d1\u7684\u4e3b\u8981\u5de5\u5177\u662f \u901a\u9053\uff08channel\uff09\uff0cRust \u6807\u51c6\u5e93\u63d0\u4f9b\u4e86\u5176\u5b9e\u73b0\u7684\u7f16\u7a0b\u6982\u5ff5\u3002\u4f60\u53ef\u4ee5\u5c06\u5176\u60f3\u8c61\u4e3a\u4e00\u4e2a\u6c34\u6d41\u7684\u901a\u9053\uff0c\u6bd4\u5982\u6cb3\u6d41\u6216\u5c0f\u6eaa\u3002\u5982\u679c\u4f60\u5c06\u8bf8\u5982\u6a61\u76ae\u9e2d\u6216\u5c0f\u8239\u4e4b\u7c7b\u7684\u4e1c\u897f\u653e\u5165\u5176\u4e2d\uff0c\u5b83\u4eec\u4f1a\u987a\u6d41\u800c\u4e0b\u5230\u8fbe\u4e0b\u6e38\u3002</p>"},{"location":"rust/rust-study.html#rustling-alias","title":"Rustling-\u522b\u540d\uff08alias\uff09","text":"<pre><code>int compute(int* input, int* output) {\nif(*input &gt; 10) {\n*output = 1;\n}\nif (*input &gt; 5) {\n*output *= 2;\n}\n}\n</code></pre> <pre><code>fn comput(input:&amp;i32, output:&amp;mut i32) {\nif *input &gt; 10 {\n*output = 1;\n}\nif *input &gt; 5 {\n*output *= 2;\n}\n}\n</code></pre> <p>rust\u7f16\u8bd1\u5668\u53ef\u4ee5\u5c06\u4ee3\u7801\u4f18\u5316\u4e3a\uff0c\u5728C\u4e2d\u5219\u4e0d\u53ef\u80fd\u505a\u51fa\u8fd9\u79cd\u4f18\u5316\uff08\u8003\u8651input \u548coutput\u6307\u9488\u6307\u5411\u540c\u4e00\u5730\u5740\uff09\uff1a</p> <pre><code>fn comput(input:&amp;i32, output:&amp;mut i32) {\nlet cached_input = *input;\nif cached_input &gt; 10 {\n*output = 2; // x&gt;10 \u5219\u5fc5\u7136&gt;5\uff0c\u76f4\u63a5\u52a0\u500d\u9000\u51fa\n} else if cached_input &gt; 5 {\n*output *= 2;\n}\n}\n</code></pre> <p></p>"},{"location":"rust/rust-study.html#rust-monad","title":"Rust monad","text":"<p>\u8fd9\u91cc\u4ee5 I/O \u64cd\u4f5c\u4e3a\u4f8b\uff0c\u4e0b\u9762\u662f\u4e0e ChatGPT\u7684\u5bf9\u8bdd\uff1a</p> <p>\ud83d\udc0b: what's the main difference between monad I/O style and C-like I/O style?</p> <p>\ud83e\uddad: The main difference between Monad I/O style and C-like I/O style lies in the way they handle Input/Output (I/O) operations.</p> <p>In the C-like I/O style, I/O is performed by calling functions and passing parameters, and I/O functions are typically side-effecting and can change the state of the system. For example, to read a line of text from standard input in C, you might use the fgets function, which reads a specified number of characters from an input stream into a buffer, and can change the position of the input stream's file pointer.</p> <p>On the other hand, the Monad I/O style, which is commonly used in functional programming languages, models I/O as a computation that produces a value and possibly has a side effect. In this style, I/O operations are performed by constructing a computation, usually represented as a monad, that represents the I/O action. The monad can then be executed by a runtime system, which will perform the actual I/O and return the result to the caller.</p> <p>One of the main advantages of the Monad I/O style is that it makes it easier to write code that is pure and composable, as it separates the description of I/O operations from their execution, which can make it easier to test and reason about the code. In contrast, C-like I/O style can make it harder to write code that is pure, as I/O functions can have side effects that change the state of the system and make it difficult to predict the outcome of a computation.</p>"},{"location":"rust/rust-toolchain.html","title":"Rust-toolchain","text":""},{"location":"rust/rust-toolchain.html#_1","title":"\u5de5\u5177\u94fe\u7ba1\u7406","text":"<p>rustup\u662fRust\u5de5\u5177\u94fe\u7684installer\uff0c\u5b89\u88c5rust\uff0c\u7ba1\u7406rust\u5de5\u5177\u94fe\u90fd\u8981\u501f\u52a9\u8fd9\u4e2a\u5de5\u5177\u6765\u505a\u3002</p>"},{"location":"rust/rust-toolchain.html#nightly","title":"\u5b89\u88c5nightly\u5de5\u5177\u94fe","text":"<p>stable\u5de5\u5177\u94fe\u6700\u5e38\u7528\uff0c\u4f46\u6709\u65f6\u9700\u8981\u7528\u5230\u4e00\u4e9bnightly\u7684\u7279\u6027 or \u6d4b\u8bd5\u4e00\u4e9b\u65b0\u7279\u6027\u7684\u65f6\u5019\uff0c\u9700\u8981\u5b89\u88c5nightly\u5de5\u5177\u94fe\uff1a <pre><code>rustup install nightly\n</code></pre></p>"},{"location":"rust/rust-toolchain.html#_2","title":"\u5de5\u5177\u94fe\u5207\u6362","text":"<p>\u4e00\u822c\u6765\u8bf4\uff0c\u9ed8\u8ba4\u5de5\u5177\u94fe\u8bbe\u7f6e\u4e3astable\u5de5\u5177\u94fe\uff0c\u4f46\u5982\u679c\u9700\u8981\u8bb2\u9ed8\u8ba4\u5de5\u5177\u94fe\u8bbe\u7f6e\u4e3a<code>nightly</code>\uff0c\u53ef\u4ee5\u4f7f\u7528<code>default set</code> \u5b50\u547d\u4ee4\uff1b</p> <p>\u66f4\u5e38\u89c1\u7684\u9700\u6c42\u662f\uff0c\u5728\u5f53\u524d\u9879\u76ee\u4e2d\u4f7f\u7528 nightly \u5de5\u5177\u94fe\uff0c\u4f46\u4fdd\u6301\u5168\u5c40\u8bbe\u7f6e\u4e0d\u53d8\uff0c\u8fd9\u65f6\u53ef\u4ee5\u5728\u5f53\u524dproject\u4e2d\u4f7f\u7528<code>ovveride set</code>\u5b50\u547d\u4ee4\uff1a <pre><code>rustup default set nightly\n\nrustup override set nightly\n</code></pre></p>"},{"location":"rust/rust-toolchain.html#others","title":"Others","text":"<pre><code># \u5217\u51faactive\u5de5\u5177\u94fe\u7684\u6240\u6709\u53ef\u7528target\nrustup target list\n\n# \u5b89\u88c5 Android target\uff08\u4ea4\u53c9\u7f16\u8bd1\u5982\u6b64\u7b80\u5355\uff09\nrustup target add arm-linux-androideabi\n\n# \u8fd0\u884c\u4e3anightly\u5de5\u5177\u94fe\u914d\u7f6e\u7684 shell\nrustup run nightly bash\n\n# \u663e\u793a\u5f53\u524d\u76ee\u5f55\u5c06\u4f7f\u7528\u54ea\u4e2a\u5de5\u5177\u94fe\nrustup show\n</code></pre>"},{"location":"rust/rust-toolchain.html#cargo","title":"Cargo \u6362\u6e90","text":"<p>\u6253\u5f00<code>~/.cargo/</code>\u76ee\u5f55\uff0c\u5e76\u5728\u8be5\u76ee\u5f55\u4e0b\u65b0\u5efaconfig\u6587\u4ef6\uff1a</p> <pre><code>cd ~/.cargo/\ntouch config\n</code></pre> <p>\u7f16\u8f91 config \u5185\u5bb9\u5982\u4e0b\uff08\u8bbe\u7f6etuna\u6e90\uff09\uff1a</p> <pre><code>[source.crates-io]\nregistry = \"https://github.com/rust-lang/crates.io-index\"\nreplace-with = 'tuna'\n\n[source.tuna]\nregistry = \"https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git\"\n</code></pre>"},{"location":"tools/anaconda.html","title":"Anaconda","text":""},{"location":"tools/anaconda.html#_1","title":"\u5e38\u7528\u547d\u4ee4\uff1a","text":"<ol> <li> <p>\u67e5\u770b\u6240\u6709\u865a\u62df\u73af\u5883     <pre><code>conda info -e\n</code></pre></p> </li> <li> <p>\u521b\u5efa\u865a\u62df\u73af\u5883     <pre><code>conda create -n &lt;env name&gt; python=&lt;py version&gt; [packages...]\n</code></pre></p> </li> <li> <p>\u5207\u6362\u865a\u62df\u73af\u5883     <pre><code>conda activate &lt;env name&gt;\nconda deactivate &lt;env name&gt;\n</code></pre></p> </li> <li> <p>\u5220\u9664\u865a\u62df\u73af\u5883     <pre><code>conda remove -n &lt;env name&gt; --all\n</code></pre></p> </li> <li> <p>\u5220\u9664\u6ca1\u7528\u7684\u5305\u548c\u7f13\u5b58\uff0c\u91ca\u653e\u78c1\u76d8\u7a7a\u95f4</p> <pre><code>conda clean --all\n</code></pre> </li> </ol>"},{"location":"tools/cmake.html","title":"cmake","text":"<p>\u5b98\u65b9\u6587\u6863: cmake documentation</p> <p>CMake \u662f\u4e00\u4e2a\u7ba1\u7406\u6e90\u4ee3\u7801\u6784\u5efa\u7684\u5de5\u5177\u3002\u6700\u521d\uff0cCMake \u88ab\u8bbe\u8ba1\u4e3a\u4e00\u4e2a\u751f\u6210\u5404\u79cd Makefile \u65b9\u8a00(various dialects of Makefile)\u7684\u751f\u6210\u5668\uff0c\u5982\u4eca CMake \u751f\u6210\u73b0\u4ee3buildsystems\uff08\u4f8b\u5982 Ninja\uff09\u4ee5\u53ca\u7528\u4e8e IDE\uff08\u4f8b\u5982 Visual Studio \u548c Xcode\uff09\u7684\u9879\u76ee\u6587\u4ef6\u3002</p> <p>CMake \u5e7f\u6cdb\u7528\u4e8e C \u548c C++ \u8bed\u8a00\uff0c\u4f46\u5b83\u4e5f\u53ef\u4ee5\u7528\u4e8e\u6784\u5efa\u5176\u4ed6\u8bed\u8a00\u7684\u6e90\u4ee3\u7801\u3002</p>"},{"location":"tools/cmake.html#path","title":"\u5e38\u7528path","text":"<ul> <li><code>CMAKE_SOURCE_DIR</code> : \u9876\u7ea7<code>cmakelists.txt</code>\u7684\u6587\u4ef6\u6240\u5728\u76ee\u5f55\u3002</li> <li><code>CMAKE_CURRENT_SOURCE_DIR</code> : \u4e00\u822c\u6765\u8bf4\uff0c\u4e00\u4e2a\u5de5\u7a0b\u4f1a\u6709\u591a\u4e2acmakelists.txt\u6587\u4ef6\uff0c\u5bf9\u5e94\u5f53\u524d\u6587\u4ef6\u76ee\u5f55\u3002</li> <li><code>CMAKE_BINRAY_DIR</code> : \u5bf9\u5e94cmake\u7684build\u7684\u76ee\u5f55\uff0c\u4e3b\u8981\u662f\u8fd0\u884c\u65f6\u751f\u6210\u7684\u6587\u4ef6\u76ee\u5f55\u3002</li> <li><code>CMAKE_CURRENT_BINARY_DIR</code> : \u5bf9\u5e94build\u91cc\u7684\u76ee\u5f55\u3002</li> <li><code>CMAKE_MODULE_PATH</code> : api(include/find_package)\u5305\u542b\u522b\u7684cmake\u6587\u4ef6\u65f6\u7684\u641c\u7d22\u76ee\u5f55\u3002</li> <li><code>CMAKE_PREFIX_PATH</code> : api(find_libray/path)\u5305\u542b\u6a21\u5757\u65f6\u7684\u641c\u7d22\u76ee\u5f55\u3002</li> <li><code>CMAKE_INSTALL_PREFIX</code> : \u8c03\u7528install\u76f8\u5173\u51fd\u6570\uff0c\u8981\u751f\u6210/\u4fdd\u5b58\u7684\u6839\u76ee\u5f55\u8def\u5f84\u3002</li> <li><code>CMAKE_EXPORT_COMPILE_COMMANDS=TRUE</code> : \u5982\u679c\u4f7f\u7528clangd\uff0c\u9700\u8981\u5c06\u8be5\u9009\u9879\u8bbe\u4e3atrue(\u4f3c\u4e4e\u9ed8\u8ba4\u503c\u4e5f\u662ftrue)\uff0c\u6307\u5b9a\u751f\u6210<code>compile_commands.json</code>\u6587\u4ef6\u3002clangd\u4f9d\u8d56\u8be5\u6587\u4ef6\u505a\u9759\u6001\u5206\u6790\u3002</li> <li><code>CMAKE_TOOLCHAIN_FILE</code> : \u5982\u679c\u4f7f\u7528vcpkg\uff0c\u9700\u8981\u6307\u5b9a\u8be5\u8def\u5f84(\u8be6\u89c1vcpkg\u6587\u6863)</li> <li><code>CMAKE_UNITY_BUILD</code>\uff1anew in 3.16\uff1bCMAKE_UNITY_BUILD \u2014 CMake 3.25.1 Documentation</li> </ul>"},{"location":"tools/cmake.html#flag","title":"\u5e38\u7528flag","text":"<ul> <li><code>-G &lt;generator-name&gt;</code> \u6307\u5b9abuild system generator\uff0c\u5982\"Ninja\"\uff0c\u201cUnix Makefiles\u201d</li> <li><code>-T &lt;toolset-spec&gt;</code> \u4e3agenerator\u6307\u5b9aToolset, if supported. \u53ea\u6709Visual Studio\uff0cXcode\u7b49\u652f\u6301\u8fd9\u4e00\u9009\u9879</li> </ul> <p>build flag</p> <ul> <li><code>--target &lt;tgt&gt;..., -t &lt;tgt&gt;...</code> \u6307\u5b9atarget\uff1b\u9ed8\u8ba4target\u662fall\uff1b<code>--target clean</code> \u6267\u884cclean\u52a8\u4f5c</li> <li><code>--config &lt;cfg&gt;</code> \u5bf9\u4e8emulti-configuration \u5de5\u5177\u94fe\uff08VS Xcode\uff09\uff0c \u6307\u5b9acfg\uff0c\u5982<code>--config Debug/Release</code></li> </ul>"},{"location":"tools/cmake.html#_1","title":"\u5e38\u7528\u547d\u4ee4","text":"<ul> <li> <p><code>list</code>\uff0c\u7528\u4e8e\u5bf9list\u8fdb\u884c\u589e\u5220\u6539\u67e5\u7b49\u64cd\u4f5c</p> <p>\u4f8b\u5982\uff0c\u5982\u679c\u67d0\u4e2a\u5e93\u6ca1\u6709\u63d0\u4f9b\u7528\u4e8e\u67e5\u627e\u8be5\u5e93\u7684\u5b98\u65b9<code>cmake</code>\u811a\u672c(\u7528\u4e8emodule mode \u7684module \u6216\u8005 config mode \u7684configuration\u6587\u4ef6)\uff0c\u5219\u9700\u8981\u81ea\u5df1\u7f16\u5199\u67e5\u627e\u8be5\u5e93\u7684cmake\u811a\u672c or \u4f7f\u7528\u7b2c\u4e09\u65b9\u63d0\u4f9b\u7684\u811a\u672c\uff0c\u7136\u540e\u5c06\u811a\u672c\u6240\u5728\u7684\u6587\u4ef6\u5939\u52a0\u5165<code>CMAKE_MODULE_PATH</code>\uff1bcmake\u5728\u6267\u884c<code>find_package</code>\u65f6\u4f1a\u4f18\u5148\u4f7f\u7528module mode\uff0c\u6267\u884c<code>CMAKE_MODULE_PATH</code>\u4e0b\u7684\u5bf9\u5e94module\u641c\u7d22\u8be5\u5e93</p> <p>\u800c<code>CMAKE_MODULE_PATH</code>\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u8fd9\u5c31\u9700\u8981\u6211\u4eec\u628a\u81ea\u5b9a\u4e49\u7684\u811a\u672c\u8def\u5f84\u6dfb\u52a0\u5230<code>CMAKE_MODULE_PATH</code>\u4e2d\uff0c\u8ba9cmake\u627e\u5230\u8be5\u811a\u672c\uff0c\u6b64\u65f6\u4f7f\u7528<code>list(APPEND CMAKE_MODULE_PATH &lt;user-defined-module-path&gt;)</code></p> <pre><code>list(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/CMake\")\n</code></pre> </li> <li> <p><code>set</code></p> </li> <li> <p><code>option</code></p> </li> <li> <p><code>include</code></p> </li> <li> <p><code>aux_source_directory</code></p> </li> <li> <p><code>find_library</code></p> </li> </ul>"},{"location":"tools/cmake.html#public-private-interface","title":"PUBLIC  PRIVATE INTERFACE","text":"<p><code>target_*</code> \u547d\u4ee4\u5e38\u7528\u7684\u6709<code>target_link_libraries</code>\uff0c<code>target_include_directories</code>\uff0c<code>target_compile_definitions</code>\u7b49\uff1a</p> <pre><code>target_compile_definitions(say-hello PUBLIC VERSION=4)\n</code></pre> <p>\u8fd9\u6761\u547d\u4ee4\u5728\u9884\u7f16\u8bd1\u9636\u6bb5\u4e4b\u524d\u63d2\u5165\u5b8f <code>#define VERSION 4</code>\uff0c\u5176\u4e2d<code>PUBLIC</code>\u8868\u793a\u8fd9\u4e2a\u5b8f\u5bf9\u4e8e<code>say-hello</code>\u8fd9\u4e2a\u5e93\u4ee5\u53calink\u4e86<code>say-hello</code>\u8fd9\u4e2a\u5e93\u7684\u6a21\u5757\u53ef\u89c1\uff1b\u5982\u679c\u662f<code>PRIVATE</code>\uff0c\u5219\u8fd9\u4e2a\u5b8f\u4ec5\u5bf9<code>say-hello</code>\u53ef\u89c1\uff1b\u800c<code>INTERFACE</code>\u4e0e<code>PRIVATE</code>\u76f8\u53cd\uff0c\u8bbe\u7f6e\u4e3a<code>INTERFACE</code>\u540e\uff0c\u5bf9\u4e8e\u5916\u90e8\u53ef\u89c1\uff0c\u800c\u5bf9\u4e8e\u6a21\u5757\u5185\u90e8\u4e0d\u53ef\u89c1\u3002</p> <p>\u518d\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5bf9\u4e8e<code>target_include_directories</code>\u547d\u4ee4\u6765\u8bf4\uff1a <pre><code># `PUBLIC` let all receivers accesss header files\ntarget_include_directories(\n${LIB_NAME} PUBLIC ${PROJECT_SOURCE_DIR}/include\n)\n</code></pre></p> <ul> <li>\u8bbe\u7f6e\u4e3a<code>PUBLIC</code>\uff0c\u4f1a\u5c06<code>${PROJECT_SOURCE_DIR}/include</code>\u76ee\u5f55\u4e0b\u7684\u5934\u6587\u4ef6\u66b4\u9732\u7ed9\u5f15\u7528\u8be5\u5e93\u7684\u5176\u5b83project\uff1b</li> <li>\u5982\u679c\u8bbe\u7f6e\u4e3a<code>PRIVATE</code>\uff0c\u5219\u8be5\u76ee\u5f55\u4e0b\u7684\u5934\u6587\u4ef6\u5bf9\u4e8e\u5f15\u7528\u8be5\u5e93\u7684\u9879\u76ee\u662f\u4e0d\u53ef\u89c1\u7684\uff1b</li> <li>\u5982\u679c\u8bbe\u7f6e\u4e3a<code>INTERFACE</code>\uff0c\u5219\u8be5\u76ee\u5f55\u4e0b\u7684\u5934\u6587\u4ef6\u5bf9\u4e8e\u8be5\u9879\u76ee\u4e0d\u53ef\u89c1\uff0c\u5bf9\u4e8e\u5f15\u7528\u8be5\u9879\u76ee\u7684\u5176\u5b83project\u53ef\u89c1\u3002</li> </ul> <p>\u76f4\u89c2\u5730\u6765\u8bf4<code>PUBLIC</code>\u4f1a\u5c06\u67d0\u4e2a\u5c5e\u6027\u5411\u5916\"\u4f20\u64ad\"\uff0c<code>PRIVATE</code>\u81ea\u5df1\"\u72ec\u4eab\"\uff0c<code>INTERFACE</code>\u53ea\u66b4\u9732\u7ed9\u5916\u90e8</p> <ul> <li><code>target_include_directories</code> \u8bbe\u7f6e\u4e3a<code>PUBLIC</code>\u5e38\u7528\u4e8e\u5e93\u6587\u4ef6\u5411\u5916export \u5934\u6587\u4ef6</li> <li><code>target_link_libraries</code> \u901a\u5e38\u8bbe\u7f6e\u4e3a<code>PRIVATE</code>\uff0c\u4f7f\u5f97\u5f00\u53d1\u8be5\u5e93\u65f6\u5f15\u7528\u7684\u7b2c\u4e09\u65b9\u5e93\u5bf9\u4e8e\u5f15\u7528\u8be5\u5e93\u7684\u5176\u5b83\u9879\u76ee\u4e0d\u53ef\u89c1(\u5982\u5f00\u53d1\u4e00\u4e2a\u5e93\u65f6\u7528\u5230\u7684<code>Catch2</code>\uff0c<code>benchmark</code>\uff0c<code>fmt</code>\u7b49\u6d4b\u8bd5\uff0c\u8c03\u8bd5\u7528\u7684\u5e93)</li> <li><code>target_add_definitions</code> \u7528\u4e8e\u6dfb\u52a0\u5b8f\u5b9a\u4e49</li> <li><code>target_compile_options</code> \u7528\u4e8e\u6dfb\u52a0\u7f16\u8bd1\u9009\u9879\uff1b\u4f8b\u5982<code>target_compile_options(${LIB_NAME} PRIVATE -maes)</code>\uff0c\u5bf9\u4e8e\u6307\u5b9a<code>target</code>\u5728\u7f16\u8bd1\u65f6\u4f7f\u7528aesni</li> </ul>"},{"location":"tools/cmake.html#_2","title":"\u4f9d\u8d56\u7ba1\u7406","text":"<p>\u5b98\u65b9\u6587\u6863: Using Dependencies Guide</p> <p>\u4e00\u4e2aProject\u5c06\u7ecf\u5e38\u4f9d\u8d56\u4e8e\u5176\u4ed6 projects, assets, and artifacts\u3002 CMake \u63d0\u4f9b\u4e86\u8bb8\u591a\u65b9\u6cd5\u5c06\u4f9d\u8d56\u9879\u5f15\u5165\u6784\u5efa\u3002\u5176\u4e2d\u4e3b\u8981\u7684\u65b9\u6cd5\u662f <code>find_package()</code> \u547d\u4ee4\u548c <code>FetchContent</code> \u6a21\u5757\u3002</p>"},{"location":"tools/cmake.html#header-only-lib","title":"header-only lib","text":"<p>\u5982Boost\uff0cfmt\u7b49\uff0c\u8fd9\u79cd\u5e93\u76f4\u63a5\u628a\u5934\u6587\u4ef6\u52a0\u5165\u5230\u5f53\u524d\u5de5\u7a0b\u5934\u6587\u4ef6\u76ee\u5f55\u5373\u53ef</p>"},{"location":"tools/cmake.html#using-pre-built-packages-with-find_package","title":"Using Pre-built Packages With <code>find_package()</code>","text":"<p>find_package \u2014 CMake Documentation</p> <p>\u9879\u76ee\u6240\u9700\u7684package\u53ef\u80fd\u5df2\u7ecf\u5728\u7528\u6237\u7cfb\u7edf\u7684\u67d0\u4e2a\u4f4d\u7f6e\u6784\u5efa\u5e76\u53ef\u7528\u3002\u8fd9\u4e2apackage\u53ef\u80fd\u662f\u7528cmake\u6784\u5efa\u7684\uff0c\u4e5f\u53ef\u80fd\u662f\u7528\u5176\u5b83\u65b9\u5f0f\u6784\u5efa\u7684\uff0c\u751a\u81f3\u6709\u53ef\u80fd\u662f\u4e00\u4e2a\u6839\u672c\u4e0d\u9700\u8981\u6784\u5efa\u7684\u6587\u4ef6\u96c6\u5408\u3002cmake\u4e3a\u8fd9\u4e9b\u573a\u666f\u63d0\u4f9b\u4e86<code>find_package()</code>\u547d\u4ee4\u3002</p> <p><code>find_package()</code>\u641c\u7d22\u4f17\u6240\u5468\u77e5\u7684\u4f4d\u7f6e\uff0c\u4ee5\u53ca\u9879\u76ee\u6216\u7528\u6237\u63d0\u4f9b\u7684\u5176\u4ed6\u8def\u5f84\u3002 \u5b83\u8fd8\u652f\u6301package components and packages being optional\u3002 \u8be5\u547d\u4ee4\u63d0\u4f9b\u7ed3\u679c\u53d8\u91cf\u4ee5\u5141\u8bb8\u9879\u76ee\u6839\u636e\u662f\u5426\u627e\u5230\u5305\u6216\u7279\u5b9a\u7ec4\u4ef6\u6765\u81ea\u5b9a\u4e49\u5176\u81ea\u5df1\u7684\u884c\u4e3a\u3002 <pre><code>find_package(Catch2)\nfind_package(GTest REQUIRED)    # REQUIRED: \u5982\u679c\u6ca1\u627e\u5230: abort cmake configure\nfind_package(Boost 1.79 COMPONENTS date_time)\n</code></pre> \u5173\u4e8e<code>find_package</code>\u548c<code>find_library</code>\uff1a</p> <p>cmake - Package vs Library - Stack Overflow</p> <p>Imagine you want to use zlib in your project, you need to find the header file <code>zlib.h</code>, and the library <code>libz.so</code> (on Linux). You can use the low-level cmake commands <code>find_path</code> and <code>find_library</code> to find them, or you can use <code>find_package(ZLIB)</code>. The later command will try to find out all what is necessary to use zlib. It can be extra macro definitions, or dependencies.</p> <p>Update, more detail about <code>find_package</code>: when the CMake command <code>find_package(SomeThing)</code> is called, as in the documentation, there are two possible modes that cmake can run:</p> <ul> <li>the module mode (that searches for a file <code>FindSomeThing.cmake</code>)</li> <li>or the config mode (that searches for a file named <code>SomeThingConfig.cmake</code>)</li> </ul> <p>For ZLIB, there is a module named <code>FindZLIB</code>, shipped with CMake itself (on my Linux machine that is the file <code>/usr/share/cmake/Modules/FindZLIB.cmake</code>). That module is a CMake script that uses the CMake API to search for ZLIB files in default locations, or ask the user for the location if it cannot be found automatically.</p>"},{"location":"tools/cmake.html#find_package","title":"find_package \u7684\u641c\u7d22\u6a21\u5f0f","text":"<ol> <li>Module mode</li> <li>Config mode</li> <li>FetchContent redirection mode(3.24\u4e4b\u540e\u5f15\u5165)</li> </ol>"},{"location":"tools/cmake.html#downloading-and-building-from-source-with-fetchcontent","title":"Downloading And Building From Source With <code>FetchContent</code>","text":"<p>FetchContent \u2014 CMake 3.24.2 Documentation</p> <p>\u4f9d\u8d56\u9879\u4e0d\u4e00\u5b9ahave to be pre-built\u624d\u80fd\u88ab CMake \u8c03\u7528\u3002 \u4f9d\u8d56\u9879\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4e3b\u9879\u76ee\u7684\u4e00\u90e8\u5206\u4ece\u6e90\u4ee3\u7801\u6784\u5efa\u3002 <code>FetchContent</code> \u6a21\u5757\u63d0\u4f9b\u4e0b\u8f7d\u4f9d\u8d56\u9879\u6e90\u4ee3\u7801\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u4e3b\u9879\u76eebuildsystem\u7684\u529f\u80fd\u3002 The dependency's sources will be built along with the rest of the main-project, just as though the sources were part of the main-project's own sources.</p> <p>\u8be5\u6a21\u5757\u4e3b\u8981\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u547d\u4ee4\uff1a</p> <ol> <li> <p><code>FetchContent_Declare</code> \u63cf\u8ff0\u5982\u4f55\u6dfb\u52a0(\u4e0b\u8f7d)\u4f9d\u8d56\u5e93\uff0c\u5176Signature\u5982\u4e0b</p> <pre><code>FetchContent_Declare(\n&lt;name&gt;\n&lt;contentOptions&gt;...\n[SYSTEM]\n[OVERRIDE_FIND_PACKAGE | FIND_PACKAGE_ARGS args...]\n)\n</code></pre> <p>\u4e3b\u8981\u7528\u5230\u7684\u53c2\u6570\uff1a<code>name</code> \u58f0\u660e\u4e0b\u8f7d\u5e93\u7684\u540d\u79f0\uff0c<code>contentOptions</code> \u63cf\u8ff0\u83b7\u53d6\u3001\u66f4\u65b0\u5916\u90e8\u5e93\u7684\u65b9\u5f0f\uff08\u5e38\u7528\u7684\u6709\u901a\u8fc7 Git \u4e0b\u8f7d\uff0c\u901a\u8fc7 URL \u4e0b\u8f7d\u7b49\uff09</p> <pre><code># it is advisable to use a hash for GIT_TAG rather than a branch or tag name. A commit hash is more secure and helps to confirm that the downloaded contents are what you expected.\n# eg:\nFetchContent_Declare(\ngoogletest    # \u5927\u5c0f\u5199\u4e0d\u654f\u611f\nGIT_REPOSITORY https://github.com/google/googletest.git\nGIT_TAG        703bd9caab50b139428cea1aaff9974ebee5742e # release-1.10.0\n)\n</code></pre> <p>\u4f7f\u7528\u65f6\u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9</p> <ul> <li>\u591a\u6b21\u8c03\u7528<code>FetchContent_Declare</code>\uff1aThe <code>FetchContent_Declare()</code> function records the options that describe how to populate the specified content. If such details have already been recorded earlier in this project (regardless of where in the project hierarchy), this and all later calls for the same content <code>&lt;name&gt;</code> are ignored. This \"first to record, wins\" approach is what allows hierarchical projects to have parent projects override content details of child projects.</li> </ul> </li> <li> <p><code>FetchContent_MakeAvaliable</code> \u8ba9\u4e4b\u524d\u901a\u8fc7<code>FetchContent_Declare</code>\u58f0\u660e\u7684\u4f9d\u8d56\u53d8\u5f97\u53ef\u7528\uff08\u52a0\u5165buildsystem\u4e2d\uff09</p> <p>\u4f7f\u7528\u65f6\u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9</p> <ul> <li> <p>\u54ea\u6761\u547d\u4ee4\u4f1a\u4e0b\u8f7d\u4f9d\u8d56\uff1a\u8c03\u7528<code>FetchContent_Declare</code>\u4e0d\u4e0b\u8f7d\u4f9d\u8d56\uff1b\u771f\u6b63\u7684\u4e0b\u8f7d\u52a8\u4f5c\u53d1\u751f\u5728\u8c03\u7528<code>FetchContent_MakeAvaliable</code>\u65f6\u3002</p> </li> <li> <p>\u79bb\u7ebf\uff08\u4e0d\u901a\u8fc7\u4e0b\u8f7d\uff09\u6dfb\u52a0\u4f9d\u8d56\uff1a\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u672c\u5730\u8def\u5f84\u7684\u65b9\u5f0f\u6765\u6dfb\u52a0\u4f9d\u8d56\uff1b\u901a\u8fc7\u8bbe\u7f6e<code>FETCHCONTENT_SOURCE_DIR_&lt;uppercaseName&gt;</code>\u53d8\u91cf\u6765\u6307\u5b9a\u4f9d\u8d56\u5728local fs\u7684\u4f4d\u7f6e\u3002\u8fd9\u6837\u5728\u8c03\u7528<code>FetchContent_MakeAvailable</code>\u65f6\uff0c\u5c31\u4e0d\u4f1a\u518d\u4ece<code>Declare</code>\u4e2d\u6307\u5b9a\u7684\u7f51\u7edc\u4f4d\u7f6e\u4e0b\u8f7d\u6e90\u7801\u3002</p> <ul> <li><code>FETCHCONTENT_FULLY_DISCONNECTED</code> \u53d8\u91cf\u9ed8\u8ba4\u4e3a<code>OFF</code>\uff0c\u8bbe\u7f6e\u4e3a<code>ON</code>\u65f6\uff0c\u4e0d\u4f1a\u8fdb\u884c\u4efb\u4f55\u4e0b\u8f7d\u548c\u66f4\u65b0\u52a8\u4f5c\uff0c\u5f53\u786e\u5b9a\u4f9d\u8d56\u5df2\u7ecf\u5b58\u5728\u4e8e\u6307\u5b9a\u4f4d\u7f6e\u4e14\u4e0d\u9700\u8981\u66f4\u65b0\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e3a<code>ON</code>\u52a0\u901fconfigure\u8fc7\u7a0b\uff1b</li> <li><code>FETCHCONTENT_UPDATES_DISCONNECTED</code>\u7c7b\u4f3c\uff0c\u53ea\u8df3\u8fc7\u66f4\u65b0\u9636\u6bb5\uff0c\u5982\u679c\u4f9d\u8d56\u4e0d\u5b58\u5728\uff0c\u4f1a\u53bb\u4e0b\u8f7d</li> </ul> <p>\u6548\u679c\u6709\u70b9\u7c7b\u4f3c\u4e8e<code>add_subdirectory</code>\uff08\u4f46\u662f\u4e0d\u9700\u8981\u6307\u5b9abinary source directory\uff09</p> <pre><code>set(FETCHCONTENT_SOURCE_DIR_FMT ${3RD_LIB_DIR}/fmt) # spicify `fmt` dir at local fs\nFetchContent_Declare(\nfmt\nGIT_REPOSITORY https://github.com/fmtlib/fmt.git\nGIT_TAG        48f525d025cadbedce0b2288ff8e19b6877341e4 # 9.1.0\n)\nFetchContent_MakeAvailable(fmt) # Won't download from github, add from local fs\n</code></pre> </li> <li> <p>Declare\u4e0eMakeAvaliable\u987a\u5e8f\uff1a\u7b2c\u4e00\u6b21\u8c03\u7528<code>FetchContent_MakeAvaliable</code>\u4e4b\u540e\uff0c\u518d\u8c03\u7528<code>FetchContent_Declare</code>\u4f1a\u88ab\u5ffd\u7565\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u4f9d\u8d56\u7684\u58f0\u660e<code>FetchContent_Declare</code>\u5fc5\u987b\u5728\u7b2c\u4e00\u6b21\u8c03\u7528<code>FetchContent_MakeAvaliable</code>\u4e4b\u524d\u3002</p> <pre><code># WRONG: Should declare all details first\nFetchContent_Declare(uses_other ...)\nFetchContent_MakeAvailable(uses_other)\n\nFetchContent_Declare(other ...)    # Will be ignored, uses_other beat us to it\nFetchContent_MakeAvailable(other)  # Would use details declared by uses_other\n#================================================================================\n# CORRECT: All details declared first, so they will take priority\nFetchContent_Declare(uses_other ...)\nFetchContent_Declare(other ...)\nFetchContent_MakeAvailable(uses_other other)\n</code></pre> </li> </ul> </li> </ol> <p>\u4e00\u822c\u7684\u4f7f\u7528\u6a21\u5f0f\u5982\u4e0b\uff1a</p> <ul> <li>first declare all the dependencies it wants to use <code>FetchContent_Declare</code></li> <li>then ask for them to be made available <code>FetchContent_MakeAvailable</code></li> </ul> <p><pre><code>FetchContent_Declare(\ncatch2\nGIT_REPOSITORY https://github.com/catchorg/Catch2.git\nGIT_TAG        0de60d8e7ead1ddd5ba8c46b901c122eac20bf94 # 3.1.0\n)\nFetchContent_Declare(\nfmt\nGIT_REPOSITORY https://github.com/fmtlib/fmt.git\nGIT_TAG        48f525d025cadbedce0b2288ff8e19b6877341e4 # 9.1.0\n)\nFetchContent_MakeAvailable(catch2 fmt)  # \u8981\u6c42cmake 3.14\u4ee5\u4e0a\n</code></pre> \u4f46\u662f\u9700\u8981\u6ce8\u610f<code>FetchContent_MakeAvailable</code>\u662f\u57283.14\u4e4b\u540e\u5f15\u5165\u7684\uff0c\u5982\u679c\u7248\u672c\u5c0f\u4e8e3.14\uff0c\u53ef\u4ee5\u7528\u5982\u4e0b\u547d\u4ee4\u624b\u52a8populate\u4f9d\u8d56\uff1a</p> <pre><code>FetchContent_GetProperties(catch2)\nif(NOT catch2_POPULATED)\nFetchContent_Populate(catch2)\nadd_subdirectory(${catch2_SOURCE_DIR} ${catch2_BINARY_DIR})\nendif()\n</code></pre> <p>\u5177\u4f53\u6765\u8bf4\uff1a</p> <ol> <li> <p><code>FetchContent_Populate(&lt;name&gt;)</code></p> <p><code>FetchContent_MakeAvailable</code> \u4f1a\u5148\u68c0\u67e5\u4f9d\u8d56\u662f\u5426\u5df2\u7ecf\u6784\u5efa\u5b8c\u6210\uff0c\u56e0\u6b64\u4e0d\u4f1a\u91cd\u590d\u6784\u5efa\uff0c\u4f46 <code>FetchContent_Populate</code> \u5e76\u4e0d\u4f1a\uff0c\u91cd\u590d\u6784\u5efa\u4f1a\u62a5\u9519\uff0c\u56e0\u6b64\uff0c \u4f7f\u7528 <code>FetchContent_Populate</code> \u524d\uff0c\u5fc5\u987b\u6309\u7167\u4e0a\u8ff0\u793a\u4f8b\uff0c\u4f7f\u7528 <code>FetchContent_GetProperties</code> \u83b7\u53d6\u53d8\u91cf <code>&lt;lowercaseName&gt;_POPULATED</code>\uff0c\u68c0\u6d4b\u662f\u5426\u9700\u8981\u6784\u5efa\u8be5\u4f9d\u8d56\u3002</p> </li> <li> <p><code>FetchContent_GetProperties(&lt;name&gt; [SOURCE_DIR &lt;srcDirVar&gt;] [BINARY_DIR &lt;binDirVar&gt;] [POPULATED &lt;doneVar&gt;])</code></p> </li> </ol>"},{"location":"tools/cmake.html#fetchcontent-and-find_package-integration","title":"<code>FetchContent</code> and <code>find_package()</code> Integration","text":"<p>\u67d0\u4e9b\u4f9d\u8d56\u9879\u652f\u6301\u901a\u8fc7both <code>find_package()</code> and <code>FetchContent</code>\u4e24\u79cd\u65b9\u5f0f\u6dfb\u52a0\u5230project\u3002</p> <p>\u9879\u76ee\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 <code>FetchContent_Declare()</code> \u7684 <code>FIND_PACKAGE_ARGS</code> option \u6765\u8868\u660eit is happy to accept a dependency by either method(<code>FetchContent</code> and <code>find_package()</code>)\u3002 \u8fd9\u5141\u8bb8 FetchContent_MakeAvailable() \u9996\u5148\u5c1d\u8bd5\u901a\u8fc7\u8c03\u7528 <code>find_package()</code> \u6765\u6ee1\u8db3\u4f9d\u8d56\u5173\u7cfb\uff0c\u5982\u679c<code>find_package()</code>\u627e\u5230\u4e86\u7684\u8bdd\uff0c\u4f7f\u7528 FIND_PACKAGE_ARGS \u5173\u952e\u5b57\u540e\u9762\u7684\u53c2\u6570\u3002 \u5982\u679c\u6ca1\u6709\u627e\u5230\u4f9d\u8d56\u9879\uff0c\u5219\u5b83\u662f\u4ece\u6e90\u4ee3\u7801\u6784\u5efa\uff0c\u5982\u524d\u6240\u8ff0\u3002 <pre><code>include(FetchContent)\nFetchContent_Declare(\ngoogletest\nGIT_REPOSITORY https://github.com/google/googletest.git\nGIT_TAG        703bd9caab50b139428cea1aaff9974ebee5742e # release-1.10.0\nFIND_PACKAGE_ARGS NAMES GTest\n)\nFetchContent_MakeAvailable(googletest)\n\nadd_executable(ThingUnitTest thing_ut.cpp)\ntarget_link_libraries(ThingUnitTest GTest::gtest_main)\n</code></pre> \u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5c06\u4f1a\u9996\u5148\u8c03\u7528 <code>find_package(googletest NAMES GTest)</code>\u3002 CMake \u63d0\u4f9b\u4e86\u4e00\u4e2a <code>FindGTest</code> Module\uff0c\u56e0\u6b64\u5982\u679c\u5b83\u53d1\u73b0\u67d0\u4e2a\u5730\u65b9\u5b89\u88c5\u4e86 GTest package\uff0c\u5b83\u5c06\u76f4\u63a5\u4f7f\u5176\u53ef\u7528\uff0c\u5e76\u4e14\u4e0d\u4f1a\u4ece\u6e90\u4ee3\u7801\u6784\u5efa\u4f9d\u8d56\u9879(\u4e5f\u4e0d\u4f1a\u53bb\u4e0b\u8f7d\u6e90\u7801\u4e86)\u3002\u5982\u679c\u6ca1\u6709\u627e\u5230 GTest \u5305\uff0c\u5b83\u5c06\u4ece\u4e0b\u8f7d\u6e90\u7801\uff0c\u5e76\u4ece\u6e90\u4ee3\u7801\u6784\u5efa\u3002</p>"},{"location":"tools/cmake.html#dependency-providers","title":"Dependency Providers","text":"<p>dependency provider</p> <p>\u5f00\u53d1\u4eba\u5458\u53ef\u80fd\u5bf9how a dependency is provided to the project\u66f4\u611f\u5174\u8da3\u3002\u60a8\u53ef\u80fd\u5e0c\u671b\u4f7f\u7528\u81ea\u5df1\u6784\u5efa\u7684\u7279\u5b9a\u7248\u672c\u7684\u5305\u3002\u60a8\u53ef\u80fd\u60f3\u8981\u4f7f\u7528\u7b2c\u4e09\u65b9\u5305\u7ba1\u7406\u5668\u3002\u51fa\u4e8e\u5b89\u5168\u6216\u6027\u80fd\u539f\u56e0\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u5c06\u67d0\u4e9b\u8bf7\u6c42\u91cd\u5b9a\u5411\u5230\u60a8\u63a7\u5236\u7684\u7cfb\u7edf\u4e0a\u7684\u4e0d\u540c URL\u3002 CMake \u901a\u8fc7 Dependency Providers \u652f\u6301\u8fd9\u4e9b\u573a\u666f\u3002</p> <p>A dependency provider can be set to intercept <code>find_package()</code> and <code>FetchContent_MakeAvailable()</code> calls</p>"},{"location":"tools/cmake.html#windowscmake","title":"Windows\u4f7f\u7528cmake","text":"<p>\u5728Windows\u5e73\u53f0\u4e0b\uff0c<code>cl.exe</code>\u662fvisual c++\u7684\u7f16\u8bd1\u5668\uff0c\u5bf9\u5e94*nix\u5e73\u53f0\u4e0b\u5e38\u89c1\u7684<code>gcc</code> or <code>clang</code>\uff1bwindows\u4e0b\u7684<code>link.exe</code>\u5bf9\u5e94<code>ld</code>\uff1b\u901a\u5e38\u5728\u5b89\u88c5Visual Studio\u540e\uff0c\u7535\u8111\u4e0a\u4f1a\u6709\u591a\u4e2a<code>cl.exe</code>\uff0c\u4ed6\u4eec\u5206\u522b\u5bf9\u5e94\u4e0d\u540chost\u67b6\u6784\u548ctarget\u67b6\u6784\uff1a</p> <p>\u4f46\u662f\u5982\u679c\u4ece\u5916\u90e8\u7ec8\u7aef\u76f4\u63a5\u4f7f\u7528<code>cl.exe main.cpp</code>\u65e0\u6cd5\u76f4\u63a5\u7f16\u8bd1\uff0c\u56e0\u4e3a<code>cl.exe</code>\u9700\u8981\u901a\u8fc7\u547d\u4ee4\uff0c\u6216\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u8bbe\u7f6e<code>include dir</code>\u3002\u4f7f\u7528windows\u4e0b\u8fd9\u5957\u7f16\u8bd1\u94fe\u63a5\u5de5\u5177\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u6253\u5f00 X64 Native Tool Command Prompt for VS 2022\uff0c\u8fd9\u4e2ashell \u9884\u8bbe\u7f6e\u4e86\u8fd9\u5957\u5de5\u5177\u8fd0\u884c\u6240\u9700\u8981\u7684\u73af\u5883\u53d8\u91cf\uff08\u5176\u5b83\u67b6\u6784\u540c\u7406\uff09\u3002</p> <p>\u5982\u679c\u60f3\u8981\u4ece\u5916\u90e8\u7ec8\u7aef\u4f7f\u7528\u8fd9\u5957\u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u6267\u884c\u811a\u672c \u5982\uff1a<code>vcvarsall.bat x64</code>(\u811a\u672c\u7684\u4f4d\u7f6e\u9700\u8981\u81ea\u5df1\u5bfb\u627e)\u3002</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\u5982\u679c\u4ecepowershell\u8fd0\u884c<code>.bat</code>\u811a\u672c\uff0c\u5219\u4e0d\u4f1a\u6b63\u786e\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\uff0c\u8fd9\u662f\u56e0\u4e3apowershell\u6267\u884c<code>.bat</code>\u811a\u672c\u662f\u901a\u8fc7\u5f00\u4e00\u4e2a<code>cmd</code>\u5b50\u8fdb\u7a0b\u518d\u6267\u884c\u811a\u672c\uff0c\u6267\u884c\u5b8c\u6bd5\u540e<code>cmd</code>subprocess\u9000\u51fa\uff0c\u8bbe\u7f6e\u7684\u73af\u5883\u53d8\u91cf\u968f\u4e4b\u6d88\u5931\u3002</p> <p>\u5982\u679c\u60f3\u8981\u5728powershell\u4e2d\u8c03\u7528\u8be5\u811a\u672c\uff0c\u4e00\u4e2a\u65b9\u6848\u662f\u4f7f\u7528cmd\u542f\u52a8<code>vcvars64.bat</code>\u811a\u672c\uff0c\u518d\u4ececmd\u4e2d\u542f\u52a8powershell... </p> <p>run vcvarsall, but cl and other still unavailable</p>"},{"location":"tools/cmake.html#nmake","title":"nmake","text":"<p>nmake\u662fMicrosoft Visual Studio\u4e2d\u7684\u9644\u5e26\u547d\u4ee4\u884c\u5de5\u5177\u3002\u4f7f\u7528namke\u7f16\u8bd1\u5947\u6162\u65e0\u6bd4\uff0c\u539f\u56e0\u662fnamke\u4e0d\u652f\u6301\u591a\u4efb\u52a1\u7f16\u8bd1\uff0c\u5982\u975e\u5fc5\u8981(openssl\u6587\u6863\u4e2d\u6307\u5b9a\u4f7f\u7528nmake)\uff0c\u5c3d\u91cf\u4e0d\u7528\u8fd9\u4e2a\u5de5\u5177\u3002\u5982\u679c\u8981\u4f7f\u7528<code>nmake</code>\u53ef\u4ee5\u5728cmake\u6784\u5efabuildsystem \u65f6\u6307\u5b9a\u4f7f\u7528<code>-G</code>\u53c2\u6570\u6307\u5b9agenerator\u4e3anmake\uff1a<code>cmake -G \"NMake Makefiles\"</code></p> <p>\u5173\u4e8e\u5176\u5b83\u7684\u6784\u5efa\u7cfb\u7edf\u53ef\u4ee5\u4f7f\u7528<code>cmake --help</code>\u67e5\u770b\uff1a</p> <p>\u5982\u56fe\u6240\u793a\u53ef\u4ee5\u770b\u5230\u73b0\u5728\u9ed8\u8ba4\u7684generators\u662f MSBuild\uff0c\u8fd9\u610f\u5473\u7740\u6211\u5728<code>/build</code>\u4e0b\u4f7f\u7528<code>cmake ..</code>\u65f6\u9ed8\u8ba4\u4f1a\u751f\u6210<code>.sln</code>\u7b49\u6211\u4eec\u719f\u6089\u7684VS\u5de5\u7a0b\u6587\u4ef6\u3002</p>"},{"location":"tools/cmake.html#msbuild","title":"MSBuild","text":"<p>MSBuild \u662f Visual Studio \u4e2d\u6240\u6709\u9879\u76ee\uff08\u5305\u62ec C++ C# \u9879\u76ee\uff09\u7684native build system\u3002 \u5728 Visual Studio IDE \u4e2d\u6784\u5efa\u9879\u76ee\u65f6\uff0c\u5b83\u4f1a\u8c03\u7528 msbuild.exe\uff0c\u8be5\u5de5\u5177\u53c8\u4f1a\u4f7f\u7528 <code>.vcxproj</code> \u9879\u76ee\u6587\u4ef6\u4ee5\u53ca\u5404\u79cd <code>.targets</code> \u548c <code>.props</code> \u6587\u4ef6\u3002Visual Studio \u4f9d\u8d56MSBuild\uff0c\u4f46\u662fMSBuild\u4e0d\u4f9d\u8d56Visual Studio\u3002MSBuild\u662fnmake\u7684\u66ff\u4ee3\u54c1\u3002MSBuild\u6240\u7ba1\u7406\u7684\u5de5\u7a0b\u6587\u4ef6\uff08<code>.sln</code>\uff0c<code>.vcxprj</code>\uff09\u4f7f\u7528\u7684\u662fxml\u8bed\u6cd5\u3002</p> <p>\u5982\u524d\u6587\u6240\u8ff0\uff0c\u5728Windows\u4e0a\uff0ccmake\u9ed8\u8ba4\u4f1a\u9009\u62e9MSBuild\u4f5c\u4e3a\u9ed8\u8ba4\u7684build system generator\uff0c\u5728\u547d\u4ee4\u884c\u4f7f\u7528MSBuild\u7684\u6b65\u9aa4\uff1a</p> <pre><code>cd build\ncmake ..\ncmake --build . --config Release(\u9ed8\u8ba4\u662fDebug)\n</code></pre> <p>\u6211\u4eec\u7ecf\u5e38\u770b\u5230\u7684\u6b65\u9aa4\u662f<code>cmake ..</code>\u4e4b\u540e<code>make</code>\uff1b\u8fd9\u91cc\u4f7f\u7528<code>cmake --build .</code> \u547d\u4ee4\u4ee3\u66ff\uff0c\u8fd9\u6837\u5373\u4f7f\u662f\u4f7f\u7528Ninja \u6216\u8005 MSBuild \u6216\u8005NMake Makefiles\u7b49\u4e0d\u540cgenerators\u751f\u6210\u7684build tree \u90fd\u53ef\u4ee5\u88ab\u6b63\u786e\u6784\u5efa\u3002</p> <p>\u800c\u6211\u4eec\u5e38\u89c1\u7684\u5728<code>cmake ..</code>\u4e4b\u540e\u4f7f\u7528<code>make</code>\u5176\u5b9e\u662f\u5047\u8bbe\u4e86\u4f7f\u7528<code>Unix Make</code>\u751f\u6210<code>build tree</code>\uff0c\u6b64\u65f6project files \u4e3b\u8981\u662fMakefile\u7b49\uff0c\u9700\u8981\u4f7f\u7528make\u53bbbuild\u3002</p>"},{"location":"tools/cmake.html#ninja","title":"Ninja","text":"<pre><code> cd build\n cmake -G \"Ninja\" -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl ..\n cmake --build . --config release\n</code></pre> <p>\u6ce8\u610f\u4e0enmake\u4e00\u6837\uff0c\u8fd9\u6761\u547d\u4ee4\u6267\u884c\u5fc5\u987b\u8981\u5728\u6709cl\u73af\u5883\u53d8\u91cf\u7684shell\u4e2d\u3002\u4e00\u4e2a\u76f4\u63a5\u7684\u505a\u6cd5\u662f\u4f7f\u7528 X64 Native Tool Command Prompt for VS 2022\uff08\u5176\u5b83\u7248\u672c\uff0c\u5176\u5b83\u67b6\u6784\u540c\u7406\uff0c\u4e0b\u8f7dVS\u540e\u6709\u5bf9\u5e94\u7684shell\uff09\uff1b</p> <p>\u5728windows\u4e0a\u4f7f\u7528ninja+clang\uff1a</p> <pre><code>cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=TRUE`\n-DCMAKE_BUILD_TYPE=Release`\n-DCMAKE_C_COMPILER=clang`\n-DCMAKE_CXX_COMPILER=clang++`\n-S. -Bbuild -GNinja\n</code></pre>"},{"location":"tools/docker.html","title":"Docker","text":"<p>\u66f4\u597d\u7684\u6559\u7a0b\uff1a\u6559\u7a0b\uff1a\u5f00\u59cb\u5728 Visual Studio Code \u4e2d\u4f7f\u7528 Docker \u5e94\u7528 | Microsoft Docs</p> <p>\u8fd9\u4e2a\u6559\u7a0b\u6db5\u76d6\u4ee5\u4e0b\u4e3b\u9898\uff1a</p> <ul> <li>\u8fd0\u884c\u7b2c\u4e00\u4e2a\u5bb9\u5668</li> <li>\u6784\u5efa\u5bb9\u5668</li> <li>\u4e86\u89e3\u6b63\u5728\u8fd0\u884c\u7684\u5bb9\u5668\u5e76\u5220\u9664\u5b83\u4eec</li> <li>\u4f7f\u7528volumes\u505a\u6570\u636e\u6301\u4e45\u5316</li> <li>Using bind mounts to support development \u4f7f\u7528 bind mounts \u6765\u652f\u6301\u5f00\u53d1</li> <li>Using container networking to support multi-container applications \u4f7f\u7528\u5bb9\u5668\u7f51\u7edc\u652f\u6301\u591a\u5bb9\u5668\u5e94\u7528</li> <li>Using Docker Compose to simplify the definition and sharing of applications \u4f7f\u7528 Docker Compose \u7b80\u5316app\u7684\u5b9a\u4e49\u548c\u5171\u4eab</li> <li>Using image layer caching to speed up builds and reduce push/pull size \u4f7f\u7528image layer caching\u6765\u52a0\u901f\u6784\u5efa\u5e76\u51cf\u5c11 push/pull \u5927\u5c0f</li> <li>Using multi-stage builds to separate build-time and runtime dependencies \u4f7f\u7528\u591a\u9636\u6bb5\u6784\u5efa\u6765\u5206\u79bb\u6784\u5efa\u65f6\u548c\u8fd0\u884c\u65f6\u4f9d\u8d56\u9879</li> </ul> <p>\u4e09\u4e2a\u57fa\u672c\u6982\u5ff5</p> <ul> <li>\u955c\u50cf\uff08Image\uff09   \u7c7b\u4f3c\u4e8e\u865a\u62df\u673a\u4e2d\u7684\u955c\u50cf\uff0c\u662f\u4e00\u4e2a\u5305\u542b\u6709\u6587\u4ef6\u7cfb\u7edf\u7684\u9762\u5411Docker engine\u7684\u53ea\u8bfb\u6a21\u677f\u3002\u4efb\u4f55\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u90fd\u9700\u8981\u73af\u5883\uff0c\u800c\u955c\u50cf\u5c31\u662f\u7528\u6765\u63d0\u4f9b\u8fd9\u79cd\u8fd0\u884c\u73af\u5883\u7684\u3002\u4f8b\u5982\u4e00\u4e2aUbuntu\u955c\u50cf\u5c31\u662f\u4e00\u4e2a\u5305\u542bUbuntu\u64cd\u4f5c\u7cfb\u7edf\u73af\u5883\u7684\u6a21\u677f\uff0c\u540c\u7406\u5728\u8be5\u955c\u50cf\u4e0a\u88c5\u4e0aApache\u8f6f\u4ef6\uff0c\u5c31\u53ef\u4ee5\u79f0\u4e3aApache\u955c\u50cf\u3002</li> <li>\u5bb9\u5668\uff08Container\uff09   \u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u6c99\u76d2\uff0c\u53ef\u4ee5\u5c06\u5176\u770b\u4f5c\u4e00\u4e2a\u6781\u7b80\u7684Linux\u7cfb\u7edf\u73af\u5883\uff08\u5305\u62ecroot\u6743\u9650\u3001\u8fdb\u7a0b\u7a7a\u95f4\u3001\u7528\u6237\u7a7a\u95f4\u548c\u7f51\u7edc\u7a7a\u95f4\u7b49\uff09\uff0c\u4ee5\u53ca\u8fd0\u884c\u5728\u5176\u4e2d\u7684\u5e94\u7528\u7a0b\u5e8f\u3002Docker\u5f15\u64ce\u5229\u7528\u5bb9\u5668\u6765\u8fd0\u884c\u3001\u9694\u79bb\u5404\u4e2a\u5e94\u7528\u3002\u5bb9\u5668\u662f\u955c\u50cf\u521b\u5efa\u7684\u5e94\u7528\u5b9e\u4f8b\uff0c\u53ef\u4ee5\u521b\u5efa\u3001\u542f\u52a8\u3001\u505c\u6b62\u3001\u5220\u9664\u5bb9\u5668\uff0c\u5404\u4e2a\u5bb9\u5668\u4e4b\u95f4\u662f\u662f\u76f8\u4e92\u9694\u79bb\u7684\uff0c\u4e92\u4e0d\u5f71\u54cd\u3002\u6ce8\u610f\uff1a\u955c\u50cf\u672c\u8eab\u662f\u53ea\u8bfb\u7684\uff0c\u5bb9\u5668\u4ece\u955c\u50cf\u542f\u52a8\u65f6\uff0cDocker\u5728\u955c\u50cf\u7684\u4e0a\u5c42\u521b\u5efa\u4e00\u4e2a\u53ef\u5199\u5c42\uff0c\u955c\u50cf\u672c\u8eab\u4e0d\u53d8\u3002</li> <li>\u4ed3\u5e93\uff08Repository\uff09   \u7c7b\u4f3c\u4e8e\u4ee3\u7801\u4ed3\u5e93\uff0c\u8fd9\u91cc\u662f\u955c\u50cf\u4ed3\u5e93\uff0c\u662fDocker\u7528\u6765\u96c6\u4e2d\u5b58\u653e\u955c\u50cf\u6587\u4ef6\u7684\u5730\u65b9\u3002\u6ce8\u610f\u4e0e\u6ce8\u518c\u670d\u52a1\u5668\uff08Registry\uff09\u7684\u533a\u522b\uff1a\u6ce8\u518c\u670d\u52a1\u5668\u662f\u5b58\u653e\u4ed3\u5e93\u7684\u5730\u65b9\uff0c\u4e00\u822c\u4f1a\u6709\u591a\u4e2a\u4ed3\u5e93\uff1b\u800c\u4ed3\u5e93\u662f\u5b58\u653e\u955c\u50cf\u7684\u5730\u65b9\uff0c\u4e00\u822c\u6bcf\u4e2a\u4ed3\u5e93\u5b58\u653e\u4e00\u7c7b\u955c\u50cf\uff0c\u6bcf\u4e2a\u955c\u50cf\u5229\u7528tag\u8fdb\u884c\u533a\u5206\uff0c\u6bd4\u5982Ubuntu\u4ed3\u5e93\u5b58\u653e\u6709\u591a\u4e2a\u7248\u672c\uff0812.04\u300114.04\u7b49\uff09\u7684Ubuntu\u955c\u50cf\u3002</li> </ul>"},{"location":"tools/docker.html#_1","title":"\u5b58\u50a8\u7ba1\u7406","text":"<p>\u542f\u7528 WSL \u540e\uff0cDocker \u8fd0\u884c\u6570\u636e\u90fd\u5728 WSL \u53d1\u884c\u7248\u4e2d\uff0c\u56e0\u6b64\u955c\u50cf\u5b58\u50a8\u4f4d\u7f6e\u53ea\u80fd\u7531 WSL \u7ba1\u7406\u3002</p> <p>\u5b89\u88c5 Docker \u540e\uff0cDocker \u4f1a\u81ea\u52a8\u521b\u5efa 2 \u4e2a\u53d1\u884c\u7248\uff1a</p> <ul> <li>docker-desktop\uff1a \u5b58\u50a8\u5728 <code>%LOCALAPPDATA%\\Docker\\wsl\\distro</code></li> <li>docker-desktop-data\uff1a \u5b58\u50a8\u5728 <code>%LOCALAPPDATA%\\Docker\\wsl\\data</code>\uff08\u5360\u7528\u7a7a\u95f4\u7684\u5143\u51f6\uff09</li> </ul> <p></p>"},{"location":"tools/docker.html#docker_1","title":"\u8fc1\u79fbdocker\u6570\u636e\u5b58\u50a8\u4f4d\u7f6e","text":"<p>\u7528 WSL \u547d\u4ee4\u5c31\u53ef\u4ee5\u7b80\u5355\u5b9e\u73b0\u8fc1\u79fb\uff0c\u64cd\u4f5c\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li>\u505c\u6b62 Docker \u8fdb\u7a0b</li> <li>\u5173\u95ed\u6240\u6709\u53d1\u884c\u7248\uff1a <code>wsl --shutdown</code></li> <li>\u5bfc\u51fa docker-desktop-data \u53d1\u884c\u7248\uff1a <code>wsl --export docker-desktop-data D:\\docker-desktop-data.tar</code></li> <li>\u6ce8\u9500 docker-desktop-data \u53d1\u884c\u7248\uff1a <code>wsl --unregister docker-desktop-data</code></li> <li>\u5bfc\u5165 docker-desktop-data \u5230\u671f\u671b\u8fc1\u79fb\u7684\u76ee\u5f55\uff1a <code>wsl --import docker-desktop-data D:\\software\\wsl\\docker\\data D:\\docker-desktop-data.tar --version 2</code> \uff08\u8fc1\u79fb\u76ee\u5f55 <code>D:\\software\\wsl\\docker\\data\\</code> \u53ef\u6839\u636e\u4e2a\u4eba\u9700\u6c42\u4fee\u6539\uff09</li> <li>\uff08\u53ef\u9009\uff09\u5220\u9664\u7b2c 3 \u6b65\u5bfc\u51fa\u7684\u4e34\u65f6\u6587\u4ef6\uff1a <code>D:\\wsl\\docker\\tmp\\docker-desktop-data.tar</code></li> <li>\uff08\u53ef\u9009\uff09\u53e6\u4e00\u4e2a Docker \u53d1\u884c\u7248 docker-desktop \u53ef\u4f7f\u7528\u540c\u6837\u65b9\u5f0f\u8fc1\u79fb\uff0c\u4f46\u662f\u5176\u5360\u7528\u7a7a\u95f4\u5f88\u5c0f\uff0c\u4e0d\u8fc1\u79fb\u4ea6\u53ef</li> </ol> <p>\u8fc1\u79fb\u5b8c\u6210\u540e\u53ef\u53d1\u73b0 <code>%LOCALAPPDATA%/Docker/wsl</code> \u76ee\u5f55\u4e0b\u7684\u53d1\u884c\u7248\u6587\u4ef6\u5df2\u88ab\u5220\u9664\uff0c C \u76d8\u7a7a\u95f4\u5df2\u91ca\u653e</p>"},{"location":"tools/docker.html#_2","title":"\u8d77\u6b65","text":""},{"location":"tools/docker.html#_3","title":"\u8d77\u6b65\u4f8b\u5b50","text":"<pre><code>docker run -d -p 80:80 docker/getting-started\n</code></pre> <p>Docker\u5728\u5bb9\u5668\u5185\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u3002\u5728\u4e00\u4e2a\u5bb9\u5668\u5185\u8fd0\u884c\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u547d\u4ee4 <code>docker run</code></p> <p>\u4e0a\u9762\u8fd9\u884c\u547d\u4ee4\uff1a</p> <ul> <li><code>-d</code> \u6307\u5b9a\u5bb9\u5668\u5728\u540e\u53f0\u8fd0\u884c (detached mode)</li> <li><code>-p 80:80</code> \u5c06\u4e3b\u673a\u768480\u7aef\u53e3\u6620\u5c04\u5230\u5bb9\u5668\u768480\u7aef\u53e3(\u5192\u53f7\u524d\u662fhost port \uff0c\u540e\u662fcontainer port)</li> <li><code>docker/getting-started</code> \u6307\u5b9a\u4f7f\u7528\u8be5image\uff0c\u5982\u679c\u627e\u4e0d\u5230\u6b64\u955c\u50cf\uff0c\u4ecedocker hub\u62c9\u53d6</li> </ul> <p>\u4e0a\u8ff0\u547d\u4ee4\u53ef\u4ee5\u628a\u5355\u4e2a\u5b57\u7b26\u7684flag\u7f29\u5199\uff1a<code>docker run -dp 80:80 docker/getting-started</code></p> <p>\u6b64\u65f6\u5728\u6d4f\u89c8\u5668\u8bbf\u95ee<code>localhost:80</code>\uff0c\u5c31\u80fd\u6253\u5f00\u8be5\u8fd0\u884c\u4e2d\u7684\u7a0b\u5e8f\u5566\uff01</p>"},{"location":"tools/docker.html#the-docker-dashboard","title":"The docker dashboard","text":"<p>\u5728mac\u548cwindows\u4e0a\uff0cdocker dashboard\u53ef\u4ee5\u66f4\u6e05\u6670\u7684\u5c55\u793a\u5f53\u524d\u5bb9\u5668\u7684\u8fd0\u884c\u72b6\u6001\uff0c\u4ee5\u53caimage\u4fe1\u606f\u7b49\uff1a</p> <p></p>"},{"location":"tools/docker.html#containerimage","title":"\u4ec0\u4e48\u662fcontainer\u548cimage\uff1f","text":"<p>\u6211\u4eec\u5df2\u7ecf\u8fd0\u884c\u8d77\u6765\u4e86\u4e00\u4e2a\u5bb9\u5668\uff0c\u90a3\u4e48\u4ec0\u4e48\u662f\u5bb9\u5668\uff1f \u7b80\u800c\u8a00\u4e4b\uff0c\u5bb9\u5668\u53ea\u662f\u60a8\u673a\u5668\u4e0a\u7684\u53e6\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u5b83\u4e0e\u4e3b\u673a\u4e0a\u7684\u6240\u6709\u5176\u4ed6\u8fdb\u7a0b\u9694\u79bb\u3002 \u8fd9\u79cd\u9694\u79bb\u5229\u7528\u4e86kernel namespaces \u548c cgroups\u2014\u2014\u8fd9\u4e9b\u7279\u6027\u5df2\u7ecf\u5728 Linux \u4e2d\u5b58\u5728\u4e86\u5f88\u957f\u65f6\u95f4\u3002 Docker \u81f4\u529b\u4e8e\u4f7f\u8fd9\u4e9b\u529f\u80fd\u53d8\u5f97\u6613\u4e8e\u4f7f\u7528\u3002</p> <p>\u6bcf\u4e2a\u5bb9\u5668\u4f7f\u7528\u9694\u79bb\u7684\u6587\u4ef6\u7cfb\u7edf\u3002 \u8fd9\u4e2a\u5b9a\u5236\u7684\u6587\u4ef6\u7cfb\u7edf\u7531image\u63d0\u4f9b\u3002 \u7531\u4e8e\u955c\u50cf\u5305\u542b\u5bb9\u5668\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u5b83\u5fc5\u987b\u5305\u542b\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u6240\u9700\u7684\u4e00\u5207\u2014\u2014\u6240\u6709\u4f9d\u8d56\u9879\u3001\u914d\u7f6e\u3001\u811a\u672c\u3001\u4e8c\u8fdb\u5236\u6587\u4ef6\u7b49\u3002\u955c\u50cf\u8fd8\u5305\u542b\u5bb9\u5668\u7684\u5176\u4ed6\u914d\u7f6e\uff0c\u4f8b\u5982\u73af\u5883\u53d8\u91cf\u3001\u8fd0\u884c\u7684\u9ed8\u8ba4\u547d\u4ee4\u3001 \u548c\u5176\u4ed6\u5143\u6570\u636e\u3002</p> <p>\u7a0d\u540e\u6211\u4eec\u5c06\u6df1\u5165\u7814\u7a76image\uff0c\u6db5\u76d6\u8bf8\u5982\u5206\u5c42\u3001\u6700\u4f73\u5b9e\u8df5\u7b49\u4e3b\u9898\u3002</p>"},{"location":"tools/docker.html#_4","title":"\u6848\u4f8b\u6559\u7a0b","text":"<p>\u63a5\u4e0b\u6765\u4ee5\u4e00\u4e2a Node.js \u7684Todo-List \u4e3a\u4f8b\u5b66\u4e60docker\uff1a\u4ecegetting-started/app at master \u00b7 docker/getting-started \u00b7 GitHub \u4e0b\u8f7d\u793a\u4f8bapp</p> <p></p>"},{"location":"tools/docker.html#appcontainer-image","title":"\u521b\u5efaapp\u7684container image","text":"<p>\u4e3a\u4e86\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 Dockerfile\u3002 Dockerfile \u662f\u4e00\u4e2atext-based \u811a\u672c\uff0c\u7528\u4e8e\u521b\u5efa\u5bb9\u5668\u6620\u50cf\u3002 \u5982\u679c\u4f60\u4e4b\u524d\u521b\u5efa\u8fc7 Dockerfile\uff0c\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u4e0b\u9762\u7684 Dockerfile \u4e2d\u6709\u4e00\u4e9b\u7f3a\u9677\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u4f1a\u76f8\u5e94\u8ba8\u8bba\u3002 </p> <ol> <li>\u5728\u4e0e\u6587\u4ef6 package.json \u76f8\u540c\u7684\u6587\u4ef6\u5939\u4e2d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a Dockerfile \u7684\u6587\u4ef6\uff0c\u5176\u5185\u5bb9\u5982\u4e0b\uff1a</li> </ol> <pre><code># syntax=docker/dockerfile:1\nFROM node:12-alpine\nRUN apk add --no-cache python2 g++ make\nWORKDIR /app\nCOPY . .\nRUN yarn install --production\nCMD [\"node\", \"src/index.js\"]\nEXPOSE 3000\n</code></pre> <p>\u8bf7\u786e\u4fdd Dockerfile \u6ca1\u6709\u50cf <code>.txt</code> \u8fd9\u6837\u7684\u6587\u4ef6\u6269\u5c55\u540d\u3002 \u4e00\u4e9b\u7f16\u8f91\u5668\u53ef\u80fd\u4f1a\u81ea\u52a8\u9644\u52a0\u6b64\u6587\u4ef6\u6269\u5c55\u540d\uff0c\u8fd9\u5c06\u5bfc\u81f4\u4e0b\u4e00\u6b65\u51fa\u9519\u3002</p> <ol> <li>\u5728\u5f53\u524d\u76ee\u5f55build container image\uff1a</li> </ol> <pre><code>docker build -t getting-started .\n</code></pre> <p>\u6b64\u547d\u4ee4\u4f7f\u7528 Dockerfile \u811a\u672c\u6784\u5efa\u65b0\u7684image\u3002\u60a8\u53ef\u80fd\u6ce8\u610f\u5230 a lot of \u201clayers\u201d were downloaded\u3002\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u6307\u793abuilder\u6211\u4eec\u8981\u4ece <code>node:12-alpine</code> image\u5f00\u59cb\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u6211\u4eec\u7684\u673a\u5668\u4e0a\u6ca1\u6709\u8be5image\uff0c\u56e0\u6b64\u9700\u8981\u4e0b\u8f7d\u8be5image\u3002</p> <p>\u4e0b\u8f7dimage\u540e\uff0cCOPY\u5230\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5e76\u4f7f\u7528 yarn \u6765\u5b89\u88c5app\u7684\u4f9d\u8d56\u3002 CMD \u6307\u4ee4\u6307\u5b9a\u4ece\u8be5\u6620\u50cf\u542f\u52a8\u5bb9\u5668\u65f6\u8fd0\u884c\u7684\u9ed8\u8ba4\u547d\u4ee4\u3002</p> <p>\u6700\u540e\uff0c <code>-t</code> \u6807\u5fd7tag\u6211\u4eec\u7684image\u3002\u53ef\u4ee5\u5c06\u5176\u7b80\u5355\u5730\u89c6\u4e3a\u6700\u7ec8image\u7684\u4eba\u7c7b\u53ef\u8bfb\u540d\u79f0\u3002\u7531\u4e8e\u6211\u4eec\u5c06\u955c\u50cf\u547d\u540d\u4e3a <code>getting-started</code>\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8be5\u540d\u5b57\u5728\u8fd0\u884c\u5bb9\u5668\u65f6\u5f15\u7528\u8be5\u955c\u50cf\u3002</p> <p><code>.</code>\u5728 docker build \u547d\u4ee4\u7684\u672b\u5c3e\u544a\u8bc9 Docker \u5b83\u5e94\u8be5\u5728\u5f53\u524d\u76ee\u5f55\u4e2d\u67e5\u627e Dockerfile\u3002</p>"},{"location":"tools/docker.html#image","title":"\u4f7f\u7528\u521b\u5efa\u7684image","text":"<p>\u6211\u4eec\u6709\u4e86\u4e00\u4e2aimage\uff0c\u73b0\u5728\u8ba9\u6211\u4eec\u8fd0\u884c\u8be5app\u3002\u6211\u4eec\u4f7f\u7528 <code>docker run</code> \u547d\u4ee4\u6765\u542f\u52a8\uff1a</p> <ol> <li>Start your container using the <code>docker run</code> command and specify the name of the image we just created:</li> </ol> <pre><code>$ docker run -dp 3000:3000 getting-started\n</code></pre> <p>Remember the <code>-d</code> and <code>-p</code> flags? We\u2019re running the new container in \u201cdetached\u201d mode (in the background) and creating a mapping between the host\u2019s port 3000 to the container\u2019s port 3000. Without the port mapping, we wouldn\u2019t be able to access the application.</p> <ol> <li>After a few seconds, open your web browser to http://localhost:3000. You should see our app.</li> </ol> <p></p> <ol> <li>\u7ee7\u7eed\u6dfb\u52a0\u4e00\u4e24\u4e2a\u9879\u76ee\uff0c\u770b\u770b\u5b83\u662f\u5426\u6309\u9884\u671f\u5de5\u4f5c\u3002 \u4f60\u53ef\u4ee5\u5c06item\u6807\u8bb0\u4e3a\u5b8c\u6210\u5e76\u5220\u9664item\u3002 \u524d\u7aef\u6210\u529f\u5c06item\u5b58\u50a8\u5728\u540e\u7aef\u3002 \u76f8\u5f53\u5feb\u901f\u548c\u5bb9\u6613\uff0c\u5bf9\u5427\uff1f</li> </ol> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5bf9\u6211\u4eec\u7684app\u8fdb\u884c\u4fee\u6539\uff0c\u5e76\u5b66\u4e60\u5982\u4f55\u4f7f\u7528\u65b0image\u66f4\u65b0\u6b63\u5728\u8fd0\u884c\u7684app\u3002 \u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u5b66\u4e60\u4e00\u4e9b\u5176\u4ed6\u6709\u7528\u7684\u547d\u4ee4\u3002</p>"},{"location":"tools/docker.html#_5","title":"\u66f4\u65b0\u5bb9\u5668","text":"<p>\u73b0\u5728\u9047\u5230\u4e00\u4e2a\u9700\u6c42\uff0c\u9700\u8981\u6539\u52a8\u4e00\u884c\u4ee3\u7801</p> <ol> <li>\u5728 <code>src/static/js/app.js</code> \u4e2d, \u66f4\u65b0\u7b2c 56 \u884c\u4ee3\u7801\uff1a</li> </ol> <pre><code> -                &lt;p className=\"text-center\"&gt;No items yet! Add one above!&lt;/p&gt;\n +                &lt;p className=\"text-center\"&gt;You have no todo items yet! Add one above!&lt;/p&gt;\n</code></pre> <ol> <li>\u7136\u540e\u8ba9\u6211\u4eec\u50cf\u4e4b\u524d\u4e00\u6837build\u66f4\u65b0\u540e\u7684app\u955c\u50cf</li> </ol> <pre><code> $ docker build -t getting-started .\n</code></pre> <ol> <li>\u7136\u540e\u542f\u52a8\u5b83</li> </ol> <pre><code> $ docker run -dp 3000:3000 getting-started\n</code></pre> <p>Uh oh! You probably saw an error like this (the IDs will be different):</p> <pre><code>docker: Error response from daemon: driver failed programming external connectivity on endpoint laughing_burnell \n(bb242b2ca4d67eba76e79474fb36bb5125708ebdabd7f45c8eaf16caaabde9dd): Bind for 0.0.0.0:3000 failed: port is already allocated.\n</code></pre> <p>\u6211\u4eec\u65e0\u6cd5\u542f\u52a8\u65b0\u5bb9\u5668\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u65e7\u5bb9\u5668\u4ecd\u5728\u8fd0\u884c\u3002 \u8fd9\u662f\u56e0\u4e3a\u5bb9\u5668\u6b63\u5728\u4f7f\u7528\u4e3b\u673a\u7684 3000 \u7aef\u53e3\uff0c\u5e76\u4e14\u673a\u5668\u4e0a\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\uff08\u5305\u62ec\u5bb9\u5668\uff09\u53ef\u4ee5\u76d1\u542c\u7279\u5b9a\u7aef\u53e3\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u79fb\u9664\u65e7\u5bb9\u5668\u3002</p> <p>\u66ff\u6362old container</p> <p>\u4e3a\u4e86\u66ff\u6362\u6389\u65e7\u7684\u5bb9\u5668\uff0c\u6211\u4eec\u8981\u5148\u5c06\u5b83\u505c\u6b62\u8fd0\u884c\uff1a</p> <pre><code>$ docker ps                       # \u67e5\u770b\u6b63\u5728\u8fd0\u884c\u7684\u5bb9\u5668\u4fe1\u606f\n$ docker stop &lt;the-container-id&gt;    # \u505c\u6b62\u6b63\u5728\u8fd0\u884c\u7684\u5bb9\u5668\n$ docker rm &lt;the-container-id&gt;      # \u5220\u9664old\u5bb9\u5668\n</code></pre> <p>\u540e\u4e24\u53e5\u4e5f\u53ef\u4ee5\u7b80\u5199\u4e3a\u4e00\u6761: <code>docker rm -f &lt;the-container-id&gt;</code></p> <p>\u867d\u7136\u6211\u4eec\u80fd\u591f\u6784\u5efa\u66f4\u65b0app\uff0c\u4f46\u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\u4e24\u4ef6\u4e8b\uff1a</p> <ol> <li>\u6211\u4eec\u5f85\u529e\u4e8b\u9879\u5217\u8868\u4e2d\u7684\u6240\u6709\u73b0\u6709\u9879\u76ee\u90fd\u6d88\u5931\u4e86\uff01 \u8fd9\u4e0d\u662f\u4e00\u4e2a\u5f88\u597d\u7684app\uff01 \u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u8c08\u5230\u8fd9\u4e00\u70b9\u3002</li> <li>\u8fd9\u4e48\u5c0f\u7684\u66f4\u65b0\u6d89\u53ca\u8fd9\u4e48\u591a\u6b65\u9aa4\u3002 \u5728\u63a5\u4e0b\u6765\u7684\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u5982\u4f55\u5728\u6bcf\u6b21\u8fdb\u884c\u66f4\u6539\u65f6\u65e0\u9700\u91cd\u65b0\u6784\u5efa\u548c\u542f\u52a8\u65b0\u5bb9\u5668\u5373\u53ef\u67e5\u770b\u4ee3\u7801\u66f4\u65b0\u3002</li> </ol> <p>\u5728\u8ba8\u8bba\u6570\u636e\u6301\u4e45\u5316\u4e4b\u524d\uff0c\u6211\u4eec\u5c06\u5feb\u901f\u4e86\u89e3\u5982\u4f55\u4e0e\u4ed6\u4eba\u5171\u4eab\u8fd9\u4e9bimage</p>"},{"location":"tools/docker.html#share-the-app","title":"Share the app","text":"<p>\u8981\u4e0e\u4ed6\u4eba\u5171\u4eabimage\uff0c\u5fc5\u987b\u4f7f\u7528Docker registry\uff0cDocker \u9ed8\u8ba4\u7684\u6ce8\u518c\u4e2d\u5fc3\u662fDocker Hub\uff0c\u4e5f\u6b63\u662fi\u6211\u4eec\u9ed8\u8ba4\u62c9\u53d6image\u7684\u5730\u65b9\u3002</p> <p>// TODO</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5b66\u4e60\u4e86\u5982\u4f55\u901a\u8fc7\u5c06image\u63a8\u9001\u5230\u6ce8\u518c\u8868\u6765\u5171\u4eabimage\u3002</p> <p>\u8ba9\u6211\u4eec\u56de\u5230\u6211\u4eec\u5728\u4e0a\u4e00\u8282\u672b\u5c3e\u6ce8\u610f\u5230\u7684\u5185\u5bb9\u3002 \u63d0\u9192\u4e00\u4e0b\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u5f53\u6211\u4eec\u91cd\u65b0\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u6211\u4eec\u4e22\u5931\u4e86\u6240\u6709\u7684\u5f85\u529e\u4e8b\u9879\u5217\u8868\u9879\u3002 \u8fd9\u663e\u7136\u4e0d\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u7528\u6237\u4f53\u9a8c\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u5b66\u4e60\u5982\u4f55\u5728\u91cd\u542f\u540e\u4fdd\u7559\u6570\u636e\uff01</p>"},{"location":"tools/docker.html#persist-the-db","title":"Persist the DB","text":"<p>\u5f53\u4e00\u4e2a\u5bb9\u5668\u8fd0\u884c\u65f6\uff0c\u5b83\u4f7f\u7528image\u4e2d\u7684\u5404\u4e2alayer\u4f5c\u4e3a\u5176 filesystem\u3002\u6bcf\u4e2a\u5bb9\u5668\u8fd8\u6709\u81ea\u5df1\u7684\u201c\u6682\u5b58\u7a7a\u95f4\u201d\u6765\u521b\u5efa/\u66f4\u65b0/\u5220\u9664\u6587\u4ef6\u3002\u4efb\u4f55\u66f4\u6539\u5bf9\u4e8e\u5176\u4ed6\u5bb9\u5668\u662f\u4e0d\u53ef\u89c1\u7684\u2014\u2014\u5373\u4f7f\u5b83\u4eec\u4f7f\u7528\u76f8\u540c\u7684image\u3002</p> <p>\u867d\u7136\u5bb9\u5668\u53ef\u4ee5\u521b\u5efa\u3001\u66f4\u65b0\u548c\u5220\u9664\u6587\u4ef6\uff0c\u4f46\u5f53\u5bb9\u5668\u88abremove\u5e76\u4e14\u6240\u6709\u66f4\u6539\u90fd\u4e0e\u8be5\u5bb9\u5668\u9694\u79bb\u65f6\uff0c\u8fd9\u4e9b\u66f4\u6539\u4f1a\u4e22\u5931\u3002 Volume\u7684\u51fa\u73b0\u4f7f\u5f97\u6570\u636e\u6301\u4e45\u5316\u53d8\u5f97\u53ef\u80fd\u3002</p> <p>Volume\u63d0\u4f9b\u4e86\u5c06container\u7684\u7279\u5b9a\u6587\u4ef6\u7cfb\u7edf\u6302\u8f7d\u5230host\u7684\u80fd\u529b\u3002 \u5982\u679c\u5bb9\u5668\u4e2d\u7684\u76ee\u5f55\u5df2\u6302\u8f7d\uff0c\u5219\u5bf9\u4e8e\u5bb9\u5668\u7684\u66f4\u6539\u5728host\u4e0a\u53ef\u89c1\u3002 \u5982\u679c\u6211\u4eec\u5728\u5bb9\u5668\u91cd\u542f\u65f6\u6302\u8f7d\u76f8\u540c\u7684\u76ee\u5f55\uff0c\u6211\u4eec\u4f1a\u770b\u5230\u76f8\u540c\u7684\u6587\u4ef6\u3002</p> <p>Volume\u6709\u4e24\u79cd\u4e3b\u8981\u7c7b\u578b\u3002 \u6211\u4eec\u6700\u7ec8\u5c06\u540c\u65f6\u4f7f\u7528\u4e24\u8005\uff0c\u4f46\u6211\u4eec\u5c06\u4ece named volumes\u5f00\u59cb\u3002</p>"},{"location":"tools/docker.html#persist-the-todo-data","title":"Persist the todo data","text":"<p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0ctodo app\u628a\u6570\u636e\u4f7f\u7528 SQLite \u5b58\u5728<code>/etc/todos/todo.db</code>\u4e2d\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u6587\u4ef6\u7684\u6570\u636e\u4fdd\u5b58\u5230host\u4e2d\u53bb\uff0c\u6211\u4eec\u5c31\u80fd\u8ba9\u4e0b\u4e00\u4e2a\u5bb9\u5668\u7ee7\u7eed\u4f7f\u7528\u4e0a\u4e00\u4e2a\u5bb9\u5668\u7684\u6570\u636e\u3002\u901a\u8fc7\u521b\u5efa\u4e00\u4e2avolume\uff0c\u5e76\u5c06\u5176\u6302\u8f7d\u5230\u5b58\u50a8\u6570\u636e\u7684\u6587\u4ef6\u5939\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u6570\u636e\u6301\u4e45\u5316\u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u8fd9\u610f\u5473\u7740<code>todo.db</code>\u6587\u4ef6\u4f1a\u88ab\u6301\u4e45\u5316\u5230host\u7684volume\u4e2d\u3002</p> <p>\u5982\u540c\u4e0a\u9762\u63d0\u5230\u7684\uff0c\u6211\u4eec\u9996\u5148\u4f7f\u7528named volume\uff0cDocker\u7ef4\u62a4\u8fd9\u4e2avolume\u5728\u78c1\u76d8\u7684\u7269\u7406\u4f4d\u7f6e\uff0c\u7528\u6237\u53ea\u9700\u8981\u8bb0\u4f4f\u8fd9\u4e2avolume\u7684name\u3002</p> <ol> <li>\u4f7f\u7528<code>docker volume create</code>\u521b\u5efa\u4e00\u4e2avolume</li> </ol> <pre><code>$ docker volume create todo-db\n</code></pre> <ol> <li>\u542f\u52a8app \u5bb9\u5668\uff0c\u5e76\u4f7f\u7528<code>-v</code>\u6307\u5b9a\u6302\u8f7d\u7684volume\u3002\u5728\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 named volume\uff0c\u5e76\u628a\u5b83\u6302\u8f7d\u5230\u8def\u5f84<code>/etc/todos</code>\uff0c\u4ed6\u4f1a\u6355\u83b7\u8fd9\u4e2a\u8def\u5f84\u4e0b\u521b\u5efa\u7684\u6240\u6709\u6587\u4ef6</li> </ol> <pre><code>$ docker run -dp 3000:3000 -v todo-db:/etc/todos getting-started\n</code></pre> <ol> <li> <p>\u7136\u540e\u6253\u5f00app\uff0c\u5411todo list \u4e2d\u6dfb\u52a0\u4e00\u4e9b\u9879</p> </li> <li> <p>\u4f7f\u7528<code>docker rm -f &lt;id&gt;</code>\u5220\u9664\u6b63\u5728\u8fd0\u884c\u7684\u8fd9\u4e2a\u5bb9\u5668</p> </li> <li> <p>\u542f\u52a8\u4e00\u4e2a\u65b0\u7684\u5bb9\u5668\uff0c\u548c\u521a\u624d\u7684\u5bb9\u5668\u4f7f\u7528\u540c\u4e00\u4e2avolume\uff1b\u53ef\u4ee5\u770b\u5230\u65b0\u7684\u5bb9\u5668\u6253\u5f00\u540e\u4fdd\u7559\u4e86\u4e0a\u4e00\u4e2a\u5bb9\u5668\u4e2d\u7684\u6570\u636e</p> </li> </ol>"},{"location":"tools/docker.html#volume","title":"\u6df1\u5165volume","text":"<p>\u5f88\u591a\u4eba\u7ecf\u5e38\u95ee\uff0c\u5f53\u6211\u4f7f\u7528named volume\u65f6\uff0cdocker\u7a76\u7adf\u628a\u6211\u7684\u6570\u636e\u5b58\u5728\u4e86\u54ea\u91cc\uff1f\u5982\u679c\u4f60\u60f3\u8981\u6307\u5bfc\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>docker volume inspect</code>\u6765\u67e5\u770b\uff1a</p> <pre><code>$ docker volume inspect todo-db\n[\n{\n\"CreatedAt\": \"2022-07-18T12:50:51Z\",\n        \"Driver\": \"local\",\n        \"Labels\": {},\n        \"Mountpoint\": \"/var/lib/docker/volumes/todo-db/_data\",\n        \"Name\": \"todo-db\",\n        \"Options\": {},\n        \"Scope\": \"local\"\n}\n]\n</code></pre> <p><code>Mountpoint</code>\u662f\u6570\u636e\u5728\u78c1\u76d8\u4e0a\u7684\u771f\u6b63\u4f4d\u7f6e\uff0c\u901a\u5e38\u9700\u8981root\u6743\u9650\u6765\u8bbf\u95ee\u8fd9\u4e9b\u6570\u636e\u3002</p> <p>\u6211\u4eec\u4e4b\u524d\u770b\u5230\uff0c\u4e3a\u6bcf\u6b21\u4ee3\u7801\u66f4\u6539\u90fd\u91cd\u5efaimage\u5f88\u8d39\u65f6\u95f4\u3002 \u5fc5\u987b\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u3002\u4f7f\u7528bind mounts\u662f\u4e00\u4e2a\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002\u63a5\u4e0b\u6765\u4e00\u8d77\u6765\u770b\u3002</p>"},{"location":"tools/docker.html#use-bind-mounts","title":"Use bind mounts","text":"<p>\u4f7f\u7528 bind mounts \u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u5bb9\u5668\u4e2d\u7684\u6587\u4ef6\u5728host\u4e2d\u7684\u771f\u6b63\u6302\u8f7d\u70b9\uff08\u800c\u4e0d\u662f\u5411 named volume \u4e00\u6837\u4ea4\u7ed9Docker\u53bb\u51b3\u5b9a\uff09\u3002\u540c\u65f6\u4e5f\u53ef\u4ee5\u7528\u6765\u628a\u4e3b\u673a\u7684\u8d44\u6e90\uff0c\u6bd4\u5982\u6e90\u4ee3\u7801\uff0c\u6302\u8f7d\u5230container\u4e2d\uff0c\u8ba9\u5bb9\u5668\u5373\u65f6\u7684\u770b\u5230\u4ee3\u7801\u7684\u53d8\u5316\u5e76\u8fdb\u884c\u70ed\u66f4\u65b0\u3002</p> <p>\u5bf9\u4e8eNode\u7a0b\u5e8f\u800c\u8a00\uff0cnodemon\u5c31\u662f\u8fd9\u6837\u4e00\u4e2a\u63d0\u4f9b\u76d1\u63a7-\u70ed\u66f4\u65b0\u670d\u52a1\u7684\u7a0b\u5e8f\u3002</p> <p>\u4e3a\u4e86\u8ba9\u6211\u4eec\u7684\u5bb9\u5668\u652f\u6301\u5f00\u53d1\u5de5\u4f5c\u6d41\uff0c\u6211\u4eec\u9700\u8981\u505a\u4ee5\u4e0b\u51e0\u4ef6\u4e8b\u60c5\uff1a</p> <ul> <li>\u628a\u6211\u4eec\u7684\u6e90\u4ee3\u7801\u6302\u8f7d\u5230container</li> <li>\u5728\u5bb9\u5668\u4e2d\u5b89\u88c5\u6240\u6709\u7684\u5f00\u53d1\u4f9d\u8d56</li> <li>\u5728\u5bb9\u5668\u4e2d\u5f00\u542f nodemon \u6765\u76d1\u63a7fs\u7684\u53d8\u5316</li> </ul> <p>\u63a5\u4e0b\u6765\u6309\u7167\u8fd9\u4e2a\u6b65\u9aa4\u6267\u884c\uff1a</p> <ol> <li> <p>\u786e\u4fdd\u5f53\u524d\u6ca1\u6709\u4efb\u4f55 getting-started \u5bb9\u5668\u6b63\u5728\u8fd0\u884c\u3002</p> </li> <li> <p>\u5728app\u76ee\u5f55\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> </li> </ol> <pre><code>$ docker run -dp 8000:3000 \\\n-w /app -v \"$(pwd):/app\" \\\nnode:12-alpine \\\nsh -c \"yarn install &amp;&amp; yarn run dev\"\n</code></pre> <p>If you are using Windows then use this command in PowerShell:</p> <pre><code> PS&gt; docker run -dp 8000:3000 `\n-w /app -v \"$(pwd):/app\" `\nnode:12-alpine `\nsh -c \"yarn install &amp;&amp; yarn run dev\"\n</code></pre> <ul> <li><code>-dp 3000:3000</code> \u540e\u53f0\u8fd0\u884c\uff0c\u5c06\u5bb9\u5668\u76843000port\u6620\u5c04\u5230host\u76848000</li> <li><code>-w /app</code> \u8bbe\u7f6e\u5de5\u4f5c\u76ee\u5f55</li> <li><code>-v \"$(pwd):/app\"</code> \u5c06\u4e3b\u673a\u7684\u5f53\u524d\u76ee\u5f55\u6302\u8f7d\u5230\u5bb9\u5668\u4e2d\u7684<code>/app</code>\u76ee\u5f55</li> <li><code>node:12-alpine</code> \u4f7f\u7528\u7684image\uff0c\u6ce8\u610f\u8fd9\u662fDockerfile\u4e2d\u7684base image</li> <li> <p><code>sh -c \"yarn install &amp;&amp; yarn run dev\"</code> \u8fd9\u6761\u547d\u4ee4\u542f\u52a8\u4e00\u4e2ashell\uff0c\u7136\u540e <code>yarn install</code> \u5b89\u88c5\u6240\u6709\u4f9d\u8d56\uff0c\u7136\u540e <code>yarn run dev</code>\uff0c\u5728 <code>package.json</code>, \u53ef\u4ee5\u770b\u5230 <code>dev</code> \u811a\u672c\u5c06\u542f\u52a8 <code>nodemon</code></p> </li> <li> <p>\u4f60\u53ef\u4ee5\u4f7f\u7528<code>docker logs</code>\u67e5\u770b\u65e5\u5fd7\uff0cYou\u2019ll know you\u2019re ready to go when you see this:    </p> </li> <li> <p>\u6b64\u65f6\u5728host\u5bf9\u4e8e\u4ee3\u7801\u7684\u4efb\u4f55\u66f4\u6539\u90fd\u53ef\u4ee5\u76f4\u63a5\u5f71\u54cd\u5230\u5bb9\u5668\u4e2d\u7684\u7a0b\u5e8f</p> </li> </ul> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5173\u7cfb\u6570\u636e\u5e93\u5e76\u5c06\u6211\u4eec\u7684app\u5207\u6362\u4e3a\u4f7f\u7528 MySQL\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u770b\u5230\uff0c\u5982\u4f55\u8fd0\u884c MySQL\uff0c \u5982\u4f55\u5141\u8bb8\u5bb9\u5668\u76f8\u4e92\u901a\u4fe1\u3002</p>"},{"location":"tools/docker.html#_6","title":"\u591a\u5bb9\u5668\u5e94\u7528","text":"<p>\u627f\u63a5\u4e0a\u4e00\u8282\u7684\u95ee\u9898\uff0c\u201c\u6211\u4eec\u5728\u54ea\u91cc\u8fd0\u884cMySQL\uff1f\u548capp\u5728\u540c\u4e00\u4e2a\u5bb9\u5668\u4e2d\u8fd8\u662f\u5355\u72ec\u7684\u4e00\u4e2a\u5bb9\u5668\uff1f\u201d In general, each container should do one thing and do it well.\u7406\u7531\u5982\u4e0b\uff1a</p> <ul> <li>There\u2019s a good chance you\u2019d have to scale APIs and front-ends differently than databases</li> <li>\u6bcf\u4e2a\u529f\u80fd\u5206\u914d\u5355\u72ec\u5bb9\u5668\u66f4\u65b9\u4fbf\u7ba1\u7406\u7248\u672c</li> <li>\u867d\u7136\u60a8\u53ef\u4ee5\u5728\u672c\u5730\u4e3a\u6570\u636e\u5e93\u4f7f\u7528\u5bb9\u5668\uff0c\u4f46\u60a8\u53ef\u80fd\u5e0c\u671b\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4e3a\u6570\u636e\u5e93\u4f7f\u7528\u6258\u7ba1\u670d\u52a1\u3002 \u800c\u4e0d\u5728app\u4e2d\u53d1\u5e03\u4f60\u7684\u6570\u636e\u5e93\u5f15\u64ce\u3002</li> <li>\u8fd0\u884c\u591a\u4e2a\u8fdb\u7a0b\u5c06\u9700\u8981\u4e00\u4e2a\u8fdb\u7a0b\u7ba1\u7406\u5668\uff08\u5bb9\u5668\u53ea\u542f\u52a8\u4e00\u4e2a\u8fdb\u7a0b\uff09\uff0c\u8fd9\u589e\u52a0\u4e86\u5bb9\u5668\u542f\u52a8/\u5173\u95ed\u7684\u590d\u6742\u6027</li> </ul>"},{"location":"tools/docker.html#container-networking","title":"Container networking","text":"<p>networking\u662f\u5bb9\u5668\u95f4\u901a\u4fe1\u7684\u65b9\u5f0f\uff0c\u5982\u679c\u4e24\u4e2a\u5bb9\u5668\u5728\u540c\u4e00\u4e2a\u7f51\u7edc\uff0c\u5219\u5b83\u4eec\u53ef\u4ee5\u901a\u4fe1\uff0c\u5426\u5219\u4e0d\u53ef\u4ee5\u3002</p> <p>\u6709\u4e24\u79cd\u65b9\u6cd5\u5c06\u5bb9\u5668\u4eec\u653e\u5728\u4e00\u4e2a\u7f51\u7edc\u4e0a\uff1a1\uff09\u5728\u4e00\u5f00\u59cb\u5206\u914d\u597d\uff1b2\uff09\u8fde\u63a5\u4e00\u4e2a\u5df2\u5b58\u5728\u7684\u5bb9\u5668\u3002\u73b0\u5728\u6211\u4eec\u5c06\u9996\u5148\u521b\u5efa\u4e00\u4e2anetwork\u5e76\u628aMySQL\u5bb9\u5668\u5728\u542f\u52a8\u65f6\u5206\u914d\u5230\u8fd9\u4e2a\u7f51\u7edc\u4e0a\u3002</p> <ol> <li>\u521b\u5efanetwork\uff1a</li> </ol> <pre><code>$ docker network create todo-app\n</code></pre> <ol> <li>\u542f\u52a8MySQL\u5bb9\u5668\u5e76\u628a\u5b83attach\u5230\u8fd9\u4e2a\u7f51\u7edc\u4e0a\uff1a</li> </ol> <pre><code>$ docker run -d \\\n--network todo-app --network-alias mysql \\\n-v todo-mysql-data:/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=secret \\\n-e MYSQL_DATABASE=todos \\\nmysql:5.7\n</code></pre> <p>If you are using Windows then use this command in <code>PowerShell</code>\uff1a</p> <pre><code> PS&gt; docker run -d `\n--network todo-app --network-alias mysql `\n-v todo-mysql-data:/var/lib/mysql `\n-e MYSQL_ROOT_PASSWORD=secret `\n-e MYSQL_DATABASE=todos `\nmysql:5.7\n</code></pre> <p>\u547d\u4ee4\u4e2d\u6211\u4eec\u4f7f\u7528\u4e86named volume <code>todo-mysql-data</code> \u6302\u8f7d\u5230 <code>/var/lib/mysql</code>, which is where MySQL stores its data. \u4f46\u6211\u4eec\u4e8b\u5148\u5e76\u6ca1\u6709\u8fd0\u884c <code>docker volume create</code> . \u4e8b\u5b9e\u4e0a\uff0cDocker\u4f1a\u610f\u8bc6\u5230\u8fd9\u4e00\u70b9\uff0c\u5e76\u4e3a\u6211\u4eec\u81ea\u52a8\u521b\u5efa\u8fd9\u4e2a named volume</p> <ol> <li>\u4e3a\u4e86\u786e\u8ba4mysql\u5bb9\u5668\u5728\u8fd0\u884c\uff0c\u6211\u4eec\u8fde\u63a5\u5230\u6570\u636e\u5e93\u8fdb\u884c\u9a8c\u8bc1\uff1a</li> </ol> <pre><code>$ docker exec -it &lt;mysql-container-id&gt; mysql -u root -p\n</code></pre> <p>OK\uff0c\u73b0\u5728\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u7f51\u7edc\u548c\u5728\u8fd9\u4e2anetwork\u4e0a\u7684MySQL\u5bb9\u5668\uff0c\u53ef\u63a5\u4e0b\u6765\u6211\u4eec\u8be5\u600e\u4e48\u8ba9app\u8fd0\u884c\u5728\u540c\u4e00\u4e2a\u7f51\u7edc\u4e0a\uff0c\u5e76\u4e14\u5728\u7f51\u7edc\u4e0a\u627e\u5230mysql\u5462\uff1f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5c06\u8981\u4f7f\u7528 <code>nicolaka/netshoot</code> \u5bb9\u5668\uff1a</p> <ol> <li>\u4f7f\u7528 nicolaka/netshoot image\u542f\u52a8\u4e00\u4e2a\u65b0\u5bb9\u5668\uff0c\u786e\u4fdd\u5b83\u548cmysql\u8fde\u63a5\u5728\u540c\u4e00\u4e2a\u7f51\u7edc\u4e0a\uff1a</li> </ol> <pre><code>$ docker run -it --network todo-app nicolaka/netshoot\n</code></pre> <ol> <li>\u5728\u8fd9\u4e2a\u5bb9\u5668\u4e2d\uff0c\u6211\u4eec\u5c06\u8981\u4f7f\u7528<code>dig</code>\u547d\u4ee4(\u4e00\u4e2aDNS\u5de5\u5177)\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u8fd9\u4e2a\u5de5\u5177\u6765\u67e5\u627e\u4e3b\u673a\u540d\u4e3a <code>mysql</code>(\u5728\u521b\u5efamysql \u5bb9\u5668\u65f6\u6307\u5b9a\u7684alias)\u7684IP\u5730\u5740</li> </ol> <pre><code>$ dig mysql\n</code></pre> <p></p> <p>\u5728\"ANSWER SECTION\"\u53ef\u4ee5\u770b\u5230\u5c06\u4e3b\u673a\u540d\u89e3\u6790\u5230IP\u5730\u5740<code>172.18.0.2</code>\uff0c\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2aIP\u8ba9app\u5728\u7f51\u7edc\u4e0a\u627e\u5230mysql\u6570\u636e\u5e93\u4e86\uff01</p> <p>\u4f7f\u7528app\u8fde\u63a5mysql</p> <p>The todo app supports the setting of a few environment variables to specify MySQL connection settings. They are:</p> <ul> <li><code>MYSQL_HOST</code> - the hostname for the running MySQL server</li> <li><code>MYSQL_USER</code> - the username to use for the connection</li> <li><code>MYSQL_PASSWORD</code> - the password to use for the connection</li> <li><code>MYSQL_DB</code> - the database to use once connected</li> </ul> <p>\u867d\u7136\u4f7f\u7528 \u73af\u5883\u53d8\u91cf \u6765\u8bbe\u7f6e\u8fde\u63a5\u8bbe\u7f6e\u5bf9\u4e8e\u5f00\u53d1\u6765\u8bf4\u901a\u5e38\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u5728\u751f\u4ea7\u4e2d\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u4e0d\u5e94\u8fd9\u4e48\u505a\uff01 Docker \u7684\u524d\u5b89\u5168\u4e3b\u7ba1 Diogo Monica \u5199\u4e86\u4e00\u7bc7\u7cbe\u5f69\u7684\u535a\u5ba2\u6587\u7ae0\u6765\u89e3\u91ca\u539f\u56e0\u3002</p> <p>\u66f4\u5b89\u5168\u7684\u65b9\u5f0f\u662f\u4f7f\u7528container orchestration framework\u63d0\u4f9b\u7684secret support\u3002 \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u79d8\u5bc6\u4f5c\u4e3a\u6587\u4ef6\u6302\u8f7d\u5728\u6b63\u5728\u8fd0\u884c\u7684\u5bb9\u5668\u4e2d\u3002 \u60a8\u4f1a\u770b\u5230\u8bb8\u591a\u5e94\u7528\u7a0b\u5e8f\uff08\u5305\u62ec MySQL image\u548ctodo app\uff09\u4e5f\u652f\u6301\u5e26\u6709 <code>_FILE</code> \u540e\u7f00\u7684\u73af\u5883\u53d8\u91cf\uff0c\u4ee5\u6307\u5411\u5305\u542b\u8be5\u53d8\u91cf\u7684\u6587\u4ef6\u3002</p> <p>\u4f8b\u5982\uff0c\u8bbe\u7f6e <code>MYSQL_PASSWORD_FILE</code> \u53d8\u91cf\u5c06\u5bfc\u81f4\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u5f15\u7528\u6587\u4ef6\u7684\u5185\u5bb9\u4f5c\u4e3a\u8fde\u63a5\u53e3\u4ee4\u3002 Docker \u6ca1\u6709\u505a\u4efb\u4f55\u4e8b\u60c5\u6765\u652f\u6301\u8fd9\u4e9b\u73af\u5883\u53d8\u91cf\u3002\u60a8\u7684\u5e94\u7528\u9700\u8981\u77e5\u9053\u5982\u4f55\u5904\u7406\u8fd9\u4e9b\u73af\u5883\u53d8\u91cf\u3002</p> <ol> <li>Note: for MySQL versions 8.0 and higher, make sure to include the following commands in <code>mysql</code>.</li> </ol> <pre><code>mysql&gt; ALTER USER 'root' IDENTIFIED WITH mysql_native_password BY 'secret';\nmysql&gt; flush privileges;\n</code></pre> <ol> <li>\u8bbe\u7f6e\u521a\u624d\u63d0\u5230\u7684\u73af\u5883\u53d8\u91cf\uff0c\u5e76\u4e0emysql\u5bb9\u5668\u8fde\u63a5\u5230\u540c\u4e00\u7f51\u7edc\uff1a</li> </ol> <pre><code>$ docker run -dp 3000:3000 \\\n-w /app -v \"$(pwd):/app\" \\\n--network todo-app \\\n-e MYSQL_HOST=mysql \\\n-e MYSQL_USER=root \\\n-e MYSQL_PASSWORD=secret \\\n-e MYSQL_DB=todos \\\nnode:12-alpine \\\nsh -c \"yarn install &amp;&amp; yarn run dev\"\n</code></pre> <p>If you are using Windows then use this command in PowerShell:</p> <pre><code> PS&gt; docker run -dp 3000:3000 `\n-w /app -v \"$(pwd):/app\" `\n--network todo-app `\n-e MYSQL_HOST=mysql `\n-e MYSQL_USER=root `\n-e MYSQL_PASSWORD=secret `\n-e MYSQL_DB=todos `\nnode:12-alpine `\nsh -c \"yarn install &amp;&amp; yarn run dev\"\n</code></pre> <ol> <li>\u67e5\u770b\u65e5\u5fd7\uff1a<code>docker logs &lt;container-id&gt;</code>\u8fde\u63a5\u6210\u529f\uff1a</li> </ol> <p></p> <p>\u5982\u679c\u60a8\u67e5\u770b Docker Dashboard\uff0c\u60a8\u4f1a\u53d1\u73b0\u6211\u4eec\u6709\u4e24\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5bb9\u5668\u6b63\u5728\u8fd0\u884c\u3002 \u4f46\u662f\uff0c\u6ca1\u6709\u771f\u6b63\u7684\u8ff9\u8c61\u8868\u660e\u5b83\u4eec\u88ab\u7ec4\u5408\u5728\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002 \u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u770b\u5230\u5982\u4f55\u8ba9\u5b83\u53d8\u5f97\u66f4\u597d\uff01</p>"},{"location":"tools/docker.html#docker-compose","title":"\u4f7f\u7528 Docker Compose","text":"<p>Docker Compose \u662f\u4e00\u79cd\u7528\u4e8e\u5e2e\u52a9\u5b9a\u4e49\u548c\u5171\u4eab\u591a\u5bb9\u5668\u5e94\u7528\u7a0b\u5e8f\u7684\u5de5\u5177\u3002 \u4f7f\u7528 Compose\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a <code>YAML</code> \u6587\u4ef6\u6765\u5b9a\u4e49\u670d\u52a1\uff0c\u5e76\u4e14\u4f7f\u7528\u4e00\u4e2a\u547d\u4ee4\uff0c\u5c31\u53ef\u4ee5\u542f\u52a8\u6240\u6709\u5185\u5bb9\u6216\u5c06\u5176\u5168\u90e8\u5173\u95ed\u3002</p> <p>\u4f7f\u7528 Compose \u7684\u6700\u5927\u4f18\u52bf\u662f\u60a8\u53ef\u4ee5\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\u5b9a\u4e49app stack\uff0c\u5c06\u5176\u4fdd\u5b58\u5728\u9879\u76ee repo \u7684\u6839\u76ee\u5f55\u4e2d\uff0c\u5e76\u4e14\u53ef\u4ee5\u8f7b\u677e\u5730\u8ba9\u5176\u4ed6\u4eba\u4e3a\u60a8\u7684\u9879\u76ee\u505a\u51fa\u8d21\u732e\u3002 \u522b\u4eba\u53ea\u9700\u8981\u514b\u9686\u60a8\u7684\u5b58\u50a8\u5e93\u5e76start the compose app\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u4f60\u73b0\u5728\u53ef\u80fd\u4f1a\u5728 GitHub/GitLab \u4e0a\u770b\u5230\u4e0d\u5c11\u9879\u76ee\u6b63\u662f\u8fd9\u6837\u505a\u7684\u3002</p> <p>windows\u4e2d\uff0cDocker-Desktop\u81ea\u5e26\u4e86Docker-Compose\uff0c\u63a5\u4e0b\u6765\u9996\u5148\u521b\u5efa Compose file</p> <ol> <li> <p>\u5728 app\u7684\u6839\u8def\u5f84\uff0c\u521b\u5efa\u4e00\u4e2a<code>docker-compose.yml</code></p> </li> <li> <p>\u5728compose file\u4e2d\u6211\u4eec\u4ece\u5b9a\u4e49 schema \u7248\u672c\u5f00\u59cb\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6700\u597d\u4f7f\u7528\u652f\u6301\u7684\u6700\u65b0\u7248\u672c\u3002</p> </li> </ol> <pre><code>version: \"3.7\"\n</code></pre> <ol> <li>\u63a5\u4e0b\u6765\u5b9a\u4e49\u6784\u6210app\u7684\u670d\u52a1(\u5bb9\u5668)\u5217\u8868\uff1a</li> </ol> <pre><code>version: \"3.7\"\n\nservices:\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u5f00\u59cb\u5c06\u4e00\u4e2aservice\u8fc1\u79fb\u5230 compose file\u4e2d\uff0c\u5176\u5b9e\u5c31\u662f\u5c06\u4e4b\u524d\u7684\u542f\u52a8\u547d\u4ee4\u7ffb\u8bd1\u6210compose file\u4e2d\u7279\u5b9a\u683c\u5f0f\u7684\u8bed\u8a00\uff1a</p> <ol> <li> <p>\u5bf9\u4e8eapp\u5e94\u7528\uff0c\u9996\u5148\u5b9a\u4e49service\u7684\u5165\u53e3\u70b9\u4ee5\u53ca\u5bb9\u5668\u7684\u955c\u50cf\u3002\u4f60\u53ef\u4ee5\u7ed9service\u4efb\u610f\u4e00\u4e2a\u540d\u5b57\uff0c\u8fd9\u4e2aname\u81ea\u52a8\u6210\u4e3anetwork\u7684\u522b\u540d\u3002</p> <pre><code>PS&gt; docker run -dp 3000:3000 `\n-w /app -v \"$(pwd):/app\" `\n--network todo-app `\n-e MYSQL_HOST=mysql `\n-e MYSQL_USER=root `\n-e MYSQL_PASSWORD=secret `\n-e MYSQL_DB=todos `\nnode:12-alpine `\nsh -c \"yarn install &amp;&amp; yarn run dev\"\n</code></pre> <p>\u4e00\u822c\u6765\u8bf4\uff0c<code>image</code>\u540e\u8ddf\u968f\u7684\u662f<code>command</code>\u5b57\u6bb5\uff0c\u5176\u4ed6\u5b57\u6bb5\u7ffb\u8bd1\u6210\u76f8\u5e94\u683c\u5f0f\uff1a</p> <pre><code>version: \"3.7\"\n\nservices:\napp:\nimage: node:12-alpine\ncommand: sh -c \"yarn install &amp;&amp; yarn run dev\"\nports:\n- 3000:3000\nworking_dir: /app\nvolumes:\n- ./:/app\nenvironment:\nMYSQL_HOST: mysql\nMYSQL_USER: root\nMYSQL_PASSWORD: secret\nMYSQL_DB: todos\n</code></pre> </li> <li> <p>\u63a5\u4e0b\u6765\u662f MySQL service</p> <pre><code>PS&gt; docker run -d `\n--network todo-app --network-alias mysql `\n-v todo-mysql-data:/var/lib/mysql `\n-e MYSQL_ROOT_PASSWORD=secret `\n-e MYSQL_DATABASE=todos `\nmysql:5.7\n</code></pre> <p>\u6211\u4eec\u5c06\u9996\u5148\u5b9a\u4e49\u65b0\u670d\u52a1\u5e76\u5c06\u5176\u547d\u540d\u4e3a mysql\uff0c\u4ee5\u4fbf\u5b83\u81ea\u52a8\u83b7\u53d6\u7f51\u7edc\u7684alias\u3002 \u6211\u4eec\u5c06\u7ee7\u7eed\u5e76\u6307\u5b9a\u8981\u4f7f\u7528\u7684image\u3002\u63a5\u7740\u5b9a\u4e49 volume\u6620\u5c04\uff0c\u5f53\u6211\u4eec\u4f7f\u7528<code>docker run</code>\u7684\u65f6\u5019\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u4e86\u672a\u5b9a\u4e49\u7684 named volume\uff0c<code>docker run</code>\u4f1a\u81ea\u52a8\u521b\u5efa\uff0c\u7136\u800c\u5728Compose\u4e2d\u5374\u5e76\u975e\u5982\u6b64\u3002\u6211\u4eec\u9700\u8981\u5728\u6700\u4e0a\u5c42\u7684<code>volumes</code>\u5b57\u6bb5\u5b9a\u4e49\u4e00\u4e2avolume\uff0c\u7136\u540e\u5728service config\u91cc\u6307\u5b9a\u8981\u6302\u8f7d\u7684\u8def\u5f84\uff1a</p> <pre><code>version: \"3.7\"\n\nservices:\napp:\nimage: node:12-alpine\ncommand: sh -c \"yarn install &amp;&amp; yarn run dev\"\nports:\n- 3000:3000\nworking_dir: /app\nvolumes:\n- ./:/app\nenvironment:\nMYSQL_HOST: mysql\nMYSQL_USER: root\nMYSQL_PASSWORD: secret\nMYSQL_DB: todos\n\nmysql:\nimage: mysql:5.7\nvolumes:\n- todo-mysql-data:/var/lib/mysql\nenvironment:\nMYSQL_ROOT_PASSWORD: secret\nMYSQL_DATABASE: todos\n\nvolumes:\ntodo-mysql-data:\n</code></pre> </li> </ol> <p>\u63a5\u4e0b\u6765\u5c31\u662f\u4f7f\u7528docker-compose\u8fd0\u884c\uff1a<code>docker-compose up -d</code></p> <p></p> <p>\u60a8\u4f1a\u6ce8\u610f\u5230volume\u4ee5\u53ca\u4e00\u4e2anetwork\u5df2\u521b\u5efa\uff01 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cDocker Compose \u4f1a\u81ea\u52a8\u4e3a\u5e94\u7528\u7a0b\u5e8fstack\u521b\u5efa\u4e00\u4e2a\u7f51\u7edc\uff08\u8fd9\u5c31\u662f\u6211\u4eec\u6ca1\u6709\u5728 compose \u6587\u4ef6\u4e2d\u5b9a\u4e49\u7f51\u7edc\u7684\u539f\u56e0\uff09\u3002</p> <p>\u5f53app\u542f\u52a8\u65f6\uff0c\u5b83\u5b9e\u9645\u4e0a\u9700\u8981\u7b49\u5f85 MySQL \u542f\u52a8\u5e76\u51c6\u5907\u597d\uff0c\u7136\u540e\u518d\u5c1d\u8bd5\u8fde\u63a5\u5b83\u3002 Docker \u6ca1\u6709\u4efb\u4f55\u5185\u7f6e\u652f\u6301\u6765\u7b49\u5f85\u53e6\u4e00\u4e2a\u5bb9\u5668\u5b8c\u5168\u542f\u52a8\u3001\u8fd0\u884c\u548c\u51c6\u5907\u597d\uff0c\u7136\u540e\u518d\u542f\u52a8\u53e6\u4e00\u4e2a\u5bb9\u5668\u3002\u56e0\u6b64\u8fd9\u9700\u8981\u5728app\u4ee3\u7801\u4e2d\u8fdb\u884c\u76f8\u5e94\u5904\u7406\uff0c\u5bf9\u4e8eNode-based \u9879\u76ee\uff0c\u53ef\u4ee5\u4f7f\u7528<code>wait-port</code>\u4f9d\u8d56\u9879\u6765\u5904\u7406\u3002 \u5176\u4ed6\u8bed\u8a00/\u6846\u67b6\u4e5f\u5b58\u5728\u7c7b\u4f3c\u7684\u89e3\u51b3\u65b9\u6848\u3002</p> <p>\u5f53\u4f60\u9700\u8981\u505c\u6b62\u6574\u4e2a\u5e94\u7528\u65f6\uff0c\u53ea\u9700\u8981\u6267\u884c<code>docker-compose down</code>\uff0c\u6216\u8005\u4eceDashboard\u5173\u95ed\u3002</p> <p>Removing Volumes</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b, <code>docker-compose down</code>\u547d\u4ee4\u4e0d\u4f1a\u88ab\u5220\u9664 compose file\u4e2d\u5b9a\u4e49\u7684named volumes\u3002\u5982\u679c\u4f60\u60f3\u8981\u5220\u9664volumes, \u9700\u8981\u6dfb\u52a0 <code>--volumes</code> flag.</p> <p>Docker Dashboard \u540c\u6837\u4e0d\u4f1a\u5220\u9664 volumes when you delete the app stack.</p>"},{"location":"tools/git.html","title":"git","text":""},{"location":"tools/git.html#git-config","title":"git config","text":""},{"location":"tools/git.html#_1","title":"\u67e5\u770b\u4ee3\u7406","text":"<pre><code>git config --global --get http.proxy\ngit config --global --get https.proxy\n</code></pre>"},{"location":"tools/git.html#_2","title":"\u8bbe\u7f6e\u4ee3\u7406","text":"<pre><code>git config --global http.proxy http://127.0.0.1:19180\ngit config --global https.proxy http://127.0.0.1:19180\n</code></pre>"},{"location":"tools/git.html#_3","title":"\u53d6\u6d88\u4ee3\u7406","text":"<pre><code>git config --global --unset http.proxy\ngit config --global --unset https.proxy\n</code></pre>"},{"location":"tools/git.html#_4","title":"\u8bbe\u7f6e\u7f16\u8f91\u5668","text":"<pre><code>git config -\u2013global core.editor vim\n</code></pre>"},{"location":"tools/git.html#git-commands","title":"git commands","text":""},{"location":"tools/git.html#_5","title":"\u64a4\u9500\u64cd\u4f5c","text":"<ul> <li> <p><code>git reset</code>: \u901a\u8fc7\u5c06\u5f53\u524d Git HEAD \u91cd\u7f6e\u4e3a\u6307\u5b9a\u72b6\u6001\u6765\u64a4\u6d88\u63d0\u4ea4\u6216\u53d6\u6d88\u6682\u5b58\u66f4\u6539\u3002</p> <ol> <li>\u5982\u679c\u4f20\u9012\u4e86\u8def\u5f84\uff0c\u5219\u5b83\u4f5c\u4e3a\u201cunstage\u201d\u5de5\u4f5c\uff1b</li> <li>\u5982\u679c\u4f20\u9012\u4e86\u63d0\u4ea4\u54c8\u5e0c\u6216\u5206\u652f\uff0c\u5219\u5b83\u4f5c\u4e3a\u201cuncommit\u201d\u5de5\u4f5c\u3002</li> <li>More information: https://git-scm.com/docs/git-reset.</li> </ol> </li> <li> <p>\u64a4\u9500 <code>add</code> \u64cd\u4f5c(unstage):</p> <p>\u4f7f\u7528<code>reset</code>\u547d\u4ee4 - \u540e\u9762\u4ec0\u4e48\u90fd\u4e0d\u8ddf\u7684\uff0c\u5c31\u662f\u4e0a\u4e00\u6b21add \u91cc\u9762\u7684\u5185\u5bb9\u5168\u90e8\u64a4\u9500 - \u540e\u9762\u8ddf\u6587\u4ef6\u540d\uff0c\u5c31\u662f\u5bf9\u67d0\u4e2a\u6587\u4ef6\u8fdb\u884c\u64a4\u9500 <pre><code># Unstage everything:\ngit reset\n\n# Unstage specific file(s):\ngit reset path/to/file1 path/to/file2 ...\n</code></pre></p> <p>\u5728 <code>HEAD</code> \u540e\u9762\u52a0 <code>^</code> \u6216\u8005 <code>~</code> \u5176\u5b9e\u5c31\u662f\u4ee5 <code>HEAD</code> \u4e3a\u57fa\u51c6\uff0c\u6765\u8868\u793a\u4e4b\u524d\u7684\u7248\u672c\uff0c\u56e0\u4e3a <code>HEAD</code> \u88ab\u8ba4\u4e3a\u662f\u5f53\u524d\u5206\u652f\u7684\u6700\u65b0\u7248\u672c\uff0c\u90a3\u4e48 <code>HEAD~</code> \u548c <code>HEAD^</code> \u90fd\u662f\u6307\u6b21\u65b0\u7248\u672c\uff0c\u4e5f\u5c31\u662f\u5012\u6570\u7b2c\u4e8c\u4e2a\u7248\u672c\uff0c<code>HEAD~~</code> \u548c <code>HEAD^^</code> \u90fd\u662f\u6307\u6b21\u6b21\u65b0\u7248\u672c\uff0c\u4e5f\u5c31\u662f\u5012\u6570\u7b2c\u4e09\u4e2a\u7248\u672c\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002</p> </li> <li> <p>\u64a4\u9500<code>commit</code> \u64cd\u4f5c(\u5c1a\u672apush\u5230remote):      <pre><code>git reset --soft HEAD^ \n</code></pre>     \u6ce8\u610f\uff0c\u4ec5\u4ec5\u662f\u64a4\u56decommit\u64cd\u4f5c\uff0c\u5bf9\u6587\u4ef6\u7684\u6539\u52a8\u4ecd\u7136\u4fdd\u7559\u3002     \u4e0e<code>--soft</code>\u76f8\u5bf9\u7684<code>--hard</code> \u5c06\u4f1a\u64a4\u9500<code>commit</code>\u64a4\u9500<code>add</code>\uff0c \u5e76\u5220\u9664\u5de5\u4f5c\u7a7a\u95f4\u7684\u6539\u52a8\u4ee3\u7801</p> <p>\u7279\u6b8a\u60c5\u51b5\uff1a\u5982\u679c\u5728\u7b2c\u4e00\u6b21commit\uff0c\u60f3\u8981\u64a4\u9500\uff0c\u4f7f\u7528<code>git reset --soft HEAD^</code>\u6ca1\u6709\u7528\uff0c\u9700\u8981\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u3002 <pre><code>git update-ref -d HEAD\n</code></pre></p> </li> <li> <p>\u64a4\u9500<code>commit</code> \u547d\u4ee4\u7684\u6ce8\u91ca:     <pre><code>git commit --amend\n</code></pre></p> </li> <li>\u64a4\u9500<code>push</code> \u64cd\u4f5c:     <pre><code>git reset --soft HEAD^ \ngit push --force\n</code></pre></li> </ul>"},{"location":"tools/mkdocs.html","title":"mkdocs","text":""},{"location":"tools/mkdocs.html#_1","title":"\u9875\u9762\u5e03\u5c40\u8bbe\u7f6e","text":""},{"location":"tools/mkdocs.html#_2","title":"\u5bfc\u822a\u680f\u8bbe\u7f6e","text":"<p>\u901a\u8fc7\u8bbe\u7f6e<code>mkdocs.yaml</code>\u4e2d\u7684feature\u5c5e\u6027\u53ef\u4ee5\u914d\u7f6e\u5bfc\u822a\u680f <pre><code>features:\n- navigation.sections\n# - navigation.tabs\n</code></pre> \u5176\u4e2d <code>navigation.sections</code> \u4f1a\u5c55\u5f00\u4fa7\u8fb9\u680f\u7684\u76ee\u5f55\uff0c\u6211\u9009\u62e9\u8bbe\u7f6e\uff0c\u8ba4\u4e3a\u53ef\u4ee5\u66f4\u76f4\u89c2\u65b9\u4fbf\u627e\u6587\u7ae0 \u867d\u7136 <code>navigation.expand</code> \u4f1a\u81ea\u52a8\u5c55\u5f00\u4fa7\u680f\uff0c\u8fbe\u5230\u7c7b\u4f3c\u7684\u6548\u679c\uff0c\u4f46\u662f\u611f\u89c9\u4e0d\u592a\u6f02\u4eae\u3002</p> <p>\u5176\u4e2d <code>navigation.tabs</code> \u4f1a\u5728header\u751f\u6210tab\uff0c\u6211\u9009\u62e9\u4e0d\u8bbe\u7f6e</p>"},{"location":"tools/mkdocs.html#_3","title":"\u5185\u5bb9\u5bbd\u5ea6\u8bbe\u7f6e","text":""},{"location":"tools/mkdocs.html#admonitions","title":"\u4f7f\u7528 Admonitions","text":"<p>\u542f\u7528\uff1a <pre><code>markdown_extensions:\n  - admonition\n</code></pre> - \u5c1d\u8bd5Note: <pre><code>!!! note\n    note admonition\n</code></pre></p> <p>Note</p> <p>note admonition</p> <p>\u8bbe\u7f6e\u6807\u9898\uff1a <pre><code>!!! note \"\u8fd9\u662f\u4e00\u4e2a\u6807\u9898\"\n    \u8bbe\u7f6e\u6807\u9898\u53ea\u9700\u8981\u5728note\u540e\u4f7f\u7528\u5f15\u53f7\u62ec\u4f4f\u76f8\u5e94\u6807\u9898\u5185\u5bb9\n</code></pre></p> <p>\u8fd9\u662f\u4e00\u4e2a\u6807\u9898</p> <p>\u8bbe\u7f6e\u6807\u9898\u53ea\u9700\u8981\u5728note\u540e\u4f7f\u7528\u5f15\u53f7\u62ec\u4f4f\u76f8\u5e94\u6807\u9898\u5185\u5bb9</p> <p>\u6807\u9898\u7f6e\u7a7a\uff1a <pre><code>!!! note \"\"\n    Empty title\n</code></pre></p> <p>Empty title</p> <p>\u9ed8\u8ba4\u7c7b\u578b\uff1a <pre><code>!!! \u6ce8\u610f\n    \u5982\u679c\u4e0d\u6307\u5b9afallback\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3anote\u7c7b\u578b\uff0c\u4e14\u6807\u9898\u88ab\u66ff\u6362\u4e3a\u65e0\u6cd5\u8bc6\u522b\u7684qualifier\n</code></pre></p> <p>\u6ce8\u610f</p> <p>\u5982\u679c\u4e0d\u6307\u5b9afallback\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3anote\u7c7b\u578b\uff0c\u4e14\u6807\u9898\u88ab\u66ff\u6362\u4e3a\u65e0\u6cd5\u8bc6\u522b\u7684qualifier</p> <ul> <li>\u5c1d\u8bd5 inline block</li> </ul> <p>Info</p> <p>\u4f7f\u7528 <code>inline</code> + <code>end</code> \u4fee\u9970Admonitions\u5757\u53ef\u4ee5\u4f7f\u5176\u53d8\u6210\u4e00\u4e2a\u5185\u8054\u5757\uff0c\u5e76\u663e\u793a\u5728\u53f3\u8fb9\uff0c</p> <p>\u6216\u8005\u53ea\u4f7f\u7528<code>inline</code> \u4fee\u9970\uff0c\u8fd9\u6837\u4f1a\u663e\u793a\u5728\u6700\u5de6\u8fb9\u3002</p> <p>\u4f7f\u7528 <code>inline</code> + <code>end</code> \u4fee\u9970Admonitions\u5757\u53ef\u4ee5\u4f7f\u5176\u53d8\u6210\u4e00\u4e2a\u5185\u8054\u5757\uff0c\u5e76\u663e\u793a\u5728\u53f3\u8fb9\uff0c \u6216\u8005\u53ea\u4f7f\u7528<code>inline</code> \u4fee\u9970\uff0c\u8fd9\u6837\u4f1a\u663e\u793a\u5728\u6700\u5de6\u8fb9\u3002</p> <p>Admonitions, also known as call-outs, are an excellent choice for including side content without significantly interrupting the document flow. Material for MkDocs provides several different types of admonitions and allows for the inclusion and nesting of arbitrary content.</p> <ul> <li>\u5c1d\u8bd5\u5176\u5b83\u7c7b\u578b</li> </ul> <p>Tip</p> <p>tip</p> <p>Abstract</p> <p>abstract</p> <p>Example</p> <p>example</p> <p>Question</p> <p>question</p> <p>Quote</p> <p>quote cite</p> <p>Warning</p> <p>warning</p> <p>Error</p> <p>error</p>"},{"location":"tools/mkdocs.html#code-block-highlight","title":"\u542f\u7528code block highlight","text":"<p>mkdocs\u4e2d\u542f\u7528\u4ee3\u7801\u9ad8\u4eae\u6709\u4e24\u79cd\u65b9\u5f0f\uff1aduring build time by Pygments or runtime with a JavaScript highlighter</p> <p>\u9ed8\u8ba4\u4e0d\u5f00\u542f\u884c\u53f7\uff0c\u5982\u679c\u8981\u5f00\u542f\u53ef\u4ee5\u53c2\u8003\u5b98\u65b9\u6587\u6863:mkdocs document\u3002 \u7ecf\u8fc7\u6d4b\u8bd5\u663e\u7136\u662f\u4f7f\u7528Pygments\u6548\u679c\u66f4\u597d\uff0c\u542f\u52a8\u65b9\u5f0f\uff1a\u5728mkdocs.yaml\u4e2d\u6dfb\u52a0(\u8fd8\u6709\u4e00\u4e9b\u5176\u5b83\u9009\u9879\uff0c\u4e0b\u6587\u662f\u8be6\u7ec6\u89e3\u91ca) <pre><code>markdown_extensions:\n- pymdownx.highlight\n- pymdownx.superfences\n</code></pre></p> <ul> <li> <p>\u5176\u4e2dpymdownx.superfences\u5141\u8bb8\u5d4c\u5957\u4ee3\u7801\u5757\u7684\u63d2\u5165(\u9ed8\u8ba4\u7adf\u7136\u4e0d\u5141\u8bb8\u00b7\u00b7\u00b7)</p> <p>\u53ef\u4ee5\u4f7f\u7528 <code>hl_lines=\"2 3\"</code>\u6807\u8bc6\u9ad8\u4eaeline <pre><code>#include&lt;iostream&gt;\nusing namespace std;\nint main(){\nreturn 0;\n}\n</code></pre></p> <pre><code>let x: Vec&lt;u8&gt; = Vec::new()\n</code></pre> </li> <li> <p>\u8fd8\u6709\u4e2a\u597d\u73a9\u7684\u7279\u6027\u662f Grouping code blocks:</p> <p>\u4f7f\u7528\u8fd9\u4e2a\u529f\u80fd\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u52a0\u5165: <pre><code>- pymdownx.tabbed:\nalternate_style: true\n</code></pre> <pre><code>=== \"C\"\n\n    ``` c\n    #include &lt;stdio.h&gt;\n    int main(void) {\n    printf(\"Hello world!\\n\");\n    }\n    ```\n\n=== \"C++\"\n\n    ``` c++\n    #include &lt;iostream&gt;\n    int main(void) {\n    std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n    }\n    ```\n</code></pre></p> CC++ <pre><code>#include &lt;stdio.h&gt;\nint main(void) {\nprintf(\"Hello world!\\n\");\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\nint main(void) {\nstd::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n}\n</code></pre> <p>\u6ce8\u610f\u8fd9\u4e0d\u4ec5\u53ef\u4ee5\u7528\u4e8e\u4ee3\u7801\u5757group\uff0c\u5176\u5b83\u7c7b\u578b\u7684block\u4e5f\u53ef\u4ee5\u8fd9\u6837\u88ab\u7ec4\u5408\u5728\u4e00\u8d77\u3002\u53ea\u9700\u8981 \u4e0e\u4e0a\u9762\u7684\u4f8b\u5b50\u4e00\u6837\uff0c\u5c06\"C\"\uff0c\"C++\"\u6362\u6210\u6807\u9898\u540d\u5b57\u5373\u53ef</p> </li> <li> <p>pymdownx.snippets\u5141\u8bb8\u4ece\u5176\u5b83\u6587\u4ef6\u5f15\u5165\u4ee3\u7801\uff0c\u611f\u89c9\u53ef\u80fd\u7528\u7684\u4e0d\u591a\uff0c\u6ca1\u6709\u5f00\u542f</p> </li> <li>pymdownx.inlinehilite\u6bd4\u8f83\u6709\u8da3\uff0c\u6dfb\u52a0\u4e86inline code highlight\u7684feature     \u5f00\u542f\u8be5feature\u540e\uff0c\u884c\u5185\u4ee3\u7801\u9ad8\u4eae\u901a\u8fc7\u4f7f\u7528shebang-like sequence,\u5982<code>#!go var ch = 'a'</code>     \u4f46\u662f\u6211\u8ba4\u4e3a\u6ca1\u592a\u5927\u4f5c\u7528\uff0c\u56e0\u6b64\u4e0d\u5f00\u542f</li> </ul>"},{"location":"tools/mkdocs.html#_4","title":"\u8868\u683c","text":"Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource \ud83d\udc0b test emoji in table"},{"location":"tools/mkdocs.html#emojiicon","title":"emoji\u548cicon","text":"<p>\u636e\u5b98\u7f51\u5ba3\u79f0\uff0cemoji\u548cicon\u662fMkDocs\u7684\u4e00\u4e2a\u4eae\u70b9\uff0c\u652f\u6301\u7684\u6bd4\u8f83\u5168(\u8fd9\u4e2a\u5e74\u4ee3\u8fd8\u6709\u652f\u6301\u4e0d\u5168\u7684\u5417\ud83d\ude13) \u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6dfb\u52a0: <pre><code>- pymdownx.emoji:\nemoji_index: !!python/name:materialx.emoji.twemoji\nemoji_generator: !!python/name:materialx.emoji.to_svg\n</code></pre> \u63a5\u4e0b\u6765\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\uff1a</p> <p>emoji example</p> <ul> <li><code>:material-github:</code> </li> <li><code>:crab:</code> </li> <li><code>:whale:</code> </li> </ul>"},{"location":"tools/mkdocs.html#mathjax","title":"MathJax\u652f\u6301","text":"<p>\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6dfb\u52a0: <pre><code>markdown_extensions:\n- pymdownx.arithmatex:\ngeneric: true\n</code></pre></p>"},{"location":"tools/powershell.html","title":"powershell","text":"<ul> <li>\u67e5\u770b\u73af\u5883\u53d8\u91cf</li> </ul> <pre><code>dir env:          # dir \u662f Get-ChildItem \u7684alias\n$env:path         # \u67e5\u770b\u67d0\u4e00\u5177\u4f53\u73af\u5883\u53d8\u91cf\n</code></pre> <ul> <li>\u7ed9powershell\u8bbe\u7f6e\u5168\u5c40\u4ee3\u7406</li> </ul> <pre><code>$env:HTTP_PROXY=\"http://127.0.0.1:19180\"\n$env:HTTPS_PROXY=\"http://127.0.0.1:19180\"\n</code></pre> <p>vcpkg\u7b49\u5de5\u5177\u4f7f\u7528cmake\u7ba1\u7406\u5e93\uff0ccmake\u4f7f\u7528Curl\u4e0b\u8f7d\u5f52\u6863\u7684\u5e93\uff0c\u800cCurl\u4f7f\u7528\u8fd9\u4e24\u4e2a\u73af\u5883\u53d8\u91cf\uff0c\u56e0\u6b64\u8bbe\u7f6e\u8fd9\u4e24\u4e2a\u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u89e3\u51b3vcpkg\u4e0b\u8f7d\u6162\u95ee\u9898</p> <ul> <li></li> </ul>"},{"location":"tools/regex.html","title":"\u6b63\u5219\u8868\u8fbe\u5f0f","text":""},{"location":"tools/regex.html#quantifiers","title":"Quantifiers(\u9650\u5b9a\u7b26)","text":"<ul> <li> <p><code>?</code> \u9650\u5b9a\u7b26\uff0c\u8868\u793a\u524d\u9762\u8fd9\u4e2a\u5b57\u7b26\u53ef\u6709\u53ef\u65e0(\u51fa\u73b00\u6b21\u62161\u6b21)\uff1a\u5982<code>r\"https?\"</code>\u53ef\u4ee5\u5339\u914d <code>http</code> \u548c <code>https</code></p> <pre><code>r\"https?\"\nhttp\nhttps\n</code></pre> </li> <li> <p><code>*</code> \u9650\u5b9a\u7b26\uff0c\u8868\u793a\u524d\u9762\u8fd9\u4e2a\u5b57\u7b26\u53ef\u6709\u53ef\u65e0(\u51fa\u73b00\u6b21\u6216\u65e0\u9650\u591a\u6b21)\uff1a\u5982<code>r\"ab*c\"</code>\u53ef\u4ee5\u5339\u914d\uff1a</p> <pre><code>r\"ab*c\"\nac\nabbc\nabbbbbbbc\n</code></pre> </li> <li> <p><code>+</code> \u9650\u5b9a\u7b26\uff0c\u9650\u5b9a\u524d\u9762\u7684\u5b57\u7b26\u51fa\u73b01\u6b21\u4ee5\u4e0a\uff1a\u5982<code>r\"ab+c\"</code>\uff0c\u5219\u4e0a\u4f8b\u4e2d<code>ac</code>\u4e0d\u4f1a\u88ab\u5339\u914d</p> </li> <li> <p><code>{}</code>\u9650\u5b9a\u7b26\uff0c\u9650\u5b9a\u524d\u9762\u5b57\u7b26\u51fa\u73b0\u7684\u5177\u4f53\u6b21\u6570\uff0c\u5982<code>r\"ab{2,6}c\"</code>\u8868\u793a\u9650\u5b9a<code>b</code>\u51fa\u73b02\u52306\u6b21\uff1b\u5982\u679c\u8981\u8868\u793a2\u6b21\u4ee5\u4e0a\uff1a<code>{2,}</code>\uff1b\u5982\u679c\u8981\u53ea\u5339\u914d\u51fa\u73b06\u6b21\uff1a<code>{6}</code></p> <pre><code>r\"ab{2,4}c\"\nabbc\nabbbbbbc # !\u4e0d\u4f1a\u88ab\u5339\u914d\n</code></pre> </li> </ul> <p>\u4e0a\u9762\u4e3e\u7684\u4f8b\u5b50\u90fd\u662f\u5bf9\u4e8e\u5355\u4e2a\u5b57\u7b26\u91cd\u590d\u5339\u914d\uff0c\u5982\u679c\u5bf9\u4e8e\u591a\u4e2a\u5b57\u7b26\u7684\u91cd\u590d\uff0c\u53ef\u4ee5\u5c06\u8981\u91cd\u590d\u5339\u914d\u7684\u90e8\u5206\u4f7f\u7528\u5c0f\u62ec\u53f7<code>()</code>\u62ec\u8d77\u6765\uff1a</p> <pre><code>r\"(ab){2,3}c\"\nababc\nabababc\n</code></pre>"},{"location":"tools/regex.html#or-operator","title":"OR Operator(\u6216\u8fd0\u7b97)","text":"<p><code>|</code>\u5728\u6b63\u5219\u4e2d\u8868\u793a\u6216\u8fd0\u7b97\uff0c\u5982<code>r\"a (cat|dog)\"</code>\u5c06\u5339\u914d a dog \u6216 a cat\uff1b\u6ce8\u610f\u8fd9\u91cc\u62ec\u53f7\u4e0d\u53ef\u4ee5\u5c11\uff0c\u5426\u5219\u4fbf\u6210\u4e86 a cat \u6216\u8005 dog</p> <pre><code>a (cat|dog)\"\na cat\na dog\na bird  # !\u4e0d\u5339\u914d\n</code></pre>"},{"location":"tools/regex.html#character-class","title":"Character class(\u5b57\u7b26\u7c7b)","text":"<p><code>[]</code>\u65b9\u62ec\u53f7\u53ef\u4ee5\u9650\u5b9a\u5b57\u7b26\u7c7b\uff0c\u5982<code>[abc]+</code>\u8868\u793a\u5339\u914d\u53ea\u7531<code>abc</code>\u4e09\u4e2a\u5b57\u7b26\u6784\u6210\u7684\u5355\u8bcd\uff1a</p> <pre><code>r\"[abc]+\"\nabc\nabcd    # !\u4e0d\u5339\u914d\naaabccc\n</code></pre> <p><code>[a-zA-Z0-9]</code>\u8868\u793a\u9650\u5b9a\u6240\u6709\u7684\u5b57\u6bcd\u548c\u6570\u5b57\uff1b\u53ef\u4ee5\u4f7f\u7528<code>^</code>\u8868\u793a\u53d6\u53cd\u7684\u903b\u8f91\uff0c\u5982<code>[^0-9]</code>\u8868\u793a\u5339\u914d\u6240\u6709\u4e0d\u542b\u6570\u5b57<code>0-9</code>\u7684\u5b57\u7b26(\u5305\u542b\u6362\u884c\u7b26)</p>"},{"location":"tools/regex.html#meta-character","title":"meta-character(\u5143\u5b57\u7b26)","text":"<p>\u5927\u591a\u6570\u5143\u5b57\u7b26\u4ee5<code>\\</code>\u5f00\u5934\uff1a</p> <ul> <li><code>\\d</code>\u8868\u793a\u6570\u5b57\uff1b<code>\\D</code>\u8868\u793a\u975e\u6570\u5b57\u5b57\u7b26</li> <li><code>\\w</code>\u8868\u793a\u5355\u8bcd(\u82f1\u6587\u5b57\u7b26\uff0c\u6570\u5b57\uff0c\u4e0b\u5212\u7ebf)\uff1b<code>\\W</code>\u8868\u793a\u975e\u5355\u8bcd\u5b57\u7b26</li> <li><code>\\s</code>\u8868\u793a\u7a7a\u767d\u7b26(\u5305\u542btab\u548c\u6362\u884c\u7b26)\uff1b<code>\\S</code>\u8868\u793a\u975e\u7a7a\u767d\u7b26</li> <li><code>.</code>\u8868\u793a\u4efb\u610f\u5b57\u7b26(\u4f46\u4e0d\u5305\u542b\u6362\u884c\u7b26)</li> <li><code>^</code>\u5339\u914d\u884c\u9996\uff0c<code>$</code>\u5339\u914d\u884c\u5c3e\uff1b\u5982<code>r\"^a\"</code>\u53ea\u4f1a\u5339\u914d\u884c\u9996\u7684<code>a</code>\uff0c<code>a$</code>\u53ea\u4f1a\u5339\u914d\u884c\u5c3e\u7684<code>a</code></li> </ul>"},{"location":"tools/regex.html#greedy-vs-lazy-match","title":"Greedy v.s. Lazy Match","text":"<p><code>*+{}</code>\u9ed8\u8ba4\u4f1a\u53bb\u5339\u914d\u5c3d\u53ef\u80fd\u591a\u7684\u5b57\u7b26\uff0c\u5982\u4f7f\u7528<code>r\"&lt;.+&gt;\"</code>\u65f6\uff0c\u5982\u679c\u53ea\u60f3\u5339\u914d\u4e0b\u4f8b\u4e2d\u7684\u6807\u7b7e\uff1a</p> <pre><code>r\"&lt;.+&gt;\"\n&lt;span&gt;&lt;b&gt;Sample String&lt;/b&gt;&lt;span&gt;\n</code></pre> <p>\u5b9e\u9645\u4e0a\u5374\u4f1a\u5339\u914d\u6574\u4e2a\u53e5\u5b50\uff0c\u8fd9\u662f\u56e0\u4e3a<code>.+</code>\u4f1a\u5339\u914d\u5c3d\u53ef\u80fd\u591a\u7684\u5b57\u7b26\uff0c\u4e5f\u5305\u542b<code>&gt;</code>\uff0c\u56e0\u6b64\u4f1a\u5339\u914d\u6574\u4e2a\u53e5\u5b50\u3002\u89e3\u51b3\u65b9\u6cd5\u662f\u4f7f\u7528<code>r\"&lt;.+?&gt;\"</code>\uff0c\u8fd9\u91cc\u52a0\u7684<code>?</code>\u4f1a\u628aGreedy Match \u7684\u884c\u4e3a\u53d8\u4e3a\u60f0\u6027\u5339\u914d\uff0c\u4e00\u65e6\u51fa\u73b0<code>&gt;</code>\u5c31\u89c6\u4e3a\u4e00\u6b21\u5339\u914d</p>"}]}